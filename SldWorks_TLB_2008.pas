unit SldWorks_TLB;

// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// $Rev: 16059 $
// File generated on 06.04.2009 11:46:27 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\SolidWorks2008\sldworks.tlb (1)
// LIBID: {83A33D31-27C5-11CE-BFD4-00400513BB57}
// LCID: 0
// Helpfile: C:\Program Files\SolidWorks2008\api\sldworksapi.chm
// HelpString: SldWorks 2008 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\system32\stdole2.tlb)
// Errors:
//   Hint: TypeInfo 'SldWorks' changed to 'SldWorks_'
//   Hint: Parameter 'Type' of ISldWorks.OpenDoc changed to 'Type_'
//   Hint: Parameter 'Type' of ISldWorks.IOpenDoc changed to 'Type_'
//   Hint: Parameter 'Type' of ISldWorks.AddFileSaveAsItem changed to 'Type_'
//   Hint: Parameter 'Type' of ISldWorks.DocumentVisible changed to 'Type_'
//   Hint: Parameter 'Type' of ISldWorks.RemoveFileSaveAsItem changed to 'Type_'
//   Hint: Parameter 'Type' of ISldWorks.OpenDocSilent changed to 'Type_'
//   Hint: Parameter 'Type' of ISldWorks.IOpenDocSilent changed to 'Type_'
//   Hint: Parameter 'Type' of ISldWorks.OpenDoc2 changed to 'Type_'
//   Hint: Parameter 'Type' of ISldWorks.IOpenDoc2 changed to 'Type_'
//   Hint: Parameter 'Type' of ISldWorks.OpenDoc3 changed to 'Type_'
//   Hint: Parameter 'Type' of ISldWorks.IOpenDoc3 changed to 'Type_'
//   Hint: Parameter 'Type' of ISldWorks.OpenDoc4 changed to 'Type_'
//   Hint: Parameter 'Type' of ISldWorks.IOpenDoc4 changed to 'Type_'
//   Hint: Parameter 'Type' of ISldWorks.IOpenDoc5 changed to 'Type_'
//   Hint: Parameter 'Type' of ISldWorks.OpenDoc6 changed to 'Type_'
//   Hint: Parameter 'Type' of ISldWorks.GetDocumentVisible changed to 'Type_'
//   Hint: Parameter 'End' of IModelDoc.CreateEllipticalArcByCenter changed to 'End_'
//   Hint: Parameter 'End' of IModelDoc.ICreateEllipticalArcByCenter changed to 'End_'
//   Hint: Parameter 'Type' of IModelDoc.InsertCosmeticThread changed to 'Type_'
//   Hint: Parameter 'Type' of IModelDoc.GetCustomInfoType changed to 'Type_'
//   Hint: Parameter 'Type' of IModelDoc.GetCustomInfoType2 changed to 'Type_'
//   Hint: Parameter 'Type' of IModelDoc.GetCustomInfoType3 changed to 'Type_'
//   Hint: Parameter 'Type' of IModelDoc.InsertBendTableNew changed to 'Type_'
//   Hint: Parameter 'Type' of IBody.GetType changed to 'Type_'
//   Hint: Parameter 'End' of ICurve.ConvertArcToBcurve changed to 'End_'
//   Hint: Parameter 'End' of ICurve.IConvertArcToBcurveSize changed to 'End_'
//   Hint: Parameter 'End' of ICurve.ICreateTrimmedCurve changed to 'End_'
//   Hint: Parameter 'End' of ICurve.GetEndParams changed to 'End_'
//   Hint: Parameter 'Type' of IBody2.GetType changed to 'Type_'
//   Hint: Parameter 'End' of IModelDoc2.CreateEllipticalArcByCenter changed to 'End_'
//   Hint: Parameter 'End' of IModelDoc2.ICreateEllipticalArcByCenter changed to 'End_'
//   Hint: Parameter 'Type' of IModelDoc2.InsertCosmeticThread changed to 'Type_'
//   Hint: Parameter 'Type' of IModelDoc2.GetCustomInfoType changed to 'Type_'
//   Hint: Parameter 'Type' of IModelDoc2.GetCustomInfoType2 changed to 'Type_'
//   Hint: Parameter 'Type' of IModelDoc2.GetCustomInfoType3 changed to 'Type_'
//   Hint: Parameter 'Type' of IModelDoc2.InsertBendTableNew changed to 'Type_'
//   Hint: Parameter 'Type' of IModelDoc2.InsertSheetMetalBreakCorner changed to 'Type_'
//   Hint: Parameter 'Type' of IModelDoc2.InsertSheetMetalHem changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ICamera.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ICamera.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ISketchPoint.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ISketchPoint.Type changed to 'Type_'
//   Hint: Member 'Label' of 'ICallout' changed to 'Label_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IAnnotation.GetType changed to 'Type_'
//   Hint: Parameter 'Label' of IDatumTag.SetLabel changed to 'Label_'
//   Hint: Parameter 'Type' of IDisplayDimension.AddDisplayEnt changed to 'Type_'
//   Hint: Parameter 'Type' of IDisplayDimension.IAddDisplayEnt changed to 'Type_'
//   Hint: Parameter 'Type' of IAttributeDef.AddParameter changed to 'Type_'
//   Hint: Member 'Set' of 'ICustomPropertyManager' changed to 'Set_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Label' of IDrSection.SetLabel changed to 'Label_'
//   Hint: Parameter 'Label' of IDrSection.SetLabel2 changed to 'Label_'
//   Hint: Parameter 'Label' of IDetailCircle.SetLabel changed to 'Label_'
//   Hint: Parameter 'Label' of IProjectionArrow.SetLabel changed to 'Label_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ITableAnnotation.SetColumnType changed to 'Type_'
//   Hint: Parameter 'Label' of IDatumOrigin.XLabel changed to 'Label_'
//   Hint: Parameter 'Label' of IDatumOrigin.XLabel changed to 'Label_'
//   Hint: Parameter 'Label' of IDatumOrigin.YLabel changed to 'Label_'
//   Hint: Parameter 'Label' of IDatumOrigin.YLabel changed to 'Label_'
//   Hint: Parameter 'Type' of IBomFeature.TableType changed to 'Type_'
//   Hint: Parameter 'Type' of IBomFeature.TableType changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IDesignTable.UpdateTable changed to 'Type_'
//   Hint: Parameter 'Type' of IFeatureManager.InsertCosmeticThread changed to 'Type_'
//   Hint: Parameter 'Type' of IFeatureManager.InsertScale changed to 'Type_'
//   Hint: Parameter 'Type' of IFeatureManager.InsertFeatureTreeFolder2 changed to 'Type_'
//   Hint: Parameter 'Type' of IFeatureManager.InsertRuledSurfaceFromEdge changed to 'Type_'
//   Hint: Parameter 'Type' of IFeatureManager.InsertWrapFeature changed to 'Type_'
//   Hint: Parameter 'Type' of IFeatureManager.InsertRuledSurfaceFromEdge2 changed to 'Type_'
//   Hint: Parameter 'Type' of IFeatureManager.InsertCosmeticThread2 changed to 'Type_'
//   Hint: Parameter 'Type' of IFeatureManager.InsertSheetMetalHem changed to 'Type_'
//   Hint: Parameter 'Type' of IFeatureManager.InsertFlexFeature changed to 'Type_'
//   Hint: Parameter 'Type' of IFeatureManager.IsNameUsed changed to 'Type_'
//   Hint: Parameter 'Type' of IFeatureManager.CreateDefinition changed to 'Type_'
//   Hint: Parameter 'Type' of IFeatureManager.InsertNetBlend changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ICustomBendAllowance.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ICustomBendAllowance.Type changed to 'Type_'
//   Hint: Member 'Object' of 'ITreeControlItem' changed to 'Object_'
//   Hint: Parameter 'Class' of IModelViewManager.CreateFeatureMgrControl changed to 'Class_'
//   Hint: Parameter 'Class' of IModelViewManager.CreateFeatureMgrControl2 changed to 'Class_'
//   Hint: Parameter 'Type' of IModelViewManager.CreateManipulator changed to 'Type_'
//   Hint: Parameter 'Class' of IModelViewManager.CreateFeatureMgrControl3 changed to 'Class_'
//   Hint: Parameter 'Type' of IModelDocExtension.SelectByID changed to 'Type_'
//   Hint: Parameter 'Type' of IModelDocExtension.SelectByID2 changed to 'Type_'
//   Hint: Parameter 'Type' of ISketchManager.CreateChamfer changed to 'Type_'
//   Hint: Parameter 'Type' of ITessellation.MatchType changed to 'Type_'
//   Hint: Parameter 'Type' of ITessellation.MatchType changed to 'Type_'
//   Hint: Parameter 'Type' of IAssemblyDoc.InsertWeld changed to 'Type_'
//   Hint: Parameter 'Set' of IAssemblyDoc.SetForceResetConfigName changed to 'Set_'
//   Hint: Parameter 'Type' of IDragOperator.TransformType changed to 'Type_'
//   Hint: Parameter 'Type' of IDragOperator.TransformType changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IMate2.Type changed to 'Type_'
//   Hint: Parameter 'Type' of IMate2.Alignment changed to 'Type_'
//   Hint: Member 'End' of 'IAnimation' changed to 'End_'
//   Hint: Parameter 'Property' of IAdvancedSelectionCriteria.AddItem changed to 'Property_'
//   Hint: Parameter 'Property' of IAdvancedSelectionCriteria.GetItem changed to 'Property_'
//   Hint: Parameter 'Label' of IDrawingDoc.CreateSectionViewAt2 changed to 'Label_'
//   Hint: Parameter 'Label' of IDrawingDoc.ICreateSectionViewAt2 changed to 'Label_'
//   Hint: Parameter 'Label' of IDrawingDoc.CreateAuxiliaryViewAt2 changed to 'Label_'
//   Hint: Parameter 'Label' of IDrawingDoc.ICreateAuxiliaryViewAt2 changed to 'Label_'
//   Hint: Parameter 'Label' of IDrawingDoc.CreateSectionViewAt3 changed to 'Label_'
//   Hint: Parameter 'Label' of IDrawingDoc.ICreateSectionViewAt3 changed to 'Label_'
//   Hint: Parameter 'Type' of IModeler.CreateBrepBody changed to 'Type_'
//   Hint: Parameter 'Type' of IModeler.ICreateBrepBody changed to 'Type_'
//   Hint: Parameter 'Type' of IModeler.ICreateBrepBody2 changed to 'Type_'
//   Hint: Parameter 'Type' of IModeler.CreateBrepBody3 changed to 'Type_'
//   Hint: Parameter 'Type' of IModeler.ICreateBrepBody3 changed to 'Type_'
//   Hint: Parameter 'Type' of ISpring.SpringType changed to 'Type_'
//   Hint: Parameter 'Type' of ISpring.SpringType changed to 'Type_'
//   Hint: Parameter 'Type' of ISpring.ProfileType changed to 'Type_'
//   Hint: Parameter 'Type' of ISpring.ProfileType changed to 'Type_'
//   Hint: Parameter 'Type' of ISpring.StartingEndType changed to 'Type_'
//   Hint: Parameter 'Type' of ISpring.StartingEndType changed to 'Type_'
//   Hint: Parameter 'Type' of ISpring.EndingEndType changed to 'Type_'
//   Hint: Parameter 'Type' of ISpring.EndingEndType changed to 'Type_'
//   Hint: Parameter 'Type' of ISpring.GroundType changed to 'Type_'
//   Hint: Parameter 'Type' of ISpring.GroundType changed to 'Type_'
//   Hint: Parameter 'Type' of ISpring.DefineType changed to 'Type_'
//   Hint: Parameter 'Type' of ISpring.DefineType changed to 'Type_'
//   Hint: Member 'End' of 'IUserProgressBar' changed to 'End_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ISimpleHoleFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ISimpleHoleFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IHoleSeriesFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IDraftFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IDraftFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ISimpleFilletFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ITablePatternFeatureData.GetReferencePointType changed to 'Type_'
//   Hint: Parameter 'Type' of ISketchPatternFeatureData.GetReferencePointType changed to 'Type_'
//   Hint: Parameter 'Type' of IFlatPatternFeatureData.BreakCornerType changed to 'Type_'
//   Hint: Parameter 'Type' of IFlatPatternFeatureData.BreakCornerType changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IScaleFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IScaleFeatureData.Type changed to 'Type_'
//   Hint: Parameter 'Type' of ISweepFeatureData.GetPathType changed to 'Type_'
//   Hint: Parameter 'Type' of ISweepFeatureData.PathAlignmentType changed to 'Type_'
//   Hint: Parameter 'Type' of ISweepFeatureData.PathAlignmentType changed to 'Type_'
//   Hint: Parameter 'Type' of ISweepFeatureData.GetPathAlignmentDirectionVector changed to 'Type_'
//   Hint: Parameter 'Type' of ILoftFeatureData.GuideCurveInfluence changed to 'Type_'
//   Hint: Parameter 'Type' of ILoftFeatureData.GuideCurveInfluence changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IHemFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IHemFeatureData.Type changed to 'Type_'
//   Hint: Parameter 'Type' of IBreakCornerFeatureData.BreakType changed to 'Type_'
//   Hint: Parameter 'Type' of IBreakCornerFeatureData.BreakType changed to 'Type_'
//   Hint: Parameter 'Type' of IJogFeatureData.JogPositionType changed to 'Type_'
//   Hint: Parameter 'Type' of IJogFeatureData.JogPositionType changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ISurfRevolveFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ISurfRevolveFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ISurfaceExtendFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ISurfaceExtendFeatureData.Type changed to 'Type_'
//   Hint: Parameter 'Type' of ISurfaceTrimFeatureData.GetType changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IRefPlaneFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IRefPlaneFeatureData.Type changed to 'Type_'
//   Hint: Parameter 'Type' of IRefPlaneFeatureData.ProjectionType changed to 'Type_'
//   Hint: Parameter 'Type' of IRefPlaneFeatureData.ProjectionType changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IRefPointFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IRefPointFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IRuledSurfaceFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IRuledSurfaceFeatureData.Type changed to 'Type_'
//   Hint: Parameter 'Type' of ICavityFeatureData.ScaleType changed to 'Type_'
//   Hint: Parameter 'Type' of ICavityFeatureData.ScaleType changed to 'Type_'
//   Hint: Parameter 'Type' of IReferencePointCurveFeatureData.GetThroughPoints changed to 'Type_'
//   Hint: Parameter 'Type' of IReferencePointCurveFeatureData.IGetThroughPoints changed to 'Type_'
//   Hint: Parameter 'Type' of ICompositeCurveFeatureData.GetEntitiesToJoin changed to 'Type_'
//   Hint: Parameter 'Type' of ICompositeCurveFeatureData.IGetEntitiesToJoin changed to 'Type_'
//   Hint: Parameter 'Type' of IHelixFeatureData.DefinedBy changed to 'Type_'
//   Hint: Parameter 'Type' of IHelixFeatureData.DefinedBy changed to 'Type_'
//   Hint: Parameter 'Type' of ICosmeticThreadFeatureData.DiameterType changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IRefAxisFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IRefAxisFeatureData.Type changed to 'Type_'
//   Hint: Parameter 'Type' of IPartingLineFeatureData.PullDirectionType changed to 'Type_'
//   Hint: Parameter 'Type' of IPartingLineFeatureData.GetFacesByTypeCount changed to 'Type_'
//   Hint: Parameter 'Type' of IPartingLineFeatureData.GetFacesByType changed to 'Type_'
//   Hint: Parameter 'Type' of IPartingLineFeatureData.IGetFacesByType changed to 'Type_'
//   Hint: Parameter 'Type' of IPartingSurfaceFeatureData.PullDirectionType changed to 'Type_'
//   Hint: Parameter 'Type' of IPartingSurfaceFeatureData.GetPartingLinesType changed to 'Type_'
//   Hint: Parameter 'Type' of IPartingSurfaceFeatureData.PartingType changed to 'Type_'
//   Hint: Parameter 'Type' of IPartingSurfaceFeatureData.PartingType changed to 'Type_'
//   Hint: Parameter 'Type' of IPartingSurfaceFeatureData.TransitionType changed to 'Type_'
//   Hint: Parameter 'Type' of IPartingSurfaceFeatureData.TransitionType changed to 'Type_'
//   Hint: Parameter 'Type' of IShutOffSurfaceFeatureData.SetAllPatchTypes changed to 'Type_'
//   Hint: Parameter 'Type' of ISplitLineFeatureData.PullDirectionType changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IWrapSketchFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IWrapSketchFeatureData.Type changed to 'Type_'
//   Hint: Parameter 'Type' of IStructuralMemberFeatureData.CornerTreatmentType changed to 'Type_'
//   Hint: Parameter 'Type' of IStructuralMemberFeatureData.CornerTreatmentType changed to 'Type_'
//   Hint: Parameter 'Type' of IStructuralMemberFeatureData.ConnectionType changed to 'Type_'
//   Hint: Parameter 'Type' of IStructuralMemberFeatureData.ConnectionType changed to 'Type_'
//   Hint: Parameter 'Type' of IGussetFeatureData.ProfileType changed to 'Type_'
//   Hint: Parameter 'Type' of IGussetFeatureData.ProfileType changed to 'Type_'
//   Hint: Parameter 'Type' of IGussetFeatureData.ThicknessType changed to 'Type_'
//   Hint: Parameter 'Type' of IGussetFeatureData.ThicknessType changed to 'Type_'
//   Hint: Parameter 'Type' of IGussetFeatureData.ProfileLocation changed to 'Type_'
//   Hint: Parameter 'Type' of IGussetFeatureData.ProfileLocation changed to 'Type_'
//   Hint: Parameter 'Type' of ILibraryFeatureData.GetPlacementPlane changed to 'Type_'
//   Hint: Parameter 'Type' of ILibraryFeatureData.GetDimensions changed to 'Type_'
//   Hint: Parameter 'Type' of ILibraryFeatureData.SetDimension changed to 'Type_'
//   Hint: Parameter 'Type' of ILibraryFeatureData.GetDimensionsCount changed to 'Type_'
//   Hint: Parameter 'Type' of ILibraryFeatureData.IGetDimensions changed to 'Type_'
//   Hint: Parameter 'Type' of ISimulationMotorFeatureData.MotorType changed to 'Type_'
//   Hint: Parameter 'Type' of IWeldmentTrimExtendFeatureData.CornerType changed to 'Type_'
//   Hint: Parameter 'Type' of IWeldmentTrimExtendFeatureData.CornerType changed to 'Type_'
//   Hint: Parameter 'Type' of IWeldmentTrimExtendFeatureData.GetTrimmingBoundary changed to 'Type_'
//   Hint: Parameter 'Type' of IWeldmentTrimExtendFeatureData.IGetTrimmingBoundary changed to 'Type_'
//   Hint: Parameter 'Type' of IWeldmentBeadFeatureData.BeadType changed to 'Type_'
//   Hint: Parameter 'Type' of IWeldmentBeadFeatureData.BeadType changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ICoreFeatureData.EndCondition changed to 'Type_'
//   Hint: Parameter 'Type' of ICoreFeatureData.EndCondition changed to 'Type_'
//   Hint: Parameter 'Unit' of IImportDxfDwgData.LengthUnit changed to 'Unit_'
//   Hint: Parameter 'Unit' of IImportDxfDwgData.LengthUnit changed to 'Unit_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ISimulationForceFeatureData.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ISimulationForceFeatureData.Type changed to 'Type_'
//   Hint: Parameter 'Type' of ISimulationForceFeatureData.ActionType changed to 'Type_'
//   Hint: Parameter 'Type' of ISimulationForceFeatureData.ActionType changed to 'Type_'
//   Hint: Parameter 'Type' of ISimulationForceFeatureData.FunctionType changed to 'Type_'
//   Hint: Parameter 'Type' of ISimulationForceFeatureData.FunctionType changed to 'Type_'
//   Hint: Parameter 'Label' of IPropertyManagerPageSelectionbox.SetCalloutLabel changed to 'Label_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ISimpleHoleFeatureData2.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ISimpleHoleFeatureData2.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IWizardHoleFeatureData2.TapType changed to 'Type_'
//   Hint: Parameter 'Type' of IWizardHoleFeatureData2.TapType changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IDraftFeatureData2.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IDraftFeatureData2.Type changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of ISimpleFilletFeatureData2.Type changed to 'Type_'
//   Hint: Parameter 'Type' of IExtrudeFeatureData2.GetFromEntity changed to 'Type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Symbol 'Type' renamed to 'type_'
//   Hint: Parameter 'Type' of IRevolveFeatureData2.GetAxisType changed to 'Type_'
// ************************************************************************ //
{$TYPEDADDRESS OFF} // Unit must be compiled without type-checked pointers. 
{$WARN SYMBOL_PLATFORM OFF}
{$WRITEABLECONST ON}
{$VARPROPSETTER ON}
{$ALIGN 4}
interface

uses Windows, ActiveX, Classes, Graphics, OleServer, StdVCL, Variants;
  

// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLASS_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
const
  // TypeLibrary Major and minor versions
  SldWorksMajorVersion = 16;
  SldWorksMinorVersion = 0;

  LIBID_SldWorks: TGUID = '{83A33D31-27C5-11CE-BFD4-00400513BB57}';

  IID_ISldWorks: TGUID = '{83A33D22-27C5-11CE-BFD4-00400513BB57}';
  IID_IModelDoc: TGUID = '{83A33D46-27C5-11CE-BFD4-00400513BB57}';
  IID_ISelectionMgr: TGUID = '{83A33D59-27C5-11CE-BFD4-00400513BB57}';
  IID_IComponent: TGUID = '{83A33D9A-27C5-11CE-BFD4-00400513BB57}';
  IID_IBody: TGUID = '{83A33D3C-27C5-11CE-BFD4-00400513BB57}';
  IID_IFace: TGUID = '{83A33D3E-27C5-11CE-BFD4-00400513BB57}';
  IID_ISurface: TGUID = '{83A33D40-27C5-11CE-BFD4-00400513BB57}';
  IID_ICurve: TGUID = '{83A33D44-27C5-11CE-BFD4-00400513BB57}';
  IID_IBody2: TGUID = '{3A075BFD-9962-4431-8321-7AF4903C55AD}';
  IID_IFace2: TGUID = '{4A8BA4D8-DA25-4B75-8E2D-4922B74D81ED}';
  IID_IEdge: TGUID = '{83A33D42-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumCoEdges: TGUID = '{83A33D61-27C5-11CE-BFD4-00400513BB57}';
  IID_ICoEdge: TGUID = '{83A33D57-27C5-11CE-BFD4-00400513BB57}';
  IID_ILoop: TGUID = '{83A33D53-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumEdges: TGUID = '{83A33D5F-27C5-11CE-BFD4-00400513BB57}';
  IID_ILoop2: TGUID = '{9350CA6E-0ADB-485A-8941-9407DD7B3B8E}';
  IID_IVertex: TGUID = '{83A33D63-27C5-11CE-BFD4-00400513BB57}';
  IID_IModelDoc2: TGUID = '{B90793FB-EF3D-4B80-A5C4-99959CDB6CEB}';
  IID_IModelView: TGUID = '{83A33D4C-27C5-11CE-BFD4-00400513BB57}';
  IID_IMathTransform: TGUID = '{F7D97F82-162E-11D4-AEAB-00C04FA0AC51}';
  IID_IMathVector: TGUID = '{F7D97F86-162E-11D4-AEAB-00C04FA0AC51}';
  IID_IMathPoint: TGUID = '{F7D97F84-162E-11D4-AEAB-00C04FA0AC51}';
  IID_ICamera: TGUID = '{48BF52EA-4654-4227-8C54-8AF49C3BCEF2}';
  IID_IMouse: TGUID = '{9ED126F7-935E-4279-9171-4086A235719B}';
  IID_ISketch: TGUID = '{83A33D51-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumSketchPoints: TGUID = '{83A33DCD-27C5-11CE-BFD4-00400513BB57}';
  IID_ISketchPoint: TGUID = '{83A33DBD-27C5-11CE-BFD4-00400513BB57}';
  IID_ICallout: TGUID = '{9CAAA1AA-F2FC-11D5-AF66-00C04F603FAF}';
  IID_ISketchRelation: TGUID = '{7033EA1B-744A-44F3-A2B4-E450D4C99F0E}';
  IID_ISelectData: TGUID = '{4DF2E524-C744-4C8B-92D5-1B96ECA5A0D0}';
  IID_IView: TGUID = '{83A33D50-27C5-11CE-BFD4-00400513BB57}';
  IID_INote: TGUID = '{83A33D55-27C5-11CE-BFD4-00400513BB57}';
  IID_ITextFormat: TGUID = '{83A33DB9-27C5-11CE-BFD4-00400513BB57}';
  IID_IAnnotation: TGUID = '{83A33DA9-27C5-11CE-BFD4-00400513BB57}';
  IID_IDisplayData: TGUID = '{83A33D9C-27C5-11CE-BFD4-00400513BB57}';
  IID_IAnnotationView: TGUID = '{78D7FDA3-83D7-4C01-9E54-73AB4827CC4E}';
  IID_IMultiJogLeader: TGUID = '{01EB5266-6CA9-4F59-B0B4-A040DD1CCFB6}';
  IID_IBalloonStack: TGUID = '{4944F9E6-BF50-11D5-AF56-00C04F603FAF}';
  IID_IGtol: TGUID = '{83A33D4A-27C5-11CE-BFD4-00400513BB57}';
  IID_ISFSymbol: TGUID = '{83A33D8E-27C5-11CE-BFD4-00400513BB57}';
  IID_IDatumTag: TGUID = '{83A33D90-27C5-11CE-BFD4-00400513BB57}';
  IID_IDatumTargetSym: TGUID = '{83A33D92-27C5-11CE-BFD4-00400513BB57}';
  IID_IWeldSymbol: TGUID = '{83A33D94-27C5-11CE-BFD4-00400513BB57}';
  IID_ICThread: TGUID = '{83A33D9E-27C5-11CE-BFD4-00400513BB57}';
  IID_IDisplayDimension: TGUID = '{83A33DA1-27C5-11CE-BFD4-00400513BB57}';
  IID_IDimension: TGUID = '{83A33D3A-27C5-11CE-BFD4-00400513BB57}';
  IID_IFeature: TGUID = '{83A33D38-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumDisplayDimensions: TGUID = '{83A33DAB-27C5-11CE-BFD4-00400513BB57}';
  IID_IComponent2: TGUID = '{655D6F2A-5441-45D1-8CBA-D35FB26988E4}';
  IID_IEnumBodies2: TGUID = '{97A9BEFA-6814-4FA6-ACB4-8CC84F76FB99}';
  IID_IAttributeDef: TGUID = '{83A33D67-27C5-11CE-BFD4-00400513BB57}';
  IID_IEntity: TGUID = '{83A33D65-27C5-11CE-BFD4-00400513BB57}';
  IID_IAttribute: TGUID = '{83A33D71-27C5-11CE-BFD4-00400513BB57}';
  IID_IParameter: TGUID = '{83A33D69-27C5-11CE-BFD4-00400513BB57}';
  IID_IDrawingComponent: TGUID = '{F25E6093-1A6F-46D3-9866-860934DF611D}';
  IID_ITexture: TGUID = '{B81F43F1-8F16-4482-BF05-8BEE973B6CE8}';
  IID_IDecal: TGUID = '{263F0FF6-4C7E-477A-B0AE-49EE41E43351}';
  IID_IRenderMaterial: TGUID = '{D3BD935B-DFB4-4EDA-B03A-DA4EB2024F3F}';
  IID_ICustomPropertyManager: TGUID = '{F1938D94-0D1F-4E88-9874-164B1E6568F1}';
  IID_IComment: TGUID = '{4E23A946-7D96-40A2-BDA0-FDF9767C438D}';
  IID_IDimensionTolerance: TGUID = '{F43444A8-1D72-4178-95C8-7108CF29E016}';
  IID_IBomTable: TGUID = '{83A33D82-27C5-11CE-BFD4-00400513BB57}';
  IID_ICustomSymbol: TGUID = '{83A33DB5-27C5-11CE-BFD4-00400513BB57}';
  IID_IDrSection: TGUID = '{F183A33F-D4DB-11D3-AEB2-00C04F603FAF}';
  IID_IEnumComponents: TGUID = '{51EFB944-D449-11D3-AEBE-00C04F683CBA}';
  IID_IEnumComponents2: TGUID = '{F6804D12-B73A-49AF-81C6-05BABB58B812}';
  IID_IEnumDrSections: TGUID = '{585A6A15-E95B-11D3-AEBC-00C04F603FAF}';
  IID_IDetailCircle: TGUID = '{4B65A34A-4C44-11D4-AEF6-00C04F683CBA}';
  IID_ISketchSegment: TGUID = '{83A33DBF-27C5-11CE-BFD4-00400513BB57}';
  IID_ISketchPath: TGUID = '{41A80156-183C-4B30-A757-8B13AAB4E7C5}';
  IID_IProjectionArrow: TGUID = '{A2227E65-A3A7-11D4-AEFF-00C04F603FAF}';
  IID_IDowelSymbol: TGUID = '{55AACD8B-97C5-11D5-AF4B-00C04F603FAF}';
  IID_IBlockInstance: TGUID = '{992A14B6-15CF-11D6-AF6E-00C04F603FAF}';
  IID_IBlockDefinition: TGUID = '{8CD8314A-1677-11D6-AF6E-00C04F603FAF}';
  IID_IBreakLine: TGUID = '{54E1FFBC-D989-437F-A701-62BDA39FD195}';
  IID_IFaceHatch: TGUID = '{E0A98A37-8780-4E5F-A28A-C7C6AF25231C}';
  IID_ICenterMark: TGUID = '{6BEB0423-EDA4-11D5-AF64-00C04F603FAF}';
  IID_ICenterLine: TGUID = '{90DE8CD7-CFFC-414B-8380-131C739F9FB5}';
  IID_ITableAnnotation: TGUID = '{C108723C-AC56-4C08-9591-7980B0A5AAB2}';
  IID_IGeneralTableFeature: TGUID = '{846C6E0F-7319-4C13-B12E-A6B231DACC89}';
  IID_IHoleTableAnnotation: TGUID = '{61E4109E-D5D1-48CB-8593-8283EF0BB79A}';
  IID_IHoleTable: TGUID = '{727DD5DF-15F4-4916-854A-BE9E30614C97}';
  IID_IDatumOrigin: TGUID = '{5D9A743B-FA81-4D23-AB0A-2898584F6F1E}';
  IID_IBomTableAnnotation: TGUID = '{98FD64DC-285D-4B48-9BDB-D85C253E2BAF}';
  IID_IBomFeature: TGUID = '{3368F34B-85F2-4D61-9325-3353CF110D5A}';
  IID_IWeldBead: TGUID = '{66F09B08-8A71-4283-A943-3F905653C859}';
  IID_ISheet: TGUID = '{83A33D80-27C5-11CE-BFD4-00400513BB57}';
  IID_IPageSetup: TGUID = '{931374CC-CE0E-11D5-AF59-00C04F603FAF}';
  IID_IRevisionTableAnnotation: TGUID = '{175CA9E4-B05A-48BA-8047-DA3D9BB6B583}';
  IID_IRevisionTableFeature: TGUID = '{660CAF6B-65A0-4664-AD9F-81AB7A4664B7}';
  IID_ITableAnchor: TGUID = '{94D89C12-93E7-4DA1-9239-5E93830B5635}';
  IID_IWeldmentCutListAnnotation: TGUID = '{5253C565-2195-4E99-A353-CB62F5E5963B}';
  IID_IWeldmentCutListFeature: TGUID = '{3CD5DE06-83F6-4A7C-A288-D8A41F9F0351}';
  IID_IEnumSketchSegments: TGUID = '{83A33DCF-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumSketchHatches: TGUID = '{54729B8E-4086-11D3-AE9B-00C04F683CBA}';
  IID_ISketchHatch: TGUID = '{C3D00926-4068-11D3-AE9B-00C04F683CBA}';
  IID_ISketchRelationManager: TGUID = '{D5F6D2C9-79D6-4CC8-AD19-DFF1AED88FE5}';
  IID_ISketchBlockInstance: TGUID = '{93F9A5A6-A4F6-435E-BCC6-B4592C06858F}';
  IID_ISketchBlockDefinition: TGUID = '{82DC842F-001E-4B72-A762-540DCFB70705}';
  IID_ISketchPicture: TGUID = '{0ABA4670-6FBE-4F2E-BE80-5C33EA2CF77B}';
  IID_IMidSurface2: TGUID = '{5B6E8476-461F-43AF-B784-90D3CD74337C}';
  IID_IFeatMgrView: TGUID = '{83A33D75-27C5-11CE-BFD4-00400513BB57}';
  IID_IConfiguration: TGUID = '{83A33D98-27C5-11CE-BFD4-00400513BB57}';
  IID_IExplodeStep: TGUID = '{7241680B-0BC6-11D4-AEEE-00C04F61025C}';
  IID_IReferenceCurve: TGUID = '{83A33DA3-27C5-11CE-BFD4-00400513BB57}';
  IID_IColorTable: TGUID = '{83A33DA5-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumModelViews: TGUID = '{83A33DB1-27C5-11CE-BFD4-00400513BB57}';
  IID_IDetailingDefaults: TGUID = '{83A33DB7-27C5-11CE-BFD4-00400513BB57}';
  IID_ILayerMgr: TGUID = '{75173E30-F19E-11D2-B8E9-00C04F8EF738}';
  IID_ILayer: TGUID = '{04B7287C-F19D-11D2-B8E9-00C04F8EF738}';
  IID_IDesignTable: TGUID = '{CE1EAA88-25AD-11D3-AE91-00C04F683CBA}';
  IID_IRefPlane: TGUID = '{83A33D84-27C5-11CE-BFD4-00400513BB57}';
  IID_IPropertyManagerPage: TGUID = '{E981B4FA-7E86-11D4-AEF2-00C04F603FAF}';
  IID_IUserUnit: TGUID = '{82071121-8B32-4F51-8983-9304756503E7}';
  IID_ISketchText: TGUID = '{83A33DC5-27C5-11CE-BFD4-00400513BB57}';
  IID_IEquationMgr: TGUID = '{02272CE8-FE52-4B94-B120-6D1826FDBE32}';
  IID_IFeatureManager: TGUID = '{6B39655E-381B-4BD0-89F5-640D48593F15}';
  IID_ICustomBendAllowance: TGUID = '{442B6462-0350-4F5C-A168-3F753F6CA792}';
  IID_ITreeControlItem: TGUID = '{3AEA5179-14D5-407C-B669-48E9209043D2}';
  IID_IModelViewManager: TGUID = '{1AA249FF-B758-440A-8B88-26512F385BF3}';
  IID_IManipulator: TGUID = '{C73D0A8D-B615-4F79-BF31-9EC49016A861}';
  IID_ISectionViewData: TGUID = '{F73FA7FD-C4E7-44AC-82FA-3E03A11DDB21}';
  IID_IModelDocExtension: TGUID = '{99F4D4AF-F268-4EE1-8C55-041F7BECF879}';
  IID_IMassProperty: TGUID = '{158BAD02-D515-4400-ADA4-F9941C974DC1}';
  IID_ISwOLEObject: TGUID = '{B0BAD545-4DD8-4D2A-8DDE-438124126932}';
  IID_IPrint3DDialog: TGUID = '{41BD2A2F-BF57-49D6-9A56-D46B82DA04C8}';
  IID_IMeasure: TGUID = '{151497A7-8B45-4A2C-9DA1-CAD54EEF5855}';
  IID_IConfigurationManager: TGUID = '{8DB64337-F36E-47CC-BBBC-B4B979D31505}';
  IID_ISketchManager: TGUID = '{9CE9DACE-E595-4D8F-B893-5AE4899517DE}';
  IID_IFaultEntity: TGUID = '{9EF72595-1414-46BF-B4BB-B0DA133C893C}';
  IID_IEnumLoops2: TGUID = '{9A6AD388-3FC9-48DE-BFA5-B8953433AB36}';
  IID_IFaceDecalProperties: TGUID = '{49077CE2-D642-464C-BC16-FC45C5E3AC86}';
  IID_IEnumFaces2: TGUID = '{61ECFF18-AC2C-405E-B9B8-30D85FDB5087}';
  IID_IPartDoc: TGUID = '{83A33D32-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumBodies: TGUID = '{83A33D96-27C5-11CE-BFD4-00400513BB57}';
  IID_IMaterialVisualPropertiesData: TGUID = '{66E0FCBD-16D4-4483-8731-DB08F90218DA}';
  IID_ITessellation: TGUID = '{699C7492-DB56-4CC2-B7A2-9FFD56698434}';
  IID_IDiagnoseResult: TGUID = '{08CC54D0-ECA9-416C-ABF0-07586843D51D}';
  IID_IEnumLoops: TGUID = '{83A33D5D-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumFaces: TGUID = '{83A33D5B-27C5-11CE-BFD4-00400513BB57}';
  IID_IMidSurface: TGUID = '{83A33D88-27C5-11CE-BFD4-00400513BB57}';
  IID_IFrame: TGUID = '{83A33D48-27C5-11CE-BFD4-00400513BB57}';
  IID_IStatusBarPane: TGUID = '{931F2702-3257-4372-BBCC-CBD4A7FBBC41}';
  IID_IModelWindow: TGUID = '{84BC447E-D4A9-43CF-8287-5D9F5AB0CA41}';
  IID_IAssemblyDoc: TGUID = '{83A33D35-27C5-11CE-BFD4-00400513BB57}';
  IID_IMember: TGUID = '{83A33D4E-27C5-11CE-BFD4-00400513BB57}';
  IID_IDragOperator: TGUID = '{E0AACE0F-3A47-437E-99B4-9330CD6186BA}';
  IID_IMate2: TGUID = '{B09D234A-7581-408E-B3B3-FC0A514AAFA8}';
  IID_IMateEntity2: TGUID = '{CE7FE69D-BCFA-441F-A37D-E740546458A4}';
  IID_IMateLoadReference: TGUID = '{35627CFB-32E3-468C-AAA3-9222D2F190BD}';
  IID_ISimulation: TGUID = '{B2A77CEC-857C-43BE-9E28-106201212B43}';
  IID_IAnimation: TGUID = '{4F50FA8D-BCF3-4395-B146-B5AE933AFFD5}';
  IID_IAdvancedSelectionCriteria: TGUID = '{F40E5FA3-6C6A-4C23-A5AF-628357CCEE50}';
  IID_IInterferenceDetectionMgr: TGUID = '{EAE282BD-588A-4C1B-AD99-5FE6081C4585}';
  IID_IInterference: TGUID = '{F04EC279-EDF3-4A8E-BF87-E3237CBCCD8C}';
  IID_IDrawingDoc: TGUID = '{83A33D33-27C5-11CE-BFD4-00400513BB57}';
  IID_IModeler: TGUID = '{83A33D73-27C5-11CE-BFD4-00400513BB57}';
  IID_ISpring: TGUID = '{0F8F1B36-FABA-4552-82C3-5511CA5124E6}';
  IID_IEnvironment: TGUID = '{83A33D78-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumDocuments: TGUID = '{83A33DB3-27C5-11CE-BFD4-00400513BB57}';
  IID_IMathUtility: TGUID = '{F7D97F80-162E-11D4-AEAB-00C04FA0AC51}';
  IID_IEnumDocuments2: TGUID = '{76D82D71-339A-4D1C-91A1-F6AC0CF9B625}';
  IID_IPropertyManagerPage2: TGUID = '{B92E624A-0DC3-11D5-AF1E-00C04F603FAF}';
  IID_IPropertyManagerPageGroup: TGUID = '{2E23D2EE-0F57-11D5-AF1F-00C04F603FAF}';
  IID_IPropertyManagerPageControl: TGUID = '{CED9CAF4-16FA-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageTab: TGUID = '{22BCFA78-D2BF-449C-88AB-99CBC4468BDB}';
  IID_ITaskpaneView: TGUID = '{EDBBA0E9-B701-419E-A4AE-3409DBF12D40}';
  IID_IPtnrPMPage: TGUID = '{2A586331-A56D-44C9-AA32-2868A96F044D}';
  IID_ICommandManager: TGUID = '{F61069CF-2E42-4AC4-A517-6A95B79E45EE}';
  IID_ICommandGroup: TGUID = '{FF545450-B559-400D-964C-A3811F209148}';
  IID_ICommandTab: TGUID = '{FC248E07-607D-4429-960B-E4CE20AB55AB}';
  IID_ICommandTabBox: TGUID = '{1DBAAB20-9626-4CB8-A275-C346AC425362}';
  IID_IUserProgressBar: TGUID = '{01E97594-34EB-46BD-9036-518C1B352245}';
  IID_IJournalManager: TGUID = '{338D2790-A47F-45BC-AA03-E70B711CA811}';
  IID_IRefPoint: TGUID = '{71520755-04D2-4075-B756-124495C591C5}';
  IID_IRefAxis: TGUID = '{83A33D86-27C5-11CE-BFD4-00400513BB57}';
  IID_IMate: TGUID = '{83A33D8A-27C5-11CE-BFD4-00400513BB57}';
  IID_IMateEntity: TGUID = '{83A33D8C-27C5-11CE-BFD4-00400513BB57}';
  IID_ISWPropertySheet: TGUID = '{83A33DA7-27C5-11CE-BFD4-00400513BB57}';
  IID_IRibFeatureData: TGUID = '{83A33DAD-27C5-11CE-BFD4-00400513BB57}';
  IID_IDomeFeatureData: TGUID = '{83A33DAF-27C5-11CE-BFD4-00400513BB57}';
  IID_ISketchLine: TGUID = '{83A33DC1-27C5-11CE-BFD4-00400513BB57}';
  IID_ISketchArc: TGUID = '{83A33DC3-27C5-11CE-BFD4-00400513BB57}';
  IID_ISketchEllipse: TGUID = '{83A33DC7-27C5-11CE-BFD4-00400513BB57}';
  IID_ISketchParabola: TGUID = '{83A33DC9-27C5-11CE-BFD4-00400513BB57}';
  IID_ISketchSpline: TGUID = '{83A33DCB-27C5-11CE-BFD4-00400513BB57}';
  IID_ISplineHandle: TGUID = '{41607756-57A8-4E03-9BAC-2444B5FABC9D}';
  IID_ILightDialog: TGUID = '{83A33DF1-27C5-11CE-BFD4-00400513BB57}';
  IID_IEnumCurves: TGUID = '{5B57E3BC-7139-11D3-AEA2-00C04F683CBA}';
  IID_ISimpleHoleFeatureData: TGUID = '{1D06FD54-96DD-11D3-AEAA-00C04F683CBA}';
  IID_IWizardHoleFeatureData: TGUID = '{887AB457-A739-11D3-B97F-001083029A97}';
  IID_IHoleSeriesFeatureData: TGUID = '{B1EDF95C-E764-486A-A82E-8402D6553992}';
  IID_IChamferFeatureData: TGUID = '{7271D7C7-ACC9-11D3-B97F-001083029A97}';
  IID_IDraftFeatureData: TGUID = '{BC633CE1-B367-11D3-B981-001083029A97}';
  IID_ISimpleFilletFeatureData: TGUID = '{CC929F0B-B404-11D3-B981-001083029A97}';
  IID_IVariableFilletFeatureData: TGUID = '{CC929F0D-B404-11D3-B981-001083029A97}';
  IID_IExtrudeFeatureData: TGUID = '{908A7175-B72C-11D3-B981-001083029A97}';
  IID_IRevolveFeatureData: TGUID = '{B7FFF613-B735-11D3-B981-001083029A97}';
  IID_IMirrorPatternFeatureData: TGUID = '{414F4F1E-30EC-11D4-AEEB-00C04F683CBA}';
  IID_ICircularPatternFeatureData: TGUID = '{DBBF39DE-7AB5-11D4-AEB6-00C04FA0AC51}';
  IID_ILinearPatternFeatureData: TGUID = '{F86D1E94-7DE8-11D4-AEB7-00C04FA0AC51}';
  IID_ITablePatternFeatureData: TGUID = '{E5D1AF7C-7F5D-11D4-AEB7-00C04FA0AC51}';
  IID_ISketchPatternFeatureData: TGUID = '{AE998464-8050-11D4-AEB7-00C04FA0AC51}';
  IID_IMirrorSolidFeatureData: TGUID = '{E9172718-836B-11D4-AEB7-00C04FA0AC51}';
  IID_ISheetMetalFeatureData: TGUID = '{2F6C1E88-F2D6-11D4-AED5-00C04FA0AC51}';
  IID_IOneBendFeatureData: TGUID = '{0C02AD40-F6E6-11D4-AED6-00C04FA0AC51}';
  IID_IBendsFeatureData: TGUID = '{F3BDB64E-F7C6-11D4-AED6-00C04FA0AC51}';
  IID_IBaseFlangeFeatureData: TGUID = '{C61E9DD6-0813-11D5-AEDD-00C04FA0AC51}';
  IID_IEdgeFlangeFeatureData: TGUID = '{B58E432A-09C8-11D5-AEDD-00C04FA0AC51}';
  IID_IMiterFlangeFeatureData: TGUID = '{E6194F72-0CEC-11D5-AEDD-00C04FA0AC51}';
  IID_ISketchedBendFeatureData: TGUID = '{A4D90A70-0DA5-11D5-AEDD-00C04FA0AC51}';
  IID_IClosedCornerFeatureData: TGUID = '{2134CBFC-0DDA-11D5-AEDD-00C04FA0AC51}';
  IID_IFoldsFeatureData: TGUID = '{32700A62-0E5C-11D5-AEDD-00C04FA0AC51}';
  IID_IFlatPatternFeatureData: TGUID = '{00644208-0E6C-11D5-AEDD-00C04FA0AC51}';
  IID_ILocalLinearPatternFeatureData: TGUID = '{9890C04C-1196-11D5-AEDE-00C04FA0AC51}';
  IID_ILocalCircularPatternFeatureData: TGUID = '{F2E81434-13FB-11D5-AEDE-00C04FA0AC51}';
  IID_IDerivedPatternFeatureData: TGUID = '{98EADB32-141A-11D5-AEDE-00C04FA0AC51}';
  IID_IPropertyManagerPageLabel: TGUID = '{EBBD7B58-170D-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageCheckbox: TGUID = '{EBBD7B5A-170D-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageButton: TGUID = '{3A66C294-17CE-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageOption: TGUID = '{3A66C296-17CE-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageTextbox: TGUID = '{EB18A468-1800-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageCombobox: TGUID = '{0BD2BA62-18C5-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageActiveX: TGUID = '{FF956369-AE71-4643-AFA8-83D7548F758A}';
  IID_IPropertyManagerPageBitmapButton: TGUID = '{E508CE7D-0439-4C3D-A61F-A7C9ECDC78BD}';
  IID_IProjectionCurveFeatureData: TGUID = '{459F4B5C-7F8C-4A7E-8AA0-FCFB6ED2D286}';
  IID_IScaleFeatureData: TGUID = '{E7631115-F299-4852-9D37-FC9508A00BC1}';
  IID_IShellFeatureData: TGUID = '{58252A5A-82AF-49EF-A2FE-E8C995132F84}';
  IID_ISweepFeatureData: TGUID = '{07799F9D-7E4F-40DE-87AE-AEBAABA6A3BC}';
  IID_ILoftFeatureData: TGUID = '{EE8D87FE-5202-45E9-8E5C-91084C134168}';
  IID_IThickenFeatureData: TGUID = '{85F4DD78-9430-4937-8504-55D24F2CEE41}';
  IID_ISurfaceCutFeatureData: TGUID = '{DFB6C63B-287C-4141-A610-08D94CECE976}';
  IID_IReplaceFaceFeatureData: TGUID = '{D7792E79-5983-45C7-AE7D-966FCB6604D8}';
  IID_IMacroFeatureData: TGUID = '{739AC7CE-9017-11D5-AF07-0002B34143E5}';
  IID_ICurveDrivenPatternFeatureData: TGUID = '{496A6D86-2180-46D8-A973-7885554EFAF3}';
  IID_IRipFeatureData: TGUID = '{D3352F26-3333-455E-910B-E0F3A44E76FD}';
  IID_IHemFeatureData: TGUID = '{D1E54427-2421-413F-9EB3-F568A6BF826D}';
  IID_IBreakCornerFeatureData: TGUID = '{DF91CD7F-F4D5-471A-831B-E201B2C02090}';
  IID_IJogFeatureData: TGUID = '{C75CA537-4ABA-44F3-AC3B-73D5DCD0C834}';
  IID_ISurfExtrudeFeatureData: TGUID = '{157CE6B0-16BC-49A3-B207-95159B02306C}';
  IID_ISurfRevolveFeatureData: TGUID = '{38D7F138-4403-4EB0-8E9E-7DAF6BA385CF}';
  IID_ISurfaceOffsetFeatureData: TGUID = '{214152E2-2F73-42E3-AB88-690C2ED9910D}';
  IID_ISurfaceKnitFeatureData: TGUID = '{6CE5BD99-0769-4DAF-8206-07513B6C0005}';
  IID_ISurfaceExtendFeatureData: TGUID = '{72249E3D-B571-416D-9034-DE3BE1D9937C}';
  IID_ISurfacePlanarFeatureData: TGUID = '{6A0860DC-BC79-4DFD-8A06-252EFCCFCD37}';
  IID_ISurfaceTrimFeatureData: TGUID = '{C9943DEE-40DE-4EB9-A3C5-7D5CABEE3E85}';
  IID_ISurfaceRadiateFeatureData: TGUID = '{82F0509D-402B-4D79-AB6B-AA2888FC1E81}';
  IID_IRefPlaneFeatureData: TGUID = '{02B5CBF8-5104-41F7-901D-A4DCBA547029}';
  IID_IRefPointFeatureData: TGUID = '{887A2421-50F5-443F-ACD9-62E9832AB519}';
  IID_IRuledSurfaceFeatureData: TGUID = '{4010A7F4-B516-4E35-B9B9-6E871355DB9E}';
  IID_ICavityFeatureData: TGUID = '{A72BEB28-2C74-4BCF-880C-6496AC9005FA}';
  IID_ILoftedBendsFeatureData: TGUID = '{619DEE3D-3398-48FE-8818-EDD4169FDDB8}';
  IID_IReferencePointCurveFeatureData: TGUID = '{8066432C-1376-4D6B-AA64-46B2D3CC5D60}';
  IID_IFreePointCurveFeatureData: TGUID = '{C11527FA-E833-4453-80DD-229F6BACC5D9}';
  IID_ICompositeCurveFeatureData: TGUID = '{8D5CFAB8-A9F9-4B7F-9275-27E2062C324E}';
  IID_IHelixFeatureData: TGUID = '{70E634EE-890A-421F-ABCE-5208A563423C}';
  IID_IImportedCurveFeatureData: TGUID = '{6DC71EC8-09F6-4D6F-AC3F-19D8EA258E0B}';
  IID_ICosmeticThreadFeatureData: TGUID = '{DAE93BE3-B9DC-4748-AD03-94CA1D644E59}';
  IID_ISketchRegion: TGUID = '{EB53B511-E23D-4B6A-B48D-21828AF5F151}';
  IID_ISketchContour: TGUID = '{EB53B513-E23D-4B6A-B48D-21828AF5F151}';
  IID_IMateInPlace: TGUID = '{1C4BC27B-4B76-4390-AE66-4A21A96C0C9C}';
  IID_IRefAxisFeatureData: TGUID = '{3ADB2157-CF50-46AD-B1F6-0E8DB36C29B0}';
  IID_IEdgePoint: TGUID = '{CCB5966E-03D5-4169-A303-AD49265A7B36}';
  IID_IMateReference: TGUID = '{2C1BF8EE-6886-4E8E-9EF2-1C48AE94958B}';
  IID_IPartingLineFeatureData: TGUID = '{76C0E8B6-0F1B-4DA1-9812-C46C0E6AD9C0}';
  IID_IPartingSurfaceFeatureData: TGUID = '{243D4C1D-6A24-4FF9-83B7-D409EC6B5185}';
  IID_IDeleteBodyFeatureData: TGUID = '{5F20A7B3-ED48-4103-8D00-4CA38B1A7C73}';
  IID_IShutOffSurfaceFeatureData: TGUID = '{DBE5BCC6-FAF5-441A-ABE5-53BF2BBA90D0}';
  IID_IToolingSplitFeatureData: TGUID = '{E6FA7AEE-8F47-4187-9C15-75549645016F}';
  IID_ISplitBodyFeatureData: TGUID = '{4AFD6AD9-AF35-44EB-8E9B-E15007FBDA62}';
  IID_ITriadManipulator: TGUID = '{173137B4-84AC-428C-8F04-EC0E9FCEA390}';
  IID_IJoinFeatureData: TGUID = '{A4E370F5-9BFB-4E7D-880C-94DA7EA2440D}';
  IID_IFillSurfaceFeatureData: TGUID = '{57EB6A78-6E88-4CE9-BAAB-897CCC74A899}';
  IID_IMoveCopyBodyFeatureData: TGUID = '{6D5845F5-68F8-4492-9220-58EA193A7B24}';
  IID_ISplitLineFeatureData: TGUID = '{215B0BEC-DDCD-4ECE-BD49-B22C8AED9E7D}';
  IID_IWrapSketchFeatureData: TGUID = '{ED645449-BD48-47E6-9A7F-A8782E849B09}';
  IID_IStructuralMemberFeatureData: TGUID = '{F3F83396-6439-46BD-9927-2449083ECDC2}';
  IID_IEndCapFeatureData: TGUID = '{9DB80806-EDB1-4463-B0F3-D3F3BEAE465E}';
  IID_IGussetFeatureData: TGUID = '{AE327CE4-CAEE-42C6-9820-121001113E06}';
  IID_ICombineBodiesFeatureData: TGUID = '{526D5A18-6855-411A-9003-7345DD56E5E3}';
  IID_ILibraryFeatureData: TGUID = '{AC44BC75-60B1-44B5-BA39-32CC6ED6729E}';
  IID_ISimulationGravityFeatureData: TGUID = '{51CB1551-09A0-408F-B911-DAFE792DEBFA}';
  IID_ISimulationMotorFeatureData: TGUID = '{D06C413A-FA92-4147-85C5-47FE67C5879D}';
  IID_ISimulationLinearSpringFeatureData: TGUID = '{3C9C2BA4-B021-4BB8-A992-500575B08E72}';
  IID_IWeldmentTrimExtendFeatureData: TGUID = '{D1D31986-C631-4726-9988-A45F592CFAB2}';
  IID_IWeldmentBeadFeatureData: TGUID = '{93F2E4D8-AD2D-41B6-A5F7-6E7E628CCFAB}';
  IID_IBodyFolder: TGUID = '{BCB39259-F2AA-47FD-8099-065B095095AD}';
  IID_ICoreFeatureData: TGUID = '{900B5953-3BD3-43AB-B190-67EACD25A69A}';
  IID_ICommentFolder: TGUID = '{693E3D8B-3CB9-4D5C-9FCF-E021149BBC38}';
  IID_IImportIgesData: TGUID = '{57988505-3843-4124-9CBE-AF121D9E0BE8}';
  IID_IImportDxfDwgData: TGUID = '{11F1F395-9064-44CB-AE29-E1A3A543AEDC}';
  IID_IImportStepData: TGUID = '{AD749A73-9AA2-4A3E-BCA5-8FC012114BB0}';
  IID_IExportPdfData: TGUID = '{33D23C34-D27A-4635-91DF-8BEFFE51900A}';
  IID_IPropertyManagerPageSlider: TGUID = '{CF38209E-52DC-414C-81BD-EBAC6C10692D}';
  IID_IDragArrowManipulator: TGUID = '{4A9CE84F-42B5-4047-BF37-EC2E101B42A2}';
  IID_IMoveFaceFeatureData: TGUID = '{BC300B17-346F-4511-8D31-969C580BB16B}';
  IID_IHealEdgesFeatureData: TGUID = '{CFBD8D35-9C42-44F5-AF20-A27988F95FD9}';
  IID_ISilhouetteEdge: TGUID = '{B7A5B9B2-CA73-45B8-A41D-38FB6F2D3B6E}';
  IID_IDerivedPartFeatureData: TGUID = '{A1672AF7-E65F-46E8-800C-7CBF4DA6E80F}';
  IID_IDocumentSpecification: TGUID = '{2FC5EA82-B937-4719-814F-2103AA157F35}';
  IID_ISimulationForceFeatureData: TGUID = '{131A6028-590B-4790-A36C-56CC84F5AF26}';
  DIID_DSldWorksEvents: TGUID = '{83A33D22-37C5-11CE-BFD4-00400513BB57}';
  CLASS_SldWorks_: TGUID = '{88CEE7FD-9F58-4962-8483-041AB9AD69A2}';
  DIID_DPartDocEvents: TGUID = '{83A33D32-37C5-11CE-BFD4-00400513BB57}';
  CLASS_PartDoc: TGUID = '{83A33D30-27C5-11CE-BFD4-00400513BB57}';
  DIID_DDrawingDocEvents: TGUID = '{83A33D34-37C5-11CE-BFD4-00400513BB57}';
  CLASS_DrawingDoc: TGUID = '{83A33D34-27C5-11CE-BFD4-00400513BB57}';
  DIID_DAssemblyDocEvents: TGUID = '{83A33D35-37C5-11CE-BFD4-00400513BB57}';
  CLASS_AssemblyDoc: TGUID = '{83A33D36-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Feature: TGUID = '{83A33D37-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Dimension: TGUID = '{83A33D39-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Body: TGUID = '{83A33D3B-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Face: TGUID = '{83A33D3D-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Surface: TGUID = '{83A33D3F-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Edge: TGUID = '{83A33D41-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Curve: TGUID = '{83A33D43-27C5-11CE-BFD4-00400513BB57}';
  CLASS_ModelDoc: TGUID = '{83A33D45-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Frame: TGUID = '{83A33D47-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Gtol: TGUID = '{83A33D49-27C5-11CE-BFD4-00400513BB57}';
  DIID_DModelViewEvents: TGUID = '{83A33D4C-37C5-11CE-BFD4-00400513BB57}';
  CLASS_ModelView: TGUID = '{83A33D4B-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Member: TGUID = '{83A33D4D-27C5-11CE-BFD4-00400513BB57}';
  CLASS_View: TGUID = '{83A33D4F-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Sketch: TGUID = '{83A33D52-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Loop: TGUID = '{83A33D54-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Note: TGUID = '{83A33D56-27C5-11CE-BFD4-00400513BB57}';
  CLASS_CoEdge: TGUID = '{83A33D58-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Vertex: TGUID = '{83A33D64-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SelectionMgr: TGUID = '{83A33D5A-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumFaces: TGUID = '{83A33D5C-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumFaces2: TGUID = '{5F269D24-E7A6-45B4-8850-15983215B0FE}';
  CLASS_EnumLoops: TGUID = '{83A33D5E-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumLoops2: TGUID = '{BAA5C9A5-CCE2-44D7-979A-88C1720F82AA}';
  CLASS_EnumEdges: TGUID = '{83A33D60-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumCoEdges: TGUID = '{83A33D62-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumBodies: TGUID = '{83A33D97-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumBodies2: TGUID = '{F5519211-91AC-4234-8C2F-42725BC6B3FE}';
  CLASS_Entity: TGUID = '{83A33D66-27C5-11CE-BFD4-00400513BB57}';
  CLASS_AttributeDef: TGUID = '{83A33D68-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Parameter: TGUID = '{83A33D70-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Attribute: TGUID = '{83A33D72-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Modeler: TGUID = '{83A33D74-27C5-11CE-BFD4-00400513BB57}';
  DIID_DFeatMgrViewEvents: TGUID = '{83A33D76-27C5-11CE-BFD4-00400513BB57}';
  CLASS_FeatMgrView: TGUID = '{83A33D77-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Environment: TGUID = '{83A33D79-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Sheet: TGUID = '{83A33D81-27C5-11CE-BFD4-00400513BB57}';
  CLASS_BomTable: TGUID = '{83A33D83-27C5-11CE-BFD4-00400513BB57}';
  CLASS_RefPlane: TGUID = '{83A33D85-27C5-11CE-BFD4-00400513BB57}';
  CLASS_RefAxis: TGUID = '{83A33D87-27C5-11CE-BFD4-00400513BB57}';
  CLASS_MidSurface: TGUID = '{83A33D89-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Mate: TGUID = '{83A33D8B-27C5-11CE-BFD4-00400513BB57}';
  CLASS_MateEntity: TGUID = '{83A33D8D-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SFSymbol: TGUID = '{83A33D8F-27C5-11CE-BFD4-00400513BB57}';
  CLASS_DatumTag: TGUID = '{83A33D91-27C5-11CE-BFD4-00400513BB57}';
  CLASS_DatumTargetSym: TGUID = '{83A33D93-27C5-11CE-BFD4-00400513BB57}';
  CLASS_WeldSymbol: TGUID = '{83A33D95-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Configuration: TGUID = '{83A33D99-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Component: TGUID = '{83A33D9B-27C5-11CE-BFD4-00400513BB57}';
  CLASS_DisplayData: TGUID = '{83A33D9D-27C5-11CE-BFD4-00400513BB57}';
  CLASS_CThread: TGUID = '{83A33D9F-27C5-11CE-BFD4-00400513BB57}';
  CLASS_DisplayDimension: TGUID = '{83A33DA2-27C5-11CE-BFD4-00400513BB57}';
  CLASS_ReferenceCurve: TGUID = '{83A33DA4-27C5-11CE-BFD4-00400513BB57}';
  CLASS_ColorTable: TGUID = '{83A33DA6-27C5-11CE-BFD4-00400513BB57}';
  DIID_DSWPropertySheetEvents: TGUID = '{E05FF9E0-FC82-11D2-9395-00C04F79BFFE}';
  CLASS_SWPropertySheet: TGUID = '{83A33DA8-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Annotation: TGUID = '{83A33DAA-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumDisplayDimensions: TGUID = '{83A33DAC-27C5-11CE-BFD4-00400513BB57}';
  CLASS_RibFeatureData: TGUID = '{83A33DAE-27C5-11CE-BFD4-00400513BB57}';
  CLASS_DomeFeatureData: TGUID = '{83A33DB0-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumModelViews: TGUID = '{83A33DB2-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumDocuments: TGUID = '{83A33DB4-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumDocuments2: TGUID = '{FCE9FE1B-A6B2-4AB9-817D-D49F14E7F783}';
  CLASS_CustomSymbol: TGUID = '{83A33DB6-27C5-11CE-BFD4-00400513BB57}';
  CLASS_DetailingDefaults: TGUID = '{83A33DB8-27C5-11CE-BFD4-00400513BB57}';
  CLASS_TextFormat: TGUID = '{83A33DBA-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchPoint: TGUID = '{83A33DBE-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchSegment: TGUID = '{83A33DC0-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchLine: TGUID = '{83A33DC2-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchArc: TGUID = '{83A33DC4-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchText: TGUID = '{83A33DC6-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchEllipse: TGUID = '{83A33DC8-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchParabola: TGUID = '{83A33DCA-27C5-11CE-BFD4-00400513BB57}';
  CLASS_SketchSpline: TGUID = '{83A33DCC-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumSketchPoints: TGUID = '{83A33DCE-27C5-11CE-BFD4-00400513BB57}';
  CLASS_EnumSketchSegments: TGUID = '{83A33DF0-27C5-11CE-BFD4-00400513BB57}';
  CLASS_LightDialog: TGUID = '{83A33DF2-27C5-11CE-BFD4-00400513BB57}';
  CLASS_Layer: TGUID = '{04B7287D-F19D-11D2-B8E9-00C04F8EF738}';
  CLASS_LayerMgr: TGUID = '{75173E31-F19E-11D2-B8E9-00C04F8EF738}';
  CLASS_DesignTable: TGUID = '{CE1EAA89-25AD-11D3-AE91-00C04F683CBA}';
  CLASS_SketchHatch: TGUID = '{C3D00927-4068-11D3-AE9B-00C04F683CBA}';
  CLASS_EnumSketchHatches: TGUID = '{54729B8F-4086-11D3-AE9B-00C04F683CBA}';
  CLASS_EnumCurves: TGUID = '{5B57E3BD-7139-11D3-AEA2-00C04F683CBA}';
  CLASS_SimpleHoleFeatureData: TGUID = '{1D06FD55-96DD-11D3-AEAA-00C04F683CBA}';
  CLASS_WizardHoleFeatureData: TGUID = '{887AB458-A739-11D3-B97F-001083029A97}';
  CLASS_ChamferFeatureData: TGUID = '{7271D7C8-ACC9-11D3-B97F-001083029A97}';
  CLASS_DraftFeatureData: TGUID = '{BC633CE2-B367-11D3-B981-001083029A97}';
  CLASS_SimpleFilletFeatureData: TGUID = '{CC929F0C-B404-11D3-B981-001083029A97}';
  CLASS_VariableFilletFeatureData: TGUID = '{CC929F0E-B404-11D3-B981-001083029A97}';
  CLASS_ExtrudeFeatureData: TGUID = '{908A7176-B72C-11D3-B981-001083029A97}';
  CLASS_RevolveFeatureData: TGUID = '{B7FFF614-B735-11D3-B981-001083029A97}';
  DIID_ISdmDoc: TGUID = '{AC048CEA-AE93-11D3-AEA7-00C04F60F02A}';
  CLASS_SdmDoc: TGUID = '{AC048CE8-AE93-11D3-AEA7-00C04F60F02A}';
  CLASS_DrSection: TGUID = '{F183A340-D4DB-11D3-AEB2-00C04F603FAF}';
  CLASS_EnumComponents: TGUID = '{51EFB945-D449-11D3-AEBE-00C04F683CBA}';
  CLASS_EnumComponents2: TGUID = '{FD27DA22-03E0-4DB9-82DA-FCF94B11A2FE}';
  CLASS_EnumDrSections: TGUID = '{585A6A16-E95B-11D3-AEBC-00C04F603FAF}';
  CLASS_ExplodeStep: TGUID = '{7241680C-0BC6-11D4-AEEE-00C04F61025C}';
  CLASS_MathUtility: TGUID = '{F7D97F81-162E-11D4-AEAB-00C04FA0AC51}';
  CLASS_MathTransform: TGUID = '{F7D97F83-162E-11D4-AEAB-00C04FA0AC51}';
  CLASS_MathPoint: TGUID = '{F7D97F85-162E-11D4-AEAB-00C04FA0AC51}';
  CLASS_MathVector: TGUID = '{F7D97F87-162E-11D4-AEAB-00C04FA0AC51}';
  CLASS_MirrorPatternFeatureData: TGUID = '{414F4F1F-30EC-11D4-AEEB-00C04F683CBA}';
  CLASS_DetailCircle: TGUID = '{4B65A34B-4C44-11D4-AEF6-00C04F683CBA}';
  CLASS_CircularPatternFeatureData: TGUID = '{DBBF39DF-7AB5-11D4-AEB6-00C04FA0AC51}';
  CLASS_LinearPatternFeatureData: TGUID = '{F86D1E95-7DE8-11D4-AEB7-00C04FA0AC51}';
  CLASS_TablePatternFeatureData: TGUID = '{E5D1AF7D-7F5D-11D4-AEB7-00C04FA0AC51}';
  CLASS_SketchPatternFeatureData: TGUID = '{AE998465-8050-11D4-AEB7-00C04FA0AC51}';
  CLASS_MirrorSolidFeatureData: TGUID = '{E9172719-836B-11D4-AEB7-00C04FA0AC51}';
  CLASS_PropertyManagerPage: TGUID = '{E981B4FB-7E86-11D4-AEF2-00C04F603FAF}';
  CLASS_ProjectionArrow: TGUID = '{A2227E66-A3A7-11D4-AEFF-00C04F603FAF}';
  CLASS_Tessellation: TGUID = '{699C7493-DB56-4CC2-B7A2-9FFD56698434}';
  CLASS_SheetMetalFeatureData: TGUID = '{2F6C1E89-F2D6-11D4-AED5-00C04FA0AC51}';
  CLASS_OneBendFeatureData: TGUID = '{0C02AD41-F6E6-11D4-AED6-00C04FA0AC51}';
  CLASS_BendsFeatureData: TGUID = '{F3BDB64F-F7C6-11D4-AED6-00C04FA0AC51}';
  CLASS_UserUnit: TGUID = '{3CC0BC03-541F-40C3-866B-8BAC502DB4EB}';
  CLASS_BaseFlangeFeatureData: TGUID = '{C61E9DD7-0813-11D5-AEDD-00C04FA0AC51}';
  CLASS_EdgeFlangeFeatureData: TGUID = '{B58E432B-09C8-11D5-AEDD-00C04FA0AC51}';
  CLASS_MiterFlangeFeatureData: TGUID = '{E6194F73-0CEC-11D5-AEDD-00C04FA0AC52}';
  CLASS_SketchedBendFeatureData: TGUID = '{A4D90A71-0DA5-11D5-AEDD-00C04FA0AC51}';
  CLASS_ClosedCornerFeatureData: TGUID = '{2134CBFD-0DDA-11D5-AEDD-00C04FA0AC51}';
  CLASS_FoldsFeatureData: TGUID = '{32700A63-0E5C-11D5-AEDD-00C04FA0AC51}';
  CLASS_FlatPatternFeatureData: TGUID = '{00644209-0E6C-11D5-AEDD-00C04FA0AC51}';
  CLASS_LocalLinearPatternFeatureData: TGUID = '{9890C04D-1196-11D5-AEDE-00C04FA0AC51}';
  CLASS_LocalCircularPatternFeatureData: TGUID = '{F2E81435-13FB-11D5-AEDE-00C04FA0AC51}';
  CLASS_DerivedPatternFeatureData: TGUID = '{98EADB33-141A-11D5-AEDE-00C04FA0AC51}';
  CLASS_Body2: TGUID = '{CB928817-2A89-446E-A1BB-A6EEE181359E}';
  CLASS_Face2: TGUID = '{545470A9-EF3C-4FC0-AA89-9676EE0BF318}';
  CLASS_ModelDoc2: TGUID = '{27526253-6119-4B38-A1F9-2DC877E72334}';
  CLASS_Loop2: TGUID = '{071B4D3E-0CD5-4C4B-B6E7-674363A18F4B}';
  CLASS_MidSurface2: TGUID = '{285FD964-4BA2-40D3-89E5-0D7B4236597F}';
  CLASS_Component2: TGUID = '{AE61A94D-E228-4AC0-8E2A-F000244E3C8B}';
  CLASS_PropertyManagerPage2: TGUID = '{B92E624B-0DC3-11D5-AF1E-00C04F603FAF}';
  CLASS_PropertyManagerPageGroup: TGUID = '{2E23D2EF-0F57-11D5-AF1F-00C04F603FAF}';
  CLASS_PropertyManagerPageControl: TGUID = '{CED9CAF5-16FA-11D5-AF24-00C04F603FAF}';
  CLASS_PropertyManagerPageLabel: TGUID = '{EBBD7B59-170D-11D5-AF24-00C04F603FAF}';
  CLASS_PropertyManagerPageCheckbox: TGUID = '{EBBD7B5B-170D-11D5-AF24-00C04F603FAF}';
  CLASS_PropertyManagerPageButton: TGUID = '{3A66C295-17CE-11D5-AF24-00C04F603FAF}';
  CLASS_PropertyManagerPageOption: TGUID = '{3A66C297-17CE-11D5-AF24-00C04F603FAF}';
  CLASS_PropertyManagerPageTextbox: TGUID = '{EB18A469-1800-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageListbox: TGUID = '{CDB49982-1A18-11D5-AF24-00C04F603FAF}';
  CLASS_PropertyManagerPageListbox: TGUID = '{CDB49983-1A18-11D5-AF24-00C04F603FAF}';
  CLASS_PropertyManagerPageCombobox: TGUID = '{0BD2BA63-18C5-11D5-AF24-00C04F603FAF}';
  IID_IPropertyManagerPageNumberbox: TGUID = '{96567554-1EDA-11D5-AF25-00C04F603FAF}';
  CLASS_PropertyManagerPageNumberbox: TGUID = '{96567555-1EDA-11D5-AF25-00C04F603FAF}';
  IID_IPropertyManagerPageSelectionbox: TGUID = '{96567556-1EDA-11D5-AF25-00C04F603FAF}';
  CLASS_PropertyManagerPageSelectionbox: TGUID = '{96567557-1EDA-11D5-AF25-00C04F603FAF}';
  CLASS_MultiJogLeader: TGUID = '{06DF8FE1-1344-4E69-9519-535D0160D295}';
  CLASS_ProjectionCurveFeatureData: TGUID = '{459F4B5D-7F8C-4A7E-8AA0-FCFB6ED2D286}';
  CLASS_ScaleFeatureData: TGUID = '{D335D62B-ACBA-4B09-9631-8B53D57F86C9}';
  CLASS_ShellFeatureData: TGUID = '{D4C512B3-A169-40AC-83C6-A8F0222A8381}';
  CLASS_SweepFeatureData: TGUID = '{D45B744B-DFDC-405C-AE88-6991FBBC44D2}';
  CLASS_LoftFeatureData: TGUID = '{6FDA5236-AC50-480E-AA3F-A5681D373ABD}';
  CLASS_ThickenFeatureData: TGUID = '{97C75B25-7466-44CA-9E0A-31CAA7F928F0}';
  CLASS_SurfCutFeatureData: TGUID = '{0E16C025-301F-414B-92D3-53833F9998D6}';
  CLASS_ReplaceFaceFeatureData: TGUID = '{489F09C4-02DB-4E6B-A787-094BAF521EE3}';
  IID_IRibFeatureData2: TGUID = '{EFE4958E-B373-4849-A93C-01BFDEBC830D}';
  CLASS_RibFeatureData2: TGUID = '{DDDBAED3-DB70-4037-AC91-45265CB3E084}';
  IID_IDomeFeatureData2: TGUID = '{6E8FAB36-9E1C-4A84-A160-1E68B703431C}';
  CLASS_DomeFeatureData2: TGUID = '{B27AF2DF-2FD2-4F54-9130-1A79C1305C18}';
  IID_ISimpleHoleFeatureData2: TGUID = '{D98E9F26-73DB-4BD2-A967-31BF7EF35B5B}';
  CLASS_SimpleHoleFeatureData2: TGUID = '{DC8795E8-8FE0-4837-8328-70165844DE95}';
  IID_IWizardHoleFeatureData2: TGUID = '{7A472C09-437C-4C4B-B34C-A144D0E2546C}';
  CLASS_WizardHoleFeatureData2: TGUID = '{A9DA797D-2303-486B-BEB1-6F80B765BFB5}';
  IID_IChamferFeatureData2: TGUID = '{8427D092-A1FC-49C9-B1ED-EC52D2389E9A}';
  CLASS_ChamferFeatureData2: TGUID = '{5C97A73F-B200-4D1B-A83C-76227ECE5877}';
  IID_IDraftFeatureData2: TGUID = '{FD9B0999-D519-41AB-ACAA-4F2ADEDD7015}';
  CLASS_DraftFeatureData2: TGUID = '{06C757D2-4E1A-4455-9518-8A5A90218ABB}';
  IID_ISimpleFilletFeatureData2: TGUID = '{9FE7C8DB-8A4C-41BB-8E3B-7600692DBC92}';
  CLASS_SimpleFilletFeatureData2: TGUID = '{E461D38B-5063-4992-A8FF-FC04A69AABB8}';
  IID_IVariableFilletFeatureData2: TGUID = '{FFCDC95C-1BA9-423A-877E-CB7AA60DE9B4}';
  CLASS_VariableFilletFeatureData2: TGUID = '{E3B83840-88C8-4388-BF13-620AD7CDDCAC}';
  IID_IExtrudeFeatureData2: TGUID = '{931E939E-2FDE-49A8-8472-ABCF79E9F5CC}';
  CLASS_ExtrudeFeatureData2: TGUID = '{0AA8ADE4-A503-4D79-A209-69D3DBD6E725}';
  IID_IRevolveFeatureData2: TGUID = '{E055F0ED-DB3E-4528-A982-D66D289190A0}';
  CLASS_RevolveFeatureData2: TGUID = '{AC3A7D68-1EA5-4FC8-A726-EFFD2319593B}';
  CLASS_MacroFeatureData: TGUID = '{739AC7CF-9017-11D5-AF07-0002B34143E5}';
  CLASS_DowelSymbol: TGUID = '{55AACD8C-97C5-11D5-AF4B-00C04F603FAF}';
  CLASS_DragOperator: TGUID = '{2F8BE28E-F829-40F7-B568-7F461572CE41}';
  CLASS_CurveDrivenPatternFeatureData: TGUID = '{F67412A3-FEBF-4319-9E8D-323B6EE62C5A}';
  CLASS_BalloonStack: TGUID = '{4944F9E7-BF50-11D5-AF56-00C04F603FAF}';
  CLASS_StatusBarPane: TGUID = '{95B8A1AA-1977-46AD-B944-7D525DD76D65}';
  CLASS_EquationMgr: TGUID = '{9015E438-C504-4E9F-A4FA-A03D578FE21F}';
  CLASS_PageSetup: TGUID = '{931374CD-CE0E-11D5-AF59-00C04F603FAF}';
  CLASS_RipFeatureData: TGUID = '{AB3B9122-1208-4ED3-B53F-FA5C06FCBE1D}';
  CLASS_HemFeatureData: TGUID = '{59675115-A0F0-4AA1-9FED-89B10EB36D12}';
  CLASS_BreakCornerFeatureData: TGUID = '{BF2347C1-CF5F-4168-B203-7B1E544D4697}';
  CLASS_JogFeatureData: TGUID = '{CD1CE2AE-A4BB-4280-A193-D8A9D0D73117}';
  CLASS_SurfExtrudeFeatureData: TGUID = '{ACDDD04C-A393-462A-BE52-DCC9F78851F0}';
  CLASS_SurfRevolveFeatureData: TGUID = '{69C9D6E8-3B00-48DD-BB69-5AD59C6D33E2}';
  CLASS_SurfaceOffsetFeatureData: TGUID = '{AE587C54-9CEC-43E8-9A9B-318274B7D35F}';
  CLASS_SurfaceKnitFeatureData: TGUID = '{B32901E5-1A5D-4C16-98C6-2A3D7602F723}';
  CLASS_SurfaceExtendFeatureData: TGUID = '{79EE057D-BE92-4557-B679-E04824A26C3F}';
  CLASS_SurfacePlanarFeatureData: TGUID = '{467C984E-DF2D-4644-B4CF-0AC4A722323B}';
  CLASS_CenterMark: TGUID = '{6BEB0424-EDA4-11D5-AF64-00C04F603FAF}';
  CLASS_SurfaceTrimFeatureData: TGUID = '{2FB4B7B6-87B4-4B10-8961-9EBF65EAC73F}';
  CLASS_SurfaceRadiateFeatureData: TGUID = '{678DCDDD-C6EC-4E81-8948-F9FB5C79F3E4}';
  CLASS_RefPlaneFeatureData: TGUID = '{5EE2BF86-C159-4DCB-944A-99ACC772679E}';
  CLASS_Callout: TGUID = '{9CAAA1AB-F2FC-11D5-AF66-00C04F603FAF}';
  CLASS_CustomBendAllowance: TGUID = '{FD7C6301-1942-41FB-8036-D9F8CEAAC8F9}';
  CLASS_BlockInstance: TGUID = '{992A14B7-15CF-11D6-AF6E-00C04F603FAF}';
  CLASS_BlockDefinition: TGUID = '{8CD8314B-1677-11D6-AF6E-00C04F603FAF}';
  CLASS_BreakLine: TGUID = '{0D789448-973B-4411-B2D6-A90A1675276D}';
  CLASS_FaceHatch: TGUID = '{51440E4B-7FF5-4806-B852-DC238634A160}';
  CLASS_PropertyManagerPageActiveX: TGUID = '{B02F9E06-FC39-422B-9801-27B897ECAFA9}';
  CLASS_LoftedBendsFeatureData: TGUID = '{CBD8BEA9-E41E-4EF3-884C-DCA3C7BEF1D8}';
  CLASS_FeatureManager: TGUID = '{B322A200-3015-467C-B429-DCE99445D75B}';
  CLASS_ModelViewManager: TGUID = '{ACF23730-ED2C-410F-8F9D-94277DB7DB4E}';
  CLASS_ModelDocExtension: TGUID = '{D192049A-49A7-4819-9C2E-F7E0F98A0431}';
  CLASS_ConfigurationManager: TGUID = '{64EBF95D-BA6F-47CB-8558-AC9487625ED6}';
  CLASS_CosmeticThreadFeatureData: TGUID = '{154778CB-11FC-40CC-94BE-B857632C499E}';
  CLASS_CenterLine: TGUID = '{9680E56C-4D4E-4509-9742-C829BEFCD39A}';
  CLASS_ReferencePointCurveFeatureData: TGUID = '{1F440727-3A73-4128-8DA9-D20BAF341BBC}';
  CLASS_FreePointCurveFeatureData: TGUID = '{830FC5D2-05EF-48EF-ADAB-BF0FF2B4C677}';
  CLASS_CompositeCurveFeatureData: TGUID = '{96EB4AA2-167F-4A41-9FAE-2F88ECEC6F92}';
  CLASS_HelixFeatureData: TGUID = '{5118F2BC-A0E6-4205-A96D-09E998190030}';
  CLASS_ImportedCurveFeatureData: TGUID = '{D50C4A6E-4CBC-4EA9-B6B8-1062BAA697D2}';
  CLASS_SketchRegion: TGUID = '{EB53B512-E23D-4B6A-B48D-21828AF5F151}';
  CLASS_SketchContour: TGUID = '{EB53B514-E23D-4B6A-B48D-21828AF5F151}';
  CLASS_MassProperty: TGUID = '{BCAF190B-5407-4AE0-9C9A-E7194361FC1B}';
  CLASS_DrawingComponent: TGUID = '{D2E960F8-7D71-46EA-961E-1211DAA353AF}';
  CLASS_SketchRelationManager: TGUID = '{468ABD02-D693-4F03-8ECA-2A0293F5E2B2}';
  CLASS_SketchRelation: TGUID = '{C453DE5E-B50C-4745-8935-6076703CF3AE}';
  CLASS_Mate2: TGUID = '{9EC0B96E-3592-40BB-BA61-E9A24DCAA42C}';
  CLASS_MateEntity2: TGUID = '{92344712-E494-46CC-AB7B-0369DB5185C3}';
  CLASS_SelectData: TGUID = '{5C891970-6A93-47AB-A0CD-BC85A44872C0}';
  CLASS_TableAnnotation: TGUID = '{A51126C8-EE44-48B9-A91F-723C64CFB793}';
  CLASS_HoleTableAnnotation: TGUID = '{48CFE729-7BA8-4274-986C-CD5E068DBCAB}';
  CLASS_HoleTable: TGUID = '{EA2909EB-9E57-464B-AA3F-66E55470AD6C}';
  CLASS_DatumOrigin: TGUID = '{CAC76AA7-C659-4214-A4FE-BCF90BC5C3D3}';
  CLASS_BomTableAnnotation: TGUID = '{5EB57E29-B782-480F-8A28-3F1440CEEBF0}';
  CLASS_BomFeature: TGUID = '{DA78AF57-C8CA-4516-84A9-D8C8316F580A}';
  CLASS_RevisionTableAnnotation: TGUID = '{1A19C5DC-3113-447C-9CAA-2CEE14A1D7BA}';
  CLASS_RevisionTableFeature: TGUID = '{DA0D8D86-5C82-455F-92DD-223A79C29518}';
  CLASS_MateInPlace: TGUID = '{06C500AF-DE51-458B-84B2-09542600A8BA}';
  CLASS_PropertyManagerPageBitmapButton: TGUID = '{F88A1D38-8725-45F2-998F-9EE1655B87A2}';
  CLASS_CustomPropertyManager: TGUID = '{75467D64-77F6-4479-8FF6-0DF82AA2E86A}';
  IID_ILight: TGUID = '{9EEB4DE9-AC14-4A80-B484-7E41AF41B56C}';
  CLASS_Light: TGUID = '{CE4C6464-B577-4A9E-8215-D00BD0149E95}';
  CLASS_RefPointFeatureData: TGUID = '{22245747-0420-4D86-9171-750E6F32C1A8}';
  CLASS_RefPoint: TGUID = '{F5E056B0-9FE6-4D5B-8BB6-0E2D53D99FA5}';
  CLASS_RefAxisFeatureData: TGUID = '{0D7DD9CB-1536-4ADE-A97C-D2C70B0809BF}';
  CLASS_EdgePoint: TGUID = '{55BB6DBE-6F19-4E28-918D-509C53D9E60B}';
  DIID_DTaskpaneViewEvents: TGUID = '{D78003D7-378A-46D5-93B3-BCD8ABC9D34B}';
  CLASS_TaskpaneView: TGUID = '{EDBBA0EB-B701-419E-A4AE-3409DBF12D40}';
  CLASS_Texture: TGUID = '{5A6D2EBF-9B91-4A1D-89D6-C563DE8B4351}';
  CLASS_MateReference: TGUID = '{B303DC27-19B1-4358-A6FF-4D914B70B473}';
  CLASS_PartingLineFeatureData: TGUID = '{35C4CA38-9625-4303-9660-266F91F6C9B4}';
  CLASS_DeleteBodyFeatureData: TGUID = '{82C2F45A-CFB7-48B9-826E-084D001DC31A}';
  CLASS_PartingSurfaceFeatureData: TGUID = '{29AB8541-2C74-461D-BCFC-93BD90F34217}';
  CLASS_ShutOffSurfaceFeatureData: TGUID = '{88AAA130-14A4-4F18-AB24-0150EFE756EF}';
  CLASS_ToolingSplitFeatureData: TGUID = '{A972458F-EC07-4D11-872A-C5C207D6F580}';
  CLASS_PtnrPMPage: TGUID = '{09731C48-E3C7-4154-962C-CFD50714ED45}';
  CLASS_JoinFeatureData: TGUID = '{3A47CAB7-6C3D-4DE5-A5BB-41E3C1D7FBD0}';
  CLASS_Manipulator: TGUID = '{DDE50233-E98D-4076-815C-3EC7D4A293BF}';
  CLASS_TriadManipulator: TGUID = '{FD8A3CF7-7FC8-442B-97CD-AB247F81335F}';
  CLASS_FillSurfaceFeatureData: TGUID = '{5D0C251D-D518-43B1-88F5-3C1E35D16D4D}';
  CLASS_MoveCopyBodyFeatureData: TGUID = '{3F7BB99E-6F60-4F99-9F80-9F271368523A}';
  CLASS_RuledSurfaceFeatureData: TGUID = '{DFEBD0F6-CB0B-4E4A-B7A1-2BE10C839ADD}';
  CLASS_CavityFeatureData: TGUID = '{F7DD20C6-9B15-4413-9DC7-F8533C0DD494}';
  CLASS_WeldBead: TGUID = '{D5833E0A-5ED7-499A-9825-1FFEA5E4C726}';
  CLASS_SplitLineFeatureData: TGUID = '{78072827-B489-4F93-8906-E25800850899}';
  CLASS_WrapSketchFeatureData: TGUID = '{4755397D-6F07-4F8F-BB62-6F5F509A3C25}';
  CLASS_StructuralMemberFeatureData: TGUID = '{D1F5D09C-7509-4C45-97FF-ED1DBEC2E932}';
  CLASS_EndCapFeatureData: TGUID = '{9B3407B8-880A-40A1-8F73-AE79BCEB6339}';
  CLASS_GussetFeatureData: TGUID = '{55E2E1E1-0A43-4BA3-BD44-FB08A46268E9}';
  CLASS_SplitBodyFeatureData: TGUID = '{D05EED21-DC9D-495F-8032-C997392A7772}';
  CLASS_CombineBodiesFeatureData: TGUID = '{056B7325-F108-450A-AB35-4ED2491A5A73}';
  CLASS_SketchManager: TGUID = '{588A6AC1-B775-424B-87A4-421760643031}';
  CLASS_DiagnoseResult: TGUID = '{F35738F4-35C9-4E87-AD1B-BEC2CABAD01B}';
  CLASS_Spring: TGUID = '{74C82C9F-5198-4E20-A3A4-43FEFAF682EE}';
  CLASS_FaultEntity: TGUID = '{B0FD2A48-134F-4C92-8156-2C30D56E30C8}';
  CLASS_SwOLEObject: TGUID = '{71702538-317C-4AF9-B5DE-01E8FD3D2676}';
  CLASS_LibraryFeatureData: TGUID = '{330CCC95-878A-42B3-A498-CEF4EE7A0A29}';
  CLASS_Simulation: TGUID = '{698A7C5D-389D-4CE1-A984-7BF32C6B40F0}';
  CLASS_SimulationGravityFeatureData: TGUID = '{24FF20C9-8675-41F0-8642-6865E8E1B43C}';
  CLASS_SimulationMotorFeatureData: TGUID = '{8F7F4424-B9D6-4F67-A719-D206C56321E3}';
  CLASS_SimulationLinearSpringFeatureData: TGUID = '{2FFAB400-3ADB-4435-9295-72B318E0BE19}';
  CLASS_Camera: TGUID = '{DF427094-16B0-4783-8360-1DB93EE8FCF6}';
  CLASS_WeldmentBeadFeatureData: TGUID = '{35310C0D-3B12-470D-AA21-2C3C78B27ABC}';
  CLASS_WeldmentTrimExtendFeatureData: TGUID = '{E3B6AED5-A261-4101-9249-C60AAB9F572E}';
  CLASS_PropertyManagerPageTab: TGUID = '{8D1E6D74-8786-463A-86CF-7B804807DA17}';
  CLASS_BodyFolder: TGUID = '{23FC4CBC-18B0-4142-9941-5C4A18EB5C78}';
  CLASS_CommandManager: TGUID = '{5A0B252C-1C2A-46AD-B706-D03CA9E92B15}';
  CLASS_CommandGroup: TGUID = '{E80B6827-05FF-44C1-8ABC-2EC2DC92652B}';
  CLASS_CoreFeatureData: TGUID = '{2D47768F-0143-498B-99FF-6826D775EC00}';
  CLASS_AdvancedSelectionCriteria: TGUID = '{53BD3695-438E-4095-B89F-519BFE17438E}';
  CLASS_GeneralTableFeature: TGUID = '{D7883D09-B331-4710-93EF-A1D7AB9F68FB}';
  CLASS_DimensionTolerance: TGUID = '{3C9A6D24-AA35-480F-B20E-86E868A55A60}';
  CLASS_CommentFolder: TGUID = '{F9CB3678-7605-481B-BDE9-7962184B3C18}';
  CLASS_Comment: TGUID = '{47D95FD6-85AD-4DD4-9CB8-598DABC68C88}';
  CLASS_Animation: TGUID = '{37E2A1FC-953E-4383-B190-DDB09E06096E}';
  CLASS_ImportIgesData: TGUID = '{EA5CD784-08D9-492E-8455-1D39C6720631}';
  CLASS_TableAnchor: TGUID = '{3B6E83F4-E4E5-4378-88A4-385A43E0DF71}';
  CLASS_PropertyManagerPageSlider: TGUID = '{BDEF2EB0-0CCE-4074-BDD5-017FE6F54DC8}';
  CLASS_MateLoadReference: TGUID = '{C0E2527F-34B4-4497-8469-3267CCD64A65}';
  CLASS_SketchBlockDefinition: TGUID = '{001EA3C7-4FA3-488E-9288-B77493949302}';
  CLASS_SketchBlockInstance: TGUID = '{460C8A97-F80F-40EF-9413-AEA12AAD49E8}';
  CLASS_UserProgressBar: TGUID = '{6F70FAC3-CE70-4041-B626-6B219F6CFD1D}';
  CLASS_DragArrowManipulator: TGUID = '{D1F4E2F1-D7DB-46B5-8630-410396A86497}';
  CLASS_MoveFaceFeatureData: TGUID = '{43A71FBA-D8A8-4D33-A5D7-12CF1F6A483F}';
  CLASS_HealEdgesFeatureData: TGUID = '{E37BDC96-2B2F-45C3-B905-167387B4BD66}';
  CLASS_WeldmentCutListAnnotation: TGUID = '{72689891-49C6-4F9F-BE07-2A16074A9B34}';
  CLASS_WeldmentCutListFeature: TGUID = '{1B6433F7-8434-494C-90AF-A3E9C5321C6D}';
  CLASS_ModelWindow: TGUID = '{E0D6233D-670F-4922-988F-814EABC8D22B}';
  DIID_DMouseEvents: TGUID = '{5266B813-FB5F-4831-AED1-A60AB431994A}';
  CLASS_Mouse: TGUID = '{C2FB44A9-9E38-449C-A84A-A3237B139FF5}';
  CLASS_ImportDxfDwgData: TGUID = '{D1921253-7FEF-42D9-B4D0-0BC46734AE23}';
  CLASS_InterferenceDetectionMgr: TGUID = '{0D82D71B-8C8C-4833-AEF8-3B4B05E01053}';
  CLASS_Interference: TGUID = '{DA88E85D-EBC5-4ED3-8D2B-DEE14ADF2F05}';
  CLASS_SplineHandle: TGUID = '{155B2D9E-5D63-4571-87CE-086DE4A5341D}';
  CLASS_SectionViewData: TGUID = '{2953A9B1-B272-48FA-932D-75A0ABC98698}';
  CLASS_MaterialVisualPropertiesData: TGUID = '{A53E3BD4-6F50-4407-8D41-40CEFA466434}';
  IID_IPropertyManagerPageBitmap: TGUID = '{363F31C7-54C0-4D22-AFC3-E82FD482CAF6}';
  CLASS_PropertyManagerPageBitmap: TGUID = '{F387861D-261D-4BE4-8CEF-E56BF12FFD03}';
  CLASS_ExportPdfData: TGUID = '{3881C638-0401-4D74-B705-5E69CDDD4BF7}';
  CLASS_Print3DDialog: TGUID = '{B58F1AF0-AAEF-4C4B-A058-4BE092D2D4A6}';
  CLASS_SilhouetteEdge: TGUID = '{9B004641-2E0A-46A7-9C6F-18E2BEE8960C}';
  CLASS_AnnotationView: TGUID = '{C7956DC8-0EC1-44D3-92DD-C0AEA9F9F5BA}';
  CLASS_DerivedPartFeatureData: TGUID = '{8BF722B2-6470-4EE4-99CA-92979B52F7D9}';
  CLASS_Measure: TGUID = '{5ED32255-5AF4-4A9C-9CCA-1AD7C330DCE1}';
  CLASS_ImportStepData: TGUID = '{87254726-68D1-4930-A25B-D0B8EEFBB202}';
  CLASS_SketchPicture: TGUID = '{297B60C7-C169-4812-BCD2-2C13A2AE20E3}';
  CLASS_SketchPath: TGUID = '{A123688D-775A-496B-924D-535EEB508289}';
  CLASS_Decal: TGUID = '{D7882BE7-2248-4D94-A360-2FB5F844918D}';
  CLASS_FaceDecalProperties: TGUID = '{881D57B6-5BF1-4A01-8E08-6DD0D805E06D}';
  CLASS_RenderMaterial: TGUID = '{4434D3C8-11BD-4C32-93B4-1794741C59EB}';
  CLASS_CommandTab: TGUID = '{44C96FE4-754B-4593-AB83-1358CC9DB67B}';
  CLASS_CommandTabBox: TGUID = '{DC032189-BD5D-49BE-B599-6563922F05EA}';
  CLASS_HoleSeriesFeatureData: TGUID = '{7DB64C86-0A66-4FB5-8E93-4A1B7D4823DC}';
  CLASS_JournalManager: TGUID = '{12E5ED6C-0A74-4A9B-B780-4C6BD6E9530C}';
  CLASS_DocumentSpecification: TGUID = '{592EEB91-01E3-4558-ADA5-9CD3C18C8FFB}';
  CLASS_SimulationForceFeatureData: TGUID = '{5675ADA4-ECE7-427B-AAC0-06ABA767A46A}';
  CLASS_TreeControlItem: TGUID = '{C87A625C-6DEE-4339-B7E1-0D87D1352018}';
type

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
  ISldWorks = interface;
  ISldWorksDisp = dispinterface;
  IModelDoc = interface;
  IModelDocDisp = dispinterface;
  ISelectionMgr = interface;
  ISelectionMgrDisp = dispinterface;
  IComponent = interface;
  IComponentDisp = dispinterface;
  IBody = interface;
  IBodyDisp = dispinterface;
  IFace = interface;
  IFaceDisp = dispinterface;
  ISurface = interface;
  ISurfaceDisp = dispinterface;
  ICurve = interface;
  ICurveDisp = dispinterface;
  IBody2 = interface;
  IBody2Disp = dispinterface;
  IFace2 = interface;
  IFace2Disp = dispinterface;
  IEdge = interface;
  IEdgeDisp = dispinterface;
  IEnumCoEdges = interface;
  ICoEdge = interface;
  ICoEdgeDisp = dispinterface;
  ILoop = interface;
  ILoopDisp = dispinterface;
  IEnumEdges = interface;
  ILoop2 = interface;
  ILoop2Disp = dispinterface;
  IVertex = interface;
  IVertexDisp = dispinterface;
  IModelDoc2 = interface;
  IModelDoc2Disp = dispinterface;
  IModelView = interface;
  IModelViewDisp = dispinterface;
  IMathTransform = interface;
  IMathTransformDisp = dispinterface;
  IMathVector = interface;
  IMathVectorDisp = dispinterface;
  IMathPoint = interface;
  IMathPointDisp = dispinterface;
  ICamera = interface;
  ICameraDisp = dispinterface;
  IMouse = interface;
  IMouseDisp = dispinterface;
  ISketch = interface;
  ISketchDisp = dispinterface;
  IEnumSketchPoints = interface;
  ISketchPoint = interface;
  ISketchPointDisp = dispinterface;
  ICallout = interface;
  ICalloutDisp = dispinterface;
  ISketchRelation = interface;
  ISketchRelationDisp = dispinterface;
  ISelectData = interface;
  ISelectDataDisp = dispinterface;
  IView = interface;
  IViewDisp = dispinterface;
  INote = interface;
  INoteDisp = dispinterface;
  ITextFormat = interface;
  ITextFormatDisp = dispinterface;
  IAnnotation = interface;
  IAnnotationDisp = dispinterface;
  IDisplayData = interface;
  IDisplayDataDisp = dispinterface;
  IAnnotationView = interface;
  IAnnotationViewDisp = dispinterface;
  IMultiJogLeader = interface;
  IMultiJogLeaderDisp = dispinterface;
  IBalloonStack = interface;
  IBalloonStackDisp = dispinterface;
  IGtol = interface;
  IGtolDisp = dispinterface;
  ISFSymbol = interface;
  ISFSymbolDisp = dispinterface;
  IDatumTag = interface;
  IDatumTagDisp = dispinterface;
  IDatumTargetSym = interface;
  IDatumTargetSymDisp = dispinterface;
  IWeldSymbol = interface;
  IWeldSymbolDisp = dispinterface;
  ICThread = interface;
  ICThreadDisp = dispinterface;
  IDisplayDimension = interface;
  IDisplayDimensionDisp = dispinterface;
  IDimension = interface;
  IDimensionDisp = dispinterface;
  IFeature = interface;
  IFeatureDisp = dispinterface;
  IEnumDisplayDimensions = interface;
  IComponent2 = interface;
  IComponent2Disp = dispinterface;
  IEnumBodies2 = interface;
  IAttributeDef = interface;
  IAttributeDefDisp = dispinterface;
  IEntity = interface;
  IEntityDisp = dispinterface;
  IAttribute = interface;
  IAttributeDisp = dispinterface;
  IParameter = interface;
  IParameterDisp = dispinterface;
  IDrawingComponent = interface;
  IDrawingComponentDisp = dispinterface;
  ITexture = interface;
  ITextureDisp = dispinterface;
  IDecal = interface;
  IDecalDisp = dispinterface;
  IRenderMaterial = interface;
  IRenderMaterialDisp = dispinterface;
  ICustomPropertyManager = interface;
  ICustomPropertyManagerDisp = dispinterface;
  IComment = interface;
  ICommentDisp = dispinterface;
  IDimensionTolerance = interface;
  IDimensionToleranceDisp = dispinterface;
  IBomTable = interface;
  IBomTableDisp = dispinterface;
  ICustomSymbol = interface;
  ICustomSymbolDisp = dispinterface;
  IDrSection = interface;
  IDrSectionDisp = dispinterface;
  IEnumComponents = interface;
  IEnumComponents2 = interface;
  IEnumDrSections = interface;
  IDetailCircle = interface;
  IDetailCircleDisp = dispinterface;
  ISketchSegment = interface;
  ISketchSegmentDisp = dispinterface;
  ISketchPath = interface;
  ISketchPathDisp = dispinterface;
  IProjectionArrow = interface;
  IProjectionArrowDisp = dispinterface;
  IDowelSymbol = interface;
  IDowelSymbolDisp = dispinterface;
  IBlockInstance = interface;
  IBlockInstanceDisp = dispinterface;
  IBlockDefinition = interface;
  IBlockDefinitionDisp = dispinterface;
  IBreakLine = interface;
  IBreakLineDisp = dispinterface;
  IFaceHatch = interface;
  IFaceHatchDisp = dispinterface;
  ICenterMark = interface;
  ICenterMarkDisp = dispinterface;
  ICenterLine = interface;
  ICenterLineDisp = dispinterface;
  ITableAnnotation = interface;
  ITableAnnotationDisp = dispinterface;
  IGeneralTableFeature = interface;
  IGeneralTableFeatureDisp = dispinterface;
  IHoleTableAnnotation = interface;
  IHoleTableAnnotationDisp = dispinterface;
  IHoleTable = interface;
  IHoleTableDisp = dispinterface;
  IDatumOrigin = interface;
  IDatumOriginDisp = dispinterface;
  IBomTableAnnotation = interface;
  IBomTableAnnotationDisp = dispinterface;
  IBomFeature = interface;
  IBomFeatureDisp = dispinterface;
  IWeldBead = interface;
  IWeldBeadDisp = dispinterface;
  ISheet = interface;
  ISheetDisp = dispinterface;
  IPageSetup = interface;
  IPageSetupDisp = dispinterface;
  IRevisionTableAnnotation = interface;
  IRevisionTableAnnotationDisp = dispinterface;
  IRevisionTableFeature = interface;
  IRevisionTableFeatureDisp = dispinterface;
  ITableAnchor = interface;
  ITableAnchorDisp = dispinterface;
  IWeldmentCutListAnnotation = interface;
  IWeldmentCutListAnnotationDisp = dispinterface;
  IWeldmentCutListFeature = interface;
  IWeldmentCutListFeatureDisp = dispinterface;
  IEnumSketchSegments = interface;
  IEnumSketchHatches = interface;
  ISketchHatch = interface;
  ISketchHatchDisp = dispinterface;
  ISketchRelationManager = interface;
  ISketchRelationManagerDisp = dispinterface;
  ISketchBlockInstance = interface;
  ISketchBlockInstanceDisp = dispinterface;
  ISketchBlockDefinition = interface;
  ISketchBlockDefinitionDisp = dispinterface;
  ISketchPicture = interface;
  ISketchPictureDisp = dispinterface;
  IMidSurface2 = interface;
  IMidSurface2Disp = dispinterface;
  IFeatMgrView = interface;
  IFeatMgrViewDisp = dispinterface;
  IConfiguration = interface;
  IConfigurationDisp = dispinterface;
  IExplodeStep = interface;
  IExplodeStepDisp = dispinterface;
  IReferenceCurve = interface;
  IReferenceCurveDisp = dispinterface;
  IColorTable = interface;
  IColorTableDisp = dispinterface;
  IEnumModelViews = interface;
  IDetailingDefaults = interface;
  IDetailingDefaultsDisp = dispinterface;
  ILayerMgr = interface;
  ILayerMgrDisp = dispinterface;
  ILayer = interface;
  ILayerDisp = dispinterface;
  IDesignTable = interface;
  IDesignTableDisp = dispinterface;
  IRefPlane = interface;
  IRefPlaneDisp = dispinterface;
  IPropertyManagerPage = interface;
  IPropertyManagerPageDisp = dispinterface;
  IUserUnit = interface;
  IUserUnitDisp = dispinterface;
  ISketchText = interface;
  ISketchTextDisp = dispinterface;
  IEquationMgr = interface;
  IEquationMgrDisp = dispinterface;
  IFeatureManager = interface;
  IFeatureManagerDisp = dispinterface;
  ICustomBendAllowance = interface;
  ICustomBendAllowanceDisp = dispinterface;
  ITreeControlItem = interface;
  ITreeControlItemDisp = dispinterface;
  IModelViewManager = interface;
  IModelViewManagerDisp = dispinterface;
  IManipulator = interface;
  IManipulatorDisp = dispinterface;
  ISectionViewData = interface;
  ISectionViewDataDisp = dispinterface;
  IModelDocExtension = interface;
  IModelDocExtensionDisp = dispinterface;
  IMassProperty = interface;
  IMassPropertyDisp = dispinterface;
  ISwOLEObject = interface;
  ISwOLEObjectDisp = dispinterface;
  IPrint3DDialog = interface;
  IPrint3DDialogDisp = dispinterface;
  IMeasure = interface;
  IMeasureDisp = dispinterface;
  IConfigurationManager = interface;
  IConfigurationManagerDisp = dispinterface;
  ISketchManager = interface;
  ISketchManagerDisp = dispinterface;
  IFaultEntity = interface;
  IFaultEntityDisp = dispinterface;
  IEnumLoops2 = interface;
  IFaceDecalProperties = interface;
  IFaceDecalPropertiesDisp = dispinterface;
  IEnumFaces2 = interface;
  IPartDoc = interface;
  IPartDocDisp = dispinterface;
  IEnumBodies = interface;
  IMaterialVisualPropertiesData = interface;
  IMaterialVisualPropertiesDataDisp = dispinterface;
  ITessellation = interface;
  ITessellationDisp = dispinterface;
  IDiagnoseResult = interface;
  IDiagnoseResultDisp = dispinterface;
  IEnumLoops = interface;
  IEnumFaces = interface;
  IMidSurface = interface;
  IMidSurfaceDisp = dispinterface;
  IFrame = interface;
  IFrameDisp = dispinterface;
  IStatusBarPane = interface;
  IStatusBarPaneDisp = dispinterface;
  IModelWindow = interface;
  IModelWindowDisp = dispinterface;
  IAssemblyDoc = interface;
  IAssemblyDocDisp = dispinterface;
  IMember = interface;
  IMemberDisp = dispinterface;
  IDragOperator = interface;
  IDragOperatorDisp = dispinterface;
  IMate2 = interface;
  IMate2Disp = dispinterface;
  IMateEntity2 = interface;
  IMateEntity2Disp = dispinterface;
  IMateLoadReference = interface;
  IMateLoadReferenceDisp = dispinterface;
  ISimulation = interface;
  ISimulationDisp = dispinterface;
  IAnimation = interface;
  IAnimationDisp = dispinterface;
  IAdvancedSelectionCriteria = interface;
  IAdvancedSelectionCriteriaDisp = dispinterface;
  IInterferenceDetectionMgr = interface;
  IInterferenceDetectionMgrDisp = dispinterface;
  IInterference = interface;
  IInterferenceDisp = dispinterface;
  IDrawingDoc = interface;
  IDrawingDocDisp = dispinterface;
  IModeler = interface;
  IModelerDisp = dispinterface;
  ISpring = interface;
  ISpringDisp = dispinterface;
  IEnvironment = interface;
  IEnvironmentDisp = dispinterface;
  IEnumDocuments = interface;
  IMathUtility = interface;
  IMathUtilityDisp = dispinterface;
  IEnumDocuments2 = interface;
  IPropertyManagerPage2 = interface;
  IPropertyManagerPage2Disp = dispinterface;
  IPropertyManagerPageGroup = interface;
  IPropertyManagerPageGroupDisp = dispinterface;
  IPropertyManagerPageControl = interface;
  IPropertyManagerPageControlDisp = dispinterface;
  IPropertyManagerPageTab = interface;
  IPropertyManagerPageTabDisp = dispinterface;
  ITaskpaneView = interface;
  ITaskpaneViewDisp = dispinterface;
  IPtnrPMPage = interface;
  IPtnrPMPageDisp = dispinterface;
  ICommandManager = interface;
  ICommandManagerDisp = dispinterface;
  ICommandGroup = interface;
  ICommandGroupDisp = dispinterface;
  ICommandTab = interface;
  ICommandTabDisp = dispinterface;
  ICommandTabBox = interface;
  ICommandTabBoxDisp = dispinterface;
  IUserProgressBar = interface;
  IUserProgressBarDisp = dispinterface;
  IJournalManager = interface;
  IJournalManagerDisp = dispinterface;
  IRefPoint = interface;
  IRefPointDisp = dispinterface;
  IRefAxis = interface;
  IRefAxisDisp = dispinterface;
  IMate = interface;
  IMateDisp = dispinterface;
  IMateEntity = interface;
  IMateEntityDisp = dispinterface;
  ISWPropertySheet = interface;
  ISWPropertySheetDisp = dispinterface;
  IRibFeatureData = interface;
  IRibFeatureDataDisp = dispinterface;
  IDomeFeatureData = interface;
  IDomeFeatureDataDisp = dispinterface;
  ISketchLine = interface;
  ISketchLineDisp = dispinterface;
  ISketchArc = interface;
  ISketchArcDisp = dispinterface;
  ISketchEllipse = interface;
  ISketchEllipseDisp = dispinterface;
  ISketchParabola = interface;
  ISketchParabolaDisp = dispinterface;
  ISketchSpline = interface;
  ISketchSplineDisp = dispinterface;
  ISplineHandle = interface;
  ISplineHandleDisp = dispinterface;
  ILightDialog = interface;
  ILightDialogDisp = dispinterface;
  IEnumCurves = interface;
  ISimpleHoleFeatureData = interface;
  ISimpleHoleFeatureDataDisp = dispinterface;
  IWizardHoleFeatureData = interface;
  IWizardHoleFeatureDataDisp = dispinterface;
  IHoleSeriesFeatureData = interface;
  IHoleSeriesFeatureDataDisp = dispinterface;
  IChamferFeatureData = interface;
  IChamferFeatureDataDisp = dispinterface;
  IDraftFeatureData = interface;
  IDraftFeatureDataDisp = dispinterface;
  ISimpleFilletFeatureData = interface;
  ISimpleFilletFeatureDataDisp = dispinterface;
  IVariableFilletFeatureData = interface;
  IVariableFilletFeatureDataDisp = dispinterface;
  IExtrudeFeatureData = interface;
  IExtrudeFeatureDataDisp = dispinterface;
  IRevolveFeatureData = interface;
  IRevolveFeatureDataDisp = dispinterface;
  IMirrorPatternFeatureData = interface;
  IMirrorPatternFeatureDataDisp = dispinterface;
  ICircularPatternFeatureData = interface;
  ICircularPatternFeatureDataDisp = dispinterface;
  ILinearPatternFeatureData = interface;
  ILinearPatternFeatureDataDisp = dispinterface;
  ITablePatternFeatureData = interface;
  ITablePatternFeatureDataDisp = dispinterface;
  ISketchPatternFeatureData = interface;
  ISketchPatternFeatureDataDisp = dispinterface;
  IMirrorSolidFeatureData = interface;
  IMirrorSolidFeatureDataDisp = dispinterface;
  ISheetMetalFeatureData = interface;
  ISheetMetalFeatureDataDisp = dispinterface;
  IOneBendFeatureData = interface;
  IOneBendFeatureDataDisp = dispinterface;
  IBendsFeatureData = interface;
  IBendsFeatureDataDisp = dispinterface;
  IBaseFlangeFeatureData = interface;
  IBaseFlangeFeatureDataDisp = dispinterface;
  IEdgeFlangeFeatureData = interface;
  IEdgeFlangeFeatureDataDisp = dispinterface;
  IMiterFlangeFeatureData = interface;
  IMiterFlangeFeatureDataDisp = dispinterface;
  ISketchedBendFeatureData = interface;
  ISketchedBendFeatureDataDisp = dispinterface;
  IClosedCornerFeatureData = interface;
  IClosedCornerFeatureDataDisp = dispinterface;
  IFoldsFeatureData = interface;
  IFoldsFeatureDataDisp = dispinterface;
  IFlatPatternFeatureData = interface;
  IFlatPatternFeatureDataDisp = dispinterface;
  ILocalLinearPatternFeatureData = interface;
  ILocalLinearPatternFeatureDataDisp = dispinterface;
  ILocalCircularPatternFeatureData = interface;
  ILocalCircularPatternFeatureDataDisp = dispinterface;
  IDerivedPatternFeatureData = interface;
  IDerivedPatternFeatureDataDisp = dispinterface;
  IPropertyManagerPageLabel = interface;
  IPropertyManagerPageLabelDisp = dispinterface;
  IPropertyManagerPageCheckbox = interface;
  IPropertyManagerPageCheckboxDisp = dispinterface;
  IPropertyManagerPageButton = interface;
  IPropertyManagerPageButtonDisp = dispinterface;
  IPropertyManagerPageOption = interface;
  IPropertyManagerPageOptionDisp = dispinterface;
  IPropertyManagerPageTextbox = interface;
  IPropertyManagerPageTextboxDisp = dispinterface;
  IPropertyManagerPageCombobox = interface;
  IPropertyManagerPageComboboxDisp = dispinterface;
  IPropertyManagerPageActiveX = interface;
  IPropertyManagerPageActiveXDisp = dispinterface;
  IPropertyManagerPageBitmapButton = interface;
  IPropertyManagerPageBitmapButtonDisp = dispinterface;
  IProjectionCurveFeatureData = interface;
  IProjectionCurveFeatureDataDisp = dispinterface;
  IScaleFeatureData = interface;
  IScaleFeatureDataDisp = dispinterface;
  IShellFeatureData = interface;
  IShellFeatureDataDisp = dispinterface;
  ISweepFeatureData = interface;
  ISweepFeatureDataDisp = dispinterface;
  ILoftFeatureData = interface;
  ILoftFeatureDataDisp = dispinterface;
  IThickenFeatureData = interface;
  IThickenFeatureDataDisp = dispinterface;
  ISurfaceCutFeatureData = interface;
  ISurfaceCutFeatureDataDisp = dispinterface;
  IReplaceFaceFeatureData = interface;
  IReplaceFaceFeatureDataDisp = dispinterface;
  IMacroFeatureData = interface;
  IMacroFeatureDataDisp = dispinterface;
  ICurveDrivenPatternFeatureData = interface;
  ICurveDrivenPatternFeatureDataDisp = dispinterface;
  IRipFeatureData = interface;
  IRipFeatureDataDisp = dispinterface;
  IHemFeatureData = interface;
  IHemFeatureDataDisp = dispinterface;
  IBreakCornerFeatureData = interface;
  IBreakCornerFeatureDataDisp = dispinterface;
  IJogFeatureData = interface;
  IJogFeatureDataDisp = dispinterface;
  ISurfExtrudeFeatureData = interface;
  ISurfExtrudeFeatureDataDisp = dispinterface;
  ISurfRevolveFeatureData = interface;
  ISurfRevolveFeatureDataDisp = dispinterface;
  ISurfaceOffsetFeatureData = interface;
  ISurfaceOffsetFeatureDataDisp = dispinterface;
  ISurfaceKnitFeatureData = interface;
  ISurfaceKnitFeatureDataDisp = dispinterface;
  ISurfaceExtendFeatureData = interface;
  ISurfaceExtendFeatureDataDisp = dispinterface;
  ISurfacePlanarFeatureData = interface;
  ISurfacePlanarFeatureDataDisp = dispinterface;
  ISurfaceTrimFeatureData = interface;
  ISurfaceTrimFeatureDataDisp = dispinterface;
  ISurfaceRadiateFeatureData = interface;
  ISurfaceRadiateFeatureDataDisp = dispinterface;
  IRefPlaneFeatureData = interface;
  IRefPlaneFeatureDataDisp = dispinterface;
  IRefPointFeatureData = interface;
  IRefPointFeatureDataDisp = dispinterface;
  IRuledSurfaceFeatureData = interface;
  IRuledSurfaceFeatureDataDisp = dispinterface;
  ICavityFeatureData = interface;
  ICavityFeatureDataDisp = dispinterface;
  ILoftedBendsFeatureData = interface;
  ILoftedBendsFeatureDataDisp = dispinterface;
  IReferencePointCurveFeatureData = interface;
  IReferencePointCurveFeatureDataDisp = dispinterface;
  IFreePointCurveFeatureData = interface;
  IFreePointCurveFeatureDataDisp = dispinterface;
  ICompositeCurveFeatureData = interface;
  ICompositeCurveFeatureDataDisp = dispinterface;
  IHelixFeatureData = interface;
  IHelixFeatureDataDisp = dispinterface;
  IImportedCurveFeatureData = interface;
  IImportedCurveFeatureDataDisp = dispinterface;
  ICosmeticThreadFeatureData = interface;
  ICosmeticThreadFeatureDataDisp = dispinterface;
  ISketchRegion = interface;
  ISketchRegionDisp = dispinterface;
  ISketchContour = interface;
  ISketchContourDisp = dispinterface;
  IMateInPlace = interface;
  IMateInPlaceDisp = dispinterface;
  IRefAxisFeatureData = interface;
  IRefAxisFeatureDataDisp = dispinterface;
  IEdgePoint = interface;
  IEdgePointDisp = dispinterface;
  IMateReference = interface;
  IMateReferenceDisp = dispinterface;
  IPartingLineFeatureData = interface;
  IPartingLineFeatureDataDisp = dispinterface;
  IPartingSurfaceFeatureData = interface;
  IPartingSurfaceFeatureDataDisp = dispinterface;
  IDeleteBodyFeatureData = interface;
  IDeleteBodyFeatureDataDisp = dispinterface;
  IShutOffSurfaceFeatureData = interface;
  IShutOffSurfaceFeatureDataDisp = dispinterface;
  IToolingSplitFeatureData = interface;
  IToolingSplitFeatureDataDisp = dispinterface;
  ISplitBodyFeatureData = interface;
  ISplitBodyFeatureDataDisp = dispinterface;
  ITriadManipulator = interface;
  ITriadManipulatorDisp = dispinterface;
  IJoinFeatureData = interface;
  IJoinFeatureDataDisp = dispinterface;
  IFillSurfaceFeatureData = interface;
  IFillSurfaceFeatureDataDisp = dispinterface;
  IMoveCopyBodyFeatureData = interface;
  IMoveCopyBodyFeatureDataDisp = dispinterface;
  ISplitLineFeatureData = interface;
  ISplitLineFeatureDataDisp = dispinterface;
  IWrapSketchFeatureData = interface;
  IWrapSketchFeatureDataDisp = dispinterface;
  IStructuralMemberFeatureData = interface;
  IStructuralMemberFeatureDataDisp = dispinterface;
  IEndCapFeatureData = interface;
  IEndCapFeatureDataDisp = dispinterface;
  IGussetFeatureData = interface;
  IGussetFeatureDataDisp = dispinterface;
  ICombineBodiesFeatureData = interface;
  ICombineBodiesFeatureDataDisp = dispinterface;
  ILibraryFeatureData = interface;
  ILibraryFeatureDataDisp = dispinterface;
  ISimulationGravityFeatureData = interface;
  ISimulationGravityFeatureDataDisp = dispinterface;
  ISimulationMotorFeatureData = interface;
  ISimulationMotorFeatureDataDisp = dispinterface;
  ISimulationLinearSpringFeatureData = interface;
  ISimulationLinearSpringFeatureDataDisp = dispinterface;
  IWeldmentTrimExtendFeatureData = interface;
  IWeldmentTrimExtendFeatureDataDisp = dispinterface;
  IWeldmentBeadFeatureData = interface;
  IWeldmentBeadFeatureDataDisp = dispinterface;
  IBodyFolder = interface;
  IBodyFolderDisp = dispinterface;
  ICoreFeatureData = interface;
  ICoreFeatureDataDisp = dispinterface;
  ICommentFolder = interface;
  ICommentFolderDisp = dispinterface;
  IImportIgesData = interface;
  IImportIgesDataDisp = dispinterface;
  IImportDxfDwgData = interface;
  IImportDxfDwgDataDisp = dispinterface;
  IImportStepData = interface;
  IImportStepDataDisp = dispinterface;
  IExportPdfData = interface;
  IExportPdfDataDisp = dispinterface;
  IPropertyManagerPageSlider = interface;
  IPropertyManagerPageSliderDisp = dispinterface;
  IDragArrowManipulator = interface;
  IDragArrowManipulatorDisp = dispinterface;
  IMoveFaceFeatureData = interface;
  IMoveFaceFeatureDataDisp = dispinterface;
  IHealEdgesFeatureData = interface;
  IHealEdgesFeatureDataDisp = dispinterface;
  ISilhouetteEdge = interface;
  ISilhouetteEdgeDisp = dispinterface;
  IDerivedPartFeatureData = interface;
  IDerivedPartFeatureDataDisp = dispinterface;
  IDocumentSpecification = interface;
  IDocumentSpecificationDisp = dispinterface;
  ISimulationForceFeatureData = interface;
  ISimulationForceFeatureDataDisp = dispinterface;
  DSldWorksEvents = dispinterface;
  DPartDocEvents = dispinterface;
  DDrawingDocEvents = dispinterface;
  DAssemblyDocEvents = dispinterface;
  DModelViewEvents = dispinterface;
  DFeatMgrViewEvents = dispinterface;
  DSWPropertySheetEvents = dispinterface;
  ISdmDoc = dispinterface;
  IPropertyManagerPageListbox = interface;
  IPropertyManagerPageListboxDisp = dispinterface;
  IPropertyManagerPageNumberbox = interface;
  IPropertyManagerPageNumberboxDisp = dispinterface;
  IPropertyManagerPageSelectionbox = interface;
  IPropertyManagerPageSelectionboxDisp = dispinterface;
  IRibFeatureData2 = interface;
  IRibFeatureData2Disp = dispinterface;
  IDomeFeatureData2 = interface;
  IDomeFeatureData2Disp = dispinterface;
  ISimpleHoleFeatureData2 = interface;
  ISimpleHoleFeatureData2Disp = dispinterface;
  IWizardHoleFeatureData2 = interface;
  IWizardHoleFeatureData2Disp = dispinterface;
  IChamferFeatureData2 = interface;
  IChamferFeatureData2Disp = dispinterface;
  IDraftFeatureData2 = interface;
  IDraftFeatureData2Disp = dispinterface;
  ISimpleFilletFeatureData2 = interface;
  ISimpleFilletFeatureData2Disp = dispinterface;
  IVariableFilletFeatureData2 = interface;
  IVariableFilletFeatureData2Disp = dispinterface;
  IExtrudeFeatureData2 = interface;
  IExtrudeFeatureData2Disp = dispinterface;
  IRevolveFeatureData2 = interface;
  IRevolveFeatureData2Disp = dispinterface;
  ILight = interface;
  ILightDisp = dispinterface;
  DTaskpaneViewEvents = dispinterface;
  DMouseEvents = dispinterface;
  IPropertyManagerPageBitmap = interface;
  IPropertyManagerPageBitmapDisp = dispinterface;

// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
// *********************************************************************//
  SldWorks_ = ISldWorks;
  PartDoc = IPartDoc;
  DrawingDoc = IDrawingDoc;
  AssemblyDoc = IAssemblyDoc;
  Feature = IFeature;
  Dimension = IDimension;
  Body = IBody;
  Face = IFace;
  Surface = ISurface;
  Edge = IEdge;
  Curve = ICurve;
  ModelDoc = IModelDoc;
  Frame = IFrame;
  Gtol = IGtol;
  ModelView = IModelView;
  Member = IMember;
  View = IView;
  Sketch = ISketch;
  Loop = ILoop;
  Note = INote;
  CoEdge = ICoEdge;
  Vertex = IVertex;
  SelectionMgr = ISelectionMgr;
  EnumFaces = IEnumFaces;
  EnumFaces2 = IEnumFaces2;
  EnumLoops = IEnumLoops;
  EnumLoops2 = IEnumLoops2;
  EnumEdges = IEnumEdges;
  EnumCoEdges = IEnumCoEdges;
  EnumBodies = IEnumBodies;
  EnumBodies2 = IEnumBodies2;
  Entity = IEntity;
  AttributeDef = IAttributeDef;
  Parameter = IParameter;
  Attribute = IAttribute;
  Modeler = IModeler;
  FeatMgrView = IFeatMgrView;
  Environment = IEnvironment;
  Sheet = ISheet;
  BomTable = IBomTable;
  RefPlane = IRefPlane;
  RefAxis = IRefAxis;
  MidSurface = IMidSurface;
  Mate = IMate;
  MateEntity = IMateEntity;
  SFSymbol = ISFSymbol;
  DatumTag = IDatumTag;
  DatumTargetSym = IDatumTargetSym;
  WeldSymbol = IWeldSymbol;
  Configuration = IConfiguration;
  Component = IComponent;
  DisplayData = IDisplayData;
  CThread = ICThread;
  DisplayDimension = IDisplayDimension;
  ReferenceCurve = IReferenceCurve;
  ColorTable = IColorTable;
  SWPropertySheet = ISWPropertySheet;
  Annotation = IAnnotation;
  EnumDisplayDimensions = IEnumDisplayDimensions;
  RibFeatureData = IRibFeatureData;
  DomeFeatureData = IDomeFeatureData;
  EnumModelViews = IEnumModelViews;
  EnumDocuments = IEnumDocuments;
  EnumDocuments2 = IEnumDocuments2;
  CustomSymbol = ICustomSymbol;
  DetailingDefaults = IDetailingDefaults;
  TextFormat = ITextFormat;
  SketchPoint = ISketchPoint;
  SketchSegment = ISketchSegment;
  SketchLine = ISketchLine;
  SketchArc = ISketchArc;
  SketchText = ISketchText;
  SketchEllipse = ISketchEllipse;
  SketchParabola = ISketchParabola;
  SketchSpline = ISketchSpline;
  EnumSketchPoints = IEnumSketchPoints;
  EnumSketchSegments = IEnumSketchSegments;
  LightDialog = ILightDialog;
  Layer = ILayer;
  LayerMgr = ILayerMgr;
  DesignTable = IDesignTable;
  SketchHatch = ISketchHatch;
  EnumSketchHatches = IEnumSketchHatches;
  EnumCurves = IEnumCurves;
  SimpleHoleFeatureData = ISimpleHoleFeatureData;
  WizardHoleFeatureData = IWizardHoleFeatureData;
  ChamferFeatureData = IChamferFeatureData;
  DraftFeatureData = IDraftFeatureData;
  SimpleFilletFeatureData = ISimpleFilletFeatureData;
  VariableFilletFeatureData = IVariableFilletFeatureData;
  ExtrudeFeatureData = IExtrudeFeatureData;
  RevolveFeatureData = IRevolveFeatureData;
  SdmDoc = ISdmDoc;
  DrSection = IDrSection;
  EnumComponents = IEnumComponents;
  EnumComponents2 = IEnumComponents2;
  EnumDrSections = IEnumDrSections;
  ExplodeStep = IExplodeStep;
  MathUtility = IMathUtility;
  MathTransform = IMathTransform;
  MathPoint = IMathPoint;
  MathVector = IMathVector;
  MirrorPatternFeatureData = IMirrorPatternFeatureData;
  DetailCircle = IDetailCircle;
  CircularPatternFeatureData = ICircularPatternFeatureData;
  LinearPatternFeatureData = ILinearPatternFeatureData;
  TablePatternFeatureData = ITablePatternFeatureData;
  SketchPatternFeatureData = ISketchPatternFeatureData;
  MirrorSolidFeatureData = IMirrorSolidFeatureData;
  PropertyManagerPage = IPropertyManagerPage;
  ProjectionArrow = IProjectionArrow;
  Tessellation = ITessellation;
  SheetMetalFeatureData = ISheetMetalFeatureData;
  OneBendFeatureData = IOneBendFeatureData;
  BendsFeatureData = IBendsFeatureData;
  UserUnit = IUserUnit;
  BaseFlangeFeatureData = IBaseFlangeFeatureData;
  EdgeFlangeFeatureData = IEdgeFlangeFeatureData;
  MiterFlangeFeatureData = IMiterFlangeFeatureData;
  SketchedBendFeatureData = ISketchedBendFeatureData;
  ClosedCornerFeatureData = IClosedCornerFeatureData;
  FoldsFeatureData = IFoldsFeatureData;
  FlatPatternFeatureData = IFlatPatternFeatureData;
  LocalLinearPatternFeatureData = ILocalLinearPatternFeatureData;
  LocalCircularPatternFeatureData = ILocalCircularPatternFeatureData;
  DerivedPatternFeatureData = IDerivedPatternFeatureData;
  Body2 = IBody2;
  Face2 = IFace2;
  ModelDoc2 = IModelDoc2;
  Loop2 = ILoop2;
  MidSurface2 = IMidSurface2;
  Component2 = IComponent2;
  PropertyManagerPage2 = IPropertyManagerPage2;
  PropertyManagerPageGroup = IPropertyManagerPageGroup;
  PropertyManagerPageControl = IPropertyManagerPageControl;
  PropertyManagerPageLabel = IPropertyManagerPageLabel;
  PropertyManagerPageCheckbox = IPropertyManagerPageCheckbox;
  PropertyManagerPageButton = IPropertyManagerPageButton;
  PropertyManagerPageOption = IPropertyManagerPageOption;
  PropertyManagerPageTextbox = IPropertyManagerPageTextbox;
  PropertyManagerPageListbox = IPropertyManagerPageListbox;
  PropertyManagerPageCombobox = IPropertyManagerPageCombobox;
  PropertyManagerPageNumberbox = IPropertyManagerPageNumberbox;
  PropertyManagerPageSelectionbox = IPropertyManagerPageSelectionbox;
  MultiJogLeader = IMultiJogLeader;
  ProjectionCurveFeatureData = IProjectionCurveFeatureData;
  ScaleFeatureData = IScaleFeatureData;
  ShellFeatureData = IShellFeatureData;
  SweepFeatureData = ISweepFeatureData;
  LoftFeatureData = ILoftFeatureData;
  ThickenFeatureData = IThickenFeatureData;
  SurfCutFeatureData = ISurfaceCutFeatureData;
  ReplaceFaceFeatureData = IReplaceFaceFeatureData;
  RibFeatureData2 = IRibFeatureData2;
  DomeFeatureData2 = IDomeFeatureData2;
  SimpleHoleFeatureData2 = ISimpleHoleFeatureData2;
  WizardHoleFeatureData2 = IWizardHoleFeatureData2;
  ChamferFeatureData2 = IChamferFeatureData2;
  DraftFeatureData2 = IDraftFeatureData2;
  SimpleFilletFeatureData2 = ISimpleFilletFeatureData2;
  VariableFilletFeatureData2 = IVariableFilletFeatureData2;
  ExtrudeFeatureData2 = IExtrudeFeatureData2;
  RevolveFeatureData2 = IRevolveFeatureData2;
  MacroFeatureData = IMacroFeatureData;
  DowelSymbol = IDowelSymbol;
  DragOperator = IDragOperator;
  CurveDrivenPatternFeatureData = ICurveDrivenPatternFeatureData;
  BalloonStack = IBalloonStack;
  StatusBarPane = IStatusBarPane;
  EquationMgr = IEquationMgr;
  PageSetup = IPageSetup;
  RipFeatureData = IRipFeatureData;
  HemFeatureData = IHemFeatureData;
  BreakCornerFeatureData = IBreakCornerFeatureData;
  JogFeatureData = IJogFeatureData;
  SurfExtrudeFeatureData = ISurfExtrudeFeatureData;
  SurfRevolveFeatureData = ISurfRevolveFeatureData;
  SurfaceOffsetFeatureData = ISurfaceOffsetFeatureData;
  SurfaceKnitFeatureData = ISurfaceKnitFeatureData;
  SurfaceExtendFeatureData = ISurfaceExtendFeatureData;
  SurfacePlanarFeatureData = ISurfacePlanarFeatureData;
  CenterMark = ICenterMark;
  SurfaceTrimFeatureData = ISurfaceTrimFeatureData;
  SurfaceRadiateFeatureData = ISurfaceRadiateFeatureData;
  RefPlaneFeatureData = IRefPlaneFeatureData;
  Callout = ICallout;
  CustomBendAllowance = ICustomBendAllowance;
  BlockInstance = IBlockInstance;
  BlockDefinition = IBlockDefinition;
  BreakLine = IBreakLine;
  FaceHatch = IFaceHatch;
  PropertyManagerPageActiveX = IPropertyManagerPageActiveX;
  LoftedBendsFeatureData = ILoftedBendsFeatureData;
  FeatureManager = IFeatureManager;
  ModelViewManager = IModelViewManager;
  ModelDocExtension = IModelDocExtension;
  ConfigurationManager = IConfigurationManager;
  CosmeticThreadFeatureData = ICosmeticThreadFeatureData;
  CenterLine = ICenterLine;
  ReferencePointCurveFeatureData = IReferencePointCurveFeatureData;
  FreePointCurveFeatureData = IFreePointCurveFeatureData;
  CompositeCurveFeatureData = ICompositeCurveFeatureData;
  HelixFeatureData = IHelixFeatureData;
  ImportedCurveFeatureData = IImportedCurveFeatureData;
  SketchRegion = ISketchRegion;
  SketchContour = ISketchContour;
  MassProperty = IMassProperty;
  DrawingComponent = IDrawingComponent;
  SketchRelationManager = ISketchRelationManager;
  SketchRelation = ISketchRelation;
  Mate2 = IMate2;
  MateEntity2 = IMateEntity2;
  SelectData = ISelectData;
  TableAnnotation = ITableAnnotation;
  HoleTableAnnotation = IHoleTableAnnotation;
  HoleTable = IHoleTable;
  DatumOrigin = IDatumOrigin;
  BomTableAnnotation = IBomTableAnnotation;
  BomFeature = IBomFeature;
  RevisionTableAnnotation = IRevisionTableAnnotation;
  RevisionTableFeature = IRevisionTableFeature;
  MateInPlace = IMateInPlace;
  PropertyManagerPageBitmapButton = IPropertyManagerPageBitmapButton;
  CustomPropertyManager = ICustomPropertyManager;
  Light = ILight;
  RefPointFeatureData = IRefPointFeatureData;
  RefPoint = IRefPoint;
  RefAxisFeatureData = IRefAxisFeatureData;
  EdgePoint = IEdgePoint;
  TaskpaneView = ITaskpaneView;
  Texture = ITexture;
  MateReference = IMateReference;
  PartingLineFeatureData = IPartingLineFeatureData;
  DeleteBodyFeatureData = IDeleteBodyFeatureData;
  PartingSurfaceFeatureData = IPartingSurfaceFeatureData;
  ShutOffSurfaceFeatureData = IShutOffSurfaceFeatureData;
  ToolingSplitFeatureData = IToolingSplitFeatureData;
  PtnrPMPage = IPtnrPMPage;
  JoinFeatureData = IJoinFeatureData;
  Manipulator = IManipulator;
  TriadManipulator = ITriadManipulator;
  FillSurfaceFeatureData = IFillSurfaceFeatureData;
  MoveCopyBodyFeatureData = IMoveCopyBodyFeatureData;
  RuledSurfaceFeatureData = IRuledSurfaceFeatureData;
  CavityFeatureData = ICavityFeatureData;
  WeldBead = IWeldBead;
  SplitLineFeatureData = ISplitLineFeatureData;
  WrapSketchFeatureData = IWrapSketchFeatureData;
  StructuralMemberFeatureData = IStructuralMemberFeatureData;
  EndCapFeatureData = IEndCapFeatureData;
  GussetFeatureData = IGussetFeatureData;
  SplitBodyFeatureData = ISplitBodyFeatureData;
  CombineBodiesFeatureData = ICombineBodiesFeatureData;
  SketchManager = ISketchManager;
  DiagnoseResult = IDiagnoseResult;
  Spring = ISpring;
  FaultEntity = IFaultEntity;
  SwOLEObject = ISwOLEObject;
  LibraryFeatureData = ILibraryFeatureData;
  Simulation = ISimulation;
  SimulationGravityFeatureData = ISimulationGravityFeatureData;
  SimulationMotorFeatureData = ISimulationMotorFeatureData;
  SimulationLinearSpringFeatureData = ISimulationLinearSpringFeatureData;
  Camera = ICamera;
  WeldmentBeadFeatureData = IWeldmentBeadFeatureData;
  WeldmentTrimExtendFeatureData = IWeldmentTrimExtendFeatureData;
  PropertyManagerPageTab = IPropertyManagerPageTab;
  BodyFolder = IBodyFolder;
  CommandManager = ICommandManager;
  CommandGroup = ICommandGroup;
  CoreFeatureData = ICoreFeatureData;
  AdvancedSelectionCriteria = IAdvancedSelectionCriteria;
  GeneralTableFeature = IGeneralTableFeature;
  DimensionTolerance = IDimensionTolerance;
  CommentFolder = ICommentFolder;
  Comment = IComment;
  Animation = IAnimation;
  ImportIgesData = IImportIgesData;
  TableAnchor = ITableAnchor;
  PropertyManagerPageSlider = IPropertyManagerPageSlider;
  MateLoadReference = IMateLoadReference;
  SketchBlockDefinition = ISketchBlockDefinition;
  SketchBlockInstance = ISketchBlockInstance;
  UserProgressBar = IUserProgressBar;
  DragArrowManipulator = IDragArrowManipulator;
  MoveFaceFeatureData = IMoveFaceFeatureData;
  HealEdgesFeatureData = IHealEdgesFeatureData;
  WeldmentCutListAnnotation = IWeldmentCutListAnnotation;
  WeldmentCutListFeature = IWeldmentCutListFeature;
  ModelWindow = IModelWindow;
  Mouse = IMouse;
  ImportDxfDwgData = IImportDxfDwgData;
  InterferenceDetectionMgr = IInterferenceDetectionMgr;
  Interference = IInterference;
  SplineHandle = ISplineHandle;
  SectionViewData = ISectionViewData;
  MaterialVisualPropertiesData = IMaterialVisualPropertiesData;
  PropertyManagerPageBitmap = IPropertyManagerPageBitmap;
  ExportPdfData = IExportPdfData;
  Print3DDialog = IPrint3DDialog;
  SilhouetteEdge = ISilhouetteEdge;
  AnnotationView = IAnnotationView;
  DerivedPartFeatureData = IDerivedPartFeatureData;
  Measure = IMeasure;
  ImportStepData = IImportStepData;
  SketchPicture = ISketchPicture;
  SketchPath = ISketchPath;
  Decal = IDecal;
  FaceDecalProperties = IFaceDecalProperties;
  RenderMaterial = IRenderMaterial;
  CommandTab = ICommandTab;
  CommandTabBox = ICommandTabBox;
  HoleSeriesFeatureData = IHoleSeriesFeatureData;
  JournalManager = IJournalManager;
  DocumentSpecification = IDocumentSpecification;
  SimulationForceFeatureData = ISimulationForceFeatureData;
  TreeControlItem = ITreeControlItem;


// *********************************************************************//
// Declaration of structures, unions and aliases.                         
// *********************************************************************//
  PInteger1 = ^Integer; {*}
  PDouble1 = ^Double; {*}
  PWideString1 = ^WideString; {*}
  PComp1 = ^Int64; {*}
  PPUserType1 = ^ICurve; {*}
  PPPUserType1 = ^PPUserType1; {*}
  PSYSINT1 = ^SYSINT; {*}
  PPUserType2 = ^IBody; {*}
  PWordBool1 = ^WordBool; {*}
  PPUserType3 = ^IComponent; {*}
  PPUserType4 = ^IEdge; {*}
  PPUserType5 = ^IFace; {*}
  PPPUserType2 = ^PPUserType5; {*}
  PIDispatch1 = ^IDispatch; {*}
  PPUserType6 = ^ILoop; {*}
  PPSYSINT1 = ^PSYSINT1; {*}
  PSingle1 = ^Single; {*}
  PPSingle1 = ^PSingle1; {*}
  PPUserType7 = ^IBody2; {*}
  PPUserType8 = ^IFace2; {*}
  PPUserType9 = ^ILoop2; {*}
  PPUserType10 = ^IFaceDecalProperties; {*}
  PPUserType11 = ^IMathPoint; {*}
  PByte1 = ^Byte; {*}
  POleVariant1 = ^OleVariant; {*}
  PPUserType12 = ^IFeature; {*}
  PIUnknown1 = ^IUnknown; {*}
  PPUserType13 = ^IComponent2; {*}
  PPUserType14 = ^ISketchSegment; {*}
  PPUserType15 = ^ISketchPoint; {*}
  PPUserType16 = ^INote; {*}
  PPUserType17 = ^IDisplayDimension; {*}
  PPUserType18 = ^IBlockInstance; {*}
  PPUserType19 = ^ISurface; {*}
  PPUserType20 = ^ICommandGroup; {*}
  PPUserType21 = ^IView; {*}
  PPUserType22 = ^IVertex; {*}


// *********************************************************************//
// Interface: ISldWorks
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D22-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISldWorks = interface(IDispatch)
    ['{83A33D22-27C5-11CE-BFD4-00400513BB57}']
    function Get_ActiveDoc: IDispatch; safecall;
    function Get_IActiveDoc: IModelDoc; safecall;
    function OpenDoc(const Name: WideString; Type_: Integer): IDispatch; safecall;
    function IOpenDoc(const Name: WideString; Type_: Integer): IModelDoc; safecall;
    function ActivateDoc(const Name: WideString): IDispatch; safecall;
    function IActivateDoc(const Name: WideString): IModelDoc; safecall;
    procedure SendMsgToUser(const Message: WideString); safecall;
    function Frame: IDispatch; safecall;
    function IFrameObject: IFrame; safecall;
    procedure ExitApp; safecall;
    procedure CloseDoc(const Name: WideString); safecall;
    function NewPart: IDispatch; safecall;
    function INewPart: IPartDoc; safecall;
    function NewAssembly: IDispatch; safecall;
    function INewAssembly: IAssemblyDoc; safecall;
    function NewDrawing(TemplateToUse: Integer): IDispatch; safecall;
    function INewDrawing(TemplateToUse: Integer): IDrawingDoc; safecall;
    function DateCode: Integer; safecall;
    function RevisionNumber: WideString; safecall;
    function LoadFile(const FileName: WideString): WordBool; safecall;
    function AddFileOpenItem(const CallbackFcnAndModule: WideString; const Description: WideString): WordBool; safecall;
    function AddFileSaveAsItem(const CallbackFcnAndModule: WideString; 
                               const Description: WideString; Type_: Integer): WordBool; safecall;
    procedure PreSelectDwgTemplateSize(TemplateToUse: Integer; const TemplateName: WideString); safecall;
    procedure DocumentVisible(Visible: WordBool; Type_: Integer); safecall;
    function DefineAttribute(const Name: WideString): IDispatch; safecall;
    function IDefineAttribute(const Name: WideString): IAttributeDef; safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(Retval: WordBool); safecall;
    function Get_UserControl: WordBool; safecall;
    procedure Set_UserControl(Retval: WordBool); safecall;
    procedure DisplayStatusBar(OnOff: WordBool); safecall;
    procedure CreateNewWindow; safecall;
    procedure ArrangeIcons; safecall;
    procedure ArrangeWindows(Style: Integer); safecall;
    procedure QuitDoc(const Name: WideString); safecall;
    function GetModeler: IDispatch; safecall;
    function IGetModeler: IModeler; safecall;
    function GetEnvironment: IDispatch; safecall;
    function IGetEnvironment: IEnvironment; safecall;
    function NewDrawing2(TemplateToUse: Integer; const TemplateName: WideString; 
                         PaperSize: Integer; Width: Double; Height: Double): IDispatch; safecall;
    function INewDrawing2(TemplateToUse: Integer; const TemplateName: WideString; 
                          PaperSize: Integer; Width: Double; Height: Double): IDrawingDoc; safecall;
    function SetOptions(const Message: WideString): WordBool; safecall;
    function PreviewDoc(var HWnd: Integer; const FullName: WideString): WordBool; safecall;
    function GetSearchFolders(FolderType: Integer): WideString; safecall;
    function SetSearchFolders(FolderType: Integer; const Folders: WideString): WordBool; safecall;
    function GetUserPreferenceToggle(UserPreferenceToggle: Integer): WordBool; safecall;
    procedure SetUserPreferenceToggle(UserPreferenceValue: Integer; OnFlag: WordBool); safecall;
    function GetUserPreferenceDoubleValue(UserPreferenceValue: Integer): Double; safecall;
    function SetUserPreferenceDoubleValue(UserPreferenceValue: Integer; Value: Double): WordBool; safecall;
    function Get_ActivePrinter: WideString; safecall;
    procedure Set_ActivePrinter(const Retval: WideString); safecall;
    function LoadFile2(const FileName: WideString; const ArgString: WideString): WordBool; safecall;
    function GetUserPreferenceIntegerValue(UserPreferenceValue: Integer): Integer; safecall;
    function SetUserPreferenceIntegerValue(UserPreferenceValue: Integer; Value: Integer): WordBool; safecall;
    function RemoveMenuPopupItem(DocType: Integer; SelectType: Integer; const Item: WideString; 
                                 const CallbackFcnAndModule: WideString; 
                                 const CustomNames: WideString; Unused: Integer): WordBool; safecall;
    function RemoveMenu(DocType: Integer; const MenuItemString: WideString; 
                        const CallbackFcnAndModule: WideString): WordBool; safecall;
    function RemoveFileOpenItem(const CallbackFcnAndModule: WideString; 
                                const Description: WideString): WordBool; safecall;
    function RemoveFileSaveAsItem(const CallbackFcnAndModule: WideString; 
                                  const Description: WideString; Type_: Integer): WordBool; safecall;
    function ReplaceReferencedDocument(const ReferencingDocument: WideString; 
                                       const ReferencedDocument: WideString; 
                                       const NewReference: WideString): WordBool; safecall;
    function AddMenuItem(DocType: Integer; const Menu: WideString; Postion: Integer; 
                         const CallbackModuleAndFcn: WideString): Integer; safecall;
    function AddMenuPopupItem(DocType: Integer; SelType: Integer; const Item: WideString; 
                              const CallbackFcnAndModule: WideString; const CustomNames: WideString): Integer; safecall;
    function RemoveUserMenu(DocType: Integer; MenuIdIn: Integer; const ModuleName: WideString): WordBool; safecall;
    function AddToolbar(const ModuleName: WideString; const Title: WideString; 
                        SmallBitmapHandle: Integer; LargeBitmapHandle: Integer): Integer; safecall;
    function AddToolbarCommand(const ModuleName: WideString; ToolbarId: Integer; 
                               ToolbarIndex: SYSINT; const CommandString: WideString): WordBool; safecall;
    function ShowToolbar(const ModuleName: WideString; ToolbarId: Integer): WordBool; safecall;
    function HideToolbar(const ModuleName: WideString; ToolbarId: Integer): WordBool; safecall;
    function RemoveToolbar(const Module: WideString; ToolbarId: Integer): WordBool; safecall;
    function GetToolbarState(const Module: WideString; ToolbarId: Integer; ToolbarState: Integer): WordBool; safecall;
    function GetUserPreferenceStringListValue(UserPreference: Integer): WideString; safecall;
    procedure SetUserPreferenceStringListValue(UserPreference: Integer; const Value: WideString); safecall;
    function EnableStereoDisplay(BEnable: WordBool): WordBool; safecall;
    function IEnableStereoDisplay(BEnable: WordBool): WordBool; safecall;
    function GetDocumentDependencies(const Document: WideString; Traverseflag: Integer; 
                                     Searchflag: Integer): OleVariant; safecall;
    function IGetDocumentDependencies(const Document: WideString; Traverseflag: Integer; 
                                      Searchflag: Integer): WideString; safecall;
    function GetDocumentDependenciesCount(const Document: WideString; Traverseflag: Integer; 
                                          Searchflag: Integer): Integer; safecall;
    function OpenDocSilent(const FileName: WideString; Type_: Integer; var Errors: Integer): IDispatch; safecall;
    function IOpenDocSilent(const FileName: WideString; Type_: Integer; var Errors: Integer): IModelDoc; safecall;
    function CallBack(const CallBackFunc: WideString; DefaultRetVal: Integer; 
                      const CallBackArgs: WideString): Integer; safecall;
    function SendMsgToUser2(const Message: WideString; Icon: Integer; Buttons: Integer): Integer; safecall;
    function EnumDocuments: IEnumDocuments; safecall;
    function LoadAddIn(const FileName: WideString): Integer; safecall;
    function UnloadAddIn(const FileName: WideString): Integer; safecall;
    function RecordLine(const Text: WideString): WordBool; safecall;
    function VersionHistory(const FileName: WideString): OleVariant; safecall;
    function IVersionHistory(const FileName: WideString): WideString; safecall;
    function IGetVersionHistoryCount(const FileName: WideString): SYSINT; safecall;
    function AllowFailedFeatureCreation(YesNo: WordBool): WordBool; safecall;
    function GetFirstDocument: IDispatch; safecall;
    function GetCurrentWorkingDirectory: WideString; safecall;
    function SetCurrentWorkingDirectory(const CurrentWorkingDirectory: WideString): WordBool; safecall;
    function GetDataFolder(BShowErrorMsg: WordBool): WideString; safecall;
    function GetSelectionFilter(SelType: Integer): WordBool; safecall;
    procedure SetSelectionFilter(SelType: Integer; State: WordBool); safecall;
    function ActivateDoc2(const Name: WideString; Silent: WordBool; var Errors: Integer): IDispatch; safecall;
    function IActivateDoc2(const Name: WideString; Silent: WordBool; var Errors: Integer): IModelDoc; safecall;
    function GetMouseDragMode(Command: Integer): WordBool; safecall;
    function GetCurrentLanguage: WideString; safecall;
    function IGetFirstDocument: IModelDoc; safecall;
    function SanityCheck(SwItemToCheck: Integer; var P1: Integer; var P2: Integer): WordBool; safecall;
    function AddMenu(DocType: Integer; const Menu: WideString; Position: Integer): Integer; safecall;
    function CheckpointConvertedDocument(const DocName: WideString): Integer; safecall;
    function OpenDoc2(const FileName: WideString; Type_: Integer; ReadOnly: WordBool; 
                      ViewOnly: WordBool; Silent: WordBool; var Errors: Integer): IDispatch; safecall;
    function IOpenDoc2(const FileName: WideString; Type_: Integer; ReadOnly: WordBool; 
                       ViewOnly: WordBool; Silent: WordBool; var Errors: Integer): IModelDoc; safecall;
    function GetMassProperties(const FilePathName: WideString; const ConfigurationName: WideString): OleVariant; safecall;
    function IGetMassProperties(const FilePathName: WideString; 
                                const ConfigurationName: WideString; var MPropsData: Double): WordBool; safecall;
    function GetLocalizedMenuName(MenuId: Integer): WideString; safecall;
    function GetDocumentDependencies2(const Document: WideString; Traverseflag: WordBool; 
                                      Searchflag: WordBool; AddReadOnlyInfo: WordBool): OleVariant; safecall;
    function IGetDocumentDependencies2(const Document: WideString; Traverseflag: WordBool; 
                                       Searchflag: WordBool; AddReadOnlyInfo: WordBool): WideString; safecall;
    function IGetDocumentDependenciesCount2(const Document: WideString; Traverseflag: WordBool; 
                                            Searchflag: WordBool; AddReadOnlyInfo: WordBool): Integer; safecall;
    function GetSelectionFilters: OleVariant; safecall;
    procedure SetSelectionFilters(SelType: OleVariant; State: WordBool); safecall;
    function GetApplySelectionFilter: WordBool; safecall;
    procedure SetApplySelectionFilter(State: WordBool); safecall;
    function NewDocument(const TemplateName: WideString; PaperSize: Integer; Width: Double; 
                         Height: Double): IDispatch; safecall;
    function INewDocument(const TemplateName: WideString; PaperSize: Integer; Width: Double; 
                          Height: Double): IModelDoc; safecall;
    function GetDocumentTemplate(Mode: Integer; const TemplateName: WideString; PaperSize: Integer; 
                                 Width: Double; Height: Double): WideString; safecall;
    function IGetSelectionFiltersCount: Integer; safecall;
    function IGetSelectionFilters: Integer; safecall;
    procedure ISetSelectionFilters(Count: Integer; var SelType: Integer; State: WordBool); safecall;
    function GetCurrSolidWorksRegSubKey: WideString; safecall;
    procedure SolidWorksExplorer; safecall;
    function GetUserPreferenceStringValue(UserPreference: Integer): WideString; safecall;
    function SetUserPreferenceStringValue(UserPreference: Integer; const Value: WideString): WordBool; safecall;
    function GetCurrentMacroPathName: WideString; safecall;
    function GetOpenDocumentByName(const DocumentName: WideString): IDispatch; safecall;
    function IGetOpenDocumentByName(const DocumentName: WideString): IModelDoc; safecall;
    procedure GetCurrentKernelVersions(out Version1: WideString; out Version2: WideString; 
                                       out Version3: WideString); safecall;
    function CreatePrunedModelArchive(const PathName: WideString; const ZipPathName: WideString): WideString; safecall;
    function OpenDoc3(const FileName: WideString; Type_: Integer; ReadOnly: WordBool; 
                      ViewOnly: WordBool; RapidDraft: WordBool; Silent: WordBool; 
                      var Errors: Integer): IDispatch; safecall;
    function IOpenDoc3(const FileName: WideString; Type_: Integer; ReadOnly: WordBool; 
                       ViewOnly: WordBool; RapidDraft: WordBool; Silent: WordBool; 
                       var Errors: Integer): IModelDoc; safecall;
    function AddToolbar2(const ModuleNameIn: WideString; const TitleIn: WideString; 
                         SmallBitmapHandleIn: Integer; LargeBitmapHandleIn: Integer; 
                         MenuPosIn: Integer; DecTemplateTypeIn: Integer): Integer; safecall;
    function OpenModelConfiguration(const PathName: WideString; const ConfigName: WideString): IDispatch; safecall;
    function GetToolbarDock(const ModuleIn: WideString; ToolbarIDIn: Integer): Integer; safecall;
    procedure SetToolbarDock(const ModuleIn: WideString; ToolbarIDIn: Integer; 
                             DocStatePosIn: Integer); safecall;
    function GetMathUtility: IDispatch; safecall;
    function IGetMathUtility: IMathUtility; safecall;
    function OpenDoc4(const FileName: WideString; Type_: Integer; Options: Integer; 
                      const Configuration: WideString; var Errors: Integer): IDispatch; safecall;
    function IOpenDoc4(const FileName: WideString; Type_: Integer; Options: Integer; 
                       const Configuration: WideString; var Errors: Integer): IModelDoc; safecall;
    function IsRapidDraft(const FileName: WideString): WordBool; safecall;
    function GetTemplateSizes(const FileName: WideString): OleVariant; safecall;
    function IGetTemplateSizes(const FileName: WideString; out PaperSize: Integer; 
                               out Width: Double; out Height: Double): WordBool; safecall;
    function GetColorTable: IDispatch; safecall;
    function IGetColorTable: IColorTable; safecall;
    procedure SetMissingReferencePathName(const FileName: WideString); safecall;
    function GetUserUnit(UnitType: Integer): IDispatch; safecall;
    function IGetUserUnit(UnitType: Integer): IUserUnit; safecall;
    function SetMouseDragMode(Command: Integer): WordBool; safecall;
    procedure SetPromptFilename(const FileName: WideString); safecall;
    function SetAddinCallbackInfo(ModuleHandle: Integer; const AddinCallbacks: IDispatch; 
                                  Cookie: Integer): WordBool; safecall;
    function AddMenuItem2(DocumentType: Integer; Cookie: Integer; const MenuItem: WideString; 
                          Position: Integer; const MenuCallback: WideString; 
                          const MenuEnableMethod: WideString; const HintString: WideString): WordBool; safecall;
    function AddToolbar3(Cookie: Integer; const Title: WideString; SmallBitmapResourceID: Integer; 
                         LargeBitmapResourceID: Integer; MenuPositionForToolbar: Integer; 
                         DocumentType: Integer): Integer; safecall;
    function RemoveToolbar2(Cookie: Integer; ToolbarId: Integer): WordBool; safecall;
    function AddToolbarCommand2(Cookie: Integer; ToolbarId: Integer; ToolbarIndex: Integer; 
                                const ButtonCallback: WideString; 
                                const ButtonEnableMethod: WideString; const ToolTip: WideString; 
                                const HintString: WideString): WordBool; safecall;
    function ShowToolbar2(Cookie: Integer; ToolbarId: Integer): WordBool; safecall;
    function HideToolbar2(Cookie: Integer; ToolbarId: Integer): WordBool; safecall;
    function GetToolbarState2(Cookie: Integer; ToolbarId: Integer; ToolbarState: Integer): WordBool; safecall;
    function GetToolbarDock2(Cookie: Integer; ToolbarId: Integer): Integer; safecall;
    function SetToolbarDock2(Cookie: Integer; ToolbarId: Integer; DockingState: Integer): WordBool; safecall;
    function Get_IActiveDoc2: IModelDoc2; safecall;
    function IActivateDoc3(const Name: WideString; Silent: WordBool; var Errors: Integer): IModelDoc2; safecall;
    function IGetFirstDocument2: IModelDoc2; safecall;
    function INewDocument2(const TemplateName: WideString; PaperSize: Integer; Width: Double; 
                           Height: Double): IModelDoc2; safecall;
    function IGetOpenDocumentByName2(const DocumentName: WideString): IModelDoc2; safecall;
    function IOpenDoc5(const FileName: WideString; Type_: Integer; Options: Integer; 
                       const Configuration: WideString; var Errors: Integer): IModelDoc2; safecall;
    function EnumDocuments2: IEnumDocuments2; safecall;
    function CreatePropertyManagerPage(const Title: WideString; Options: Integer; 
                                       const Handler: IDispatch; var Errors: Integer): IDispatch; safecall;
    function ICreatePropertyManagerPage(const Title: WideString; Options: Integer; 
                                        const Handler: IDispatch; var Errors: Integer): IPropertyManagerPage2; safecall;
    function GetAddInObject(const Clsid: WideString): IDispatch; safecall;
    function GetProcessID: Integer; safecall;
    function OpenDoc6(const FileName: WideString; Type_: Integer; Options: Integer; 
                      const Configuration: WideString; var Errors: Integer; var Warnings: Integer): IModelDoc2; safecall;
    function AddFileOpenItem2(Cookie: Integer; const MethodName: WideString; 
                              const Description: WideString; const Extension: WideString): WordBool; safecall;
    function RemoveFileOpenItem2(Cookie: Integer; const MethodName: WideString; 
                                 const Description: WideString; const Extension: WideString): WordBool; safecall;
    function AddFileSaveAsItem2(Cookie: Integer; const MethodName: WideString; 
                                const Description: WideString; const Extension: WideString; 
                                DocumentType: Integer): WordBool; safecall;
    function RemoveFileSaveAsItem2(Cookie: Integer; const MethodName: WideString; 
                                   const Description: WideString; const Extension: WideString; 
                                   DocumentType: Integer): WordBool; safecall;
    function AddMenuPopupItem2(DocumentType: Integer; Cookie: Integer; SelectType: Integer; 
                               const PopupItemName: WideString; const MenuCallback: WideString; 
                               const MenuEnableMethod: WideString; const HintString: WideString; 
                               const CustomNames: WideString): WordBool; safecall;
    function RemoveMenuPopupItem2(DocumentType: Integer; Cookie: Integer; SelectType: Integer; 
                                  const PopupItemName: WideString; const MenuCallback: WideString; 
                                  const MenuEnableMethod: WideString; const HintString: WideString; 
                                  const CustomNames: WideString): WordBool; safecall;
    function GetMassProperties2(const FilePathName: WideString; 
                                const ConfigurationName: WideString; Accuracy: Integer): OleVariant; safecall;
    function IGetMassProperties2(const FilePathName: WideString; 
                                 const ConfigurationName: WideString; var MPropsData: Double; 
                                 Accuracy: Integer): WordBool; safecall;
    procedure HighlightTBButton(CmdID: Integer); safecall;
    function RunMacro(const FilePathName: WideString; const ModuleName: WideString; 
                      const ProcedureName: WideString): WordBool; safecall;
    function GetConfigurationCount(const FilePathName: WideString): Integer; safecall;
    function GetConfigurationNames(const FilePathName: WideString): OleVariant; safecall;
    function IGetConfigurationNames(const FilePathName: WideString; Count: Integer): WideString; safecall;
    function GetPreviewBitmap(const FilePathName: WideString; const ConfigName: WideString): IDispatch; safecall;
    function GetExecutablePath: WideString; safecall;
    function GetEdition: Integer; safecall;
    function MoveDocument(const SourceDoc: WideString; const DestDoc: WideString; 
                          FromChildren: OleVariant; ToChildren: OleVariant; Option: Integer): Integer; safecall;
    function CopyDocument(const SourceDoc: WideString; const DestDoc: WideString; 
                          FromChildren: OleVariant; ToChildren: OleVariant; Option: Integer): Integer; safecall;
    function IMoveDocument(const SourceDoc: WideString; const DestDoc: WideString; 
                           ChildCount: Integer; var FromChildren: WideString; 
                           var ToChildren: WideString; Option: Integer): Integer; safecall;
    function ICopyDocument(const SourceDoc: WideString; const DestDoc: WideString; 
                           ChildCount: Integer; var FromChildren: WideString; 
                           var ToChildren: WideString; Option: Integer): Integer; safecall;
    function AddToolbar4(Cookie: Integer; const Title: WideString; 
                         const SmallBitmapImage: WideString; const LargeBitmapImage: WideString; 
                         MenuPositionForToolbar: Integer; DocumentType: Integer): Integer; safecall;
    function GetActiveConfigurationName(const FilePathName: WideString): WideString; safecall;
    function Command(Command: Integer; Args: OleVariant): OleVariant; safecall;
    function GetRecentFiles: OleVariant; safecall;
    procedure ShowBubbleTooltip(PointAt: Integer; const FlashButtonIDs: WideString; 
                                TitleResID: Integer; const TitleString: WideString; 
                                const MessageString: WideString); safecall;
    function GetMaterialSchemaPathName: WideString; safecall;
    function GetMaterialDatabases: OleVariant; safecall;
    function GetMaterialDatabaseCount: Integer; safecall;
    function IGetMaterialDatabases(Count: Integer): WideString; safecall;
    function CreateTaskpaneView(var Bitmap: Integer; const ToolTip: WideString; 
                                const PHandler: IDispatch): ITaskpaneView; safecall;
    procedure ShowBubbleTooltipAt(PointX: Integer; PointY: Integer; ArrowPos: Integer; 
                                  const TitleString: WideString; const MessageString: WideString; 
                                  const UrlLoc: WideString); safecall;
    procedure InstallQuickTipGuide(const PInterface: IDispatch); safecall;
    procedure UnInstallQuickTipGuide(const PInterface: IDispatch); safecall;
    procedure RefreshQuickTipWindow; safecall;
    function GetLastToolbarID: Integer; safecall;
    function CreatePMPage(DialogId: Integer; const Title: WideString; const Handler: IDispatch): IPtnrPMPage; safecall;
    function GetUserTypeLibReferenceCount: Integer; safecall;
    function Get_UserTypeLibReferences: OleVariant; safecall;
    procedure Set_UserTypeLibReferences(VTlbRef: OleVariant); safecall;
    function IGetUserTypeLibReferences(NCount: Integer): WideString; safecall;
    procedure ISetUserTypeLibReferences(NCount: Integer; var BstrTlbRef: WideString); safecall;
    function RemoveUserTypeLibReferences(VTlbRef: OleVariant): WordBool; safecall;
    function IRemoveUserTypeLibReferences(NCount: Integer; var BstrTlbRef: WideString): WordBool; safecall;
    function Get_UserControlBackground: WordBool; safecall;
    procedure Set_UserControlBackground(VbControl: WordBool); safecall;
    function GetOpenFileName(const DialogTitle: WideString; const InitialFileName: WideString; 
                             const FileFilter: WideString; out OpenOptions: Integer; 
                             out ConfigName: WideString; out DisplayName: WideString): WideString; safecall;
    procedure ShowTooltip(const ToolbarName: WideString; ButtonID: Integer; SelectIDMask1: Integer; 
                          SelectIDMask2: Integer; const TitleString: WideString; 
                          const MessageString: WideString); safecall;
    function AddMenuItem3(DocumentType: Integer; Cookie: Integer; const MenuItem: WideString; 
                          Position: Integer; const MenuCallback: WideString; 
                          const MenuEnableMethod: WideString; const HintString: WideString; 
                          const BitmapFilePath: WideString): WordBool; safecall;
    function GetLatestSupportedFileVersion: Integer; safecall;
    procedure GetOpenedFileInfo(out FileName: WideString; out Options: Integer); safecall;
    function GetOpenDocument(const DocName: WideString): IModelDoc2; safecall;
    function GetImportFileData(const FileName: WideString): IDispatch; safecall;
    function LoadFile3(const FileName: WideString; const ArgString: WideString; 
                       const ImportData: IDispatch): WordBool; safecall;
    function CreateTaskpaneView2(const Bitmap: WideString; const ToolTip: WideString): ITaskpaneView; safecall;
    function GetCommandManager(Cookie: Integer): ICommandManager; safecall;
    procedure DragToolbarButton(SourceToolbar: Integer; TargetToolbar: Integer; 
                                SourceIndex: Integer; TargetIndex: Integer); safecall;
    procedure AddCallback(Cookie: Integer; const CallbackFunction: WideString); safecall;
    procedure RemoveCallback(Cookie: Integer); safecall;
    procedure ShowHelp(const HelpFile: WideString; HelpTopic: Integer); safecall;
    function GetErrorMessages(out Msgs: OleVariant; out MsgIDs: OleVariant; out MsgTypes: OleVariant): Integer; safecall;
    function GetCurrentMacroPathFolder: WideString; safecall;
    function LoadFile4(const FileName: WideString; const ArgString: WideString; 
                       const ImportData: IDispatch; var Errors: Integer): IModelDoc2; safecall;
    function Get_CommandInProgress: WordBool; safecall;
    procedure Set_CommandInProgress(VbControl: WordBool); safecall;
    function CloseAllDocuments(IncludeUnsaved: WordBool): WordBool; safecall;
    function GetCommandID(const Clsid: WideString; UserCmdID: Integer): Integer; safecall;
    function PreviewDocx64(var HWnd: Int64; const FullName: WideString): WordBool; safecall;
    function Get_TaskPaneIsPinned: WordBool; safecall;
    procedure Set_TaskPaneIsPinned(Retval: WordBool); safecall;
    function GetUserProgressBar(out PProgressBar: IUserProgressBar): WordBool; safecall;
    function AddFileOpenItem3(Cookie: Integer; const MethodName: WideString; 
                              const Description: WideString; const Extension: WideString; 
                              const OptionLabel: WideString; const OptionMethodName: WideString): WordBool; safecall;
    function GetCookie(const AddinClsid: WideString; ResourceModuleHandle: Integer; 
                       const AddinCallbacks: IDispatch): Integer; safecall;
    function ActivateTaskPane(TaskPaneID: Integer): WordBool; safecall;
    function GetExportFileData(FileType: Integer): IDispatch; safecall;
    function RemoveFromMenu(CommandID: Integer; DocumentType: Integer; Option: Integer; 
                            RemoveParentMenu: WordBool): WordBool; safecall;
    function RemoveFromPopupMenu(CommandID: Integer; DocumentType: Integer; SelectionType: Integer; 
                                 RemoveParentMenu: WordBool): WordBool; safecall;
    function GetMenuStrings(CommandID: Integer; DocumentType: Integer; 
                            out ParentMenuName: WideString): WideString; safecall;
    procedure RefreshTaskpaneContent; safecall;
    function PresetNewDrawingParameters(const DrawingTemplate: WideString; ShowTemplate: WordBool; 
                                        Width: Double; Height: Double): WordBool; safecall;
    procedure ResetPresetDrawingParameters; safecall;
    function GetDocumentVisible(Type_: Integer): WordBool; safecall;
    function RunCommand(CommandID: Integer; const NewTitle: WideString): WordBool; safecall;
    function Get_JournalManager: IJournalManager; safecall;
    procedure HideBubbleTooltip; safecall;
    function GetOpenDocSpec(const FileName: WideString): IDispatch; safecall;
    function OpenDoc7(const Specification: IDispatch): IModelDoc2; safecall;
    function BlockSkinning: WordBool; safecall;
    function ResumeSkinning: WordBool; safecall;
    procedure SetMultipleFilenamesPrompt(FileName: OleVariant); safecall;
    function GetPreviewBitmapFile(const DocumentPath: WideString; const ConfigName: WideString; 
                                  const BitMapFile: WideString): WordBool; safecall;
    function DragToolbarButtonFromCommandID(CommandID: Integer; TargetToolbar: Integer; 
                                            TargetIndex: Integer): Integer; safecall;
    function AddMenuItem4(DocumentType: Integer; Cookie: Integer; const MenuItem: WideString; 
                          Position: Integer; const MenuCallback: WideString; 
                          const MenuEnableMethod: WideString; const HintString: WideString; 
                          const BitmapFilePath: WideString): Integer; safecall;
    function AddMenuPopupItem3(DocumentType: Integer; Cookie: Integer; SelectType: Integer; 
                               const PopupItemName: WideString; const MenuCallback: WideString; 
                               const MenuEnableMethod: WideString; const HintString: WideString; 
                               const CustomNames: WideString): Integer; safecall;
    property ActiveDoc: IDispatch read Get_ActiveDoc;
    property IActiveDoc: IModelDoc read Get_IActiveDoc;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property UserControl: WordBool read Get_UserControl write Set_UserControl;
    property ActivePrinter: WideString read Get_ActivePrinter write Set_ActivePrinter;
    property IActiveDoc2: IModelDoc2 read Get_IActiveDoc2;
    property UserTypeLibReferences: OleVariant read Get_UserTypeLibReferences write Set_UserTypeLibReferences;
    property UserControlBackground: WordBool read Get_UserControlBackground write Set_UserControlBackground;
    property CommandInProgress: WordBool read Get_CommandInProgress write Set_CommandInProgress;
    property TaskPaneIsPinned: WordBool read Get_TaskPaneIsPinned write Set_TaskPaneIsPinned;
    property JournalManager: IJournalManager read Get_JournalManager;
  end;

// *********************************************************************//
// DispIntf:  ISldWorksDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D22-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISldWorksDisp = dispinterface
    ['{83A33D22-27C5-11CE-BFD4-00400513BB57}']
    property ActiveDoc: IDispatch readonly dispid 1;
    property IActiveDoc: IModelDoc readonly dispid 16;
    function OpenDoc(const Name: WideString; Type_: Integer): IDispatch; dispid 2;
    function IOpenDoc(const Name: WideString; Type_: Integer): IModelDoc; dispid 17;
    function ActivateDoc(const Name: WideString): IDispatch; dispid 3;
    function IActivateDoc(const Name: WideString): IModelDoc; dispid 18;
    procedure SendMsgToUser(const Message: WideString); dispid 4;
    function Frame: IDispatch; dispid 5;
    function IFrameObject: IFrame; dispid 19;
    procedure ExitApp; dispid 6;
    procedure CloseDoc(const Name: WideString); dispid 7;
    function NewPart: IDispatch; dispid 8;
    function INewPart: IPartDoc; dispid 20;
    function NewAssembly: IDispatch; dispid 9;
    function INewAssembly: IAssemblyDoc; dispid 21;
    function NewDrawing(TemplateToUse: Integer): IDispatch; dispid 10;
    function INewDrawing(TemplateToUse: Integer): IDrawingDoc; dispid 22;
    function DateCode: Integer; dispid 11;
    function RevisionNumber: WideString; dispid 12;
    function LoadFile(const FileName: WideString): WordBool; dispid 13;
    function AddFileOpenItem(const CallbackFcnAndModule: WideString; const Description: WideString): WordBool; dispid 14;
    function AddFileSaveAsItem(const CallbackFcnAndModule: WideString; 
                               const Description: WideString; Type_: Integer): WordBool; dispid 15;
    procedure PreSelectDwgTemplateSize(TemplateToUse: Integer; const TemplateName: WideString); dispid 23;
    procedure DocumentVisible(Visible: WordBool; Type_: Integer); dispid 24;
    function DefineAttribute(const Name: WideString): IDispatch; dispid 25;
    function IDefineAttribute(const Name: WideString): IAttributeDef; dispid 26;
    property Visible: WordBool dispid 27;
    property UserControl: WordBool dispid 28;
    procedure DisplayStatusBar(OnOff: WordBool); dispid 29;
    procedure CreateNewWindow; dispid 30;
    procedure ArrangeIcons; dispid 31;
    procedure ArrangeWindows(Style: Integer); dispid 32;
    procedure QuitDoc(const Name: WideString); dispid 33;
    function GetModeler: IDispatch; dispid 34;
    function IGetModeler: IModeler; dispid 35;
    function GetEnvironment: IDispatch; dispid 36;
    function IGetEnvironment: IEnvironment; dispid 37;
    function NewDrawing2(TemplateToUse: Integer; const TemplateName: WideString; 
                         PaperSize: Integer; Width: Double; Height: Double): IDispatch; dispid 38;
    function INewDrawing2(TemplateToUse: Integer; const TemplateName: WideString; 
                          PaperSize: Integer; Width: Double; Height: Double): IDrawingDoc; dispid 39;
    function SetOptions(const Message: WideString): WordBool; dispid 40;
    function PreviewDoc(var HWnd: Integer; const FullName: WideString): WordBool; dispid 41;
    function GetSearchFolders(FolderType: Integer): WideString; dispid 42;
    function SetSearchFolders(FolderType: Integer; const Folders: WideString): WordBool; dispid 43;
    function GetUserPreferenceToggle(UserPreferenceToggle: Integer): WordBool; dispid 44;
    procedure SetUserPreferenceToggle(UserPreferenceValue: Integer; OnFlag: WordBool); dispid 45;
    function GetUserPreferenceDoubleValue(UserPreferenceValue: Integer): Double; dispid 46;
    function SetUserPreferenceDoubleValue(UserPreferenceValue: Integer; Value: Double): WordBool; dispid 47;
    property ActivePrinter: WideString dispid 48;
    function LoadFile2(const FileName: WideString; const ArgString: WideString): WordBool; dispid 49;
    function GetUserPreferenceIntegerValue(UserPreferenceValue: Integer): Integer; dispid 50;
    function SetUserPreferenceIntegerValue(UserPreferenceValue: Integer; Value: Integer): WordBool; dispid 51;
    function RemoveMenuPopupItem(DocType: Integer; SelectType: Integer; const Item: WideString; 
                                 const CallbackFcnAndModule: WideString; 
                                 const CustomNames: WideString; Unused: Integer): WordBool; dispid 52;
    function RemoveMenu(DocType: Integer; const MenuItemString: WideString; 
                        const CallbackFcnAndModule: WideString): WordBool; dispid 53;
    function RemoveFileOpenItem(const CallbackFcnAndModule: WideString; 
                                const Description: WideString): WordBool; dispid 54;
    function RemoveFileSaveAsItem(const CallbackFcnAndModule: WideString; 
                                  const Description: WideString; Type_: Integer): WordBool; dispid 55;
    function ReplaceReferencedDocument(const ReferencingDocument: WideString; 
                                       const ReferencedDocument: WideString; 
                                       const NewReference: WideString): WordBool; dispid 56;
    function AddMenuItem(DocType: Integer; const Menu: WideString; Postion: Integer; 
                         const CallbackModuleAndFcn: WideString): Integer; dispid 57;
    function AddMenuPopupItem(DocType: Integer; SelType: Integer; const Item: WideString; 
                              const CallbackFcnAndModule: WideString; const CustomNames: WideString): Integer; dispid 58;
    function RemoveUserMenu(DocType: Integer; MenuIdIn: Integer; const ModuleName: WideString): WordBool; dispid 59;
    function AddToolbar(const ModuleName: WideString; const Title: WideString; 
                        SmallBitmapHandle: Integer; LargeBitmapHandle: Integer): Integer; dispid 60;
    function AddToolbarCommand(const ModuleName: WideString; ToolbarId: Integer; 
                               ToolbarIndex: SYSINT; const CommandString: WideString): WordBool; dispid 61;
    function ShowToolbar(const ModuleName: WideString; ToolbarId: Integer): WordBool; dispid 62;
    function HideToolbar(const ModuleName: WideString; ToolbarId: Integer): WordBool; dispid 63;
    function RemoveToolbar(const Module: WideString; ToolbarId: Integer): WordBool; dispid 64;
    function GetToolbarState(const Module: WideString; ToolbarId: Integer; ToolbarState: Integer): WordBool; dispid 65;
    function GetUserPreferenceStringListValue(UserPreference: Integer): WideString; dispid 66;
    procedure SetUserPreferenceStringListValue(UserPreference: Integer; const Value: WideString); dispid 67;
    function EnableStereoDisplay(BEnable: WordBool): WordBool; dispid 68;
    function IEnableStereoDisplay(BEnable: WordBool): WordBool; dispid 69;
    function GetDocumentDependencies(const Document: WideString; Traverseflag: Integer; 
                                     Searchflag: Integer): OleVariant; dispid 70;
    function IGetDocumentDependencies(const Document: WideString; Traverseflag: Integer; 
                                      Searchflag: Integer): WideString; dispid 71;
    function GetDocumentDependenciesCount(const Document: WideString; Traverseflag: Integer; 
                                          Searchflag: Integer): Integer; dispid 72;
    function OpenDocSilent(const FileName: WideString; Type_: Integer; var Errors: Integer): IDispatch; dispid 73;
    function IOpenDocSilent(const FileName: WideString; Type_: Integer; var Errors: Integer): IModelDoc; dispid 74;
    function CallBack(const CallBackFunc: WideString; DefaultRetVal: Integer; 
                      const CallBackArgs: WideString): Integer; dispid 75;
    function SendMsgToUser2(const Message: WideString; Icon: Integer; Buttons: Integer): Integer; dispid 76;
    function EnumDocuments: IEnumDocuments; dispid 77;
    function LoadAddIn(const FileName: WideString): Integer; dispid 78;
    function UnloadAddIn(const FileName: WideString): Integer; dispid 79;
    function RecordLine(const Text: WideString): WordBool; dispid 80;
    function VersionHistory(const FileName: WideString): OleVariant; dispid 81;
    function IVersionHistory(const FileName: WideString): WideString; dispid 82;
    function IGetVersionHistoryCount(const FileName: WideString): SYSINT; dispid 83;
    function AllowFailedFeatureCreation(YesNo: WordBool): WordBool; dispid 84;
    function GetFirstDocument: IDispatch; dispid 85;
    function GetCurrentWorkingDirectory: WideString; dispid 86;
    function SetCurrentWorkingDirectory(const CurrentWorkingDirectory: WideString): WordBool; dispid 87;
    function GetDataFolder(BShowErrorMsg: WordBool): WideString; dispid 88;
    function GetSelectionFilter(SelType: Integer): WordBool; dispid 89;
    procedure SetSelectionFilter(SelType: Integer; State: WordBool); dispid 90;
    function ActivateDoc2(const Name: WideString; Silent: WordBool; var Errors: Integer): IDispatch; dispid 91;
    function IActivateDoc2(const Name: WideString; Silent: WordBool; var Errors: Integer): IModelDoc; dispid 92;
    function GetMouseDragMode(Command: Integer): WordBool; dispid 93;
    function GetCurrentLanguage: WideString; dispid 94;
    function IGetFirstDocument: IModelDoc; dispid 95;
    function SanityCheck(SwItemToCheck: Integer; var P1: Integer; var P2: Integer): WordBool; dispid 96;
    function AddMenu(DocType: Integer; const Menu: WideString; Position: Integer): Integer; dispid 97;
    function CheckpointConvertedDocument(const DocName: WideString): Integer; dispid 98;
    function OpenDoc2(const FileName: WideString; Type_: Integer; ReadOnly: WordBool; 
                      ViewOnly: WordBool; Silent: WordBool; var Errors: Integer): IDispatch; dispid 99;
    function IOpenDoc2(const FileName: WideString; Type_: Integer; ReadOnly: WordBool; 
                       ViewOnly: WordBool; Silent: WordBool; var Errors: Integer): IModelDoc; dispid 100;
    function GetMassProperties(const FilePathName: WideString; const ConfigurationName: WideString): OleVariant; dispid 101;
    function IGetMassProperties(const FilePathName: WideString; 
                                const ConfigurationName: WideString; var MPropsData: Double): WordBool; dispid 102;
    function GetLocalizedMenuName(MenuId: Integer): WideString; dispid 103;
    function GetDocumentDependencies2(const Document: WideString; Traverseflag: WordBool; 
                                      Searchflag: WordBool; AddReadOnlyInfo: WordBool): OleVariant; dispid 104;
    function IGetDocumentDependencies2(const Document: WideString; Traverseflag: WordBool; 
                                       Searchflag: WordBool; AddReadOnlyInfo: WordBool): WideString; dispid 105;
    function IGetDocumentDependenciesCount2(const Document: WideString; Traverseflag: WordBool; 
                                            Searchflag: WordBool; AddReadOnlyInfo: WordBool): Integer; dispid 106;
    function GetSelectionFilters: OleVariant; dispid 107;
    procedure SetSelectionFilters(SelType: OleVariant; State: WordBool); dispid 108;
    function GetApplySelectionFilter: WordBool; dispid 109;
    procedure SetApplySelectionFilter(State: WordBool); dispid 110;
    function NewDocument(const TemplateName: WideString; PaperSize: Integer; Width: Double; 
                         Height: Double): IDispatch; dispid 111;
    function INewDocument(const TemplateName: WideString; PaperSize: Integer; Width: Double; 
                          Height: Double): IModelDoc; dispid 112;
    function GetDocumentTemplate(Mode: Integer; const TemplateName: WideString; PaperSize: Integer; 
                                 Width: Double; Height: Double): WideString; dispid 113;
    function IGetSelectionFiltersCount: Integer; dispid 114;
    function IGetSelectionFilters: Integer; dispid 115;
    procedure ISetSelectionFilters(Count: Integer; var SelType: Integer; State: WordBool); dispid 116;
    function GetCurrSolidWorksRegSubKey: WideString; dispid 117;
    procedure SolidWorksExplorer; dispid 118;
    function GetUserPreferenceStringValue(UserPreference: Integer): WideString; dispid 119;
    function SetUserPreferenceStringValue(UserPreference: Integer; const Value: WideString): WordBool; dispid 120;
    function GetCurrentMacroPathName: WideString; dispid 121;
    function GetOpenDocumentByName(const DocumentName: WideString): IDispatch; dispid 122;
    function IGetOpenDocumentByName(const DocumentName: WideString): IModelDoc; dispid 123;
    procedure GetCurrentKernelVersions(out Version1: WideString; out Version2: WideString; 
                                       out Version3: WideString); dispid 124;
    function CreatePrunedModelArchive(const PathName: WideString; const ZipPathName: WideString): WideString; dispid 125;
    function OpenDoc3(const FileName: WideString; Type_: Integer; ReadOnly: WordBool; 
                      ViewOnly: WordBool; RapidDraft: WordBool; Silent: WordBool; 
                      var Errors: Integer): IDispatch; dispid 126;
    function IOpenDoc3(const FileName: WideString; Type_: Integer; ReadOnly: WordBool; 
                       ViewOnly: WordBool; RapidDraft: WordBool; Silent: WordBool; 
                       var Errors: Integer): IModelDoc; dispid 127;
    function AddToolbar2(const ModuleNameIn: WideString; const TitleIn: WideString; 
                         SmallBitmapHandleIn: Integer; LargeBitmapHandleIn: Integer; 
                         MenuPosIn: Integer; DecTemplateTypeIn: Integer): Integer; dispid 128;
    function OpenModelConfiguration(const PathName: WideString; const ConfigName: WideString): IDispatch; dispid 129;
    function GetToolbarDock(const ModuleIn: WideString; ToolbarIDIn: Integer): Integer; dispid 130;
    procedure SetToolbarDock(const ModuleIn: WideString; ToolbarIDIn: Integer; 
                             DocStatePosIn: Integer); dispid 131;
    function GetMathUtility: IDispatch; dispid 132;
    function IGetMathUtility: IMathUtility; dispid 133;
    function OpenDoc4(const FileName: WideString; Type_: Integer; Options: Integer; 
                      const Configuration: WideString; var Errors: Integer): IDispatch; dispid 134;
    function IOpenDoc4(const FileName: WideString; Type_: Integer; Options: Integer; 
                       const Configuration: WideString; var Errors: Integer): IModelDoc; dispid 135;
    function IsRapidDraft(const FileName: WideString): WordBool; dispid 136;
    function GetTemplateSizes(const FileName: WideString): OleVariant; dispid 137;
    function IGetTemplateSizes(const FileName: WideString; out PaperSize: Integer; 
                               out Width: Double; out Height: Double): WordBool; dispid 138;
    function GetColorTable: IDispatch; dispid 139;
    function IGetColorTable: IColorTable; dispid 140;
    procedure SetMissingReferencePathName(const FileName: WideString); dispid 141;
    function GetUserUnit(UnitType: Integer): IDispatch; dispid 142;
    function IGetUserUnit(UnitType: Integer): IUserUnit; dispid 143;
    function SetMouseDragMode(Command: Integer): WordBool; dispid 144;
    procedure SetPromptFilename(const FileName: WideString); dispid 145;
    function SetAddinCallbackInfo(ModuleHandle: Integer; const AddinCallbacks: IDispatch; 
                                  Cookie: Integer): WordBool; dispid 146;
    function AddMenuItem2(DocumentType: Integer; Cookie: Integer; const MenuItem: WideString; 
                          Position: Integer; const MenuCallback: WideString; 
                          const MenuEnableMethod: WideString; const HintString: WideString): WordBool; dispid 147;
    function AddToolbar3(Cookie: Integer; const Title: WideString; SmallBitmapResourceID: Integer; 
                         LargeBitmapResourceID: Integer; MenuPositionForToolbar: Integer; 
                         DocumentType: Integer): Integer; dispid 148;
    function RemoveToolbar2(Cookie: Integer; ToolbarId: Integer): WordBool; dispid 149;
    function AddToolbarCommand2(Cookie: Integer; ToolbarId: Integer; ToolbarIndex: Integer; 
                                const ButtonCallback: WideString; 
                                const ButtonEnableMethod: WideString; const ToolTip: WideString; 
                                const HintString: WideString): WordBool; dispid 150;
    function ShowToolbar2(Cookie: Integer; ToolbarId: Integer): WordBool; dispid 151;
    function HideToolbar2(Cookie: Integer; ToolbarId: Integer): WordBool; dispid 152;
    function GetToolbarState2(Cookie: Integer; ToolbarId: Integer; ToolbarState: Integer): WordBool; dispid 153;
    function GetToolbarDock2(Cookie: Integer; ToolbarId: Integer): Integer; dispid 154;
    function SetToolbarDock2(Cookie: Integer; ToolbarId: Integer; DockingState: Integer): WordBool; dispid 155;
    property IActiveDoc2: IModelDoc2 readonly dispid 156;
    function IActivateDoc3(const Name: WideString; Silent: WordBool; var Errors: Integer): IModelDoc2; dispid 157;
    function IGetFirstDocument2: IModelDoc2; dispid 158;
    function INewDocument2(const TemplateName: WideString; PaperSize: Integer; Width: Double; 
                           Height: Double): IModelDoc2; dispid 159;
    function IGetOpenDocumentByName2(const DocumentName: WideString): IModelDoc2; dispid 160;
    function IOpenDoc5(const FileName: WideString; Type_: Integer; Options: Integer; 
                       const Configuration: WideString; var Errors: Integer): IModelDoc2; dispid 161;
    function EnumDocuments2: IEnumDocuments2; dispid 162;
    function CreatePropertyManagerPage(const Title: WideString; Options: Integer; 
                                       const Handler: IDispatch; var Errors: Integer): IDispatch; dispid 163;
    function ICreatePropertyManagerPage(const Title: WideString; Options: Integer; 
                                        const Handler: IDispatch; var Errors: Integer): IPropertyManagerPage2; dispid 164;
    function GetAddInObject(const Clsid: WideString): IDispatch; dispid 165;
    function GetProcessID: Integer; dispid 166;
    function OpenDoc6(const FileName: WideString; Type_: Integer; Options: Integer; 
                      const Configuration: WideString; var Errors: Integer; var Warnings: Integer): IModelDoc2; dispid 167;
    function AddFileOpenItem2(Cookie: Integer; const MethodName: WideString; 
                              const Description: WideString; const Extension: WideString): WordBool; dispid 168;
    function RemoveFileOpenItem2(Cookie: Integer; const MethodName: WideString; 
                                 const Description: WideString; const Extension: WideString): WordBool; dispid 169;
    function AddFileSaveAsItem2(Cookie: Integer; const MethodName: WideString; 
                                const Description: WideString; const Extension: WideString; 
                                DocumentType: Integer): WordBool; dispid 170;
    function RemoveFileSaveAsItem2(Cookie: Integer; const MethodName: WideString; 
                                   const Description: WideString; const Extension: WideString; 
                                   DocumentType: Integer): WordBool; dispid 171;
    function AddMenuPopupItem2(DocumentType: Integer; Cookie: Integer; SelectType: Integer; 
                               const PopupItemName: WideString; const MenuCallback: WideString; 
                               const MenuEnableMethod: WideString; const HintString: WideString; 
                               const CustomNames: WideString): WordBool; dispid 172;
    function RemoveMenuPopupItem2(DocumentType: Integer; Cookie: Integer; SelectType: Integer; 
                                  const PopupItemName: WideString; const MenuCallback: WideString; 
                                  const MenuEnableMethod: WideString; const HintString: WideString; 
                                  const CustomNames: WideString): WordBool; dispid 173;
    function GetMassProperties2(const FilePathName: WideString; 
                                const ConfigurationName: WideString; Accuracy: Integer): OleVariant; dispid 174;
    function IGetMassProperties2(const FilePathName: WideString; 
                                 const ConfigurationName: WideString; var MPropsData: Double; 
                                 Accuracy: Integer): WordBool; dispid 175;
    procedure HighlightTBButton(CmdID: Integer); dispid 176;
    function RunMacro(const FilePathName: WideString; const ModuleName: WideString; 
                      const ProcedureName: WideString): WordBool; dispid 177;
    function GetConfigurationCount(const FilePathName: WideString): Integer; dispid 178;
    function GetConfigurationNames(const FilePathName: WideString): OleVariant; dispid 179;
    function IGetConfigurationNames(const FilePathName: WideString; Count: Integer): WideString; dispid 180;
    function GetPreviewBitmap(const FilePathName: WideString; const ConfigName: WideString): IDispatch; dispid 181;
    function GetExecutablePath: WideString; dispid 182;
    function GetEdition: Integer; dispid 183;
    function MoveDocument(const SourceDoc: WideString; const DestDoc: WideString; 
                          FromChildren: OleVariant; ToChildren: OleVariant; Option: Integer): Integer; dispid 184;
    function CopyDocument(const SourceDoc: WideString; const DestDoc: WideString; 
                          FromChildren: OleVariant; ToChildren: OleVariant; Option: Integer): Integer; dispid 185;
    function IMoveDocument(const SourceDoc: WideString; const DestDoc: WideString; 
                           ChildCount: Integer; var FromChildren: WideString; 
                           var ToChildren: WideString; Option: Integer): Integer; dispid 186;
    function ICopyDocument(const SourceDoc: WideString; const DestDoc: WideString; 
                           ChildCount: Integer; var FromChildren: WideString; 
                           var ToChildren: WideString; Option: Integer): Integer; dispid 187;
    function AddToolbar4(Cookie: Integer; const Title: WideString; 
                         const SmallBitmapImage: WideString; const LargeBitmapImage: WideString; 
                         MenuPositionForToolbar: Integer; DocumentType: Integer): Integer; dispid 188;
    function GetActiveConfigurationName(const FilePathName: WideString): WideString; dispid 189;
    function Command(Command: Integer; Args: OleVariant): OleVariant; dispid 190;
    function GetRecentFiles: OleVariant; dispid 191;
    procedure ShowBubbleTooltip(PointAt: Integer; const FlashButtonIDs: WideString; 
                                TitleResID: Integer; const TitleString: WideString; 
                                const MessageString: WideString); dispid 192;
    function GetMaterialSchemaPathName: WideString; dispid 193;
    function GetMaterialDatabases: OleVariant; dispid 194;
    function GetMaterialDatabaseCount: Integer; dispid 195;
    function IGetMaterialDatabases(Count: Integer): WideString; dispid 196;
    function CreateTaskpaneView(var Bitmap: Integer; const ToolTip: WideString; 
                                const PHandler: IDispatch): ITaskpaneView; dispid 197;
    procedure ShowBubbleTooltipAt(PointX: Integer; PointY: Integer; ArrowPos: Integer; 
                                  const TitleString: WideString; const MessageString: WideString; 
                                  const UrlLoc: WideString); dispid 198;
    procedure InstallQuickTipGuide(const PInterface: IDispatch); dispid 199;
    procedure UnInstallQuickTipGuide(const PInterface: IDispatch); dispid 200;
    procedure RefreshQuickTipWindow; dispid 201;
    function GetLastToolbarID: Integer; dispid 202;
    function CreatePMPage(DialogId: Integer; const Title: WideString; const Handler: IDispatch): IPtnrPMPage; dispid 203;
    function GetUserTypeLibReferenceCount: Integer; dispid 204;
    property UserTypeLibReferences: OleVariant dispid 205;
    function IGetUserTypeLibReferences(NCount: Integer): WideString; dispid 206;
    procedure ISetUserTypeLibReferences(NCount: Integer; var BstrTlbRef: WideString); dispid 207;
    function RemoveUserTypeLibReferences(VTlbRef: OleVariant): WordBool; dispid 208;
    function IRemoveUserTypeLibReferences(NCount: Integer; var BstrTlbRef: WideString): WordBool; dispid 209;
    property UserControlBackground: WordBool dispid 210;
    function GetOpenFileName(const DialogTitle: WideString; const InitialFileName: WideString; 
                             const FileFilter: WideString; out OpenOptions: Integer; 
                             out ConfigName: WideString; out DisplayName: WideString): WideString; dispid 211;
    procedure ShowTooltip(const ToolbarName: WideString; ButtonID: Integer; SelectIDMask1: Integer; 
                          SelectIDMask2: Integer; const TitleString: WideString; 
                          const MessageString: WideString); dispid 212;
    function AddMenuItem3(DocumentType: Integer; Cookie: Integer; const MenuItem: WideString; 
                          Position: Integer; const MenuCallback: WideString; 
                          const MenuEnableMethod: WideString; const HintString: WideString; 
                          const BitmapFilePath: WideString): WordBool; dispid 213;
    function GetLatestSupportedFileVersion: Integer; dispid 214;
    procedure GetOpenedFileInfo(out FileName: WideString; out Options: Integer); dispid 215;
    function GetOpenDocument(const DocName: WideString): IModelDoc2; dispid 216;
    function GetImportFileData(const FileName: WideString): IDispatch; dispid 217;
    function LoadFile3(const FileName: WideString; const ArgString: WideString; 
                       const ImportData: IDispatch): WordBool; dispid 218;
    function CreateTaskpaneView2(const Bitmap: WideString; const ToolTip: WideString): ITaskpaneView; dispid 219;
    function GetCommandManager(Cookie: Integer): ICommandManager; dispid 220;
    procedure DragToolbarButton(SourceToolbar: Integer; TargetToolbar: Integer; 
                                SourceIndex: Integer; TargetIndex: Integer); dispid 221;
    procedure AddCallback(Cookie: Integer; const CallbackFunction: WideString); dispid 222;
    procedure RemoveCallback(Cookie: Integer); dispid 223;
    procedure ShowHelp(const HelpFile: WideString; HelpTopic: Integer); dispid 224;
    function GetErrorMessages(out Msgs: OleVariant; out MsgIDs: OleVariant; out MsgTypes: OleVariant): Integer; dispid 225;
    function GetCurrentMacroPathFolder: WideString; dispid 226;
    function LoadFile4(const FileName: WideString; const ArgString: WideString; 
                       const ImportData: IDispatch; var Errors: Integer): IModelDoc2; dispid 227;
    property CommandInProgress: WordBool dispid 228;
    function CloseAllDocuments(IncludeUnsaved: WordBool): WordBool; dispid 229;
    function GetCommandID(const Clsid: WideString; UserCmdID: Integer): Integer; dispid 230;
    function PreviewDocx64(var HWnd: {??Int64}OleVariant; const FullName: WideString): WordBool; dispid 231;
    property TaskPaneIsPinned: WordBool dispid 232;
    function GetUserProgressBar(out PProgressBar: IUserProgressBar): WordBool; dispid 233;
    function AddFileOpenItem3(Cookie: Integer; const MethodName: WideString; 
                              const Description: WideString; const Extension: WideString; 
                              const OptionLabel: WideString; const OptionMethodName: WideString): WordBool; dispid 234;
    function GetCookie(const AddinClsid: WideString; ResourceModuleHandle: Integer; 
                       const AddinCallbacks: IDispatch): Integer; dispid 235;
    function ActivateTaskPane(TaskPaneID: Integer): WordBool; dispid 236;
    function GetExportFileData(FileType: Integer): IDispatch; dispid 237;
    function RemoveFromMenu(CommandID: Integer; DocumentType: Integer; Option: Integer; 
                            RemoveParentMenu: WordBool): WordBool; dispid 238;
    function RemoveFromPopupMenu(CommandID: Integer; DocumentType: Integer; SelectionType: Integer; 
                                 RemoveParentMenu: WordBool): WordBool; dispid 239;
    function GetMenuStrings(CommandID: Integer; DocumentType: Integer; 
                            out ParentMenuName: WideString): WideString; dispid 240;
    procedure RefreshTaskpaneContent; dispid 241;
    function PresetNewDrawingParameters(const DrawingTemplate: WideString; ShowTemplate: WordBool; 
                                        Width: Double; Height: Double): WordBool; dispid 242;
    procedure ResetPresetDrawingParameters; dispid 243;
    function GetDocumentVisible(Type_: Integer): WordBool; dispid 244;
    function RunCommand(CommandID: Integer; const NewTitle: WideString): WordBool; dispid 245;
    property JournalManager: IJournalManager readonly dispid 246;
    procedure HideBubbleTooltip; dispid 247;
    function GetOpenDocSpec(const FileName: WideString): IDispatch; dispid 248;
    function OpenDoc7(const Specification: IDispatch): IModelDoc2; dispid 249;
    function BlockSkinning: WordBool; dispid 250;
    function ResumeSkinning: WordBool; dispid 251;
    procedure SetMultipleFilenamesPrompt(FileName: OleVariant); dispid 252;
    function GetPreviewBitmapFile(const DocumentPath: WideString; const ConfigName: WideString; 
                                  const BitMapFile: WideString): WordBool; dispid 253;
    function DragToolbarButtonFromCommandID(CommandID: Integer; TargetToolbar: Integer; 
                                            TargetIndex: Integer): Integer; dispid 254;
    function AddMenuItem4(DocumentType: Integer; Cookie: Integer; const MenuItem: WideString; 
                          Position: Integer; const MenuCallback: WideString; 
                          const MenuEnableMethod: WideString; const HintString: WideString; 
                          const BitmapFilePath: WideString): Integer; dispid 255;
    function AddMenuPopupItem3(DocumentType: Integer; Cookie: Integer; SelectType: Integer; 
                               const PopupItemName: WideString; const MenuCallback: WideString; 
                               const MenuEnableMethod: WideString; const HintString: WideString; 
                               const CustomNames: WideString): Integer; dispid 256;
  end;

// *********************************************************************//
// Interface: IModelDoc
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D46-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IModelDoc = interface(IDispatch)
    ['{83A33D46-27C5-11CE-BFD4-00400513BB57}']
    function Get_SelectionManager: IDispatch; safecall;
    function Get_ISelectionManager: ISelectionMgr; safecall;
    procedure Set_SelectionManager(const Retval: IDispatch); safecall;
    function Get_ActiveView: IDispatch; safecall;
    function Get_IActiveView: IModelView; safecall;
    procedure Set_ActiveView(const Retval: IDispatch); safecall;
    function Get_LengthUnit: Integer; safecall;
    procedure Set_LengthUnit(Retval: Integer); safecall;
    function Get_LightSourceUserName(ID: Integer): WideString; safecall;
    procedure Set_LightSourceUserName(ID: Integer; const Retval: WideString); safecall;
    function Get_LightSourcePropertyValues(ID: Integer): OleVariant; safecall;
    procedure Set_LightSourcePropertyValues(ID: Integer; Retval: OleVariant); safecall;
    function Get_SceneName: WideString; safecall;
    procedure Set_SceneName(const Retval: WideString); safecall;
    function Get_SceneUserName: WideString; safecall;
    procedure Set_SceneUserName(const Retval: WideString); safecall;
    procedure FeatureFillet(R1: Double; Propagate: WordBool; Ftyp: WordBool; VarRadTyp: WordBool; 
                            OverflowType: Integer); safecall;
    procedure GridOptions(DispGrid: WordBool; GridSpacing: Double; Snap: WordBool; 
                          DotStyle: WordBool; NMajor: Smallint; NMinor: Smallint; 
                          Align2edge: WordBool; AngleSnap: WordBool; AngleUnit: Double; 
                          MinorAuto: WordBool); safecall;
    procedure SetUnits(UType: Smallint; FractBase: Smallint; FractDenom: Smallint; 
                       SigDigits: Smallint; RoundToFraction: WordBool); safecall;
    procedure LBDownAt(Flags: Integer; X: Double; Y: Double; Z: Double); safecall;
    procedure LBUpAt(Flags: Integer; X: Double; Y: Double; Z: Double); safecall;
    procedure DragTo(Flags: Integer; X: Double; Y: Double; Z: Double); safecall;
    procedure SelectAt(Flags: Integer; X: Double; Y: Double; Z: Double); safecall;
    procedure CreateLineVB(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double); safecall;
    function CreateLine(P1: OleVariant; P2: OleVariant): WordBool; safecall;
    procedure CreateCenterLineVB(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                 Z2: Double); safecall;
    function CreateCenterLine(P1: OleVariant; P2: OleVariant): WordBool; safecall;
    procedure CreateArcVB(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                          P2z: Double; P3x: Double; P3y: Double; P3z: Double; Dir: Smallint); safecall;
    function CreateArc(P1: OleVariant; P2: OleVariant; P3: OleVariant; Dir: Smallint): WordBool; safecall;
    procedure CreateCircleVB(P1x: Double; P1y: Double; P1z: Double; Radius: Double); safecall;
    function CreateCircleByRadius(P1: OleVariant; Radius: Double): WordBool; safecall;
    function GetLines: OleVariant; safecall;
    procedure SketchTrim(Op: Integer; SelEnd: Integer; X: Double; Y: Double); safecall;
    procedure SketchOffsetEdges(Val: Double); safecall;
    procedure SketchRectangle(Val1: Double; Val2: Double; Z1: Double; Val3: Double; Val4: Double; 
                              Z2: Double; Val5: WordBool); safecall;
    procedure SketchPoint(X: Double; Y: Double; Z: Double); safecall;
    procedure FeatureCut(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                         D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; Ddir1: WordBool; 
                         Ddir2: WordBool; Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                         OffsetReverse2: WordBool); safecall;
    procedure FeatureBoss(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool); safecall;
    procedure SimpleHole(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                         D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; Ddir1: WordBool; 
                         Ddir2: WordBool; Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                         OffsetReverse2: WordBool); safecall;
    procedure FeatureLinearPattern(Num1: Integer; Spacing1: Double; Num2: Integer; 
                                   Spacing2: Double; FlipDir1: WordBool; FlipDir2: WordBool; 
                                   const DName1: WideString; const DName2: WideString); safecall;
    procedure NameView(const VName: WideString); safecall;
    procedure ShowNamedView(const VName: WideString); safecall;
    procedure CreatePlaneAtOffset(Val: Double; FlipDir: WordBool); safecall;
    procedure Toolbars(M: WordBool; Vw: WordBool; SkMain: WordBool; Sk: WordBool; Feat: WordBool; 
                       Constr: WordBool; Macro: WordBool); safecall;
    procedure CreatePlaneAtAngle(Val: Double; FlipDir: WordBool); safecall;
    procedure SetParamValue(Val: Double); safecall;
    procedure AddRelation(const RelStr: WideString); safecall;
    procedure DeleteAllRelations; safecall;
    procedure HoleWizard(Depth: Double; EndType: Smallint; Flip: WordBool; Dir: WordBool; 
                         HType: Integer; D1: Double; D2: Double; D3: Double; D4: Double; 
                         D5: Double; D6: Double; D7: Double; D8: Double; D9: Double; D10: Double; 
                         D11: Double; D12: Double); safecall;
    function SaveAs(const NewName: WideString): WordBool; safecall;
    procedure ActivateSelectedFeature; safecall;
    procedure SelectByName(Flags: Integer; const IdStr: WideString); safecall;
    procedure SketchAddConstraints(const IdStr: WideString); safecall;
    procedure SketchConstraintsDel(ConstrInd: Integer; const IdStr: WideString); safecall;
    procedure SketchConstraintsDelAll; safecall;
    procedure Lock; safecall;
    procedure UnLock; safecall;
    procedure InsertFeatureShell(Thickness: Double; Outward: WordBool); safecall;
    procedure SketchFillet(Rad: Double); safecall;
    procedure FeatureChamfer(Width: Double; Angle: Double; Flip: WordBool); safecall;
    procedure InsertMfDraft(Angle: Double; FlipDir: WordBool; IsEdgeDraft: WordBool; 
                            PropType: Integer); safecall;
    procedure ParentChildRelationship; safecall;
    procedure SketchSpline(MorePts: Integer; X: Double; Y: Double; Z: Double); safecall;
    procedure SelectSketchPoint(X: Double; Y: Double; Incidence: Integer); safecall;
    procedure SelectSketchLine(X0: Double; Y0: Double; Inc0: Integer; X1: Double; Y1: Double; 
                               Inc1: Integer); safecall;
    procedure SelectSketchArc(X0: Double; Y0: Double; Inc0: Integer; X1: Double; Y1: Double; 
                              Inc1: Integer; XC: Double; YC: Double; IncC: Integer; RotDir: Integer); safecall;
    procedure SelectSketchSpline(Size: Integer; X0: Double; Y0: Double; Inc0: Integer; X1: Double; 
                                 Y1: Double; Inc1: Integer; XC: Double; YC: Double; IncC: Integer); safecall;
    function CreateTangentArc(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                              P2z: Double): WordBool; safecall;
    function Create3PointArc(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                             P2z: Double; P3x: Double; P3y: Double; P3z: Double): WordBool; safecall;
    function CreateArcByCenter(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                               P2z: Double; P3x: Double; P3y: Double; P3z: Double): WordBool; safecall;
    function CreateCircle(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                          P2z: Double): WordBool; safecall;
    function AddDimension(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function AddHorizontalDimension(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function AddVerticalDimension(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function SelectSketchItem(SelOpt: Integer; const Name: WideString; X: Double; Y: Double; 
                              Z: Double): WordBool; safecall;
    procedure ClearSelection; safecall;
    procedure Select(const SelID: WideString; const SelParams: WideString; X: Double; Y: Double; 
                     Z: Double); safecall;
    procedure AndSelect(const SelID: WideString; const SelParams: WideString; X: Double; Y: Double; 
                        Z: Double); safecall;
    function CreatePoint(PointX: Double; PointY: Double; PointZ: Double): WordBool; safecall;
    function CreateLineDB(Sx: Double; Sy: Double; Sz: Double; Ex: Double; Ey: Double; Ez: Double): WordBool; safecall;
    function CreateArcDB(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double; 
                         X3: Double; Y3: Double; Z3: Double; Dir: Smallint): WordBool; safecall;
    function CreateCircleDB(Cx: Double; Cy: Double; Cz: Double; Radius: Double): WordBool; safecall;
    function CreatePointDB(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function GetTitle: WideString; safecall;
    function GetPathName: WideString; safecall;
    function GetType: Integer; safecall;
    procedure InsertObject; safecall;
    procedure EditClearAll; safecall;
    procedure EditCopy; safecall;
    procedure EditCut; safecall;
    procedure ObjectDisplayContent; safecall;
    procedure ObjectDisplayAsIcon; safecall;
    procedure ObjectResetsize; safecall;
    procedure WindowRedraw; safecall;
    procedure Dummy3; safecall;
    procedure SetPickMode; safecall;
    procedure ViewRotateminusx; safecall;
    procedure ViewRotateminusy; safecall;
    procedure ViewRotateminusz; safecall;
    procedure ViewRotateplusx; safecall;
    procedure ViewRotateplusy; safecall;
    procedure ViewRotateplusz; safecall;
    procedure ViewTranslateminusx; safecall;
    procedure ViewTranslateminusy; safecall;
    procedure ViewTranslateplusx; safecall;
    procedure ViewTranslateplusy; safecall;
    procedure ViewRotXMinusNinety; safecall;
    procedure ViewRotYMinusNinety; safecall;
    procedure ViewRotYPlusNinety; safecall;
    procedure ViewZoomin; safecall;
    procedure ViewZoomout; safecall;
    procedure ViewDisplayHiddenremoved; safecall;
    procedure ViewDisplayWireframe; safecall;
    procedure ViewDisplayShaded; safecall;
    procedure ViewRwShading; safecall;
    procedure ViewOglShading; safecall;
    procedure ViewZoomtofit; safecall;
    procedure ViewRotate; safecall;
    procedure ViewTranslate; safecall;
    procedure ViewZoomto; safecall;
    procedure ViewDisplayHiddengreyed; safecall;
    procedure ViewDisplayFaceted; safecall;
    procedure ViewConstraint; safecall;
    procedure UserFavors; safecall;
    procedure FeatureCirPattern(Num: Integer; Spacing: Double; FlipDir: WordBool; 
                                const DName: WideString); safecall;
    procedure EditSketch; safecall;
    procedure FeatEdit; safecall;
    procedure FeatEditDef; safecall;
    procedure InsertPoint; safecall;
    procedure InsertFamilyTableNew; safecall;
    procedure Dummy1; safecall;
    procedure InsertFamilyTableEdit; safecall;
    procedure Dummy2; safecall;
    procedure ToolsMacro; safecall;
    procedure ToolsGrid; safecall;
    procedure SketchCenterline; safecall;
    procedure SketchAlign; safecall;
    procedure SketchArc; safecall;
    procedure SketchTangentArc; safecall;
    procedure SketchCircle; safecall;
    procedure SketchUndo; safecall;
    procedure UserPreferences; safecall;
    procedure Lights; safecall;
    procedure SketchConstrainCoincident; safecall;
    procedure SketchConstrainConcentric; safecall;
    procedure SketchConstrainPerp; safecall;
    procedure SketchConstrainTangent; safecall;
    procedure SketchConstrainParallel; safecall;
    procedure SketchUseEdge; safecall;
    procedure SketchUseEdgeCtrline; safecall;
    procedure SketchMirror; safecall;
    procedure Save; safecall;
    procedure Close; safecall;
    procedure ViewDispRefaxes; safecall;
    procedure ViewDispRefplanes; safecall;
    procedure InsertSketch; safecall;
    procedure InsertProtrusionSwept(Propagate: WordBool; Alignment: WordBool; 
                                    KeepNormalConstant: WordBool); safecall;
    procedure InsertProtrusionBlend(Closed: WordBool); safecall;
    procedure ToolsMassProps; safecall;
    procedure PropertySheet; safecall;
    procedure BlankRefGeom; safecall;
    procedure UnBlankRefGeom; safecall;
    procedure EditDelete; safecall;
    procedure InsertProjectedSketch; safecall;
    function CreatePlaneFixed(P1: OleVariant; P2: OleVariant; P3: OleVariant; UseGlobal: WordBool): WordBool; safecall;
    procedure Dummy5; safecall;
    procedure Dummy6; safecall;
    procedure DebugCheckBody; safecall;
    procedure Dummy8; safecall;
    procedure DimPreferences; safecall;
    procedure UnblankSketch; safecall;
    procedure EditSketchOrSingleSketchFeature; safecall;
    procedure DebugCheckIgesGeom; safecall;
    procedure BlankSketch; safecall;
    function GetDefaultTextHeight: Double; safecall;
    function IsActive(const CompStr: WideString): WordBool; safecall;
    function CreateEllipse(Center: OleVariant; Major: OleVariant; Minor: OleVariant): WordBool; safecall;
    function CreateEllipseVB(CenterX: Double; CenterY: Double; CenterZ: Double; MajorX: Double; 
                             MajorY: Double; MajorZ: Double; MinorX: Double; MinorY: Double; 
                             MinorZ: Double): WordBool; safecall;
    function CreateEllipticalArcByCenter(Center: OleVariant; Major: OleVariant; Minor: OleVariant; 
                                         Start: OleVariant; End_: OleVariant): WordBool; safecall;
    function CreateEllipticalArcByCenterVB(CenterX: Double; CenterY: Double; CenterZ: Double; 
                                           MajorX: Double; MajorY: Double; MajorZ: Double; 
                                           MinorX: Double; MinorY: Double; MinorZ: Double; 
                                           StartX: Double; StartY: Double; StartZ: Double; 
                                           EndX: Double; EndY: Double; EndZ: Double): WordBool; safecall;
    function GetActiveSketch: IDispatch; safecall;
    function IGetActiveSketch: ISketch; safecall;
    function GetTessellationQuality: Integer; safecall;
    procedure SetTessellationQuality(QualityNum: Integer); safecall;
    function Parameter(const StringIn: WideString): IDispatch; safecall;
    function IParameter(const StringIn: WideString): IDimension; safecall;
    function SelectByID(const SelID: WideString; const SelParams: WideString; X: Double; Y: Double; 
                        Z: Double): WordBool; safecall;
    function AndSelectByID(const SelID: WideString; const SelParams: WideString; X: Double; 
                           Y: Double; Z: Double): WordBool; safecall;
    procedure Insert3DSketch; safecall;
    function GetLightSourceName(ID: Integer): WideString; safecall;
    function AddLightSource(const IdName: WideString; LTyp: SYSINT; const UserName: WideString): WordBool; safecall;
    function AddLightSourceExtProperty(ID: Integer; PropertyExtension: OleVariant): Integer; safecall;
    procedure ResetLightSourceExtProperty(ID: Integer); safecall;
    procedure DeleteLightSource(ID: Integer); safecall;
    function GetLightSourceExtProperty(ID: Integer; PropertyId: Integer): OleVariant; safecall;
    function AddLightToScene(const LpszNewValue: WideString): Integer; safecall;
    function AddSceneExtProperty(PropertyExtension: OleVariant): Integer; safecall;
    procedure ResetSceneExtProperty; safecall;
    function GetSceneExtProperty(PropertyId: Integer): OleVariant; safecall;
    procedure FileSummaryInfo; safecall;
    function GetGridSettings: OleVariant; safecall;
    procedure ToolsSketchTranslate; safecall;
    procedure ToolsDistance; safecall;
    procedure SkToolsAutoConstr; safecall;
    procedure ToolsSketchScale; safecall;
    procedure Paste; safecall;
    procedure ToolsConfiguration; safecall;
    procedure EntityProperties; safecall;
    function GetArcCentersDisplayed: WordBool; safecall;
    procedure SetArcCentersDisplayed(Setting: WordBool); safecall;
    procedure AutoSolveToggle; safecall;
    procedure Dummy7; safecall;
    function IGetLines: Double; safecall;
    function GetLineCount: Integer; safecall;
    procedure ICreateEllipse(var Center: Double; var Major: Double; var Minor: Double); safecall;
    procedure ICreateEllipticalArcByCenter(var Center: Double; var Major: Double; 
                                           var Minor: Double; var Start: Double; var End_: Double); safecall;
    function Get_ILightSourcePropertyValues(ID: Integer): Double; safecall;
    procedure Set_ILightSourcePropertyValues(ID: Integer; var Retval: Double); safecall;
    procedure InsertCutSwept(Propagate: WordBool; Alignment: WordBool; KeepNormalConstant: WordBool); safecall;
    procedure InsertCutBlend(Closed: WordBool); safecall;
    procedure InsertHelix(Reversed: WordBool; Clockwised: WordBool; Tapered: WordBool; 
                          Outward: WordBool; Helixdef: Integer; Height: Double; Pitch: Double; 
                          Revolution: Double; TaperAngle: Double; Startangle: Double); safecall;
    procedure ICreateLine(var P1: Double; var P2: Double); safecall;
    procedure ICreateCenterLine(var P1: Double; var P2: Double); safecall;
    procedure ICreateArc(var P1: Double; var P2: Double; var P3: Double; Dir: Smallint); safecall;
    procedure ICreateCircleByRadius(var P1: Double; Radius: Double); safecall;
    procedure GraphicsRedraw; safecall;
    function GetVisibilityOfConstructPlanes: WordBool; safecall;
    function GetDisplayWhenAdded: WordBool; safecall;
    procedure SetDisplayWhenAdded(Setting: WordBool); safecall;
    function GetAddToDB: WordBool; safecall;
    procedure SetAddToDB(Setting: WordBool); safecall;
    function DeSelectByID(const SelID: WideString; const SelParams: WideString; X: Double; 
                          Y: Double; Z: Double): WordBool; safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(Retval: WordBool); safecall;
    procedure PrintDirect; safecall;
    procedure PrintPreview; safecall;
    procedure Quit; safecall;
    procedure CreatePlaneThru3Points; safecall;
    procedure ViewRotXPlusNinety; safecall;
    function GetUnits: OleVariant; safecall;
    procedure SetAngularUnits(UType: Smallint; FractBase: Smallint; FractDenom: Smallint; 
                              SigDigits: Smallint); safecall;
    function GetAngularUnits: OleVariant; safecall;
    function IGetUnits: Smallint; safecall;
    procedure ISetAngularUnits(UType: Smallint; FractBase: Smallint; FractDenom: Smallint; 
                               SigDigits: Smallint); safecall;
    function IGetAngularUnits: Smallint; safecall;
    procedure ShowConfiguration(const ConfigurationName: WideString); safecall;
    procedure ResetConfiguration; safecall;
    procedure AddConfiguration(const Name: WideString; const Comment: WideString; 
                               const AlternateName: WideString; SuppressByDefault: WordBool; 
                               HideByDefault: WordBool; MinFeatureManager: WordBool; 
                               InheritProperties: WordBool; Flags: LongWord); safecall;
    procedure DeleteConfiguration(const ConfigurationName: WideString); safecall;
    procedure EditConfiguration(const Name: WideString; const NewName: WideString; 
                                const Comment: WideString; const AlternateName: WideString; 
                                SuppressByDefault: WordBool; HideByDefault: WordBool; 
                                MinFeatureManager: WordBool; InheritProperties: WordBool; 
                                Flags: LongWord); safecall;
    procedure CreatePlanePerCurveAndPassPoint(OrigAtCurve: WordBool); safecall;
    function CreateFeatureMgrView(var Bitmap: Integer): IDispatch; safecall;
    function AddFeatureMgrView(var Bitmap: Integer; var AppView: Integer): WordBool; safecall;
    function GetStandardViewRotation(ViewId: Integer): OleVariant; safecall;
    function IGetStandardViewRotation(ViewId: Integer): Double; safecall;
    procedure FeatureExtruRefSurface(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                     T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                     Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; 
                                     Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                                     OffsetReverse2: WordBool); safecall;
    function IGet3rdPartyStorage(const StringIn: WideString; IsStoring: WordBool): IUnknown; safecall;
    procedure DeleteFeatureMgrView(var AppView: Integer); safecall;
    function GetMassProperties: OleVariant; safecall;
    function IGetMassProperties(var MPropsData: Double): WordBool; safecall;
    function GetLightSourceCount: Integer; safecall;
    function GetLightSourceIdFromName(const LightName: WideString): Integer; safecall;
    procedure SetNextSelectionGroupId(ID: Integer); safecall;
    procedure ISetNextSelectionGroupId(ID: Integer); safecall;
    function InsertMidSurfaceExt(Placement: Double; KnitFlag: WordBool): IDispatch; safecall;
    function IInsertMidSurfaceExt(Placement: Double; KnitFlag: WordBool): IMidSurface; safecall;
    procedure ICreatePlaneFixed(var P1: Double; var P2: Double; var P3: Double; UseGlobal: WordBool); safecall;
    function SelectByMark(const SelID: WideString; const SelParams: WideString; X: Double; 
                          Y: Double; Z: Double; Mark: Integer): WordBool; safecall;
    function AndSelectByMark(const SelID: WideString; const SelParams: WideString; X: Double; 
                             Y: Double; Z: Double; Mark: Integer): WordBool; safecall;
    function GetDependencies(Traverseflag: Integer; Searchflag: Integer): OleVariant; safecall;
    function IGetDependencies(Traverseflag: Integer; Searchflag: Integer): WideString; safecall;
    function GetNumDependencies(Traverseflag: Integer; Searchflag: Integer): Integer; safecall;
    function IGetNumDependencies(Traverseflag: Integer; Searchflag: Integer): Integer; safecall;
    function FirstFeature: IDispatch; safecall;
    function IFirstFeature: IFeature; safecall;
    procedure UnderiveSketch; safecall;
    procedure DeriveSketch; safecall;
    function IsExploded: WordBool; safecall;
    function DeleteSelection(ConfirmFlag: WordBool): WordBool; safecall;
    function DeleteNamedView(const ViewName: WideString): WordBool; safecall;
    function SetLightSourceName(ID: Integer; const NewName: WideString): WordBool; safecall;
    procedure Insert3DSplineCurve(CurveClosed: WordBool); safecall;
    function SetLightSourcePropertyValuesVB(const IdName: WideString; LType: SYSINT; Diff: Double; 
                                            RgbColor: Integer; Dist: Double; DirX: Double; 
                                            DirY: Double; DirZ: Double; SpotDirX: Double; 
                                            SpotDirY: Double; SpotDirZ: Double; SpotAngle: Double; 
                                            FallOff0: Double; FallOff1: Double; FallOff2: Double; 
                                            Ambient: Double; Specular: Double; 
                                            SpotExponent: Double; BDisable: WordBool): WordBool; safecall;
    function ICreateFeatureMgrView(var Bitmap: Integer): IFeatMgrView; safecall;
    function SelectedEdgeProperties(const EdgeName: WideString): WordBool; safecall;
    function SelectedFaceProperties(RgbColor: Integer; Ambient: Double; Diffuse: Double; 
                                    Specular: Double; Shininess: Double; Transparency: Double; 
                                    Emission: Double; UsePartProps: WordBool; 
                                    const FaceName: WideString): WordBool; safecall;
    function SelectedFeatureProperties(RgbColor: Integer; Ambient: Double; Diffuse: Double; 
                                       Specular: Double; Shininess: Double; Transparency: Double; 
                                       Emission: Double; UsePartProps: WordBool; 
                                       Suppressed: WordBool; const FeatureName: WideString): WordBool; safecall;
    procedure InsertSplitLineSil; safecall;
    procedure InsertSplitLineProject(IsDirectional: WordBool; FlipDir: WordBool); safecall;
    procedure InsertRib(Is2Sided: WordBool; ReverseThicknessDir: WordBool; Thickness: Double; 
                        ReferenceEdgeIndex: Integer; ReverseMaterialDir: WordBool; 
                        IsDrafted: WordBool; DraftOutward: WordBool; DraftAngle: Double); safecall;
    function AddRadialDimension(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function AddDiameterDimension(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function GetModelViewNames: OleVariant; safecall;
    function IGetModelViewNames: WideString; safecall;
    function GetModelViewCount: SYSINT; safecall;
    function GetUserPreferenceDoubleValue(UserPreferenceValue: Integer): Double; safecall;
    function SetUserPreferenceDoubleValue(UserPreferenceValue: Integer; Value: Double): WordBool; safecall;
    procedure ViewDisplayCurvature; safecall;
    procedure Scale; safecall;
    procedure AddIns; safecall;
    function InsertCurveFile(const FileName: WideString): WordBool; safecall;
    procedure InsertCurveFileBegin; safecall;
    function InsertCurveFilePoint(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function InsertCurveFileEnd: WordBool; safecall;
    function ChangeSketchPlane: WordBool; safecall;
    procedure ViewOrientationUndo; safecall;
    procedure PrintOut(FromPage: Integer; ToPage: Integer; NumCopies: Integer; Collate: WordBool; 
                       const Printer: WideString; Scale: Double; PrintToFile: WordBool); safecall;
    procedure SketchOffsetEntities(Offset: Double; Flip: WordBool); safecall;
    procedure InsertLibraryFeature(const LibFeatPartNameIn: WideString); safecall;
    procedure SketchModifyTranslate(StartX: Double; StartY: Double; EndX: Double; EndY: Double); safecall;
    procedure SketchModifyRotate(CenterX: Double; CenterY: Double; Angle: Double); safecall;
    procedure SketchModifyFlip(AxisFlag: SYSINT); safecall;
    function SketchModifyScale(ScaleFactor: Double): WordBool; safecall;
    function GetActiveConfiguration: IDispatch; safecall;
    function IGetActiveConfiguration: IConfiguration; safecall;
    function GetUserPreferenceToggle(UserPreferenceToggle: Integer): WordBool; safecall;
    function SetUserPreferenceToggle(UserPreferenceValue: Integer; OnFlag: WordBool): WordBool; safecall;
    procedure InsertSweepRefSurface(Propagate: WordBool; TwistCtrlOption: Smallint; 
                                    KeepTangency: WordBool; ForceNonRational: WordBool); safecall;
    procedure InsertLoftRefSurface(Closed: WordBool; KeepTangency: WordBool; 
                                   ForceNonRational: WordBool); safecall;
    procedure InsertProtrusionSwept2(Propagate: WordBool; Alignment: WordBool; 
                                     TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool); safecall;
    procedure InsertProtrusionBlend2(Closed: WordBool; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool); safecall;
    procedure InsertCutSwept2(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                              KeepTangency: WordBool; ForceNonRational: WordBool); safecall;
    procedure InsertCutBlend2(Closed: WordBool; KeepTangency: WordBool; ForceNonRational: WordBool); safecall;
    function IsEditingSelf: WordBool; safecall;
    procedure ShowNamedView2(const VName: WideString; ViewId: Integer); safecall;
    procedure InsertDome(Height: Double; ReverseDir: WordBool; DoEllipticSurface: WordBool); safecall;
    function Get_MaterialUserName: WideString; safecall;
    procedure Set_MaterialUserName(const Retval: WideString); safecall;
    function Get_MaterialIdName: WideString; safecall;
    procedure Set_MaterialIdName(const Retval: WideString); safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(Retval: OleVariant); safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var Retval: Double); safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(ID: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetUpdateStamp: Integer; safecall;
    procedure ViewZoomTo2(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double); safecall;
    procedure ScreenRotate; safecall;
    function Get_PrintSetup(SetupType: Integer): Smallint; safecall;
    procedure Set_PrintSetup(SetupType: Integer; SetupValue: Smallint); safecall;
    procedure GraphicsRedraw2; safecall;
    procedure InsertCosmeticThread(Type_: Smallint; Depth: Double; Length: Double; 
                                   const Note: WideString); safecall;
    procedure HideCosmeticThread; safecall;
    procedure ShowCosmeticThread; safecall;
    procedure SimpleHole2(Dia: Double; Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                          T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool); safecall;
    procedure IRelease3rdPartyStorage(const StringIn: WideString); safecall;
    function FeatureRevolve2(Angle: Double; ReverseDir: WordBool; Angle2: Double; RevType: Integer; 
                             Options: Integer): Integer; safecall;
    function FeatureRevolveCut2(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                RevType: Integer; Options: Integer): Integer; safecall;
    procedure SetSaveFlag; safecall;
    function GetExternalReferenceName: WideString; safecall;
    function SelectByRay(DoubleInfoIn: OleVariant; TypeWanted: Integer): WordBool; safecall;
    function ISelectByRay(var PointIn: Double; var VectorIn: Double; RadiusIn: Double; 
                          TypeWanted: Integer): WordBool; safecall;
    procedure SetSceneBkgDIB(L_dib: Integer); safecall;
    function Get_SceneBkgImageFileName: WideString; safecall;
    procedure Set_SceneBkgImageFileName(const Retval: WideString); safecall;
    procedure InsertBkgImage(const NewName: WideString); safecall;
    procedure DeleteBkgImage; safecall;
    procedure InsertSplinePoint(X: Double; Y: Double; Z: Double); safecall;
    procedure InsertLoftRefSurface2(Closed: WordBool; KeepTangency: WordBool; 
                                    ForceNonRational: WordBool; TessToleranceFactor: Double; 
                                    StartMatchingType: Smallint; EndMatchingType: Smallint); safecall;
    procedure InsertProtrusionBlend3(Closed: WordBool; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; TessToleranceFactor: Double; 
                                     StartMatchingType: Smallint; EndMatchingType: Smallint); safecall;
    procedure InsertCutBlend3(Closed: WordBool; KeepTangency: WordBool; ForceNonRational: WordBool; 
                              TessToleranceFactor: Double; StartMatchingType: Smallint; 
                              EndMatchingType: Smallint); safecall;
    procedure AlignDimensions; safecall;
    procedure BreakDimensionAlignment; safecall;
    procedure SketchFillet1(Rad: Double); safecall;
    procedure FeatureChamferType(ChamferType: Smallint; Width: Double; Angle: Double; 
                                 Flip: WordBool; OtherDist: Double; VertexChamDist1: Double; 
                                 VertexChamDist2: Double; VertexChamDist3: Double); safecall;
    procedure FeatureCutThin(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                             D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                             Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                             OffsetReverse1: WordBool; OffsetReverse2: WordBool; Thk1: Double; 
                             Thk2: Double; EndThk: Double; RevThinDir: Integer; CapEnds: Integer; 
                             AddBends: WordBool; BendRad: Double); safecall;
    procedure FeatureBossThin(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                              T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                              Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                              Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                              Thk1: Double; Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                              CapEnds: Integer; AddBends: WordBool; BendRad: Double); safecall;
    function InsertDatumTargetSymbol(const Datum1: WideString; const Datum2: WideString; 
                                     const Datum3: WideString; AreaStyle: Smallint; 
                                     AreaOutside: WordBool; Value1: Double; Value2: Double; 
                                     const ValueStr1: WideString; const ValueStr2: WideString; 
                                     ArrowsSmart: WordBool; ArrowStyle: Smallint; 
                                     LeaderLineStyle: Smallint; LeaderBent: WordBool; 
                                     ShowArea: WordBool; ShowSymbol: WordBool): WordBool; safecall;
    function EditDatumTargetSymbol(const Datum1: WideString; const Datum2: WideString; 
                                   const Datum3: WideString; AreaStyle: Smallint; 
                                   AreaOutside: WordBool; Value1: Double; Value2: Double; 
                                   const ValueStr1: WideString; const ValueStr2: WideString; 
                                   ArrowsSmart: WordBool; ArrowStyle: Smallint; 
                                   LeaderLineStyle: Smallint; LeaderBent: WordBool; 
                                   ShowArea: WordBool; ShowSymbol: WordBool): WordBool; safecall;
    procedure InsertBOMBalloon; safecall;
    function FeatureReferenceCurve(NumOfCurves: Integer; BaseCurves: OleVariant; Merge: WordBool; 
                                   const FromFileName: WideString; out ErrorCode: Integer): IDispatch; safecall;
    function IFeatureReferenceCurve(NumOfCurves: Integer; BaseCurves: PPPUserType1; 
                                    Merge: WordBool; const FromFileName: WideString; 
                                    out ErrorCode: Integer): IReferenceCurve; safecall;
    procedure FontBold(Bold: WordBool); safecall;
    procedure FontItalic(Italic: WordBool); safecall;
    procedure FontUnderline(Underline: WordBool); safecall;
    procedure FontFace(const Face: WideString); safecall;
    procedure FontPoints(Points: Smallint); safecall;
    procedure FontUnits(Units: Double); safecall;
    function SketchSplineByEqnParams(ParamsIn: OleVariant): WordBool; safecall;
    procedure AlignParallelDimensions; safecall;
    procedure SetBlockingState(StateIn: Integer); safecall;
    procedure ResetBlockingState; safecall;
    function GetSceneBkgDIB: Integer; safecall;
    procedure InsertHatchedFace; safecall;
    function GetColorTable: IDispatch; safecall;
    function IGetColorTable: IColorTable; safecall;
    procedure InsertSweepRefSurface2(Propagate: WordBool; TwistCtrlOption: Smallint; 
                                     KeepTangency: WordBool; ForceNonRational: WordBool; 
                                     StartMatchingType: Smallint; EndMatchingType: Smallint); safecall;
    procedure InsertProtrusionSwept3(Propagate: WordBool; Alignment: WordBool; 
                                     TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; StartMatchingType: Smallint; 
                                     EndMatchingType: Smallint); safecall;
    procedure InsertCutSwept3(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                              KeepTangency: WordBool; ForceNonRational: WordBool; 
                              StartMatchingType: Smallint; EndMatchingType: Smallint); safecall;
    function IsOpenedViewOnly: WordBool; safecall;
    function IsOpenedReadOnly: WordBool; safecall;
    procedure ViewZoomToSelection; safecall;
    procedure FeatureBossThicken(Thickness: Double; Direction: Integer; FaceIndex: Integer); safecall;
    procedure FeatureCutThicken(Thickness: Double; Direction: Integer; FaceIndex: Integer); safecall;
    function InsertAxis: WordBool; safecall;
    procedure EditUndo(NSteps: LongWord); safecall;
    procedure SelectMidpoint; safecall;
    function ISketchSplineByEqnParams(var PropArray: SYSINT; var KnotsArray: Double; 
                                      var CntrlPntCoordArray: Double): Integer; safecall;
    function VersionHistory: OleVariant; safecall;
    function IVersionHistory: WideString; safecall;
    function IGetVersionHistoryCount: SYSINT; safecall;
    procedure Rebuild(Options: Integer); safecall;
    procedure InsertFeatureShellAddThickness(Thickness: Double); safecall;
    procedure InsertOffsetSurface(Thickness: Double; Reverse: WordBool); safecall;
    procedure SimplifySpline(ToleranceIn: Double); safecall;
    function Get_SummaryInfo(FieldId: Integer): WideString; safecall;
    procedure Set_SummaryInfo(FieldId: Integer; const Retval: WideString); safecall;
    function Get_CustomInfo(const FieldName: WideString): WideString; safecall;
    procedure Set_CustomInfo(const FieldName: WideString; const Retval: WideString); safecall;
    function GetCustomInfoCount: Integer; safecall;
    function GetCustomInfoType(const FieldName: WideString): WideString; safecall;
    function GetCustomInfoNames: OleVariant; safecall;
    function IGetCustomInfoNames: WideString; safecall;
    function AddCustomInfo(const FieldName: WideString; const FieldType: WideString; 
                           const FieldValue: WideString): WordBool; safecall;
    function DeleteCustomInfo(const FieldName: WideString): WordBool; safecall;
    procedure PrintOut2(FromPage: Integer; ToPage: Integer; NumCopies: Integer; Collate: WordBool; 
                        const Printer: WideString; Scale: Double; PrintToFile: WordBool; 
                        const PtfName: WideString); safecall;
    function SetReadOnlyState(SetReadOnly: WordBool): WordBool; safecall;
    function InsertFamilyTableOpen(const FileName: WideString): WordBool; safecall;
    function MultiSelectByRay(DoubleInfoIn: OleVariant; TypeWanted: Integer; Append: WordBool): WordBool; safecall;
    function IMultiSelectByRay(var PointIn: Double; var VectorIn: Double; RadiusIn: Double; 
                               TypeWanted: Integer; Append: WordBool): WordBool; safecall;
    procedure InsertNewNote3(const UpperText: WideString; NoLeader: WordBool; BentLeader: WordBool; 
                             ArrowStyle: Smallint; LeaderSide: Smallint; Angle: Double; 
                             BalloonStyle: Smallint; BalloonFit: Smallint; SmartArrow: WordBool); safecall;
    procedure InsertWeldSymbol2(const Dim1: WideString; const Symbol: WideString; 
                                const Dim2: WideString; Symmetric: WordBool; FieldWeld: WordBool; 
                                ShowOtherSide: WordBool; DashOnTop: WordBool; Peripheral: WordBool; 
                                HasProcess: WordBool; const ProcessValue: WideString); safecall;
    function InsertSurfaceFinishSymbol2(SymType: Integer; LeaderType: Integer; LocX: Double; 
                                        LocY: Double; LocZ: Double; LaySymbol: Integer; 
                                        ArrowType: Integer; const MachAllowance: WideString; 
                                        const OtherVals: WideString; const ProdMethod: WideString; 
                                        const SampleLen: WideString; 
                                        const MaxRoughness: WideString; 
                                        const MinRoughness: WideString; 
                                        const RoughnessSpacing: WideString): WordBool; safecall;
    function SaveSilent: Integer; safecall;
    function SaveAsSilent(const NewName: WideString; SaveAsCopy: WordBool): Integer; safecall;
    function AddCustomInfo2(const FieldName: WideString; FieldType: Integer; 
                            const FieldValue: WideString): WordBool; safecall;
    function GetCustomInfoType2(const FieldName: WideString): Integer; safecall;
    function InsertRefPoint: WordBool; safecall;
    function FeatureFillet2(R1: Double; Propagate: WordBool; Ftyp: WordBool; VarRadTyp: WordBool; 
                            OverflowType: Integer; NRadii: SYSINT; Radii: OleVariant): Integer; safecall;
    function IFeatureFillet2(R1: Double; Propagate: WordBool; Ftyp: WordBool; VarRadTyp: WordBool; 
                             OverflowType: Integer; NRadii: SYSINT; var Radii: Double): Integer; safecall;
    function GetFirstAnnotation: IDispatch; safecall;
    function IGetFirstAnnotation: IAnnotation; safecall;
    function InsertCoordinateSystem(XFlippedIn: WordBool; YFlippedIn: WordBool; ZFlippedIn: WordBool): WordBool; safecall;
    function GetToolbarVisibility(Toolbar: Integer): WordBool; safecall;
    procedure SetToolbarVisibility(Toolbar: Integer; Visibility: WordBool); safecall;
    procedure ViewDispCoordinateSystems; safecall;
    procedure ViewDispTempRefaxes; safecall;
    procedure ViewDispRefPoints; safecall;
    procedure ViewDispOrigins; safecall;
    function GetCoordinateSystemXformByName(const NameIn: WideString): OleVariant; safecall;
    function IGetCoordinateSystemXformByName(const NameIn: WideString): Double; safecall;
    function GetCurrentCoordinateSystemName: WideString; safecall;
    function EnumModelViews: IEnumModelViews; safecall;
    function InsertCompositeCurve: WordBool; safecall;
    procedure SketchParabola(Val1: Double; Val2: Double; Z1: Double; Val3: Double; Val4: Double; 
                             Z2: Double; Val5: Double; Val6: Double; Z3: Double; Val7: Double; 
                             Val8: Double; Z4: Double); safecall;
    procedure InsertRadiateSurface(Distance: Double; FlipDir: WordBool; TangentPropagate: WordBool); safecall;
    procedure InsertSewRefSurface; safecall;
    function InsertShape(PressureOn: Integer; TangentsOn: Integer; PressureGain: Double; 
                         TangentGain: Double; CurveSpringGain: Double; Alpha: Double; Beta: Double; 
                         Gamma: Double; Delta: Double; Degree: Integer; Split: Integer; 
                         Tuning: Integer): Integer; safecall;
    procedure InsertMfDraft2(Angle: Double; FlipDir: WordBool; IsEdgeDraft: WordBool; 
                             PropType: Integer; StepDraft: WordBool); safecall;
    function GetConfigurationCount: Integer; safecall;
    function GetConfigurationNames: OleVariant; safecall;
    function IGetConfigurationNames(var Count: Integer): WideString; safecall;
    procedure FeatureCut2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          KeepPieceIndex: Integer); safecall;
    procedure InsertCutSurface(Flip: WordBool; KeepPieceIndex: Integer); safecall;
    function GetDetailingDefaults: IDispatch; safecall;
    function IGetDetailingDefaults: IDetailingDefaults; safecall;
    function ListExternalFileReferencesCount(UseSearchRules: WordBool): Integer; safecall;
    function ListExternalFileReferences(UseSearchRules: WordBool): OleVariant; safecall;
    function IListExternalFileReferences(UseSearchRules: WordBool; NumRefs: Integer): WideString; safecall;
    function SketchSplineByEqnParams2(ParamsIn: OleVariant): WordBool; safecall;
    function GetFirstModelView: IDispatch; safecall;
    function IGetFirstModelView: IModelView; safecall;
    function InsertPlanarRefSurface: WordBool; safecall;
    function GetNext: IDispatch; safecall;
    function GetSaveFlag: WordBool; safecall;
    function AddCustomInfo3(const Configuration: WideString; const FieldName: WideString; 
                            FieldType: Integer; const FieldValue: WideString): WordBool; safecall;
    function Get_CustomInfo2(const Configuration: WideString; const FieldName: WideString): WideString; safecall;
    procedure Set_CustomInfo2(const Configuration: WideString; const FieldName: WideString; 
                              const Retval: WideString); safecall;
    function DeleteCustomInfo2(const Configuration: WideString; const FieldName: WideString): WordBool; safecall;
    function GetCustomInfoCount2(const Configuration: WideString): Integer; safecall;
    function GetCustomInfoNames2(const Configuration: WideString): OleVariant; safecall;
    function IGetCustomInfoNames2(const Configuration: WideString): WideString; safecall;
    function GetCustomInfoType3(const Configuration: WideString; const FieldName: WideString): Integer; safecall;
    function GetConsiderLeadersAsLines: WordBool; safecall;
    function SetConsiderLeadersAsLines(LeadersAsLines: WordBool): WordBool; safecall;
    procedure InsertRevolvedRefSurface(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                       RevType: SYSINT); safecall;
    function GetBendState: Integer; safecall;
    function SetBendState(BendState: Integer): Integer; safecall;
    function Get_ShowFeatureErrorDialog: WordBool; safecall;
    procedure Set_ShowFeatureErrorDialog(Retval: WordBool); safecall;
    procedure ClearUndoList; safecall;
    function GetFeatureManagerWidth: Integer; safecall;
    function SetFeatureManagerWidth(Width: Integer): Integer; safecall;
    function InsertProjectedSketch2(Reverse: Integer): IDispatch; safecall;
    function IInsertProjectedSketch2(Reverse: Integer): IFeature; safecall;
    function GetFeatureCount: Integer; safecall;
    function FeatureByPositionReverse(Num: Integer): IDispatch; safecall;
    function IFeatureByPositionReverse(Num: Integer): IFeature; safecall;
    function RayIntersections(BodiesIn: OleVariant; BasePointsIn: OleVariant; 
                              VectorsIn: OleVariant; Options: Integer; HitRadius: Double; 
                              Offset: Double): Integer; safecall;
    function IRayIntersections(var BodiesIn: IBody; NumBodies: Integer; var BasePointsIn: Double; 
                               var VectorsIn: Double; NumRays: Integer; Options: Integer; 
                               HitRadius: Double; Offset: Double): Integer; safecall;
    function GetRayIntersectionsPoints: OleVariant; safecall;
    function IGetRayIntersectionsPoints: Double; safecall;
    function GetRayIntersectionsTopology: OleVariant; safecall;
    function IGetRayIntersectionsTopology: IUnknown; safecall;
    procedure EditSeedFeat; safecall;
    function EditSuppress: WordBool; safecall;
    function EditUnsuppress: WordBool; safecall;
    function EditUnsuppressDependent: WordBool; safecall;
    function EditRollback: WordBool; safecall;
    function Save2(Silent: WordBool): Integer; safecall;
    function SaveAs2(const NewName: WideString; SaveAsVersion: Integer; SaveAsCopy: WordBool; 
                     Silent: WordBool): Integer; safecall;
    procedure SetPopupMenuMode(ModeIn: SYSINT); safecall;
    function GetPopupMenuMode: SYSINT; safecall;
    procedure CloseFamilyTable; safecall;
    procedure CreatePlaneAtSurface(InterIndex: SYSINT; ProjOpt: WordBool; ReverseDir: WordBool; 
                                   NormalPlane: WordBool; Angle: Double); safecall;
    procedure SketchOffset(Offset: Double; ContourMode: WordBool); safecall;
    function CreateLinearSketchStepAndRepeat(NumX: Integer; NumY: Integer; SpacingX: Double; 
                                             SpacingY: Double; AngleX: Double; AngleY: Double; 
                                             const DeleteInstances: WideString): WordBool; safecall;
    function SetAmbientLightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                       Specular: Double; Colour: Integer; Enabled: WordBool; 
                                       Fixed: WordBool): WordBool; safecall;
    function GetAmbientLightProperties(const Name: WideString; var Ambient: Double; 
                                       var Diffuse: Double; var Specular: Double; 
                                       var Colour: Integer; var Enabled: WordBool; 
                                       var Fixed: WordBool): WordBool; safecall;
    function SetPointLightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                     Specular: Double; Colour: Integer; Enabled: WordBool; 
                                     Fixed: WordBool; X: Double; Y: Double; Z: Double): WordBool; safecall;
    function GetPointLightProperties(const Name: WideString; var Ambient: Double; 
                                     var Diffuse: Double; var Specular: Double; 
                                     var Colour: Integer; var Enabled: WordBool; 
                                     var Fixed: WordBool; var X: Double; var Y: Double; 
                                     var Z: Double): WordBool; safecall;
    function SetDirectionLightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                         Specular: Double; Colour: Integer; Enabled: WordBool; 
                                         Fixed: WordBool; X: Double; Y: Double; Z: Double): WordBool; safecall;
    function GetDirectionLightProperties(const Name: WideString; var Ambient: Double; 
                                         var Diffuse: Double; var Specular: Double; 
                                         var Colour: Integer; var Enabled: WordBool; 
                                         var Fixed: WordBool; var X: Double; var Y: Double; 
                                         var Z: Double): WordBool; safecall;
    function SetSpotlightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                    Specular: Double; Colour: Integer; Enabled: WordBool; 
                                    Fixed: WordBool; Posx: Double; Posy: Double; Posz: Double; 
                                    Targetx: Double; Targety: Double; Targetz: Double; 
                                    ConeAngle: Double): WordBool; safecall;
    function GetSpotlightProperties(const Name: WideString; var Ambient: Double; 
                                    var Diffuse: Double; var Specular: Double; var Colour: Integer; 
                                    var Enabled: WordBool; var Fixed: WordBool; var X: Double; 
                                    var Y: Double; var Z: Double; var Targetx: Double; 
                                    var Targety: Double; var Targetz: Double; var ConeAngle: Double): WordBool; safecall;
    procedure SplitOpenSegment(X: Double; Y: Double; Z: Double); safecall;
    procedure AutoInferToggle; safecall;
    procedure SketchRectangleAtAnyAngle(Val1: Double; Val2: Double; Z1: Double; Val3: Double; 
                                        Val4: Double; Z2: Double; Val3x: Double; Val3y: Double; 
                                        Z3: Double; Val5: WordBool); safecall;
    function CreateCircularSketchStepAndRepeat(ArcRadius: Double; ArcAngle: Double; 
                                               PatternNum: Integer; PatternSpacing: Double; 
                                               PatternRotate: WordBool; 
                                               const DeleteInstances: WideString): WordBool; safecall;
    procedure SplitClosedSegment(X0: Double; Y0: Double; Z0: Double; X1: Double; Y1: Double; 
                                 Z1: Double); safecall;
    function IsLightLockedToModel(LightId: Integer): WordBool; safecall;
    function LockLightToModel(LightId: Integer; Fix: WordBool): WordBool; safecall;
    function FeatureFillet3(R1: Double; Propagate: WordBool; Ftyp: SYSINT; VarRadTyp: WordBool; 
                            OverflowType: Integer; NRadii: SYSINT; Radii: OleVariant; 
                            UseHelpPoint: WordBool; UseTangentHoldLine: WordBool): Integer; safecall;
    function IFeatureFillet3(R1: Double; Propagate: WordBool; Ftyp: SYSINT; VarRadTyp: WordBool; 
                             OverflowType: Integer; NRadii: SYSINT; var Radii: Double; 
                             UseHelpPoint: WordBool; UseTangentHoldLine: WordBool): Integer; safecall;
    procedure InsertConnectionPoint; safecall;
    procedure InsertRoutePoint; safecall;
    procedure FeatureBossThicken2(Thickness: Double; Direction: Integer; FaceIndex: Integer; 
                                  FillVolume: WordBool); safecall;
    procedure FeatureCutThicken2(Thickness: Double; Direction: Integer; FaceIndex: Integer; 
                                 FillVolume: WordBool); safecall;
    function GetConfigurationByName(const Name: WideString): IDispatch; safecall;
    function IGetConfigurationByName(const Name: WideString): IConfiguration; safecall;
    function CreatePoint2(PointX: Double; PointY: Double; PointZ: Double): IDispatch; safecall;
    function ICreatePoint2(PointX: Double; PointY: Double; PointZ: Double): ISketchPoint; safecall;
    function CreateLine2(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                         P2z: Double): IDispatch; safecall;
    function ICreateLine2(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                          P2z: Double): ISketchSegment; safecall;
    function GetActiveSketch2: IDispatch; safecall;
    function IGetActiveSketch2: ISketch; safecall;
    procedure DrawLightIcons; safecall;
    function GetLayerManager: IDispatch; safecall;
    function IGetLayerManager: ILayerMgr; safecall;
    function CreateCircle2(XC: Double; YC: Double; Zc: Double; Xp: Double; Yp: Double; Zp: Double): IDispatch; safecall;
    function ICreateCircle2(XC: Double; YC: Double; Zc: Double; Xp: Double; Yp: Double; Zp: Double): ISketchSegment; safecall;
    function CreateCircleByRadius2(XC: Double; YC: Double; Zc: Double; Radius: Double): IDispatch; safecall;
    function ICreateCircleByRadius2(XC: Double; YC: Double; Zc: Double; Radius: Double): ISketchSegment; safecall;
    function CreateArc2(XC: Double; YC: Double; Zc: Double; Xp1: Double; Yp1: Double; Zp1: Double; 
                        Xp2: Double; Yp2: Double; Zp2: Double; Direction: Smallint): IDispatch; safecall;
    function ICreateArc2(XC: Double; YC: Double; Zc: Double; Xp1: Double; Yp1: Double; Zp1: Double; 
                         Xp2: Double; Yp2: Double; Zp2: Double; Direction: Smallint): ISketchSegment; safecall;
    function CreateEllipse2(CenterX: Double; CenterY: Double; CenterZ: Double; MajorX: Double; 
                            MajorY: Double; MajorZ: Double; MinorX: Double; MinorY: Double; 
                            MinorZ: Double): IDispatch; safecall;
    function ICreateEllipse2(CenterX: Double; CenterY: Double; CenterZ: Double; MajorX: Double; 
                             MajorY: Double; MajorZ: Double; MinorX: Double; MinorY: Double; 
                             MinorZ: Double): ISketchSegment; safecall;
    function CreateEllipticalArc2(CenterX: Double; CenterY: Double; CenterZ: Double; 
                                  MajorX: Double; MajorY: Double; MajorZ: Double; MinorX: Double; 
                                  MinorY: Double; MinorZ: Double; StartX: Double; StartY: Double; 
                                  StartZ: Double; EndX: Double; EndY: Double; EndZ: Double): IDispatch; safecall;
    function ICreateEllipticalArc2(CenterX: Double; CenterY: Double; CenterZ: Double; 
                                   MajorX: Double; MajorY: Double; MajorZ: Double; MinorX: Double; 
                                   MinorY: Double; MinorZ: Double; StartX: Double; StartY: Double; 
                                   StartZ: Double; EndX: Double; EndY: Double; EndZ: Double): ISketchSegment; safecall;
    function CreateSpline(PointData: OleVariant): IDispatch; safecall;
    function ICreateSpline(PointCount: Integer; var PointData: Double): ISketchSegment; safecall;
    procedure ViewZoomtofit2; safecall;
    procedure SetInferenceMode(InferenceMode: WordBool); safecall;
    function GetInferenceMode: WordBool; safecall;
    function SetTitle2(const NewTitle: WideString): WordBool; safecall;
    function SketchFillet2(Rad: Double; ConstrainedCorners: Smallint): WordBool; safecall;
    function IsTessellationValid: WordBool; safecall;
    procedure EditRoute; safecall;
    procedure FileReload; safecall;
    function GetDesignTable: IDispatch; safecall;
    function IGetDesignTable: IDesignTable; safecall;
    function GetEntityName(const Entity: IDispatch): WideString; safecall;
    function IGetEntityName(const Entity: IEntity): WideString; safecall;
    function IGetNext: IModelDoc; safecall;
    function ShowConfiguration2(const ConfigurationName: WideString): WordBool; safecall;
    function AddConfiguration2(const Name: WideString; const Comment: WideString; 
                               const AlternateName: WideString; SuppressByDefault: WordBool; 
                               HideByDefault: WordBool; MinFeatureManager: WordBool; 
                               InheritProperties: WordBool; Flags: LongWord): WordBool; safecall;
    function DeleteConfiguration2(const ConfigurationName: WideString): WordBool; safecall;
    function EditConfiguration2(const Name: WideString; const NewName: WideString; 
                                const Comment: WideString; const AlternateName: WideString; 
                                SuppressByDefault: WordBool; HideByDefault: WordBool; 
                                MinFeatureManager: WordBool; InheritProperties: WordBool; 
                                Flags: LongWord): WordBool; safecall;
    function CreateSplineByEqnParams(ParamsIn: OleVariant): IDispatch; safecall;
    function ICreateSplineByEqnParams(var PropArray: SYSINT; var KnotsArray: Double; 
                                      var CntrlPntCoordArray: Double): ISketchSegment; safecall;
    function CreateFeatureMgrView2(var Bitmap: Integer; const ToolTip: WideString): IDispatch; safecall;
    function ICreateFeatureMgrView2(var Bitmap: Integer; const ToolTip: WideString): IFeatMgrView; safecall;
    function AddFeatureMgrView2(var Bitmap: Integer; var AppView: Integer; const ToolTip: WideString): WordBool; safecall;
    procedure FeatureCut3(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          KeepPieceIndex: Integer); safecall;
    function GetFirstAnnotation2: IDispatch; safecall;
    function IGetFirstAnnotation2: IAnnotation; safecall;
    procedure InsertExtendSurface(ExtendLinear: WordBool; EndCondition: Integer; Distance: Double); safecall;
    procedure InsertTangencySurface(OneSide: WordBool; IsFlip: WordBool); safecall;
    function CreateSplinesByEqnParams(ParamsIn: OleVariant): OleVariant; safecall;
    function ICreateSplinesByEqnParams(var PropArray: SYSINT; var KnotsArray: Double; 
                                       var CntrlPntCoordArray: Double): IEnumSketchSegments; safecall;
    function CreateClippedSplines(ParamsIn: OleVariant; X1: Double; Y1: Double; X2: Double; 
                                  Y2: Double): OleVariant; safecall;
    function ICreateClippedSplines(var PropArray: SYSINT; var KnotsArray: Double; 
                                   var CntrlPntCoordArray: Double; X1: Double; Y1: Double; 
                                   X2: Double; Y2: Double): IEnumSketchSegments; safecall;
    function EditSuppress2: WordBool; safecall;
    function EditUnsuppress2: WordBool; safecall;
    function EditUnsuppressDependent2: WordBool; safecall;
    function EditRollback2: WordBool; safecall;
    procedure HideDimension; safecall;
    procedure ShowFeatureDimensions; safecall;
    procedure HideFeatureDimensions; safecall;
    procedure Sketch3DIntersections; safecall;
    function FeatureFillet4(R1: Double; Propagate: WordBool; UniformRadius: WordBool; Ftyp: SYSINT; 
                            VarRadTyp: WordBool; OverflowType: Integer; NRadii: SYSINT; 
                            Radii: OleVariant; UseHelpPoint: WordBool; 
                            UseTangentHoldLine: WordBool; CornerType: WordBool; 
                            SetbackDistCount: SYSINT; SetBackDistances: OleVariant): Integer; safecall;
    function IFeatureFillet4(R1: Double; Propagate: WordBool; UniformRadius: WordBool; 
                             Ftyp: SYSINT; VarRadTyp: WordBool; OverflowType: Integer; 
                             NRadii: SYSINT; var Radii: Double; UseHelpPoint: WordBool; 
                             UseTangentHoldLine: WordBool; CornerType: WordBool; 
                             SetbackDistCount: SYSINT; var SetBackDistances: Double): Integer; safecall;
    procedure InsertDeleteFace; safecall;
    function GetDependencies2(Traverseflag: WordBool; Searchflag: WordBool; 
                              AddReadOnlyInfo: WordBool): OleVariant; safecall;
    function IGetDependencies2(Traverseflag: WordBool; Searchflag: WordBool; 
                               AddReadOnlyInfo: WordBool): WideString; safecall;
    function IGetNumDependencies2(Traverseflag: WordBool; Searchflag: WordBool; 
                                  AddReadOnlyInfo: WordBool): Integer; safecall;
    procedure InsertScale(ScaleFactor_x: Double; ScaleFactor_y: Double; ScaleFactor_z: Double; 
                          IsUniform: WordBool; ScaleType: SYSINT); safecall;
    procedure LockAllExternalReferences; safecall;
    procedure UnlockAllExternalReferences; safecall;
    procedure BreakAllExternalReferences; safecall;
    function EditDimensionProperties(TolType: Integer; TolMax: Double; TolMin: Double; 
                                     const TolMaxFit: WideString; const TolMinFit: WideString; 
                                     UseDocPrec: WordBool; Precision: Integer; ArrowsIn: Integer; 
                                     UseDocArrows: WordBool; Arrow1: Integer; Arrow2: Integer): WordBool; safecall;
    function SketchPolygon(XCenter: Double; YCenter: Double; XEdge: Double; YEdge: Double; 
                           NSides: SYSINT; BInscribed: WordBool): WordBool; safecall;
    function GetBlockingState: Integer; safecall;
    function CreateFeatureMgrView3(var Bitmap: Integer; const ToolTip: WideString; 
                                   WhichPane: Integer): IDispatch; safecall;
    function ICreateFeatureMgrView3(var Bitmap: Integer; const ToolTip: WideString; 
                                    WhichPane: Integer): IFeatMgrView; safecall;
    function AddFeatureMgrView3(var Bitmap: Integer; var AppView: Integer; 
                                const ToolTip: WideString; WhichPane: Integer): WordBool; safecall;
    function CreatePlaneAtOffset2(Val: Double; FlipDir: WordBool): IDispatch; safecall;
    function ICreatePlaneAtOffset2(Val: Double; FlipDir: WordBool): IRefPlane; safecall;
    function CreatePlaneAtAngle2(Val: Double; FlipDir: WordBool): IDispatch; safecall;
    function ICreatePlaneAtAngle2(Val: Double; FlipDir: WordBool): IRefPlane; safecall;
    function CreatePlaneThru3Points2: IDispatch; safecall;
    function ICreatePlaneThru3Points2: IRefPlane; safecall;
    function CreatePlanePerCurveAndPassPoint2(OrigAtCurve: WordBool): IDispatch; safecall;
    function ICreatePlanePerCurveAndPassPoint2(OrigAtCurve: WordBool): IRefPlane; safecall;
    function CreatePlaneAtSurface2(InterIndex: SYSINT; ProjOpt: WordBool; ReverseDir: WordBool; 
                                   NormalPlane: WordBool; Angle: Double): IDispatch; safecall;
    function ICreatePlaneAtSurface2(InterIndex: SYSINT; ProjOpt: WordBool; ReverseDir: WordBool; 
                                    NormalPlane: WordBool; Angle: Double): IRefPlane; safecall;
    function GetUserPreferenceIntegerValue(UserPreferenceValue: Integer): Integer; safecall;
    function SetUserPreferenceIntegerValue(UserPreferenceValue: Integer; Value: Integer): WordBool; safecall;
    function GetUserPreferenceTextFormat(UserPreferenceValue: Integer): IDispatch; safecall;
    function IGetUserPreferenceTextFormat(UserPreferenceValue: Integer): ITextFormat; safecall;
    function SetUserPreferenceTextFormat(UserPreferenceValue: Integer; const Value: IDispatch): WordBool; safecall;
    function ISetUserPreferenceTextFormat(UserPreferenceValue: Integer; const Value: ITextFormat): WordBool; safecall;
    procedure InsertRib2(Is2Sided: WordBool; ReverseThicknessDir: WordBool; Thickness: Double; 
                         ReferenceEdgeIndex: Integer; ReverseMaterialDir: WordBool; 
                         IsDrafted: WordBool; DraftOutward: WordBool; DraftAngle: Double; 
                         IsNormToSketch: WordBool); safecall;
    function InsertObjectFromFile(const FilePath: WideString; CreateLink: WordBool; Xx: Double; 
                                  Yy: Double; Zz: Double): WordBool; safecall;
    procedure InspectCurvature; safecall;
    procedure RemoveInspectCurvature; safecall;
    function InsertDatumTag2: IDispatch; safecall;
    function IInsertDatumTag2: IDatumTag; safecall;
    function ActivateFeatureMgrView(var AppView: Integer): Integer; safecall;
    procedure FeatureSketchDrivenPattern(UseCentroid: WordBool); safecall;
    procedure HideShowBodies; safecall;
    procedure HideSolidBody; safecall;
    procedure ShowSolidBody; safecall;
    procedure InsertFramePoint(Xx: Double; Yy: Double; Zz: Double); safecall;
    procedure LockFramePoint; safecall;
    procedure UnlockFramePoint; safecall;
    function InsertGtol: IDispatch; safecall;
    function IInsertGtol: IGtol; safecall;
    function DeActivateFeatureMgrView(var AppView: Integer): WordBool; safecall;
    function InsertNote(const Text: WideString): IDispatch; safecall;
    function IInsertNote(const Text: WideString): INote; safecall;
    procedure SetSaveAsFileName(const FileName: WideString); safecall;
    procedure ClosePrintPreview; safecall;
    procedure HideComponent2; safecall;
    procedure ShowComponent2; safecall;
    function SaveBMP(const FileNameIn: WideString; WidthIn: Integer; HeightIn: Integer): WordBool; safecall;
    procedure InsertSketch2(UpdateEditRebuild: WordBool); safecall;
    procedure Insert3DSketch2(UpdateEditRebuild: WordBool); safecall;
    procedure InsertDeleteHole; safecall;
    procedure PreTrimSurface(BMutualTrimIn: WordBool); safecall;
    procedure PostTrimSurface(BSewSurfaceIn: WordBool); safecall;
    procedure SketchConvertIsoCurves(PercentRatio: Double; VORuDir: WordBool; 
                                     DoConstrain: WordBool; SkipHoles: WordBool); safecall;
    procedure SelectLoop; safecall;
    procedure InsertSheetMetalBaseFlange(Thickness: Double; ThickenDir: WordBool; Radius: Double; 
                                         ExtrudeDist1: Double; ExtrudeDist2: Double; 
                                         FlipExtruDir: WordBool; EndCondition1: Integer; 
                                         EndCondition2: Integer; DirToUse: Integer); safecall;
    procedure InsertSheetMetalFold; safecall;
    procedure InsertSheetMetalUnfold; safecall;
    procedure InsertSheetMetalMiterFlange(UseReliefRatio: WordBool; UseDefaultGap: WordBool; 
                                          UseAutoRelief: WordBool; GlobalRadius: Double; 
                                          RipGap: Double; AutoReliefRatio: Double; 
                                          AutoReliefWidth: Double; AutoReliefDepth: Double; 
                                          ReliefType: Integer; RipLocation: Integer; 
                                          TrimSideBends: WordBool); safecall;
    procedure CreateGroup; safecall;
    procedure RemoveItemsFromGroup; safecall;
    procedure RemoveGroups; safecall;
    function InsertBOMBalloon2(Style: Integer; Size: Integer; UpperTextStyle: Integer; 
                               const UpperText: WideString; LowerTextStyle: Integer; 
                               const LowerText: WideString): IDispatch; safecall;
    function IInsertBOMBalloon2(Style: Integer; Size: Integer; UpperTextStyle: Integer; 
                                const UpperText: WideString; LowerTextStyle: Integer; 
                                const LowerText: WideString): INote; safecall;
    procedure EditRedo(NSteps: LongWord); safecall;
    procedure InsertProtrusionBlend4(Closed: WordBool; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; TessToleranceFactor: Double; 
                                     StartMatchingType: Smallint; EndMatchingType: Smallint; 
                                     IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                                     ThinType: Smallint); safecall;
    procedure InsertCutBlend4(Closed: WordBool; KeepTangency: WordBool; ForceNonRational: WordBool; 
                              TessToleranceFactor: Double; StartMatchingType: Smallint; 
                              EndMatchingType: Smallint; IsThinBody: WordBool; Thickness1: Double; 
                              Thickness2: Double; ThinType: Smallint); safecall;
    procedure InsertProtrusionSwept4(Propagate: WordBool; Alignment: WordBool; 
                                     TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; StartMatchingType: Smallint; 
                                     EndMatchingType: Smallint; IsThinBody: WordBool; 
                                     Thickness1: Double; Thickness2: Double; ThinType: Smallint); safecall;
    procedure InsertCutSwept4(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                              KeepTangency: WordBool; ForceNonRational: WordBool; 
                              StartMatchingType: Smallint; EndMatchingType: Smallint; 
                              IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                              ThinType: Smallint); safecall;
    procedure SelectTangency; safecall;
    function InsertBendTableOpen(const FileName: WideString): WordBool; safecall;
    function InsertBendTableNew(const FileName: WideString; const Units: WideString; 
                                const Type_: WideString): WordBool; safecall;
    procedure InsertBendTableEdit; safecall;
    procedure DeleteBendTable; safecall;
    procedure InsertSheetMetal3dBend(Angle: Double; Radius: Double; FlipDir: WordBool; 
                                     BendPos: Smallint); safecall;
    function CreateTangentArc2(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                               P2z: Double; ArcTypeIn: Integer): WordBool; safecall;
    function GetMassProperties2(var Status: Integer): OleVariant; safecall;
    function IGetMassProperties2(var Status: Integer): Double; safecall;
    procedure SketchChamfer(AngleORdist: Double; Dist1: Double; Options: Integer); safecall;
    procedure FeatureCut4(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          KeepPieceIndex: Integer; NormalCut: WordBool); safecall;
    function GetPropertyManagerPage(DialogId: Integer; const Title: WideString; 
                                    const Handler: IUnknown): IPropertyManagerPage; safecall;
    procedure AlignOrdinate; safecall;
    procedure EditOrdinate; safecall;
    function ReattachOrdinate: WordBool; safecall;
    function EditBalloonProperties(Style: Integer; Size: Integer; UpperTextStyle: Integer; 
                                   const UpperText: WideString; LowerTextStyle: Integer; 
                                   const LowerText: WideString): IDispatch; safecall;
    function EditDimensionProperties2(TolType: Integer; TolMax: Double; TolMin: Double; 
                                      const TolMaxFit: WideString; const TolMinFit: WideString; 
                                      UseDocPrec: WordBool; Precision: Integer; ArrowsIn: Integer; 
                                      UseDocArrows: WordBool; Arrow1: Integer; Arrow2: Integer; 
                                      const PrefixText: WideString; const SuffixText: WideString; 
                                      ShowValue: WordBool; const CalloutText1: WideString; 
                                      const CalloutText2: WideString; CenterText: WordBool): WordBool; safecall;
    procedure InsertSheetMetalClosedCorner; safecall;
    function SketchUseEdge2(Chain: WordBool): WordBool; safecall;
    function SketchOffsetEntities2(Offset: Double; BothDirections: WordBool; Chain: WordBool): WordBool; safecall;
    function SketchOffset2(Offset: Double; BothDirections: WordBool; Chain: WordBool): WordBool; safecall;
    function AddDimension2(X: Double; Y: Double; Z: Double): IDispatch; safecall;
    function IAddDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; safecall;
    function AddHorizontalDimension2(X: Double; Y: Double; Z: Double): IDispatch; safecall;
    function IAddHorizontalDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; safecall;
    function AddVerticalDimension2(X: Double; Y: Double; Z: Double): IDispatch; safecall;
    function IAddVerticalDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; safecall;
    function AddRadialDimension2(X: Double; Y: Double; Z: Double): IDispatch; safecall;
    function IAddRadialDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; safecall;
    function AddDiameterDimension2(X: Double; Y: Double; Z: Double): IDispatch; safecall;
    function IAddDiameterDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; safecall;
    function GetUserUnit(UnitType: Integer): IDispatch; safecall;
    function IGetUserUnit(UnitType: Integer): IUserUnit; safecall;
    function InsertWeldSymbol3: IDispatch; safecall;
    function IInsertWeldSymbol3: IWeldSymbol; safecall;
    function SaveAs3(const NewName: WideString; SaveAsVersion: Integer; Options: Integer): Integer; safecall;
    function GetUserPreferenceStringValue(UserPreference: Integer): WideString; safecall;
    function SetUserPreferenceStringValue(UserPreference: Integer; const Value: WideString): WordBool; safecall;
    procedure DeleteDesignTable; safecall;
    function EditRebuild3: WordBool; safecall;
    function ForceRebuild3(TopOnly: WordBool): WordBool; safecall;
    property SelectionManager: IDispatch read Get_SelectionManager write Set_SelectionManager;
    property ISelectionManager: ISelectionMgr read Get_ISelectionManager;
    property ActiveView: IDispatch read Get_ActiveView write Set_ActiveView;
    property IActiveView: IModelView read Get_IActiveView;
    property LengthUnit: Integer read Get_LengthUnit write Set_LengthUnit;
    property LightSourceUserName[ID: Integer]: WideString read Get_LightSourceUserName write Set_LightSourceUserName;
    property LightSourcePropertyValues[ID: Integer]: OleVariant read Get_LightSourcePropertyValues write Set_LightSourcePropertyValues;
    property SceneName: WideString read Get_SceneName write Set_SceneName;
    property SceneUserName: WideString read Get_SceneUserName write Set_SceneUserName;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property MaterialUserName: WideString read Get_MaterialUserName write Set_MaterialUserName;
    property MaterialIdName: WideString read Get_MaterialIdName write Set_MaterialIdName;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
    property PrintSetup[SetupType: Integer]: Smallint read Get_PrintSetup write Set_PrintSetup;
    property SceneBkgImageFileName: WideString read Get_SceneBkgImageFileName write Set_SceneBkgImageFileName;
    property SummaryInfo[FieldId: Integer]: WideString read Get_SummaryInfo write Set_SummaryInfo;
    property CustomInfo[const FieldName: WideString]: WideString read Get_CustomInfo write Set_CustomInfo;
    property CustomInfo2[const Configuration: WideString; const FieldName: WideString]: WideString read Get_CustomInfo2 write Set_CustomInfo2;
    property ShowFeatureErrorDialog: WordBool read Get_ShowFeatureErrorDialog write Set_ShowFeatureErrorDialog;
  end;

// *********************************************************************//
// DispIntf:  IModelDocDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D46-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IModelDocDisp = dispinterface
    ['{83A33D46-27C5-11CE-BFD4-00400513BB57}']
    property SelectionManager: IDispatch dispid 65537;
    property ISelectionManager: ISelectionMgr readonly dispid 65711;
    property ActiveView: IDispatch dispid 65538;
    property IActiveView: IModelView readonly dispid 65712;
    property LengthUnit: Integer dispid 65539;
    property LightSourceUserName[ID: Integer]: WideString dispid 65716;
    property LightSourcePropertyValues[ID: Integer]: OleVariant dispid 65717;
    property SceneName: WideString dispid 65718;
    property SceneUserName: WideString dispid 65719;
    procedure FeatureFillet(R1: Double; Propagate: WordBool; Ftyp: WordBool; VarRadTyp: WordBool; 
                            OverflowType: Integer); dispid 65540;
    procedure GridOptions(DispGrid: WordBool; GridSpacing: Double; Snap: WordBool; 
                          DotStyle: WordBool; NMajor: Smallint; NMinor: Smallint; 
                          Align2edge: WordBool; AngleSnap: WordBool; AngleUnit: Double; 
                          MinorAuto: WordBool); dispid 65541;
    procedure SetUnits(UType: Smallint; FractBase: Smallint; FractDenom: Smallint; 
                       SigDigits: Smallint; RoundToFraction: WordBool); dispid 65542;
    procedure LBDownAt(Flags: Integer; X: Double; Y: Double; Z: Double); dispid 65543;
    procedure LBUpAt(Flags: Integer; X: Double; Y: Double; Z: Double); dispid 65544;
    procedure DragTo(Flags: Integer; X: Double; Y: Double; Z: Double); dispid 65545;
    procedure SelectAt(Flags: Integer; X: Double; Y: Double; Z: Double); dispid 65546;
    procedure CreateLineVB(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double); dispid 65547;
    function CreateLine(P1: OleVariant; P2: OleVariant): WordBool; dispid 65548;
    procedure CreateCenterLineVB(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                 Z2: Double); dispid 65549;
    function CreateCenterLine(P1: OleVariant; P2: OleVariant): WordBool; dispid 65550;
    procedure CreateArcVB(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                          P2z: Double; P3x: Double; P3y: Double; P3z: Double; Dir: Smallint); dispid 65551;
    function CreateArc(P1: OleVariant; P2: OleVariant; P3: OleVariant; Dir: Smallint): WordBool; dispid 65552;
    procedure CreateCircleVB(P1x: Double; P1y: Double; P1z: Double; Radius: Double); dispid 65553;
    function CreateCircleByRadius(P1: OleVariant; Radius: Double): WordBool; dispid 65554;
    function GetLines: OleVariant; dispid 65555;
    procedure SketchTrim(Op: Integer; SelEnd: Integer; X: Double; Y: Double); dispid 65556;
    procedure SketchOffsetEdges(Val: Double); dispid 65557;
    procedure SketchRectangle(Val1: Double; Val2: Double; Z1: Double; Val3: Double; Val4: Double; 
                              Z2: Double; Val5: WordBool); dispid 65558;
    procedure SketchPoint(X: Double; Y: Double; Z: Double); dispid 65559;
    procedure FeatureCut(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                         D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; Ddir1: WordBool; 
                         Ddir2: WordBool; Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                         OffsetReverse2: WordBool); dispid 65560;
    procedure FeatureBoss(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool); dispid 65561;
    procedure SimpleHole(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                         D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; Ddir1: WordBool; 
                         Ddir2: WordBool; Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                         OffsetReverse2: WordBool); dispid 65562;
    procedure FeatureLinearPattern(Num1: Integer; Spacing1: Double; Num2: Integer; 
                                   Spacing2: Double; FlipDir1: WordBool; FlipDir2: WordBool; 
                                   const DName1: WideString; const DName2: WideString); dispid 65563;
    procedure NameView(const VName: WideString); dispid 65564;
    procedure ShowNamedView(const VName: WideString); dispid 65565;
    procedure CreatePlaneAtOffset(Val: Double; FlipDir: WordBool); dispid 65566;
    procedure Toolbars(M: WordBool; Vw: WordBool; SkMain: WordBool; Sk: WordBool; Feat: WordBool; 
                       Constr: WordBool; Macro: WordBool); dispid 65567;
    procedure CreatePlaneAtAngle(Val: Double; FlipDir: WordBool); dispid 65568;
    procedure SetParamValue(Val: Double); dispid 65569;
    procedure AddRelation(const RelStr: WideString); dispid 65570;
    procedure DeleteAllRelations; dispid 65571;
    procedure HoleWizard(Depth: Double; EndType: Smallint; Flip: WordBool; Dir: WordBool; 
                         HType: Integer; D1: Double; D2: Double; D3: Double; D4: Double; 
                         D5: Double; D6: Double; D7: Double; D8: Double; D9: Double; D10: Double; 
                         D11: Double; D12: Double); dispid 65572;
    function SaveAs(const NewName: WideString): WordBool; dispid 65573;
    procedure ActivateSelectedFeature; dispid 65574;
    procedure SelectByName(Flags: Integer; const IdStr: WideString); dispid 65575;
    procedure SketchAddConstraints(const IdStr: WideString); dispid 65576;
    procedure SketchConstraintsDel(ConstrInd: Integer; const IdStr: WideString); dispid 65577;
    procedure SketchConstraintsDelAll; dispid 65578;
    procedure Lock; dispid 65579;
    procedure UnLock; dispid 65580;
    procedure InsertFeatureShell(Thickness: Double; Outward: WordBool); dispid 65581;
    procedure SketchFillet(Rad: Double); dispid 65582;
    procedure FeatureChamfer(Width: Double; Angle: Double; Flip: WordBool); dispid 65583;
    procedure InsertMfDraft(Angle: Double; FlipDir: WordBool; IsEdgeDraft: WordBool; 
                            PropType: Integer); dispid 65584;
    procedure ParentChildRelationship; dispid 65585;
    procedure SketchSpline(MorePts: Integer; X: Double; Y: Double; Z: Double); dispid 65586;
    procedure SelectSketchPoint(X: Double; Y: Double; Incidence: Integer); dispid 65587;
    procedure SelectSketchLine(X0: Double; Y0: Double; Inc0: Integer; X1: Double; Y1: Double; 
                               Inc1: Integer); dispid 65588;
    procedure SelectSketchArc(X0: Double; Y0: Double; Inc0: Integer; X1: Double; Y1: Double; 
                              Inc1: Integer; XC: Double; YC: Double; IncC: Integer; RotDir: Integer); dispid 65589;
    procedure SelectSketchSpline(Size: Integer; X0: Double; Y0: Double; Inc0: Integer; X1: Double; 
                                 Y1: Double; Inc1: Integer; XC: Double; YC: Double; IncC: Integer); dispid 65590;
    function CreateTangentArc(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                              P2z: Double): WordBool; dispid 65591;
    function Create3PointArc(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                             P2z: Double; P3x: Double; P3y: Double; P3z: Double): WordBool; dispid 65592;
    function CreateArcByCenter(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                               P2z: Double; P3x: Double; P3y: Double; P3z: Double): WordBool; dispid 65593;
    function CreateCircle(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                          P2z: Double): WordBool; dispid 65594;
    function AddDimension(X: Double; Y: Double; Z: Double): WordBool; dispid 65595;
    function AddHorizontalDimension(X: Double; Y: Double; Z: Double): WordBool; dispid 65596;
    function AddVerticalDimension(X: Double; Y: Double; Z: Double): WordBool; dispid 65597;
    function SelectSketchItem(SelOpt: Integer; const Name: WideString; X: Double; Y: Double; 
                              Z: Double): WordBool; dispid 65598;
    procedure ClearSelection; dispid 65599;
    procedure Select(const SelID: WideString; const SelParams: WideString; X: Double; Y: Double; 
                     Z: Double); dispid 65600;
    procedure AndSelect(const SelID: WideString; const SelParams: WideString; X: Double; Y: Double; 
                        Z: Double); dispid 65601;
    function CreatePoint(PointX: Double; PointY: Double; PointZ: Double): WordBool; dispid 65602;
    function CreateLineDB(Sx: Double; Sy: Double; Sz: Double; Ex: Double; Ey: Double; Ez: Double): WordBool; dispid 65603;
    function CreateArcDB(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double; 
                         X3: Double; Y3: Double; Z3: Double; Dir: Smallint): WordBool; dispid 65604;
    function CreateCircleDB(Cx: Double; Cy: Double; Cz: Double; Radius: Double): WordBool; dispid 65605;
    function CreatePointDB(X: Double; Y: Double; Z: Double): WordBool; dispid 65606;
    function GetTitle: WideString; dispid 65607;
    function GetPathName: WideString; dispid 65608;
    function GetType: Integer; dispid 65609;
    procedure InsertObject; dispid 65610;
    procedure EditClearAll; dispid 65611;
    procedure EditCopy; dispid 65612;
    procedure EditCut; dispid 65613;
    procedure ObjectDisplayContent; dispid 65614;
    procedure ObjectDisplayAsIcon; dispid 65615;
    procedure ObjectResetsize; dispid 65616;
    procedure WindowRedraw; dispid 65617;
    procedure Dummy3; dispid 65618;
    procedure SetPickMode; dispid 65619;
    procedure ViewRotateminusx; dispid 65620;
    procedure ViewRotateminusy; dispid 65621;
    procedure ViewRotateminusz; dispid 65622;
    procedure ViewRotateplusx; dispid 65623;
    procedure ViewRotateplusy; dispid 65624;
    procedure ViewRotateplusz; dispid 65625;
    procedure ViewTranslateminusx; dispid 65626;
    procedure ViewTranslateminusy; dispid 65627;
    procedure ViewTranslateplusx; dispid 65628;
    procedure ViewTranslateplusy; dispid 65629;
    procedure ViewRotXMinusNinety; dispid 65630;
    procedure ViewRotYMinusNinety; dispid 65631;
    procedure ViewRotYPlusNinety; dispid 65632;
    procedure ViewZoomin; dispid 65633;
    procedure ViewZoomout; dispid 65634;
    procedure ViewDisplayHiddenremoved; dispid 65635;
    procedure ViewDisplayWireframe; dispid 65636;
    procedure ViewDisplayShaded; dispid 65637;
    procedure ViewRwShading; dispid 65638;
    procedure ViewOglShading; dispid 65639;
    procedure ViewZoomtofit; dispid 65640;
    procedure ViewRotate; dispid 65641;
    procedure ViewTranslate; dispid 65642;
    procedure ViewZoomto; dispid 65643;
    procedure ViewDisplayHiddengreyed; dispid 65644;
    procedure ViewDisplayFaceted; dispid 65645;
    procedure ViewConstraint; dispid 65646;
    procedure UserFavors; dispid 65647;
    procedure FeatureCirPattern(Num: Integer; Spacing: Double; FlipDir: WordBool; 
                                const DName: WideString); dispid 65648;
    procedure EditSketch; dispid 65649;
    procedure FeatEdit; dispid 65650;
    procedure FeatEditDef; dispid 65651;
    procedure InsertPoint; dispid 65652;
    procedure InsertFamilyTableNew; dispid 65653;
    procedure Dummy1; dispid 65654;
    procedure InsertFamilyTableEdit; dispid 65655;
    procedure Dummy2; dispid 65656;
    procedure ToolsMacro; dispid 65657;
    procedure ToolsGrid; dispid 65658;
    procedure SketchCenterline; dispid 65659;
    procedure SketchAlign; dispid 65660;
    procedure SketchArc; dispid 65661;
    procedure SketchTangentArc; dispid 65662;
    procedure SketchCircle; dispid 65663;
    procedure SketchUndo; dispid 65664;
    procedure UserPreferences; dispid 65665;
    procedure Lights; dispid 65666;
    procedure SketchConstrainCoincident; dispid 65667;
    procedure SketchConstrainConcentric; dispid 65668;
    procedure SketchConstrainPerp; dispid 65669;
    procedure SketchConstrainTangent; dispid 65670;
    procedure SketchConstrainParallel; dispid 65671;
    procedure SketchUseEdge; dispid 65672;
    procedure SketchUseEdgeCtrline; dispid 65673;
    procedure SketchMirror; dispid 65674;
    procedure Save; dispid 65675;
    procedure Close; dispid 65676;
    procedure ViewDispRefaxes; dispid 65677;
    procedure ViewDispRefplanes; dispid 65678;
    procedure InsertSketch; dispid 65679;
    procedure InsertProtrusionSwept(Propagate: WordBool; Alignment: WordBool; 
                                    KeepNormalConstant: WordBool); dispid 65680;
    procedure InsertProtrusionBlend(Closed: WordBool); dispid 65681;
    procedure ToolsMassProps; dispid 65682;
    procedure PropertySheet; dispid 65683;
    procedure BlankRefGeom; dispid 65684;
    procedure UnBlankRefGeom; dispid 65685;
    procedure EditDelete; dispid 65686;
    procedure InsertProjectedSketch; dispid 65687;
    function CreatePlaneFixed(P1: OleVariant; P2: OleVariant; P3: OleVariant; UseGlobal: WordBool): WordBool; dispid 65688;
    procedure Dummy5; dispid 65689;
    procedure Dummy6; dispid 65690;
    procedure DebugCheckBody; dispid 65691;
    procedure Dummy8; dispid 65692;
    procedure DimPreferences; dispid 65693;
    procedure UnblankSketch; dispid 65694;
    procedure EditSketchOrSingleSketchFeature; dispid 65695;
    procedure DebugCheckIgesGeom; dispid 65696;
    procedure BlankSketch; dispid 65697;
    function GetDefaultTextHeight: Double; dispid 65698;
    function IsActive(const CompStr: WideString): WordBool; dispid 65699;
    function CreateEllipse(Center: OleVariant; Major: OleVariant; Minor: OleVariant): WordBool; dispid 65700;
    function CreateEllipseVB(CenterX: Double; CenterY: Double; CenterZ: Double; MajorX: Double; 
                             MajorY: Double; MajorZ: Double; MinorX: Double; MinorY: Double; 
                             MinorZ: Double): WordBool; dispid 65701;
    function CreateEllipticalArcByCenter(Center: OleVariant; Major: OleVariant; Minor: OleVariant; 
                                         Start: OleVariant; End_: OleVariant): WordBool; dispid 65702;
    function CreateEllipticalArcByCenterVB(CenterX: Double; CenterY: Double; CenterZ: Double; 
                                           MajorX: Double; MajorY: Double; MajorZ: Double; 
                                           MinorX: Double; MinorY: Double; MinorZ: Double; 
                                           StartX: Double; StartY: Double; StartZ: Double; 
                                           EndX: Double; EndY: Double; EndZ: Double): WordBool; dispid 65703;
    function GetActiveSketch: IDispatch; dispid 65704;
    function IGetActiveSketch: ISketch; dispid 65713;
    function GetTessellationQuality: Integer; dispid 65705;
    procedure SetTessellationQuality(QualityNum: Integer); dispid 65706;
    function Parameter(const StringIn: WideString): IDispatch; dispid 65707;
    function IParameter(const StringIn: WideString): IDimension; dispid 65714;
    function SelectByID(const SelID: WideString; const SelParams: WideString; X: Double; Y: Double; 
                        Z: Double): WordBool; dispid 65708;
    function AndSelectByID(const SelID: WideString; const SelParams: WideString; X: Double; 
                           Y: Double; Z: Double): WordBool; dispid 65709;
    procedure Insert3DSketch; dispid 65710;
    function GetLightSourceName(ID: Integer): WideString; dispid 65715;
    function AddLightSource(const IdName: WideString; LTyp: SYSINT; const UserName: WideString): WordBool; dispid 65720;
    function AddLightSourceExtProperty(ID: Integer; PropertyExtension: OleVariant): Integer; dispid 65721;
    procedure ResetLightSourceExtProperty(ID: Integer); dispid 65722;
    procedure DeleteLightSource(ID: Integer); dispid 65723;
    function GetLightSourceExtProperty(ID: Integer; PropertyId: Integer): OleVariant; dispid 65724;
    function AddLightToScene(const LpszNewValue: WideString): Integer; dispid 65725;
    function AddSceneExtProperty(PropertyExtension: OleVariant): Integer; dispid 65726;
    procedure ResetSceneExtProperty; dispid 65727;
    function GetSceneExtProperty(PropertyId: Integer): OleVariant; dispid 65728;
    procedure FileSummaryInfo; dispid 65729;
    function GetGridSettings: OleVariant; dispid 65730;
    procedure ToolsSketchTranslate; dispid 65731;
    procedure ToolsDistance; dispid 65732;
    procedure SkToolsAutoConstr; dispid 65733;
    procedure ToolsSketchScale; dispid 65734;
    procedure Paste; dispid 65735;
    procedure ToolsConfiguration; dispid 65736;
    procedure EntityProperties; dispid 65737;
    function GetArcCentersDisplayed: WordBool; dispid 65738;
    procedure SetArcCentersDisplayed(Setting: WordBool); dispid 65739;
    procedure AutoSolveToggle; dispid 65740;
    procedure Dummy7; dispid 65741;
    function IGetLines: Double; dispid 65742;
    function GetLineCount: Integer; dispid 65743;
    procedure ICreateEllipse(var Center: Double; var Major: Double; var Minor: Double); dispid 65744;
    procedure ICreateEllipticalArcByCenter(var Center: Double; var Major: Double; 
                                           var Minor: Double; var Start: Double; var End_: Double); dispid 65745;
    function ILightSourcePropertyValues(ID: Integer): Double; dispid 65746;
    procedure InsertCutSwept(Propagate: WordBool; Alignment: WordBool; KeepNormalConstant: WordBool); dispid 65747;
    procedure InsertCutBlend(Closed: WordBool); dispid 65748;
    procedure InsertHelix(Reversed: WordBool; Clockwised: WordBool; Tapered: WordBool; 
                          Outward: WordBool; Helixdef: Integer; Height: Double; Pitch: Double; 
                          Revolution: Double; TaperAngle: Double; Startangle: Double); dispid 65749;
    procedure ICreateLine(var P1: Double; var P2: Double); dispid 65750;
    procedure ICreateCenterLine(var P1: Double; var P2: Double); dispid 65751;
    procedure ICreateArc(var P1: Double; var P2: Double; var P3: Double; Dir: Smallint); dispid 65752;
    procedure ICreateCircleByRadius(var P1: Double; Radius: Double); dispid 65753;
    procedure GraphicsRedraw; dispid 65754;
    function GetVisibilityOfConstructPlanes: WordBool; dispid 65755;
    function GetDisplayWhenAdded: WordBool; dispid 65756;
    procedure SetDisplayWhenAdded(Setting: WordBool); dispid 65757;
    function GetAddToDB: WordBool; dispid 65758;
    procedure SetAddToDB(Setting: WordBool); dispid 65759;
    function DeSelectByID(const SelID: WideString; const SelParams: WideString; X: Double; 
                          Y: Double; Z: Double): WordBool; dispid 65760;
    property Visible: WordBool dispid 65761;
    procedure PrintDirect; dispid 65762;
    procedure PrintPreview; dispid 65763;
    procedure Quit; dispid 65764;
    procedure CreatePlaneThru3Points; dispid 65765;
    procedure ViewRotXPlusNinety; dispid 65766;
    function GetUnits: OleVariant; dispid 65767;
    procedure SetAngularUnits(UType: Smallint; FractBase: Smallint; FractDenom: Smallint; 
                              SigDigits: Smallint); dispid 65768;
    function GetAngularUnits: OleVariant; dispid 65769;
    function IGetUnits: Smallint; dispid 65770;
    procedure ISetAngularUnits(UType: Smallint; FractBase: Smallint; FractDenom: Smallint; 
                               SigDigits: Smallint); dispid 65771;
    function IGetAngularUnits: Smallint; dispid 65772;
    procedure ShowConfiguration(const ConfigurationName: WideString); dispid 65773;
    procedure ResetConfiguration; dispid 65774;
    procedure AddConfiguration(const Name: WideString; const Comment: WideString; 
                               const AlternateName: WideString; SuppressByDefault: WordBool; 
                               HideByDefault: WordBool; MinFeatureManager: WordBool; 
                               InheritProperties: WordBool; Flags: LongWord); dispid 65775;
    procedure DeleteConfiguration(const ConfigurationName: WideString); dispid 65776;
    procedure EditConfiguration(const Name: WideString; const NewName: WideString; 
                                const Comment: WideString; const AlternateName: WideString; 
                                SuppressByDefault: WordBool; HideByDefault: WordBool; 
                                MinFeatureManager: WordBool; InheritProperties: WordBool; 
                                Flags: LongWord); dispid 65777;
    procedure CreatePlanePerCurveAndPassPoint(OrigAtCurve: WordBool); dispid 65778;
    function CreateFeatureMgrView(var Bitmap: Integer): IDispatch; dispid 65779;
    function AddFeatureMgrView(var Bitmap: Integer; var AppView: Integer): WordBool; dispid 65780;
    function GetStandardViewRotation(ViewId: Integer): OleVariant; dispid 65781;
    function IGetStandardViewRotation(ViewId: Integer): Double; dispid 65782;
    procedure FeatureExtruRefSurface(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                     T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                     Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; 
                                     Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                                     OffsetReverse2: WordBool); dispid 65783;
    function IGet3rdPartyStorage(const StringIn: WideString; IsStoring: WordBool): IUnknown; dispid 65784;
    procedure DeleteFeatureMgrView(var AppView: Integer); dispid 65785;
    function GetMassProperties: OleVariant; dispid 65786;
    function IGetMassProperties(var MPropsData: Double): WordBool; dispid 65787;
    function GetLightSourceCount: Integer; dispid 65788;
    function GetLightSourceIdFromName(const LightName: WideString): Integer; dispid 65789;
    procedure SetNextSelectionGroupId(ID: Integer); dispid 65790;
    procedure ISetNextSelectionGroupId(ID: Integer); dispid 65791;
    function InsertMidSurfaceExt(Placement: Double; KnitFlag: WordBool): IDispatch; dispid 65792;
    function IInsertMidSurfaceExt(Placement: Double; KnitFlag: WordBool): IMidSurface; dispid 65793;
    procedure ICreatePlaneFixed(var P1: Double; var P2: Double; var P3: Double; UseGlobal: WordBool); dispid 65794;
    function SelectByMark(const SelID: WideString; const SelParams: WideString; X: Double; 
                          Y: Double; Z: Double; Mark: Integer): WordBool; dispid 65795;
    function AndSelectByMark(const SelID: WideString; const SelParams: WideString; X: Double; 
                             Y: Double; Z: Double; Mark: Integer): WordBool; dispid 65796;
    function GetDependencies(Traverseflag: Integer; Searchflag: Integer): OleVariant; dispid 65797;
    function IGetDependencies(Traverseflag: Integer; Searchflag: Integer): WideString; dispid 65798;
    function GetNumDependencies(Traverseflag: Integer; Searchflag: Integer): Integer; dispid 65799;
    function IGetNumDependencies(Traverseflag: Integer; Searchflag: Integer): Integer; dispid 65800;
    function FirstFeature: IDispatch; dispid 65801;
    function IFirstFeature: IFeature; dispid 65802;
    procedure UnderiveSketch; dispid 65803;
    procedure DeriveSketch; dispid 65804;
    function IsExploded: WordBool; dispid 65805;
    function DeleteSelection(ConfirmFlag: WordBool): WordBool; dispid 65806;
    function DeleteNamedView(const ViewName: WideString): WordBool; dispid 65807;
    function SetLightSourceName(ID: Integer; const NewName: WideString): WordBool; dispid 65808;
    procedure Insert3DSplineCurve(CurveClosed: WordBool); dispid 65809;
    function SetLightSourcePropertyValuesVB(const IdName: WideString; LType: SYSINT; Diff: Double; 
                                            RgbColor: Integer; Dist: Double; DirX: Double; 
                                            DirY: Double; DirZ: Double; SpotDirX: Double; 
                                            SpotDirY: Double; SpotDirZ: Double; SpotAngle: Double; 
                                            FallOff0: Double; FallOff1: Double; FallOff2: Double; 
                                            Ambient: Double; Specular: Double; 
                                            SpotExponent: Double; BDisable: WordBool): WordBool; dispid 65810;
    function ICreateFeatureMgrView(var Bitmap: Integer): IFeatMgrView; dispid 65811;
    function SelectedEdgeProperties(const EdgeName: WideString): WordBool; dispid 65812;
    function SelectedFaceProperties(RgbColor: Integer; Ambient: Double; Diffuse: Double; 
                                    Specular: Double; Shininess: Double; Transparency: Double; 
                                    Emission: Double; UsePartProps: WordBool; 
                                    const FaceName: WideString): WordBool; dispid 65813;
    function SelectedFeatureProperties(RgbColor: Integer; Ambient: Double; Diffuse: Double; 
                                       Specular: Double; Shininess: Double; Transparency: Double; 
                                       Emission: Double; UsePartProps: WordBool; 
                                       Suppressed: WordBool; const FeatureName: WideString): WordBool; dispid 65814;
    procedure InsertSplitLineSil; dispid 65815;
    procedure InsertSplitLineProject(IsDirectional: WordBool; FlipDir: WordBool); dispid 65816;
    procedure InsertRib(Is2Sided: WordBool; ReverseThicknessDir: WordBool; Thickness: Double; 
                        ReferenceEdgeIndex: Integer; ReverseMaterialDir: WordBool; 
                        IsDrafted: WordBool; DraftOutward: WordBool; DraftAngle: Double); dispid 65817;
    function AddRadialDimension(X: Double; Y: Double; Z: Double): WordBool; dispid 65818;
    function AddDiameterDimension(X: Double; Y: Double; Z: Double): WordBool; dispid 65819;
    function GetModelViewNames: OleVariant; dispid 65820;
    function IGetModelViewNames: WideString; dispid 65821;
    function GetModelViewCount: SYSINT; dispid 65822;
    function GetUserPreferenceDoubleValue(UserPreferenceValue: Integer): Double; dispid 65823;
    function SetUserPreferenceDoubleValue(UserPreferenceValue: Integer; Value: Double): WordBool; dispid 65824;
    procedure ViewDisplayCurvature; dispid 65825;
    procedure Scale; dispid 65826;
    procedure AddIns; dispid 65827;
    function InsertCurveFile(const FileName: WideString): WordBool; dispid 65828;
    procedure InsertCurveFileBegin; dispid 65829;
    function InsertCurveFilePoint(X: Double; Y: Double; Z: Double): WordBool; dispid 65830;
    function InsertCurveFileEnd: WordBool; dispid 65831;
    function ChangeSketchPlane: WordBool; dispid 65832;
    procedure ViewOrientationUndo; dispid 65833;
    procedure PrintOut(FromPage: Integer; ToPage: Integer; NumCopies: Integer; Collate: WordBool; 
                       const Printer: WideString; Scale: Double; PrintToFile: WordBool); dispid 65834;
    procedure SketchOffsetEntities(Offset: Double; Flip: WordBool); dispid 65835;
    procedure InsertLibraryFeature(const LibFeatPartNameIn: WideString); dispid 65836;
    procedure SketchModifyTranslate(StartX: Double; StartY: Double; EndX: Double; EndY: Double); dispid 65837;
    procedure SketchModifyRotate(CenterX: Double; CenterY: Double; Angle: Double); dispid 65838;
    procedure SketchModifyFlip(AxisFlag: SYSINT); dispid 65839;
    function SketchModifyScale(ScaleFactor: Double): WordBool; dispid 65840;
    function GetActiveConfiguration: IDispatch; dispid 65841;
    function IGetActiveConfiguration: IConfiguration; dispid 65842;
    function GetUserPreferenceToggle(UserPreferenceToggle: Integer): WordBool; dispid 65843;
    function SetUserPreferenceToggle(UserPreferenceValue: Integer; OnFlag: WordBool): WordBool; dispid 65844;
    procedure InsertSweepRefSurface(Propagate: WordBool; TwistCtrlOption: Smallint; 
                                    KeepTangency: WordBool; ForceNonRational: WordBool); dispid 65845;
    procedure InsertLoftRefSurface(Closed: WordBool; KeepTangency: WordBool; 
                                   ForceNonRational: WordBool); dispid 65846;
    procedure InsertProtrusionSwept2(Propagate: WordBool; Alignment: WordBool; 
                                     TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool); dispid 65847;
    procedure InsertProtrusionBlend2(Closed: WordBool; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool); dispid 65848;
    procedure InsertCutSwept2(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                              KeepTangency: WordBool; ForceNonRational: WordBool); dispid 65849;
    procedure InsertCutBlend2(Closed: WordBool; KeepTangency: WordBool; ForceNonRational: WordBool); dispid 65850;
    function IsEditingSelf: WordBool; dispid 65851;
    procedure ShowNamedView2(const VName: WideString; ViewId: Integer); dispid 65852;
    procedure InsertDome(Height: Double; ReverseDir: WordBool; DoEllipticSurface: WordBool); dispid 65853;
    property MaterialUserName: WideString dispid 65854;
    property MaterialIdName: WideString dispid 65855;
    property MaterialPropertyValues: OleVariant dispid 65856;
    function IMaterialPropertyValues: Double; dispid 65857;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 65858;
    function GetPropertyExtension(ID: Integer): OleVariant; dispid 65859;
    procedure ResetPropertyExtension; dispid 65860;
    function GetUpdateStamp: Integer; dispid 65861;
    procedure ViewZoomTo2(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double); dispid 65862;
    procedure ScreenRotate; dispid 65863;
    property PrintSetup[SetupType: Integer]: Smallint dispid 65864;
    procedure GraphicsRedraw2; dispid 65865;
    procedure InsertCosmeticThread(Type_: Smallint; Depth: Double; Length: Double; 
                                   const Note: WideString); dispid 65866;
    procedure HideCosmeticThread; dispid 65867;
    procedure ShowCosmeticThread; dispid 65868;
    procedure SimpleHole2(Dia: Double; Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                          T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool); dispid 65869;
    procedure IRelease3rdPartyStorage(const StringIn: WideString); dispid 65870;
    function FeatureRevolve2(Angle: Double; ReverseDir: WordBool; Angle2: Double; RevType: Integer; 
                             Options: Integer): Integer; dispid 65871;
    function FeatureRevolveCut2(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                RevType: Integer; Options: Integer): Integer; dispid 65872;
    procedure SetSaveFlag; dispid 65873;
    function GetExternalReferenceName: WideString; dispid 65874;
    function SelectByRay(DoubleInfoIn: OleVariant; TypeWanted: Integer): WordBool; dispid 65875;
    function ISelectByRay(var PointIn: Double; var VectorIn: Double; RadiusIn: Double; 
                          TypeWanted: Integer): WordBool; dispid 65876;
    procedure SetSceneBkgDIB(L_dib: Integer); dispid 65877;
    property SceneBkgImageFileName: WideString dispid 65878;
    procedure InsertBkgImage(const NewName: WideString); dispid 65879;
    procedure DeleteBkgImage; dispid 65880;
    procedure InsertSplinePoint(X: Double; Y: Double; Z: Double); dispid 65881;
    procedure InsertLoftRefSurface2(Closed: WordBool; KeepTangency: WordBool; 
                                    ForceNonRational: WordBool; TessToleranceFactor: Double; 
                                    StartMatchingType: Smallint; EndMatchingType: Smallint); dispid 65882;
    procedure InsertProtrusionBlend3(Closed: WordBool; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; TessToleranceFactor: Double; 
                                     StartMatchingType: Smallint; EndMatchingType: Smallint); dispid 65883;
    procedure InsertCutBlend3(Closed: WordBool; KeepTangency: WordBool; ForceNonRational: WordBool; 
                              TessToleranceFactor: Double; StartMatchingType: Smallint; 
                              EndMatchingType: Smallint); dispid 65884;
    procedure AlignDimensions; dispid 65885;
    procedure BreakDimensionAlignment; dispid 65886;
    procedure SketchFillet1(Rad: Double); dispid 65887;
    procedure FeatureChamferType(ChamferType: Smallint; Width: Double; Angle: Double; 
                                 Flip: WordBool; OtherDist: Double; VertexChamDist1: Double; 
                                 VertexChamDist2: Double; VertexChamDist3: Double); dispid 65888;
    procedure FeatureCutThin(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                             D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                             Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                             OffsetReverse1: WordBool; OffsetReverse2: WordBool; Thk1: Double; 
                             Thk2: Double; EndThk: Double; RevThinDir: Integer; CapEnds: Integer; 
                             AddBends: WordBool; BendRad: Double); dispid 65889;
    procedure FeatureBossThin(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                              T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                              Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                              Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                              Thk1: Double; Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                              CapEnds: Integer; AddBends: WordBool; BendRad: Double); dispid 65890;
    function InsertDatumTargetSymbol(const Datum1: WideString; const Datum2: WideString; 
                                     const Datum3: WideString; AreaStyle: Smallint; 
                                     AreaOutside: WordBool; Value1: Double; Value2: Double; 
                                     const ValueStr1: WideString; const ValueStr2: WideString; 
                                     ArrowsSmart: WordBool; ArrowStyle: Smallint; 
                                     LeaderLineStyle: Smallint; LeaderBent: WordBool; 
                                     ShowArea: WordBool; ShowSymbol: WordBool): WordBool; dispid 65891;
    function EditDatumTargetSymbol(const Datum1: WideString; const Datum2: WideString; 
                                   const Datum3: WideString; AreaStyle: Smallint; 
                                   AreaOutside: WordBool; Value1: Double; Value2: Double; 
                                   const ValueStr1: WideString; const ValueStr2: WideString; 
                                   ArrowsSmart: WordBool; ArrowStyle: Smallint; 
                                   LeaderLineStyle: Smallint; LeaderBent: WordBool; 
                                   ShowArea: WordBool; ShowSymbol: WordBool): WordBool; dispid 65892;
    procedure InsertBOMBalloon; dispid 65893;
    function FeatureReferenceCurve(NumOfCurves: Integer; BaseCurves: OleVariant; Merge: WordBool; 
                                   const FromFileName: WideString; out ErrorCode: Integer): IDispatch; dispid 65894;
    function IFeatureReferenceCurve(NumOfCurves: Integer; BaseCurves: {??PPPUserType1}OleVariant; 
                                    Merge: WordBool; const FromFileName: WideString; 
                                    out ErrorCode: Integer): IReferenceCurve; dispid 65895;
    procedure FontBold(Bold: WordBool); dispid 65896;
    procedure FontItalic(Italic: WordBool); dispid 65897;
    procedure FontUnderline(Underline: WordBool); dispid 65898;
    procedure FontFace(const Face: WideString); dispid 65899;
    procedure FontPoints(Points: Smallint); dispid 65900;
    procedure FontUnits(Units: Double); dispid 65901;
    function SketchSplineByEqnParams(ParamsIn: OleVariant): WordBool; dispid 65902;
    procedure AlignParallelDimensions; dispid 65903;
    procedure SetBlockingState(StateIn: Integer); dispid 65904;
    procedure ResetBlockingState; dispid 65905;
    function GetSceneBkgDIB: Integer; dispid 65906;
    procedure InsertHatchedFace; dispid 65907;
    function GetColorTable: IDispatch; dispid 65908;
    function IGetColorTable: IColorTable; dispid 65909;
    procedure InsertSweepRefSurface2(Propagate: WordBool; TwistCtrlOption: Smallint; 
                                     KeepTangency: WordBool; ForceNonRational: WordBool; 
                                     StartMatchingType: Smallint; EndMatchingType: Smallint); dispid 65910;
    procedure InsertProtrusionSwept3(Propagate: WordBool; Alignment: WordBool; 
                                     TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; StartMatchingType: Smallint; 
                                     EndMatchingType: Smallint); dispid 65911;
    procedure InsertCutSwept3(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                              KeepTangency: WordBool; ForceNonRational: WordBool; 
                              StartMatchingType: Smallint; EndMatchingType: Smallint); dispid 65912;
    function IsOpenedViewOnly: WordBool; dispid 65913;
    function IsOpenedReadOnly: WordBool; dispid 65914;
    procedure ViewZoomToSelection; dispid 65915;
    procedure FeatureBossThicken(Thickness: Double; Direction: Integer; FaceIndex: Integer); dispid 65916;
    procedure FeatureCutThicken(Thickness: Double; Direction: Integer; FaceIndex: Integer); dispid 65917;
    function InsertAxis: WordBool; dispid 65918;
    procedure EditUndo(NSteps: LongWord); dispid 65919;
    procedure SelectMidpoint; dispid 65920;
    function ISketchSplineByEqnParams(var PropArray: SYSINT; var KnotsArray: Double; 
                                      var CntrlPntCoordArray: Double): Integer; dispid 65921;
    function VersionHistory: OleVariant; dispid 65922;
    function IVersionHistory: WideString; dispid 65923;
    function IGetVersionHistoryCount: SYSINT; dispid 65924;
    procedure Rebuild(Options: Integer); dispid 65925;
    procedure InsertFeatureShellAddThickness(Thickness: Double); dispid 65926;
    procedure InsertOffsetSurface(Thickness: Double; Reverse: WordBool); dispid 65927;
    procedure SimplifySpline(ToleranceIn: Double); dispid 65928;
    property SummaryInfo[FieldId: Integer]: WideString dispid 65929;
    property CustomInfo[const FieldName: WideString]: WideString dispid 65930;
    function GetCustomInfoCount: Integer; dispid 65931;
    function GetCustomInfoType(const FieldName: WideString): WideString; dispid 65932;
    function GetCustomInfoNames: OleVariant; dispid 65933;
    function IGetCustomInfoNames: WideString; dispid 65934;
    function AddCustomInfo(const FieldName: WideString; const FieldType: WideString; 
                           const FieldValue: WideString): WordBool; dispid 65935;
    function DeleteCustomInfo(const FieldName: WideString): WordBool; dispid 65936;
    procedure PrintOut2(FromPage: Integer; ToPage: Integer; NumCopies: Integer; Collate: WordBool; 
                        const Printer: WideString; Scale: Double; PrintToFile: WordBool; 
                        const PtfName: WideString); dispid 65937;
    function SetReadOnlyState(SetReadOnly: WordBool): WordBool; dispid 65938;
    function InsertFamilyTableOpen(const FileName: WideString): WordBool; dispid 65939;
    function MultiSelectByRay(DoubleInfoIn: OleVariant; TypeWanted: Integer; Append: WordBool): WordBool; dispid 65940;
    function IMultiSelectByRay(var PointIn: Double; var VectorIn: Double; RadiusIn: Double; 
                               TypeWanted: Integer; Append: WordBool): WordBool; dispid 65941;
    procedure InsertNewNote3(const UpperText: WideString; NoLeader: WordBool; BentLeader: WordBool; 
                             ArrowStyle: Smallint; LeaderSide: Smallint; Angle: Double; 
                             BalloonStyle: Smallint; BalloonFit: Smallint; SmartArrow: WordBool); dispid 65942;
    procedure InsertWeldSymbol2(const Dim1: WideString; const Symbol: WideString; 
                                const Dim2: WideString; Symmetric: WordBool; FieldWeld: WordBool; 
                                ShowOtherSide: WordBool; DashOnTop: WordBool; Peripheral: WordBool; 
                                HasProcess: WordBool; const ProcessValue: WideString); dispid 65943;
    function InsertSurfaceFinishSymbol2(SymType: Integer; LeaderType: Integer; LocX: Double; 
                                        LocY: Double; LocZ: Double; LaySymbol: Integer; 
                                        ArrowType: Integer; const MachAllowance: WideString; 
                                        const OtherVals: WideString; const ProdMethod: WideString; 
                                        const SampleLen: WideString; 
                                        const MaxRoughness: WideString; 
                                        const MinRoughness: WideString; 
                                        const RoughnessSpacing: WideString): WordBool; dispid 65944;
    function SaveSilent: Integer; dispid 65945;
    function SaveAsSilent(const NewName: WideString; SaveAsCopy: WordBool): Integer; dispid 65946;
    function AddCustomInfo2(const FieldName: WideString; FieldType: Integer; 
                            const FieldValue: WideString): WordBool; dispid 65947;
    function GetCustomInfoType2(const FieldName: WideString): Integer; dispid 65948;
    function InsertRefPoint: WordBool; dispid 65949;
    function FeatureFillet2(R1: Double; Propagate: WordBool; Ftyp: WordBool; VarRadTyp: WordBool; 
                            OverflowType: Integer; NRadii: SYSINT; Radii: OleVariant): Integer; dispid 65950;
    function IFeatureFillet2(R1: Double; Propagate: WordBool; Ftyp: WordBool; VarRadTyp: WordBool; 
                             OverflowType: Integer; NRadii: SYSINT; var Radii: Double): Integer; dispid 65951;
    function GetFirstAnnotation: IDispatch; dispid 65952;
    function IGetFirstAnnotation: IAnnotation; dispid 65953;
    function InsertCoordinateSystem(XFlippedIn: WordBool; YFlippedIn: WordBool; ZFlippedIn: WordBool): WordBool; dispid 65954;
    function GetToolbarVisibility(Toolbar: Integer): WordBool; dispid 65955;
    procedure SetToolbarVisibility(Toolbar: Integer; Visibility: WordBool); dispid 65956;
    procedure ViewDispCoordinateSystems; dispid 65957;
    procedure ViewDispTempRefaxes; dispid 65958;
    procedure ViewDispRefPoints; dispid 65959;
    procedure ViewDispOrigins; dispid 65960;
    function GetCoordinateSystemXformByName(const NameIn: WideString): OleVariant; dispid 65961;
    function IGetCoordinateSystemXformByName(const NameIn: WideString): Double; dispid 65962;
    function GetCurrentCoordinateSystemName: WideString; dispid 65963;
    function EnumModelViews: IEnumModelViews; dispid 65964;
    function InsertCompositeCurve: WordBool; dispid 65965;
    procedure SketchParabola(Val1: Double; Val2: Double; Z1: Double; Val3: Double; Val4: Double; 
                             Z2: Double; Val5: Double; Val6: Double; Z3: Double; Val7: Double; 
                             Val8: Double; Z4: Double); dispid 65966;
    procedure InsertRadiateSurface(Distance: Double; FlipDir: WordBool; TangentPropagate: WordBool); dispid 65967;
    procedure InsertSewRefSurface; dispid 65968;
    function InsertShape(PressureOn: Integer; TangentsOn: Integer; PressureGain: Double; 
                         TangentGain: Double; CurveSpringGain: Double; Alpha: Double; Beta: Double; 
                         Gamma: Double; Delta: Double; Degree: Integer; Split: Integer; 
                         Tuning: Integer): Integer; dispid 65969;
    procedure InsertMfDraft2(Angle: Double; FlipDir: WordBool; IsEdgeDraft: WordBool; 
                             PropType: Integer; StepDraft: WordBool); dispid 65970;
    function GetConfigurationCount: Integer; dispid 65971;
    function GetConfigurationNames: OleVariant; dispid 65972;
    function IGetConfigurationNames(var Count: Integer): WideString; dispid 65973;
    procedure FeatureCut2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          KeepPieceIndex: Integer); dispid 65974;
    procedure InsertCutSurface(Flip: WordBool; KeepPieceIndex: Integer); dispid 65975;
    function GetDetailingDefaults: IDispatch; dispid 65976;
    function IGetDetailingDefaults: IDetailingDefaults; dispid 65977;
    function ListExternalFileReferencesCount(UseSearchRules: WordBool): Integer; dispid 65978;
    function ListExternalFileReferences(UseSearchRules: WordBool): OleVariant; dispid 65979;
    function IListExternalFileReferences(UseSearchRules: WordBool; NumRefs: Integer): WideString; dispid 65980;
    function SketchSplineByEqnParams2(ParamsIn: OleVariant): WordBool; dispid 65981;
    function GetFirstModelView: IDispatch; dispid 65982;
    function IGetFirstModelView: IModelView; dispid 65983;
    function InsertPlanarRefSurface: WordBool; dispid 65984;
    function GetNext: IDispatch; dispid 65985;
    function GetSaveFlag: WordBool; dispid 65986;
    function AddCustomInfo3(const Configuration: WideString; const FieldName: WideString; 
                            FieldType: Integer; const FieldValue: WideString): WordBool; dispid 65987;
    property CustomInfo2[const Configuration: WideString; const FieldName: WideString]: WideString dispid 65988;
    function DeleteCustomInfo2(const Configuration: WideString; const FieldName: WideString): WordBool; dispid 65989;
    function GetCustomInfoCount2(const Configuration: WideString): Integer; dispid 65990;
    function GetCustomInfoNames2(const Configuration: WideString): OleVariant; dispid 65991;
    function IGetCustomInfoNames2(const Configuration: WideString): WideString; dispid 65992;
    function GetCustomInfoType3(const Configuration: WideString; const FieldName: WideString): Integer; dispid 65993;
    function GetConsiderLeadersAsLines: WordBool; dispid 65994;
    function SetConsiderLeadersAsLines(LeadersAsLines: WordBool): WordBool; dispid 65995;
    procedure InsertRevolvedRefSurface(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                       RevType: SYSINT); dispid 65996;
    function GetBendState: Integer; dispid 65997;
    function SetBendState(BendState: Integer): Integer; dispid 65998;
    property ShowFeatureErrorDialog: WordBool dispid 65999;
    procedure ClearUndoList; dispid 66000;
    function GetFeatureManagerWidth: Integer; dispid 66001;
    function SetFeatureManagerWidth(Width: Integer): Integer; dispid 66002;
    function InsertProjectedSketch2(Reverse: Integer): IDispatch; dispid 66003;
    function IInsertProjectedSketch2(Reverse: Integer): IFeature; dispid 66004;
    function GetFeatureCount: Integer; dispid 66005;
    function FeatureByPositionReverse(Num: Integer): IDispatch; dispid 66006;
    function IFeatureByPositionReverse(Num: Integer): IFeature; dispid 66007;
    function RayIntersections(BodiesIn: OleVariant; BasePointsIn: OleVariant; 
                              VectorsIn: OleVariant; Options: Integer; HitRadius: Double; 
                              Offset: Double): Integer; dispid 66008;
    function IRayIntersections(var BodiesIn: IBody; NumBodies: Integer; var BasePointsIn: Double; 
                               var VectorsIn: Double; NumRays: Integer; Options: Integer; 
                               HitRadius: Double; Offset: Double): Integer; dispid 66009;
    function GetRayIntersectionsPoints: OleVariant; dispid 66010;
    function IGetRayIntersectionsPoints: Double; dispid 66011;
    function GetRayIntersectionsTopology: OleVariant; dispid 66012;
    function IGetRayIntersectionsTopology: IUnknown; dispid 66013;
    procedure EditSeedFeat; dispid 66014;
    function EditSuppress: WordBool; dispid 66015;
    function EditUnsuppress: WordBool; dispid 66016;
    function EditUnsuppressDependent: WordBool; dispid 66017;
    function EditRollback: WordBool; dispid 66018;
    function Save2(Silent: WordBool): Integer; dispid 66019;
    function SaveAs2(const NewName: WideString; SaveAsVersion: Integer; SaveAsCopy: WordBool; 
                     Silent: WordBool): Integer; dispid 66020;
    procedure SetPopupMenuMode(ModeIn: SYSINT); dispid 66021;
    function GetPopupMenuMode: SYSINT; dispid 66022;
    procedure CloseFamilyTable; dispid 66023;
    procedure CreatePlaneAtSurface(InterIndex: SYSINT; ProjOpt: WordBool; ReverseDir: WordBool; 
                                   NormalPlane: WordBool; Angle: Double); dispid 66024;
    procedure SketchOffset(Offset: Double; ContourMode: WordBool); dispid 66025;
    function CreateLinearSketchStepAndRepeat(NumX: Integer; NumY: Integer; SpacingX: Double; 
                                             SpacingY: Double; AngleX: Double; AngleY: Double; 
                                             const DeleteInstances: WideString): WordBool; dispid 66026;
    function SetAmbientLightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                       Specular: Double; Colour: Integer; Enabled: WordBool; 
                                       Fixed: WordBool): WordBool; dispid 66027;
    function GetAmbientLightProperties(const Name: WideString; var Ambient: Double; 
                                       var Diffuse: Double; var Specular: Double; 
                                       var Colour: Integer; var Enabled: WordBool; 
                                       var Fixed: WordBool): WordBool; dispid 66028;
    function SetPointLightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                     Specular: Double; Colour: Integer; Enabled: WordBool; 
                                     Fixed: WordBool; X: Double; Y: Double; Z: Double): WordBool; dispid 66029;
    function GetPointLightProperties(const Name: WideString; var Ambient: Double; 
                                     var Diffuse: Double; var Specular: Double; 
                                     var Colour: Integer; var Enabled: WordBool; 
                                     var Fixed: WordBool; var X: Double; var Y: Double; 
                                     var Z: Double): WordBool; dispid 66030;
    function SetDirectionLightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                         Specular: Double; Colour: Integer; Enabled: WordBool; 
                                         Fixed: WordBool; X: Double; Y: Double; Z: Double): WordBool; dispid 66031;
    function GetDirectionLightProperties(const Name: WideString; var Ambient: Double; 
                                         var Diffuse: Double; var Specular: Double; 
                                         var Colour: Integer; var Enabled: WordBool; 
                                         var Fixed: WordBool; var X: Double; var Y: Double; 
                                         var Z: Double): WordBool; dispid 66032;
    function SetSpotlightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                    Specular: Double; Colour: Integer; Enabled: WordBool; 
                                    Fixed: WordBool; Posx: Double; Posy: Double; Posz: Double; 
                                    Targetx: Double; Targety: Double; Targetz: Double; 
                                    ConeAngle: Double): WordBool; dispid 66033;
    function GetSpotlightProperties(const Name: WideString; var Ambient: Double; 
                                    var Diffuse: Double; var Specular: Double; var Colour: Integer; 
                                    var Enabled: WordBool; var Fixed: WordBool; var X: Double; 
                                    var Y: Double; var Z: Double; var Targetx: Double; 
                                    var Targety: Double; var Targetz: Double; var ConeAngle: Double): WordBool; dispid 66034;
    procedure SplitOpenSegment(X: Double; Y: Double; Z: Double); dispid 66035;
    procedure AutoInferToggle; dispid 66036;
    procedure SketchRectangleAtAnyAngle(Val1: Double; Val2: Double; Z1: Double; Val3: Double; 
                                        Val4: Double; Z2: Double; Val3x: Double; Val3y: Double; 
                                        Z3: Double; Val5: WordBool); dispid 66037;
    function CreateCircularSketchStepAndRepeat(ArcRadius: Double; ArcAngle: Double; 
                                               PatternNum: Integer; PatternSpacing: Double; 
                                               PatternRotate: WordBool; 
                                               const DeleteInstances: WideString): WordBool; dispid 66038;
    procedure SplitClosedSegment(X0: Double; Y0: Double; Z0: Double; X1: Double; Y1: Double; 
                                 Z1: Double); dispid 66039;
    function IsLightLockedToModel(LightId: Integer): WordBool; dispid 66040;
    function LockLightToModel(LightId: Integer; Fix: WordBool): WordBool; dispid 66041;
    function FeatureFillet3(R1: Double; Propagate: WordBool; Ftyp: SYSINT; VarRadTyp: WordBool; 
                            OverflowType: Integer; NRadii: SYSINT; Radii: OleVariant; 
                            UseHelpPoint: WordBool; UseTangentHoldLine: WordBool): Integer; dispid 66042;
    function IFeatureFillet3(R1: Double; Propagate: WordBool; Ftyp: SYSINT; VarRadTyp: WordBool; 
                             OverflowType: Integer; NRadii: SYSINT; var Radii: Double; 
                             UseHelpPoint: WordBool; UseTangentHoldLine: WordBool): Integer; dispid 66043;
    procedure InsertConnectionPoint; dispid 66044;
    procedure InsertRoutePoint; dispid 66045;
    procedure FeatureBossThicken2(Thickness: Double; Direction: Integer; FaceIndex: Integer; 
                                  FillVolume: WordBool); dispid 66046;
    procedure FeatureCutThicken2(Thickness: Double; Direction: Integer; FaceIndex: Integer; 
                                 FillVolume: WordBool); dispid 66047;
    function GetConfigurationByName(const Name: WideString): IDispatch; dispid 66048;
    function IGetConfigurationByName(const Name: WideString): IConfiguration; dispid 66049;
    function CreatePoint2(PointX: Double; PointY: Double; PointZ: Double): IDispatch; dispid 66050;
    function ICreatePoint2(PointX: Double; PointY: Double; PointZ: Double): ISketchPoint; dispid 66051;
    function CreateLine2(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                         P2z: Double): IDispatch; dispid 66052;
    function ICreateLine2(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                          P2z: Double): ISketchSegment; dispid 66053;
    function GetActiveSketch2: IDispatch; dispid 66054;
    function IGetActiveSketch2: ISketch; dispid 66055;
    procedure DrawLightIcons; dispid 66056;
    function GetLayerManager: IDispatch; dispid 66057;
    function IGetLayerManager: ILayerMgr; dispid 66058;
    function CreateCircle2(XC: Double; YC: Double; Zc: Double; Xp: Double; Yp: Double; Zp: Double): IDispatch; dispid 66059;
    function ICreateCircle2(XC: Double; YC: Double; Zc: Double; Xp: Double; Yp: Double; Zp: Double): ISketchSegment; dispid 66060;
    function CreateCircleByRadius2(XC: Double; YC: Double; Zc: Double; Radius: Double): IDispatch; dispid 66061;
    function ICreateCircleByRadius2(XC: Double; YC: Double; Zc: Double; Radius: Double): ISketchSegment; dispid 66062;
    function CreateArc2(XC: Double; YC: Double; Zc: Double; Xp1: Double; Yp1: Double; Zp1: Double; 
                        Xp2: Double; Yp2: Double; Zp2: Double; Direction: Smallint): IDispatch; dispid 66063;
    function ICreateArc2(XC: Double; YC: Double; Zc: Double; Xp1: Double; Yp1: Double; Zp1: Double; 
                         Xp2: Double; Yp2: Double; Zp2: Double; Direction: Smallint): ISketchSegment; dispid 66064;
    function CreateEllipse2(CenterX: Double; CenterY: Double; CenterZ: Double; MajorX: Double; 
                            MajorY: Double; MajorZ: Double; MinorX: Double; MinorY: Double; 
                            MinorZ: Double): IDispatch; dispid 66065;
    function ICreateEllipse2(CenterX: Double; CenterY: Double; CenterZ: Double; MajorX: Double; 
                             MajorY: Double; MajorZ: Double; MinorX: Double; MinorY: Double; 
                             MinorZ: Double): ISketchSegment; dispid 66066;
    function CreateEllipticalArc2(CenterX: Double; CenterY: Double; CenterZ: Double; 
                                  MajorX: Double; MajorY: Double; MajorZ: Double; MinorX: Double; 
                                  MinorY: Double; MinorZ: Double; StartX: Double; StartY: Double; 
                                  StartZ: Double; EndX: Double; EndY: Double; EndZ: Double): IDispatch; dispid 66067;
    function ICreateEllipticalArc2(CenterX: Double; CenterY: Double; CenterZ: Double; 
                                   MajorX: Double; MajorY: Double; MajorZ: Double; MinorX: Double; 
                                   MinorY: Double; MinorZ: Double; StartX: Double; StartY: Double; 
                                   StartZ: Double; EndX: Double; EndY: Double; EndZ: Double): ISketchSegment; dispid 66068;
    function CreateSpline(PointData: OleVariant): IDispatch; dispid 66069;
    function ICreateSpline(PointCount: Integer; var PointData: Double): ISketchSegment; dispid 66070;
    procedure ViewZoomtofit2; dispid 66071;
    procedure SetInferenceMode(InferenceMode: WordBool); dispid 66072;
    function GetInferenceMode: WordBool; dispid 66073;
    function SetTitle2(const NewTitle: WideString): WordBool; dispid 66074;
    function SketchFillet2(Rad: Double; ConstrainedCorners: Smallint): WordBool; dispid 66075;
    function IsTessellationValid: WordBool; dispid 66076;
    procedure EditRoute; dispid 66077;
    procedure FileReload; dispid 66078;
    function GetDesignTable: IDispatch; dispid 66079;
    function IGetDesignTable: IDesignTable; dispid 66080;
    function GetEntityName(const Entity: IDispatch): WideString; dispid 66081;
    function IGetEntityName(const Entity: IEntity): WideString; dispid 66082;
    function IGetNext: IModelDoc; dispid 66083;
    function ShowConfiguration2(const ConfigurationName: WideString): WordBool; dispid 66084;
    function AddConfiguration2(const Name: WideString; const Comment: WideString; 
                               const AlternateName: WideString; SuppressByDefault: WordBool; 
                               HideByDefault: WordBool; MinFeatureManager: WordBool; 
                               InheritProperties: WordBool; Flags: LongWord): WordBool; dispid 66085;
    function DeleteConfiguration2(const ConfigurationName: WideString): WordBool; dispid 66086;
    function EditConfiguration2(const Name: WideString; const NewName: WideString; 
                                const Comment: WideString; const AlternateName: WideString; 
                                SuppressByDefault: WordBool; HideByDefault: WordBool; 
                                MinFeatureManager: WordBool; InheritProperties: WordBool; 
                                Flags: LongWord): WordBool; dispid 66087;
    function CreateSplineByEqnParams(ParamsIn: OleVariant): IDispatch; dispid 66088;
    function ICreateSplineByEqnParams(var PropArray: SYSINT; var KnotsArray: Double; 
                                      var CntrlPntCoordArray: Double): ISketchSegment; dispid 66089;
    function CreateFeatureMgrView2(var Bitmap: Integer; const ToolTip: WideString): IDispatch; dispid 66090;
    function ICreateFeatureMgrView2(var Bitmap: Integer; const ToolTip: WideString): IFeatMgrView; dispid 66091;
    function AddFeatureMgrView2(var Bitmap: Integer; var AppView: Integer; const ToolTip: WideString): WordBool; dispid 66092;
    procedure FeatureCut3(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          KeepPieceIndex: Integer); dispid 66093;
    function GetFirstAnnotation2: IDispatch; dispid 66094;
    function IGetFirstAnnotation2: IAnnotation; dispid 66095;
    procedure InsertExtendSurface(ExtendLinear: WordBool; EndCondition: Integer; Distance: Double); dispid 66096;
    procedure InsertTangencySurface(OneSide: WordBool; IsFlip: WordBool); dispid 66097;
    function CreateSplinesByEqnParams(ParamsIn: OleVariant): OleVariant; dispid 66098;
    function ICreateSplinesByEqnParams(var PropArray: SYSINT; var KnotsArray: Double; 
                                       var CntrlPntCoordArray: Double): IEnumSketchSegments; dispid 66099;
    function CreateClippedSplines(ParamsIn: OleVariant; X1: Double; Y1: Double; X2: Double; 
                                  Y2: Double): OleVariant; dispid 66100;
    function ICreateClippedSplines(var PropArray: SYSINT; var KnotsArray: Double; 
                                   var CntrlPntCoordArray: Double; X1: Double; Y1: Double; 
                                   X2: Double; Y2: Double): IEnumSketchSegments; dispid 66101;
    function EditSuppress2: WordBool; dispid 66102;
    function EditUnsuppress2: WordBool; dispid 66103;
    function EditUnsuppressDependent2: WordBool; dispid 66104;
    function EditRollback2: WordBool; dispid 66105;
    procedure HideDimension; dispid 66106;
    procedure ShowFeatureDimensions; dispid 66107;
    procedure HideFeatureDimensions; dispid 66108;
    procedure Sketch3DIntersections; dispid 66109;
    function FeatureFillet4(R1: Double; Propagate: WordBool; UniformRadius: WordBool; Ftyp: SYSINT; 
                            VarRadTyp: WordBool; OverflowType: Integer; NRadii: SYSINT; 
                            Radii: OleVariant; UseHelpPoint: WordBool; 
                            UseTangentHoldLine: WordBool; CornerType: WordBool; 
                            SetbackDistCount: SYSINT; SetBackDistances: OleVariant): Integer; dispid 66110;
    function IFeatureFillet4(R1: Double; Propagate: WordBool; UniformRadius: WordBool; 
                             Ftyp: SYSINT; VarRadTyp: WordBool; OverflowType: Integer; 
                             NRadii: SYSINT; var Radii: Double; UseHelpPoint: WordBool; 
                             UseTangentHoldLine: WordBool; CornerType: WordBool; 
                             SetbackDistCount: SYSINT; var SetBackDistances: Double): Integer; dispid 66111;
    procedure InsertDeleteFace; dispid 66112;
    function GetDependencies2(Traverseflag: WordBool; Searchflag: WordBool; 
                              AddReadOnlyInfo: WordBool): OleVariant; dispid 66113;
    function IGetDependencies2(Traverseflag: WordBool; Searchflag: WordBool; 
                               AddReadOnlyInfo: WordBool): WideString; dispid 66114;
    function IGetNumDependencies2(Traverseflag: WordBool; Searchflag: WordBool; 
                                  AddReadOnlyInfo: WordBool): Integer; dispid 66115;
    procedure InsertScale(ScaleFactor_x: Double; ScaleFactor_y: Double; ScaleFactor_z: Double; 
                          IsUniform: WordBool; ScaleType: SYSINT); dispid 66116;
    procedure LockAllExternalReferences; dispid 66117;
    procedure UnlockAllExternalReferences; dispid 66118;
    procedure BreakAllExternalReferences; dispid 66119;
    function EditDimensionProperties(TolType: Integer; TolMax: Double; TolMin: Double; 
                                     const TolMaxFit: WideString; const TolMinFit: WideString; 
                                     UseDocPrec: WordBool; Precision: Integer; ArrowsIn: Integer; 
                                     UseDocArrows: WordBool; Arrow1: Integer; Arrow2: Integer): WordBool; dispid 66120;
    function SketchPolygon(XCenter: Double; YCenter: Double; XEdge: Double; YEdge: Double; 
                           NSides: SYSINT; BInscribed: WordBool): WordBool; dispid 66121;
    function GetBlockingState: Integer; dispid 66122;
    function CreateFeatureMgrView3(var Bitmap: Integer; const ToolTip: WideString; 
                                   WhichPane: Integer): IDispatch; dispid 66123;
    function ICreateFeatureMgrView3(var Bitmap: Integer; const ToolTip: WideString; 
                                    WhichPane: Integer): IFeatMgrView; dispid 66124;
    function AddFeatureMgrView3(var Bitmap: Integer; var AppView: Integer; 
                                const ToolTip: WideString; WhichPane: Integer): WordBool; dispid 66125;
    function CreatePlaneAtOffset2(Val: Double; FlipDir: WordBool): IDispatch; dispid 66126;
    function ICreatePlaneAtOffset2(Val: Double; FlipDir: WordBool): IRefPlane; dispid 66127;
    function CreatePlaneAtAngle2(Val: Double; FlipDir: WordBool): IDispatch; dispid 66128;
    function ICreatePlaneAtAngle2(Val: Double; FlipDir: WordBool): IRefPlane; dispid 66129;
    function CreatePlaneThru3Points2: IDispatch; dispid 66130;
    function ICreatePlaneThru3Points2: IRefPlane; dispid 66131;
    function CreatePlanePerCurveAndPassPoint2(OrigAtCurve: WordBool): IDispatch; dispid 66132;
    function ICreatePlanePerCurveAndPassPoint2(OrigAtCurve: WordBool): IRefPlane; dispid 66133;
    function CreatePlaneAtSurface2(InterIndex: SYSINT; ProjOpt: WordBool; ReverseDir: WordBool; 
                                   NormalPlane: WordBool; Angle: Double): IDispatch; dispid 66134;
    function ICreatePlaneAtSurface2(InterIndex: SYSINT; ProjOpt: WordBool; ReverseDir: WordBool; 
                                    NormalPlane: WordBool; Angle: Double): IRefPlane; dispid 66135;
    function GetUserPreferenceIntegerValue(UserPreferenceValue: Integer): Integer; dispid 66136;
    function SetUserPreferenceIntegerValue(UserPreferenceValue: Integer; Value: Integer): WordBool; dispid 66137;
    function GetUserPreferenceTextFormat(UserPreferenceValue: Integer): IDispatch; dispid 66138;
    function IGetUserPreferenceTextFormat(UserPreferenceValue: Integer): ITextFormat; dispid 66139;
    function SetUserPreferenceTextFormat(UserPreferenceValue: Integer; const Value: IDispatch): WordBool; dispid 66140;
    function ISetUserPreferenceTextFormat(UserPreferenceValue: Integer; const Value: ITextFormat): WordBool; dispid 66141;
    procedure InsertRib2(Is2Sided: WordBool; ReverseThicknessDir: WordBool; Thickness: Double; 
                         ReferenceEdgeIndex: Integer; ReverseMaterialDir: WordBool; 
                         IsDrafted: WordBool; DraftOutward: WordBool; DraftAngle: Double; 
                         IsNormToSketch: WordBool); dispid 66142;
    function InsertObjectFromFile(const FilePath: WideString; CreateLink: WordBool; Xx: Double; 
                                  Yy: Double; Zz: Double): WordBool; dispid 66143;
    procedure InspectCurvature; dispid 66144;
    procedure RemoveInspectCurvature; dispid 66145;
    function InsertDatumTag2: IDispatch; dispid 66146;
    function IInsertDatumTag2: IDatumTag; dispid 66147;
    function ActivateFeatureMgrView(var AppView: Integer): Integer; dispid 66148;
    procedure FeatureSketchDrivenPattern(UseCentroid: WordBool); dispid 66149;
    procedure HideShowBodies; dispid 66150;
    procedure HideSolidBody; dispid 66151;
    procedure ShowSolidBody; dispid 66152;
    procedure InsertFramePoint(Xx: Double; Yy: Double; Zz: Double); dispid 66153;
    procedure LockFramePoint; dispid 66154;
    procedure UnlockFramePoint; dispid 66155;
    function InsertGtol: IDispatch; dispid 66156;
    function IInsertGtol: IGtol; dispid 66157;
    function DeActivateFeatureMgrView(var AppView: Integer): WordBool; dispid 66158;
    function InsertNote(const Text: WideString): IDispatch; dispid 66159;
    function IInsertNote(const Text: WideString): INote; dispid 66160;
    procedure SetSaveAsFileName(const FileName: WideString); dispid 66161;
    procedure ClosePrintPreview; dispid 66162;
    procedure HideComponent2; dispid 66163;
    procedure ShowComponent2; dispid 66164;
    function SaveBMP(const FileNameIn: WideString; WidthIn: Integer; HeightIn: Integer): WordBool; dispid 66165;
    procedure InsertSketch2(UpdateEditRebuild: WordBool); dispid 66166;
    procedure Insert3DSketch2(UpdateEditRebuild: WordBool); dispid 66167;
    procedure InsertDeleteHole; dispid 66168;
    procedure PreTrimSurface(BMutualTrimIn: WordBool); dispid 66169;
    procedure PostTrimSurface(BSewSurfaceIn: WordBool); dispid 66170;
    procedure SketchConvertIsoCurves(PercentRatio: Double; VORuDir: WordBool; 
                                     DoConstrain: WordBool; SkipHoles: WordBool); dispid 66171;
    procedure SelectLoop; dispid 66172;
    procedure InsertSheetMetalBaseFlange(Thickness: Double; ThickenDir: WordBool; Radius: Double; 
                                         ExtrudeDist1: Double; ExtrudeDist2: Double; 
                                         FlipExtruDir: WordBool; EndCondition1: Integer; 
                                         EndCondition2: Integer; DirToUse: Integer); dispid 66173;
    procedure InsertSheetMetalFold; dispid 66174;
    procedure InsertSheetMetalUnfold; dispid 66175;
    procedure InsertSheetMetalMiterFlange(UseReliefRatio: WordBool; UseDefaultGap: WordBool; 
                                          UseAutoRelief: WordBool; GlobalRadius: Double; 
                                          RipGap: Double; AutoReliefRatio: Double; 
                                          AutoReliefWidth: Double; AutoReliefDepth: Double; 
                                          ReliefType: Integer; RipLocation: Integer; 
                                          TrimSideBends: WordBool); dispid 66176;
    procedure CreateGroup; dispid 66177;
    procedure RemoveItemsFromGroup; dispid 66178;
    procedure RemoveGroups; dispid 66179;
    function InsertBOMBalloon2(Style: Integer; Size: Integer; UpperTextStyle: Integer; 
                               const UpperText: WideString; LowerTextStyle: Integer; 
                               const LowerText: WideString): IDispatch; dispid 66180;
    function IInsertBOMBalloon2(Style: Integer; Size: Integer; UpperTextStyle: Integer; 
                                const UpperText: WideString; LowerTextStyle: Integer; 
                                const LowerText: WideString): INote; dispid 66181;
    procedure EditRedo(NSteps: LongWord); dispid 66182;
    procedure InsertProtrusionBlend4(Closed: WordBool; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; TessToleranceFactor: Double; 
                                     StartMatchingType: Smallint; EndMatchingType: Smallint; 
                                     IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                                     ThinType: Smallint); dispid 66183;
    procedure InsertCutBlend4(Closed: WordBool; KeepTangency: WordBool; ForceNonRational: WordBool; 
                              TessToleranceFactor: Double; StartMatchingType: Smallint; 
                              EndMatchingType: Smallint; IsThinBody: WordBool; Thickness1: Double; 
                              Thickness2: Double; ThinType: Smallint); dispid 66184;
    procedure InsertProtrusionSwept4(Propagate: WordBool; Alignment: WordBool; 
                                     TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; StartMatchingType: Smallint; 
                                     EndMatchingType: Smallint; IsThinBody: WordBool; 
                                     Thickness1: Double; Thickness2: Double; ThinType: Smallint); dispid 66185;
    procedure InsertCutSwept4(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                              KeepTangency: WordBool; ForceNonRational: WordBool; 
                              StartMatchingType: Smallint; EndMatchingType: Smallint; 
                              IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                              ThinType: Smallint); dispid 66186;
    procedure SelectTangency; dispid 66187;
    function InsertBendTableOpen(const FileName: WideString): WordBool; dispid 66188;
    function InsertBendTableNew(const FileName: WideString; const Units: WideString; 
                                const Type_: WideString): WordBool; dispid 66189;
    procedure InsertBendTableEdit; dispid 66190;
    procedure DeleteBendTable; dispid 66191;
    procedure InsertSheetMetal3dBend(Angle: Double; Radius: Double; FlipDir: WordBool; 
                                     BendPos: Smallint); dispid 66192;
    function CreateTangentArc2(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                               P2z: Double; ArcTypeIn: Integer): WordBool; dispid 66193;
    function GetMassProperties2(var Status: Integer): OleVariant; dispid 66194;
    function IGetMassProperties2(var Status: Integer): Double; dispid 66195;
    procedure SketchChamfer(AngleORdist: Double; Dist1: Double; Options: Integer); dispid 66196;
    procedure FeatureCut4(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          KeepPieceIndex: Integer; NormalCut: WordBool); dispid 66197;
    function GetPropertyManagerPage(DialogId: Integer; const Title: WideString; 
                                    const Handler: IUnknown): IPropertyManagerPage; dispid 66198;
    procedure AlignOrdinate; dispid 66199;
    procedure EditOrdinate; dispid 66200;
    function ReattachOrdinate: WordBool; dispid 66201;
    function EditBalloonProperties(Style: Integer; Size: Integer; UpperTextStyle: Integer; 
                                   const UpperText: WideString; LowerTextStyle: Integer; 
                                   const LowerText: WideString): IDispatch; dispid 66202;
    function EditDimensionProperties2(TolType: Integer; TolMax: Double; TolMin: Double; 
                                      const TolMaxFit: WideString; const TolMinFit: WideString; 
                                      UseDocPrec: WordBool; Precision: Integer; ArrowsIn: Integer; 
                                      UseDocArrows: WordBool; Arrow1: Integer; Arrow2: Integer; 
                                      const PrefixText: WideString; const SuffixText: WideString; 
                                      ShowValue: WordBool; const CalloutText1: WideString; 
                                      const CalloutText2: WideString; CenterText: WordBool): WordBool; dispid 66203;
    procedure InsertSheetMetalClosedCorner; dispid 66204;
    function SketchUseEdge2(Chain: WordBool): WordBool; dispid 66205;
    function SketchOffsetEntities2(Offset: Double; BothDirections: WordBool; Chain: WordBool): WordBool; dispid 66206;
    function SketchOffset2(Offset: Double; BothDirections: WordBool; Chain: WordBool): WordBool; dispid 66207;
    function AddDimension2(X: Double; Y: Double; Z: Double): IDispatch; dispid 66208;
    function IAddDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; dispid 66209;
    function AddHorizontalDimension2(X: Double; Y: Double; Z: Double): IDispatch; dispid 66210;
    function IAddHorizontalDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; dispid 66211;
    function AddVerticalDimension2(X: Double; Y: Double; Z: Double): IDispatch; dispid 66212;
    function IAddVerticalDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; dispid 66213;
    function AddRadialDimension2(X: Double; Y: Double; Z: Double): IDispatch; dispid 66214;
    function IAddRadialDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; dispid 66215;
    function AddDiameterDimension2(X: Double; Y: Double; Z: Double): IDispatch; dispid 66216;
    function IAddDiameterDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; dispid 66217;
    function GetUserUnit(UnitType: Integer): IDispatch; dispid 66218;
    function IGetUserUnit(UnitType: Integer): IUserUnit; dispid 66219;
    function InsertWeldSymbol3: IDispatch; dispid 66220;
    function IInsertWeldSymbol3: IWeldSymbol; dispid 66221;
    function SaveAs3(const NewName: WideString; SaveAsVersion: Integer; Options: Integer): Integer; dispid 66222;
    function GetUserPreferenceStringValue(UserPreference: Integer): WideString; dispid 66223;
    function SetUserPreferenceStringValue(UserPreference: Integer; const Value: WideString): WordBool; dispid 66224;
    procedure DeleteDesignTable; dispid 66225;
    function EditRebuild3: WordBool; dispid 66226;
    function ForceRebuild3(TopOnly: WordBool): WordBool; dispid 66227;
  end;

// *********************************************************************//
// Interface: ISelectionMgr
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D59-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISelectionMgr = interface(IDispatch)
    ['{83A33D59-27C5-11CE-BFD4-00400513BB57}']
    function GetSelectedObjectCount: Integer; safecall;
    function GetSelectedObjectType(AtIndex: Integer): Integer; safecall;
    function GetSelectedObject(AtIndex: Integer): IDispatch; safecall;
    function IGetSelectedObject(AtIndex: Integer): IUnknown; safecall;
    function GetSelectionPoint(AtIndex: Integer): OleVariant; safecall;
    function GetSelectionPointInSketchSpace(AtIndex: Integer): OleVariant; safecall;
    function GetSelectedObject2(AtIndex: Integer): IDispatch; safecall;
    function IGetSelectedObject2(AtIndex: Integer): IUnknown; safecall;
    function IsInEditTarget(AtIndex: Integer): WordBool; safecall;
    function GetSelectedObjectsComponent(AtIndex: Integer): IDispatch; safecall;
    function IGetSelectedObjectsComponent(AtIndex: Integer): IComponent; safecall;
    function GetSelectedObject3(AtIndex: Integer): IDispatch; safecall;
    function IGetSelectedObject3(AtIndex: Integer): IUnknown; safecall;
    function GetSelectedObjectType2(AtIndex: Integer): Integer; safecall;
    function IGetSelectionPoint(AtIndex: Integer): Double; safecall;
    function IGetSelectionPointInSketchSpace(AtIndex: Integer): Double; safecall;
    function GetSelectedObjectMark(AtIndex: Integer): Integer; safecall;
    function SetSelectedObjectMark(AtIndex: Integer; Mark: Integer; Action: Integer): WordBool; safecall;
    function DeSelect(AtIndex: OleVariant): Integer; safecall;
    function IDeSelect(Count: Integer; var AtIndex: Integer): Integer; safecall;
    function IGetSelectedObjectsComponent2(AtIndex: Integer): IComponent2; safecall;
    function CreateCallout: ICallout; safecall;
    function GetSelectedObjectsDrawingView(AtIndex: Integer): IView; safecall;
    function Get_EnableContourSelection: WordBool; safecall;
    procedure Set_EnableContourSelection(ValueOut: WordBool); safecall;
    function SetSelectionPoint(AtIndex: Integer; X: Double; Y: Double; Z: Double): WordBool; safecall;
    function GetSelectedObject4(AtIndex: Integer): IDispatch; safecall;
    function IGetSelectedObject4(AtIndex: Integer): IUnknown; safecall;
    function GetSelectedObject5(AtIndex: Integer): IDispatch; safecall;
    function GetSelectedObjectsComponent2(AtIndex: Integer): IDispatch; safecall;
    function CreateSelectData: ISelectData; safecall;
    function GetSelectedObjectLoop(AtIndex: Integer): ILoop2; safecall;
    function Get_SelectionColor(Mark: Integer): Integer; safecall;
    procedure Set_SelectionColor(Mark: Integer; Color: Integer); safecall;
    procedure ClearSelectionColors; safecall;
    function GetSelectedObjectCount2(Mark: Integer): Integer; safecall;
    function GetSelectedObjectType3(Index: Integer; Mark: Integer): Integer; safecall;
    function GetSelectedObject6(Index: Integer; Mark: Integer): IDispatch; safecall;
    function GetSelectionPoint2(Index: Integer; Mark: Integer): OleVariant; safecall;
    function IGetSelectionPoint2(Index: Integer; Mark: Integer): Double; safecall;
    function SetSelectionPoint2(Index: Integer; Mark: Integer; X: Double; Y: Double; Z: Double): WordBool; safecall;
    function GetSelectionPointInSketchSpace2(Index: Integer; Mark: Integer): OleVariant; safecall;
    function IGetSelectionPointInSketchSpace2(Index: Integer; Mark: Integer): Double; safecall;
    function IsInEditTarget2(Index: Integer; Mark: Integer): WordBool; safecall;
    function GetSelectedObjectsComponent3(Index: Integer; Mark: Integer): IComponent2; safecall;
    function DeSelect2(AtIndex: OleVariant; Mark: Integer): Integer; safecall;
    function IDeSelect2(Count: Integer; var AtIndex: Integer; Mark: Integer): Integer; safecall;
    function GetSelectedObjectsDrawingView2(Index: Integer; Mark: Integer): IView; safecall;
    function GetSelectedObjectLoop2(Index: Integer; Mark: Integer): ILoop2; safecall;
    function SetCallout(Index: Integer; const PCallout: ICallout): WordBool; safecall;
    function Get_EnableSelection: WordBool; safecall;
    procedure Set_EnableSelection(ValueOut: WordBool); safecall;
    function CreateCallout2(NumberOfRows: Integer; const LpHandler: IDispatch): ICallout; safecall;
    function GetSelectedObjectsFace(AtIndex: Integer; Mark: Integer): IFace2; safecall;
    property EnableContourSelection: WordBool read Get_EnableContourSelection write Set_EnableContourSelection;
    property SelectionColor[Mark: Integer]: Integer read Get_SelectionColor write Set_SelectionColor;
    property EnableSelection: WordBool read Get_EnableSelection write Set_EnableSelection;
  end;

// *********************************************************************//
// DispIntf:  ISelectionMgrDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D59-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISelectionMgrDisp = dispinterface
    ['{83A33D59-27C5-11CE-BFD4-00400513BB57}']
    function GetSelectedObjectCount: Integer; dispid 1;
    function GetSelectedObjectType(AtIndex: Integer): Integer; dispid 2;
    function GetSelectedObject(AtIndex: Integer): IDispatch; dispid 3;
    function IGetSelectedObject(AtIndex: Integer): IUnknown; dispid 4;
    function GetSelectionPoint(AtIndex: Integer): OleVariant; dispid 5;
    function GetSelectionPointInSketchSpace(AtIndex: Integer): OleVariant; dispid 6;
    function GetSelectedObject2(AtIndex: Integer): IDispatch; dispid 7;
    function IGetSelectedObject2(AtIndex: Integer): IUnknown; dispid 8;
    function IsInEditTarget(AtIndex: Integer): WordBool; dispid 9;
    function GetSelectedObjectsComponent(AtIndex: Integer): IDispatch; dispid 10;
    function IGetSelectedObjectsComponent(AtIndex: Integer): IComponent; dispid 11;
    function GetSelectedObject3(AtIndex: Integer): IDispatch; dispid 12;
    function IGetSelectedObject3(AtIndex: Integer): IUnknown; dispid 13;
    function GetSelectedObjectType2(AtIndex: Integer): Integer; dispid 14;
    function IGetSelectionPoint(AtIndex: Integer): Double; dispid 15;
    function IGetSelectionPointInSketchSpace(AtIndex: Integer): Double; dispid 16;
    function GetSelectedObjectMark(AtIndex: Integer): Integer; dispid 17;
    function SetSelectedObjectMark(AtIndex: Integer; Mark: Integer; Action: Integer): WordBool; dispid 18;
    function DeSelect(AtIndex: OleVariant): Integer; dispid 19;
    function IDeSelect(Count: Integer; var AtIndex: Integer): Integer; dispid 20;
    function IGetSelectedObjectsComponent2(AtIndex: Integer): IComponent2; dispid 21;
    function CreateCallout: ICallout; dispid 22;
    function GetSelectedObjectsDrawingView(AtIndex: Integer): IView; dispid 23;
    property EnableContourSelection: WordBool dispid 24;
    function SetSelectionPoint(AtIndex: Integer; X: Double; Y: Double; Z: Double): WordBool; dispid 25;
    function GetSelectedObject4(AtIndex: Integer): IDispatch; dispid 26;
    function IGetSelectedObject4(AtIndex: Integer): IUnknown; dispid 27;
    function GetSelectedObject5(AtIndex: Integer): IDispatch; dispid 28;
    function GetSelectedObjectsComponent2(AtIndex: Integer): IDispatch; dispid 29;
    function CreateSelectData: ISelectData; dispid 30;
    function GetSelectedObjectLoop(AtIndex: Integer): ILoop2; dispid 31;
    property SelectionColor[Mark: Integer]: Integer dispid 32;
    procedure ClearSelectionColors; dispid 33;
    function GetSelectedObjectCount2(Mark: Integer): Integer; dispid 34;
    function GetSelectedObjectType3(Index: Integer; Mark: Integer): Integer; dispid 35;
    function GetSelectedObject6(Index: Integer; Mark: Integer): IDispatch; dispid 36;
    function GetSelectionPoint2(Index: Integer; Mark: Integer): OleVariant; dispid 37;
    function IGetSelectionPoint2(Index: Integer; Mark: Integer): Double; dispid 38;
    function SetSelectionPoint2(Index: Integer; Mark: Integer; X: Double; Y: Double; Z: Double): WordBool; dispid 39;
    function GetSelectionPointInSketchSpace2(Index: Integer; Mark: Integer): OleVariant; dispid 40;
    function IGetSelectionPointInSketchSpace2(Index: Integer; Mark: Integer): Double; dispid 41;
    function IsInEditTarget2(Index: Integer; Mark: Integer): WordBool; dispid 42;
    function GetSelectedObjectsComponent3(Index: Integer; Mark: Integer): IComponent2; dispid 43;
    function DeSelect2(AtIndex: OleVariant; Mark: Integer): Integer; dispid 44;
    function IDeSelect2(Count: Integer; var AtIndex: Integer; Mark: Integer): Integer; dispid 45;
    function GetSelectedObjectsDrawingView2(Index: Integer; Mark: Integer): IView; dispid 46;
    function GetSelectedObjectLoop2(Index: Integer; Mark: Integer): ILoop2; dispid 47;
    function SetCallout(Index: Integer; const PCallout: ICallout): WordBool; dispid 48;
    property EnableSelection: WordBool dispid 49;
    function CreateCallout2(NumberOfRows: Integer; const LpHandler: IDispatch): ICallout; dispid 50;
    function GetSelectedObjectsFace(AtIndex: Integer; Mark: Integer): IFace2; dispid 51;
  end;

// *********************************************************************//
// Interface: IComponent
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D9A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IComponent = interface(IDispatch)
    ['{83A33D9A-27C5-11CE-BFD4-00400513BB57}']
    function GetChildren: OleVariant; safecall;
    function IGetChildren: PPUserType3; safecall;
    function IGetChildrenCount: SYSINT; safecall;
    function GetXform: OleVariant; safecall;
    function IGetXform: Double; safecall;
    function GetBody: IDispatch; safecall;
    function IGetBody: IBody; safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(Retval: OleVariant); safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var Retval: Double); safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(ID: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetMaterialIdName: WideString; safecall;
    function SetMaterialIdName(const Name: WideString): WordBool; safecall;
    function GetMaterialUserName: WideString; safecall;
    function SetMaterialUserName(const Name: WideString): WordBool; safecall;
    function GetSectionedBodies(const ViewIn: IDispatch): OleVariant; safecall;
    function GetBox(IncludeRefPlanes: WordBool; IncludeSketches: WordBool): OleVariant; safecall;
    function IGetBox(IncludeRefPlanes: WordBool; IncludeSketches: WordBool): Double; safecall;
    function SetXform(XformIn: OleVariant): WordBool; safecall;
    function ISetXform(var XformIn: Double): WordBool; safecall;
    function GetModelDoc: IDispatch; safecall;
    function IGetModelDoc: IModelDoc; safecall;
    function IsFixed: WordBool; safecall;
    function EnumRelatedBodies: IEnumBodies; safecall;
    function IsSuppressed: WordBool; safecall;
    function EnumSectionedBodies(const ViewIn: IModelView): IEnumBodies; safecall;
    function IsHidden(ConsiderSuppressed: WordBool): WordBool; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_ReferencedConfiguration(const Retval: WideString); safecall;
    function Get_ReferencedConfiguration: WideString; safecall;
    function GetSuppression: Integer; safecall;
    function SetSuppression(State: Integer): Integer; safecall;
    function Get_Visible: Integer; safecall;
    procedure Set_Visible(Retval: Integer); safecall;
    function GetPathName: WideString; safecall;
    function SetXformAndSolve(XformIn: OleVariant): WordBool; safecall;
    function ISetXformAndSolve(var XformIn: Double): WordBool; safecall;
    function GetTessTriangles(NoConversion: WordBool): OleVariant; safecall;
    function IGetTessTriangles(NoConversion: WordBool): Single; safecall;
    function IGetTessTriangleCount: Integer; safecall;
    function GetTessNorms: OleVariant; safecall;
    function IGetTessNorms: Single; safecall;
    function GetTessTriStrips(NoConversion: WordBool): OleVariant; safecall;
    function IGetTessTriStrips(NoConversion: WordBool): Single; safecall;
    function IGetTessTriStripSize: Integer; safecall;
    function GetTessTriStripNorms: OleVariant; safecall;
    function IGetTessTriStripNorms: Single; safecall;
    function GetTessTriStripEdges: OleVariant; safecall;
    function IGetTessTriStripEdges: Integer; safecall;
    function IGetTessTriStripEdgeSize: Integer; safecall;
    function IsDisplayDataOutOfDate: Integer; safecall;
    function GetConstrainedStatus: Integer; safecall;
    function RemoveMaterialProperty: WordBool; safecall;
    function IGetTemporaryBodyID: Integer; safecall;
    function FindAttribute(const AttributeDef: IDispatch; WhichOne: Integer): IDispatch; safecall;
    function IFindAttribute(const AttributeDef: IAttributeDef; WhichOne: Integer): IAttribute; safecall;
    function Select(AppendFlag: WordBool): WordBool; safecall;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function Get_Name2: WideString; safecall;
    procedure Set_Name2(const NewName: WideString); safecall;
    function Get_Solving: Integer; safecall;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
    property Name: WideString read Get_Name;
    property ReferencedConfiguration: WideString read Get_ReferencedConfiguration write Set_ReferencedConfiguration;
    property Visible: Integer read Get_Visible write Set_Visible;
    property Name2: WideString read Get_Name2 write Set_Name2;
    property Solving: Integer read Get_Solving;
  end;

// *********************************************************************//
// DispIntf:  IComponentDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D9A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IComponentDisp = dispinterface
    ['{83A33D9A-27C5-11CE-BFD4-00400513BB57}']
    function GetChildren: OleVariant; dispid 1;
    function IGetChildren: {??PPUserType3}OleVariant; dispid 2;
    function IGetChildrenCount: SYSINT; dispid 3;
    function GetXform: OleVariant; dispid 4;
    function IGetXform: Double; dispid 5;
    function GetBody: IDispatch; dispid 6;
    function IGetBody: IBody; dispid 7;
    property MaterialPropertyValues: OleVariant dispid 8;
    function IMaterialPropertyValues: Double; dispid 9;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 10;
    function GetPropertyExtension(ID: Integer): OleVariant; dispid 11;
    procedure ResetPropertyExtension; dispid 12;
    function GetMaterialIdName: WideString; dispid 13;
    function SetMaterialIdName(const Name: WideString): WordBool; dispid 14;
    function GetMaterialUserName: WideString; dispid 15;
    function SetMaterialUserName(const Name: WideString): WordBool; dispid 16;
    function GetSectionedBodies(const ViewIn: IDispatch): OleVariant; dispid 17;
    function GetBox(IncludeRefPlanes: WordBool; IncludeSketches: WordBool): OleVariant; dispid 18;
    function IGetBox(IncludeRefPlanes: WordBool; IncludeSketches: WordBool): Double; dispid 19;
    function SetXform(XformIn: OleVariant): WordBool; dispid 20;
    function ISetXform(var XformIn: Double): WordBool; dispid 21;
    function GetModelDoc: IDispatch; dispid 22;
    function IGetModelDoc: IModelDoc; dispid 23;
    function IsFixed: WordBool; dispid 24;
    function EnumRelatedBodies: IEnumBodies; dispid 25;
    function IsSuppressed: WordBool; dispid 26;
    function EnumSectionedBodies(const ViewIn: IModelView): IEnumBodies; dispid 27;
    function IsHidden(ConsiderSuppressed: WordBool): WordBool; dispid 28;
    property Name: WideString readonly dispid 29;
    property ReferencedConfiguration: WideString dispid 30;
    function GetSuppression: Integer; dispid 31;
    function SetSuppression(State: Integer): Integer; dispid 32;
    property Visible: Integer dispid 33;
    function GetPathName: WideString; dispid 34;
    function SetXformAndSolve(XformIn: OleVariant): WordBool; dispid 35;
    function ISetXformAndSolve(var XformIn: Double): WordBool; dispid 36;
    function GetTessTriangles(NoConversion: WordBool): OleVariant; dispid 37;
    function IGetTessTriangles(NoConversion: WordBool): Single; dispid 38;
    function IGetTessTriangleCount: Integer; dispid 39;
    function GetTessNorms: OleVariant; dispid 40;
    function IGetTessNorms: Single; dispid 41;
    function GetTessTriStrips(NoConversion: WordBool): OleVariant; dispid 42;
    function IGetTessTriStrips(NoConversion: WordBool): Single; dispid 43;
    function IGetTessTriStripSize: Integer; dispid 44;
    function GetTessTriStripNorms: OleVariant; dispid 45;
    function IGetTessTriStripNorms: Single; dispid 46;
    function GetTessTriStripEdges: OleVariant; dispid 47;
    function IGetTessTriStripEdges: Integer; dispid 48;
    function IGetTessTriStripEdgeSize: Integer; dispid 49;
    function IsDisplayDataOutOfDate: Integer; dispid 50;
    function GetConstrainedStatus: Integer; dispid 51;
    function RemoveMaterialProperty: WordBool; dispid 52;
    function IGetTemporaryBodyID: Integer; dispid 53;
    function FindAttribute(const AttributeDef: IDispatch; WhichOne: Integer): IDispatch; dispid 54;
    function IFindAttribute(const AttributeDef: IAttributeDef; WhichOne: Integer): IAttribute; dispid 55;
    function Select(AppendFlag: WordBool): WordBool; dispid 56;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; dispid 57;
    function DeSelect: WordBool; dispid 58;
    property Name2: WideString dispid 59;
    property Solving: Integer readonly dispid 60;
  end;

// *********************************************************************//
// Interface: IBody
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D3C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IBody = interface(IDispatch)
    ['{83A33D3C-27C5-11CE-BFD4-00400513BB57}']
    function GetFirstFace: IDispatch; safecall;
    function IGetFirstFace: IFace; safecall;
    function GetFaceCount: Integer; safecall;
    function CreateNewSurface: IDispatch; safecall;
    function ICreateNewSurface: ISurface; safecall;
    function CreateBodyFromSurfaces: WordBool; safecall;
    function CreatePlanarSurface(VRootPoint: OleVariant; VNormal: OleVariant): IDispatch; safecall;
    function ICreatePlanarSurface(VRootPoint: OleVariant; VNormal: OleVariant): ISurface; safecall;
    function CreateRevolutionSurface(const ProfileCurve: IDispatch; AxisPoint: OleVariant; 
                                     AxisDirection: OleVariant; ProfileEndPtParams: OleVariant): IDispatch; safecall;
    function ICreateRevolutionSurface(const ProfileCurve: ICurve; AxisPoint: OleVariant; 
                                      AxisDirection: OleVariant; ProfileEndPtParams: OleVariant): ISurface; safecall;
    function CreateBsplineSurface(Props: OleVariant; UKnots: OleVariant; VKnots: OleVariant; 
                                  CtrlPtCoords: OleVariant): IDispatch; safecall;
    function ICreateBsplineSurface(Props: OleVariant; UKnots: OleVariant; VKnots: OleVariant; 
                                   CtrlPtCoords: OleVariant): ISurface; safecall;
    function CreateTrimmedSurface: WordBool; safecall;
    function AddProfileLine(RootPoint: OleVariant; Direction: OleVariant): IDispatch; safecall;
    function IAddProfileLine(RootPoint: OleVariant; Direction: OleVariant): ICurve; safecall;
    function AddProfileArc(Center: OleVariant; Axis: OleVariant; Radius: Double; 
                           StartPoint: OleVariant; EndPoint: OleVariant): IDispatch; safecall;
    function IAddProfileArc(Center: OleVariant; Axis: OleVariant; Radius: Double; 
                            StartPoint: OleVariant; EndPoint: OleVariant): ICurve; safecall;
    function AddProfileBspline(Props: OleVariant; Knots: OleVariant; CtrlPtCoords: OleVariant): IDispatch; safecall;
    function IAddProfileBspline(Props: OleVariant; Knots: OleVariant; CtrlPtCoords: OleVariant): ICurve; safecall;
    function CreateExtrusionSurface(const ProfileCurve: IDispatch; AxisDirection: OleVariant): IDispatch; safecall;
    function ICreateExtrusionSurface(const ProfileCurve: ICurve; AxisDirection: OleVariant): ISurface; safecall;
    function GetFirstSelectedFace: IDispatch; safecall;
    function IGetFirstSelectedFace: IFace; safecall;
    function GetNextSelectedFace: IDispatch; safecall;
    function IGetNextSelectedFace: IFace; safecall;
    function GetSelectedFaceCount: Integer; safecall;
    function CreateBoundedSurface(UOpt: WordBool; VOpt: WordBool; UvParams: OleVariant): WordBool; safecall;
    function GetIgesErrorCount: Integer; safecall;
    function GetIgesErrorCode(Index: Integer): Integer; safecall;
    function Copy: IDispatch; safecall;
    function ICopy: IBody; safecall;
    function EnumFaces: IEnumFaces; safecall;
    function CreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IDispatch; safecall;
    function ICreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IBody; safecall;
    function DeleteFaces(NumOfFaces: Integer; FaceList: OleVariant): WordBool; safecall;
    procedure Display(const Part: IDispatch; Color: Integer); safecall;
    procedure IDisplay(const Part: IPartDoc; Color: Integer); safecall;
    procedure Hide(const Part: IDispatch); safecall;
    procedure IHide(const Part: IPartDoc); safecall;
    function ICreatePlanarSurfaceDLL(var RootPoint: Double; var Normal: Double): ISurface; safecall;
    function ICreateRevolutionSurfaceDLL(const ProfileCurve: ICurve; var AxisPoint: Double; 
                                         var AxisDirection: Double; var ProfileEndPtParams: Double): ISurface; safecall;
    function IAddProfileLineDLL(var RootPoint: Double; var Direction: Double): ICurve; safecall;
    function IAddProfileArcDLL(var Center: Double; var Axis: Double; Radius: Double; 
                               var StartPoint: Double; var EndPoint: Double): ICurve; safecall;
    function ICreateBsplineSurfaceDLL(var Properties: Integer; var UKnotArray: Double; 
                                      var VKnotArray: Double; var ControlPointCoordArray: Double): ISurface; safecall;
    function IAddProfileBsplineDLL(var Properties: Integer; var KnotArray: Double; 
                                   var ControlPointCoordArray: Double): ICurve; safecall;
    function ICreateExtrusionSurfaceDLL(const ProfileCurve: ICurve; var AxisDirection: Double): ISurface; safecall;
    procedure ICreateBoundedSurface(UOpt: WordBool; VOpt: WordBool; var UvParams: Double); safecall;
    procedure ICombineVolumes(const ToolBody: IBody); safecall;
    function ISectionBySheet(const Sheet: IBody; NumMaxSections: Integer; var SectionedBodies: IBody): Integer; safecall;
    procedure IGetBodyBox(var BoxCorners: Double); safecall;
    procedure SetIgesInfo(const SystemName: WideString; Granularity: Double; 
                          AttemptKnitting: WordBool); safecall;
    procedure DisplayWireFrameXOR(const Part: IDispatch; Color: Integer); safecall;
    procedure IDisplayWireFrameXOR(const Part: IPartDoc; Color: Integer); safecall;
    procedure Save(const StreamIn: IUnknown); safecall;
    procedure ISave(const StreamIn: IUnknown); safecall;
    function CreateBlendSurface(const Surface1: IDispatch; Range1: Double; 
                                const Surface2: IDispatch; Range2: Double; StartVec: OleVariant; 
                                EndVec: OleVariant; HaveHelpVec: SYSINT; HelpVec: OleVariant; 
                                HaveHelpBox: SYSINT; HelpBox: OleVariant): IDispatch; safecall;
    function ICreateBlendSurface(const Surface1: ISurface; Range1: Double; 
                                 const Surface2: ISurface; Range2: Double; var StartVec: Double; 
                                 var EndVec: Double; HaveHelpVec: SYSINT; var HelpVec: Double; 
                                 HaveHelpBox: SYSINT; var HelpBox: Double): ISurface; safecall;
    function CreateOffsetSurface(const SurfaceIn: IDispatch; Distance: Double): IDispatch; safecall;
    function ICreateOffsetSurface(const SurfaceIn: ISurface; Distance: Double): ISurface; safecall;
    function RemoveRedundantTopology: WordBool; safecall;
    function GetIntersectionEdges(const ToolBodyIn: IDispatch): OleVariant; safecall;
    function IGetIntersectionEdges(const ToolBodyIn: IBody): PPUserType4; safecall;
    function IGetIntersectionEdgeCount(const ToolBodyIn: IBody): Integer; safecall;
    procedure RemoveFacesFromSheet(NumOfFaces: Integer; FacesToRemove: OleVariant); safecall;
    procedure IRemoveFacesFromSheet(NumOfFaces: Integer; FacesToRemove: PPPUserType2); safecall;
    procedure ICreatePlanarTrimSurfaceDLL(VertexCount: Integer; var Points: Double; 
                                          var Normal: Double); safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(Retval: OleVariant); safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var Retval: Double); safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(ID: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetMaterialIdName: WideString; safecall;
    function SetMaterialIdName(const Name: WideString): WordBool; safecall;
    function GetMaterialUserName: WideString; safecall;
    function SetMaterialUserName(const Name: WideString): WordBool; safecall;
    function GetMassProperties(Density: Double): OleVariant; safecall;
    function IGetMassProperties(Density: Double): Double; safecall;
    function ICreatePsplineSurfaceDLL(Dim: Integer; Uorder: Integer; VOrder: Integer; 
                                      Ncol: Integer; Nrow: Integer; var Coeffs: Double; 
                                      Basis: Integer; var Xform: Double; ScaleFactor: Double): ISurface; safecall;
    function SetXform(XformIn: OleVariant): WordBool; safecall;
    function ISetXform(var XformIn: Double): WordBool; safecall;
    function CreateTempBodyFromSurfaces: IDispatch; safecall;
    function ICreateTempBodyFromSurfaces: IBody; safecall;
    function Operations(OperationType: SYSINT; const ToolBody: IDispatch; NumMaxSections: Integer): OleVariant; safecall;
    function IOperations(OperationType: SYSINT; const ToolBody: IBody; NumMaxSections: Integer; 
                         var ResultingBodies: IBody): Integer; safecall;
    function GetSheetBody(Index: SYSINT): IDispatch; safecall;
    function IGetSheetBody(Index: SYSINT): IBody; safecall;
    function GetProcessedBody: IDispatch; safecall;
    function IGetProcessedBody: IBody; safecall;
    function GetProcessedBodyWithSelFace: IDispatch; safecall;
    function IGetProcessedBodyWithSelFace: IBody; safecall;
    function Check: Integer; safecall;
    function GetExcessBodyArray: OleVariant; safecall;
    function IGetExcessBodyArray: PPUserType2; safecall;
    function IGetExcessBodyCount: SYSINT; safecall;
    function CreateBaseFeature(const BodyIn: IDispatch): WordBool; safecall;
    function ICreateBaseFeature(const BodyIn: IBody): WordBool; safecall;
    function DeleteFaces2(NumOfFaces: Integer; FaceList: OleVariant; Option: SYSINT): Integer; safecall;
    function IDeleteFaces2(NumOfFaces: Integer; var FaceList: IFace; Option: SYSINT): Integer; safecall;
    function IAddVertexPoint(var Point: Double): IVertex; safecall;
    function AddVertexPoint(Point: OleVariant): IDispatch; safecall;
    function GetExtremePoint(X: Double; Y: Double; Z: Double; out Outx: Double; out Outy: Double; 
                             out Outz: Double): WordBool; safecall;
    function GetType: Integer; safecall;
    procedure IDeleteFaces3(NumOfFaces: Integer; var FaceList: IFace; Option: Integer; 
                            DoLocalCheck: WordBool; var LocalCheckResult: WordBool); safecall;
    procedure SetCurrentSurface(const SurfaceIn: IDispatch); safecall;
    procedure ISetCurrentSurface(const SurfaceIn: ISurface); safecall;
    function DraftBody(NumOfFaces: Integer; FaceList: OleVariant; EdgeList: OleVariant; 
                       DraftAngle: Double; Dir: OleVariant): WordBool; safecall;
    function IDraftBody(NumOfFaces: Integer; var FaceList: IFace; var EdgeList: IEdge; 
                        DraftAngle: Double; var Dir: Double): WordBool; safecall;
    function DeleteBlends(NumOfFaces: Integer; FaceList: OleVariant): WordBool; safecall;
    function IDeleteBlends(NumOfFaces: Integer; var FaceList: IFace): WordBool; safecall;
    function Operations2(OperationType: SYSINT; const ToolBody: IDispatch; out ErrorCode: Integer): OleVariant; safecall;
    function IOperations2(OperationType: SYSINT; const ToolBody: IBody; out ErrorCode: Integer): IEnumBodies; safecall;
    function GetBodyBox: OleVariant; safecall;
    function DeleteBlends2(NumOfFaces: Integer; FaceList: OleVariant; DoLocalCheck: WordBool): WordBool; safecall;
    function IDeleteBlends2(NumOfFaces: Integer; var FaceList: IFace; DoLocalCheck: WordBool): WordBool; safecall;
    function GetTessellation(FaceList: OleVariant): IDispatch; safecall;
    function IGetTessellation(NumOfFaces: Integer; var FaceList: IFace): ITessellation; safecall;
    function Get_Visible: WordBool; safecall;
    function MatchedBoolean(OperationType: SYSINT; const ToolBody: IDispatch; 
                            NumOfMatchingFaces: Integer; FaceList1: OleVariant; 
                            FaceList2: OleVariant; out ErrorCode: Integer): OleVariant; safecall;
    function IMatchedBoolean(OperationType: SYSINT; const ToolBody: IBody; 
                             NumOfMatchingFaces: Integer; var FaceList1: IFace; 
                             var FaceList2: IFace; out ErrorCode: Integer): IEnumBodies; safecall;
    function GetEdgeCount: Integer; safecall;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
    property Visible: WordBool read Get_Visible;
  end;

// *********************************************************************//
// DispIntf:  IBodyDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D3C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IBodyDisp = dispinterface
    ['{83A33D3C-27C5-11CE-BFD4-00400513BB57}']
    function GetFirstFace: IDispatch; dispid 1;
    function IGetFirstFace: IFace; dispid 20;
    function GetFaceCount: Integer; dispid 2;
    function CreateNewSurface: IDispatch; dispid 3;
    function ICreateNewSurface: ISurface; dispid 21;
    function CreateBodyFromSurfaces: WordBool; dispid 4;
    function CreatePlanarSurface(VRootPoint: OleVariant; VNormal: OleVariant): IDispatch; dispid 5;
    function ICreatePlanarSurface(VRootPoint: OleVariant; VNormal: OleVariant): ISurface; dispid 22;
    function CreateRevolutionSurface(const ProfileCurve: IDispatch; AxisPoint: OleVariant; 
                                     AxisDirection: OleVariant; ProfileEndPtParams: OleVariant): IDispatch; dispid 6;
    function ICreateRevolutionSurface(const ProfileCurve: ICurve; AxisPoint: OleVariant; 
                                      AxisDirection: OleVariant; ProfileEndPtParams: OleVariant): ISurface; dispid 23;
    function CreateBsplineSurface(Props: OleVariant; UKnots: OleVariant; VKnots: OleVariant; 
                                  CtrlPtCoords: OleVariant): IDispatch; dispid 7;
    function ICreateBsplineSurface(Props: OleVariant; UKnots: OleVariant; VKnots: OleVariant; 
                                   CtrlPtCoords: OleVariant): ISurface; dispid 24;
    function CreateTrimmedSurface: WordBool; dispid 8;
    function AddProfileLine(RootPoint: OleVariant; Direction: OleVariant): IDispatch; dispid 9;
    function IAddProfileLine(RootPoint: OleVariant; Direction: OleVariant): ICurve; dispid 25;
    function AddProfileArc(Center: OleVariant; Axis: OleVariant; Radius: Double; 
                           StartPoint: OleVariant; EndPoint: OleVariant): IDispatch; dispid 10;
    function IAddProfileArc(Center: OleVariant; Axis: OleVariant; Radius: Double; 
                            StartPoint: OleVariant; EndPoint: OleVariant): ICurve; dispid 26;
    function AddProfileBspline(Props: OleVariant; Knots: OleVariant; CtrlPtCoords: OleVariant): IDispatch; dispid 11;
    function IAddProfileBspline(Props: OleVariant; Knots: OleVariant; CtrlPtCoords: OleVariant): ICurve; dispid 27;
    function CreateExtrusionSurface(const ProfileCurve: IDispatch; AxisDirection: OleVariant): IDispatch; dispid 12;
    function ICreateExtrusionSurface(const ProfileCurve: ICurve; AxisDirection: OleVariant): ISurface; dispid 28;
    function GetFirstSelectedFace: IDispatch; dispid 13;
    function IGetFirstSelectedFace: IFace; dispid 29;
    function GetNextSelectedFace: IDispatch; dispid 14;
    function IGetNextSelectedFace: IFace; dispid 30;
    function GetSelectedFaceCount: Integer; dispid 15;
    function CreateBoundedSurface(UOpt: WordBool; VOpt: WordBool; UvParams: OleVariant): WordBool; dispid 16;
    function GetIgesErrorCount: Integer; dispid 17;
    function GetIgesErrorCode(Index: Integer): Integer; dispid 18;
    function Copy: IDispatch; dispid 19;
    function ICopy: IBody; dispid 31;
    function EnumFaces: IEnumFaces; dispid 32;
    function CreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IDispatch; dispid 33;
    function ICreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IBody; dispid 34;
    function DeleteFaces(NumOfFaces: Integer; FaceList: OleVariant): WordBool; dispid 35;
    procedure Display(const Part: IDispatch; Color: Integer); dispid 36;
    procedure IDisplay(const Part: IPartDoc; Color: Integer); dispid 37;
    procedure Hide(const Part: IDispatch); dispid 38;
    procedure IHide(const Part: IPartDoc); dispid 39;
    function ICreatePlanarSurfaceDLL(var RootPoint: Double; var Normal: Double): ISurface; dispid 40;
    function ICreateRevolutionSurfaceDLL(const ProfileCurve: ICurve; var AxisPoint: Double; 
                                         var AxisDirection: Double; var ProfileEndPtParams: Double): ISurface; dispid 41;
    function IAddProfileLineDLL(var RootPoint: Double; var Direction: Double): ICurve; dispid 42;
    function IAddProfileArcDLL(var Center: Double; var Axis: Double; Radius: Double; 
                               var StartPoint: Double; var EndPoint: Double): ICurve; dispid 43;
    function ICreateBsplineSurfaceDLL(var Properties: Integer; var UKnotArray: Double; 
                                      var VKnotArray: Double; var ControlPointCoordArray: Double): ISurface; dispid 44;
    function IAddProfileBsplineDLL(var Properties: Integer; var KnotArray: Double; 
                                   var ControlPointCoordArray: Double): ICurve; dispid 45;
    function ICreateExtrusionSurfaceDLL(const ProfileCurve: ICurve; var AxisDirection: Double): ISurface; dispid 46;
    procedure ICreateBoundedSurface(UOpt: WordBool; VOpt: WordBool; var UvParams: Double); dispid 47;
    procedure ICombineVolumes(const ToolBody: IBody); dispid 48;
    function ISectionBySheet(const Sheet: IBody; NumMaxSections: Integer; var SectionedBodies: IBody): Integer; dispid 49;
    procedure IGetBodyBox(var BoxCorners: Double); dispid 50;
    procedure SetIgesInfo(const SystemName: WideString; Granularity: Double; 
                          AttemptKnitting: WordBool); dispid 51;
    procedure DisplayWireFrameXOR(const Part: IDispatch; Color: Integer); dispid 52;
    procedure IDisplayWireFrameXOR(const Part: IPartDoc; Color: Integer); dispid 53;
    procedure Save(const StreamIn: IUnknown); dispid 54;
    procedure ISave(const StreamIn: IUnknown); dispid 55;
    function CreateBlendSurface(const Surface1: IDispatch; Range1: Double; 
                                const Surface2: IDispatch; Range2: Double; StartVec: OleVariant; 
                                EndVec: OleVariant; HaveHelpVec: SYSINT; HelpVec: OleVariant; 
                                HaveHelpBox: SYSINT; HelpBox: OleVariant): IDispatch; dispid 56;
    function ICreateBlendSurface(const Surface1: ISurface; Range1: Double; 
                                 const Surface2: ISurface; Range2: Double; var StartVec: Double; 
                                 var EndVec: Double; HaveHelpVec: SYSINT; var HelpVec: Double; 
                                 HaveHelpBox: SYSINT; var HelpBox: Double): ISurface; dispid 57;
    function CreateOffsetSurface(const SurfaceIn: IDispatch; Distance: Double): IDispatch; dispid 58;
    function ICreateOffsetSurface(const SurfaceIn: ISurface; Distance: Double): ISurface; dispid 59;
    function RemoveRedundantTopology: WordBool; dispid 60;
    function GetIntersectionEdges(const ToolBodyIn: IDispatch): OleVariant; dispid 61;
    function IGetIntersectionEdges(const ToolBodyIn: IBody): {??PPUserType4}OleVariant; dispid 62;
    function IGetIntersectionEdgeCount(const ToolBodyIn: IBody): Integer; dispid 63;
    procedure RemoveFacesFromSheet(NumOfFaces: Integer; FacesToRemove: OleVariant); dispid 64;
    procedure IRemoveFacesFromSheet(NumOfFaces: Integer; FacesToRemove: {??PPPUserType2}OleVariant); dispid 65;
    procedure ICreatePlanarTrimSurfaceDLL(VertexCount: Integer; var Points: Double; 
                                          var Normal: Double); dispid 66;
    property MaterialPropertyValues: OleVariant dispid 67;
    function IMaterialPropertyValues: Double; dispid 68;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 69;
    function GetPropertyExtension(ID: Integer): OleVariant; dispid 70;
    procedure ResetPropertyExtension; dispid 71;
    function GetMaterialIdName: WideString; dispid 72;
    function SetMaterialIdName(const Name: WideString): WordBool; dispid 73;
    function GetMaterialUserName: WideString; dispid 74;
    function SetMaterialUserName(const Name: WideString): WordBool; dispid 75;
    function GetMassProperties(Density: Double): OleVariant; dispid 76;
    function IGetMassProperties(Density: Double): Double; dispid 77;
    function ICreatePsplineSurfaceDLL(Dim: Integer; Uorder: Integer; VOrder: Integer; 
                                      Ncol: Integer; Nrow: Integer; var Coeffs: Double; 
                                      Basis: Integer; var Xform: Double; ScaleFactor: Double): ISurface; dispid 78;
    function SetXform(XformIn: OleVariant): WordBool; dispid 79;
    function ISetXform(var XformIn: Double): WordBool; dispid 80;
    function CreateTempBodyFromSurfaces: IDispatch; dispid 81;
    function ICreateTempBodyFromSurfaces: IBody; dispid 82;
    function Operations(OperationType: SYSINT; const ToolBody: IDispatch; NumMaxSections: Integer): OleVariant; dispid 83;
    function IOperations(OperationType: SYSINT; const ToolBody: IBody; NumMaxSections: Integer; 
                         var ResultingBodies: IBody): Integer; dispid 84;
    function GetSheetBody(Index: SYSINT): IDispatch; dispid 85;
    function IGetSheetBody(Index: SYSINT): IBody; dispid 86;
    function GetProcessedBody: IDispatch; dispid 87;
    function IGetProcessedBody: IBody; dispid 88;
    function GetProcessedBodyWithSelFace: IDispatch; dispid 89;
    function IGetProcessedBodyWithSelFace: IBody; dispid 90;
    function Check: Integer; dispid 91;
    function GetExcessBodyArray: OleVariant; dispid 92;
    function IGetExcessBodyArray: {??PPUserType2}OleVariant; dispid 93;
    function IGetExcessBodyCount: SYSINT; dispid 94;
    function CreateBaseFeature(const BodyIn: IDispatch): WordBool; dispid 95;
    function ICreateBaseFeature(const BodyIn: IBody): WordBool; dispid 96;
    function DeleteFaces2(NumOfFaces: Integer; FaceList: OleVariant; Option: SYSINT): Integer; dispid 97;
    function IDeleteFaces2(NumOfFaces: Integer; var FaceList: IFace; Option: SYSINT): Integer; dispid 98;
    function IAddVertexPoint(var Point: Double): IVertex; dispid 99;
    function AddVertexPoint(Point: OleVariant): IDispatch; dispid 100;
    function GetExtremePoint(X: Double; Y: Double; Z: Double; out Outx: Double; out Outy: Double; 
                             out Outz: Double): WordBool; dispid 101;
    function GetType: Integer; dispid 102;
    procedure IDeleteFaces3(NumOfFaces: Integer; var FaceList: IFace; Option: Integer; 
                            DoLocalCheck: WordBool; var LocalCheckResult: WordBool); dispid 103;
    procedure SetCurrentSurface(const SurfaceIn: IDispatch); dispid 104;
    procedure ISetCurrentSurface(const SurfaceIn: ISurface); dispid 105;
    function DraftBody(NumOfFaces: Integer; FaceList: OleVariant; EdgeList: OleVariant; 
                       DraftAngle: Double; Dir: OleVariant): WordBool; dispid 106;
    function IDraftBody(NumOfFaces: Integer; var FaceList: IFace; var EdgeList: IEdge; 
                        DraftAngle: Double; var Dir: Double): WordBool; dispid 107;
    function DeleteBlends(NumOfFaces: Integer; FaceList: OleVariant): WordBool; dispid 108;
    function IDeleteBlends(NumOfFaces: Integer; var FaceList: IFace): WordBool; dispid 109;
    function Operations2(OperationType: SYSINT; const ToolBody: IDispatch; out ErrorCode: Integer): OleVariant; dispid 110;
    function IOperations2(OperationType: SYSINT; const ToolBody: IBody; out ErrorCode: Integer): IEnumBodies; dispid 111;
    function GetBodyBox: OleVariant; dispid 112;
    function DeleteBlends2(NumOfFaces: Integer; FaceList: OleVariant; DoLocalCheck: WordBool): WordBool; dispid 113;
    function IDeleteBlends2(NumOfFaces: Integer; var FaceList: IFace; DoLocalCheck: WordBool): WordBool; dispid 114;
    function GetTessellation(FaceList: OleVariant): IDispatch; dispid 115;
    function IGetTessellation(NumOfFaces: Integer; var FaceList: IFace): ITessellation; dispid 116;
    property Visible: WordBool readonly dispid 117;
    function MatchedBoolean(OperationType: SYSINT; const ToolBody: IDispatch; 
                            NumOfMatchingFaces: Integer; FaceList1: OleVariant; 
                            FaceList2: OleVariant; out ErrorCode: Integer): OleVariant; dispid 118;
    function IMatchedBoolean(OperationType: SYSINT; const ToolBody: IBody; 
                             NumOfMatchingFaces: Integer; var FaceList1: IFace; 
                             var FaceList2: IFace; out ErrorCode: Integer): IEnumBodies; dispid 119;
    function GetEdgeCount: Integer; dispid 120;
  end;

// *********************************************************************//
// Interface: IFace
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D3E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFace = interface(IDispatch)
    ['{83A33D3E-27C5-11CE-BFD4-00400513BB57}']
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Retval: OleVariant); safecall;
    function Get_MaterialUserName: WideString; safecall;
    procedure Set_MaterialUserName(const Retval: WideString); safecall;
    function Get_MaterialIdName: WideString; safecall;
    procedure Set_MaterialIdName(const Retval: WideString); safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(Retval: OleVariant); safecall;
    function Get_INormal: Double; safecall;
    procedure Set_INormal(var Retval: Double); safecall;
    function GetNextFace: IDispatch; safecall;
    function IGetNextFace: IFace; safecall;
    function GetSurface: IDispatch; safecall;
    function IGetSurface: ISurface; safecall;
    function GetEdgeCount: Integer; safecall;
    function GetEdges: OleVariant; safecall;
    function IGetEdges: PPUserType4; safecall;
    function GetFeature: IDispatch; safecall;
    function IGetFeature: IFeature; safecall;
    function GetFeatureId: Integer; safecall;
    function GetTrimCurves(WantCubic: WordBool): OleVariant; safecall;
    function GetUVBounds: OleVariant; safecall;
    function FaceInSurfaceSense: WordBool; safecall;
    function GetLoopCount: Integer; safecall;
    function GetFirstLoop: IDispatch; safecall;
    function IGetFirstLoop: ILoop; safecall;
    function IsSame(const FaceIn: IDispatch): WordBool; safecall;
    function IIsSame(const FaceIn: IFace): WordBool; safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(ID: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetTessTriangles(NoConversion: WordBool): OleVariant; safecall;
    function GetTessNorms: OleVariant; safecall;
    function GetTessTriStrips(NoConversion: WordBool): OleVariant; safecall;
    function GetTessTriStripNorms: OleVariant; safecall;
    function EnumLoops: IEnumLoops; safecall;
    function EnumEdges: IEnumEdges; safecall;
    function GetBody: IDispatch; safecall;
    function IGetBody: IBody; safecall;
    function IGetTessTriangles(NoConversion: WordBool): Single; safecall;
    function IGetTessNorms: Single; safecall;
    function GetTessTriangleCount: Integer; safecall;
    function IGetTessTriStrips(NoConversion: WordBool): Single; safecall;
    function IGetTessTriStripNorms: Single; safecall;
    function GetTessTriStripSize: Integer; safecall;
    function IGetUVBounds: Double; safecall;
    function GetClosestPointOn(X: Double; Y: Double; Z: Double): OleVariant; safecall;
    function IGetClosestPointOn(X: Double; Y: Double; Z: Double): Double; safecall;
    procedure Highlight(State: WordBool); safecall;
    procedure IHighlight(State: WordBool); safecall;
    function GetTrimCurveTopology: OleVariant; safecall;
    function IGetTrimCurveTopology: PIDispatch1; safecall;
    function GetTrimCurveTopologyCount: Integer; safecall;
    function GetTrimCurveTopologyTypes: OleVariant; safecall;
    function IGetTrimCurveTopologyTypes: Integer; safecall;
    function RemoveRedundantTopology: WordBool; safecall;
    function CreateSheetBodyByFaceExtension(BoxLowIn: OleVariant; BoxHighIn: OleVariant): IDispatch; safecall;
    function ICreateSheetBodyByFaceExtension(var BoxLowIn: Double; var BoxHighIn: Double): IBody; safecall;
    function GetArea: Double; safecall;
    function GetBox: OleVariant; safecall;
    function IGetBox: Double; safecall;
    function RemoveInnerLoops(NumOfLoops: Integer; InnerLoopsIn: OleVariant): IDispatch; safecall;
    function IRemoveInnerLoops(NumOfLoops: Integer; var InnerLoopsIn: ILoop): IFace; safecall;
    function CreateSheetBody: IDispatch; safecall;
    function ICreateSheetBody: IBody; safecall;
    function GetSilhoutteEdges(var Root: Double; var Normal: Double): OleVariant; safecall;
    function IGetSilhoutteEdges(var Root: Double; var Normal: Double): PPUserType4; safecall;
    function IGetSilhoutteEdgeCount(var Root: Double; var Normal: Double): Integer; safecall;
    function IGetTrimCurveSize(WantCubic: WordBool): Integer; safecall;
    function IGetTrimCurve: Double; safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var Retval: Double); safecall;
    function GetFaceId: SYSINT; safecall;
    procedure SetFaceId(IdIn: SYSINT); safecall;
    function IGetTrimCurveSize2(WantCubic: Integer; WantNRational: Integer): Integer; safecall;
    function GetSilhoutteEdgesVB(Xroot: Double; Yroot: Double; Zroot: Double; Xnormal: Double; 
                                 Ynormal: Double; Znormal: Double): OleVariant; safecall;
    procedure RemoveFaceId(IdIn: SYSINT); safecall;
    function GetTrimCurves2(WantCubic: WordBool; WantNRational: WordBool): OleVariant; safecall;
    function GetShellType: SYSINT; safecall;
    procedure IGetFacetData(FacetMesh: SYSINT; var NFacets: SYSINT; var NStrips: SYSINT; 
                            StripVertexNums: PPSYSINT1; VertexCoords: PPSingle1; 
                            NormalCoords: PPSingle1); safecall;
    function GetTessTriStripEdges: OleVariant; safecall;
    function IGetTessTriStripEdges: Integer; safecall;
    function IGetTessTriStripEdgeSize: Integer; safecall;
    function RemoveMaterialProperty: WordBool; safecall;
    function GetPatternSeedFeature: IDispatch; safecall;
    function IGetPatternSeedFeature: IFeature; safecall;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property MaterialUserName: WideString read Get_MaterialUserName write Set_MaterialUserName;
    property MaterialIdName: WideString read Get_MaterialIdName write Set_MaterialIdName;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
  end;

// *********************************************************************//
// DispIntf:  IFaceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D3E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFaceDisp = dispinterface
    ['{83A33D3E-27C5-11CE-BFD4-00400513BB57}']
    property Normal: OleVariant dispid 1;
    property MaterialUserName: WideString dispid 14;
    property MaterialIdName: WideString dispid 15;
    property MaterialPropertyValues: OleVariant dispid 16;
    function INormal: Double; dispid 40;
    function GetNextFace: IDispatch; dispid 2;
    function IGetNextFace: IFace; dispid 24;
    function GetSurface: IDispatch; dispid 3;
    function IGetSurface: ISurface; dispid 25;
    function GetEdgeCount: Integer; dispid 4;
    function GetEdges: OleVariant; dispid 5;
    function IGetEdges: {??PPUserType4}OleVariant; dispid 26;
    function GetFeature: IDispatch; dispid 6;
    function IGetFeature: IFeature; dispid 27;
    function GetFeatureId: Integer; dispid 7;
    function GetTrimCurves(WantCubic: WordBool): OleVariant; dispid 8;
    function GetUVBounds: OleVariant; dispid 9;
    function FaceInSurfaceSense: WordBool; dispid 10;
    function GetLoopCount: Integer; dispid 11;
    function GetFirstLoop: IDispatch; dispid 12;
    function IGetFirstLoop: ILoop; dispid 28;
    function IsSame(const FaceIn: IDispatch): WordBool; dispid 13;
    function IIsSame(const FaceIn: IFace): WordBool; dispid 29;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 17;
    function GetPropertyExtension(ID: Integer): OleVariant; dispid 18;
    procedure ResetPropertyExtension; dispid 19;
    function GetTessTriangles(NoConversion: WordBool): OleVariant; dispid 20;
    function GetTessNorms: OleVariant; dispid 21;
    function GetTessTriStrips(NoConversion: WordBool): OleVariant; dispid 22;
    function GetTessTriStripNorms: OleVariant; dispid 23;
    function EnumLoops: IEnumLoops; dispid 30;
    function EnumEdges: IEnumEdges; dispid 31;
    function GetBody: IDispatch; dispid 32;
    function IGetBody: IBody; dispid 33;
    function IGetTessTriangles(NoConversion: WordBool): Single; dispid 34;
    function IGetTessNorms: Single; dispid 35;
    function GetTessTriangleCount: Integer; dispid 36;
    function IGetTessTriStrips(NoConversion: WordBool): Single; dispid 37;
    function IGetTessTriStripNorms: Single; dispid 38;
    function GetTessTriStripSize: Integer; dispid 39;
    function IGetUVBounds: Double; dispid 41;
    function GetClosestPointOn(X: Double; Y: Double; Z: Double): OleVariant; dispid 42;
    function IGetClosestPointOn(X: Double; Y: Double; Z: Double): Double; dispid 43;
    procedure Highlight(State: WordBool); dispid 44;
    procedure IHighlight(State: WordBool); dispid 45;
    function GetTrimCurveTopology: OleVariant; dispid 46;
    function IGetTrimCurveTopology: {??PIDispatch1}OleVariant; dispid 47;
    function GetTrimCurveTopologyCount: Integer; dispid 48;
    function GetTrimCurveTopologyTypes: OleVariant; dispid 49;
    function IGetTrimCurveTopologyTypes: Integer; dispid 50;
    function RemoveRedundantTopology: WordBool; dispid 51;
    function CreateSheetBodyByFaceExtension(BoxLowIn: OleVariant; BoxHighIn: OleVariant): IDispatch; dispid 52;
    function ICreateSheetBodyByFaceExtension(var BoxLowIn: Double; var BoxHighIn: Double): IBody; dispid 53;
    function GetArea: Double; dispid 54;
    function GetBox: OleVariant; dispid 55;
    function IGetBox: Double; dispid 56;
    function RemoveInnerLoops(NumOfLoops: Integer; InnerLoopsIn: OleVariant): IDispatch; dispid 57;
    function IRemoveInnerLoops(NumOfLoops: Integer; var InnerLoopsIn: ILoop): IFace; dispid 58;
    function CreateSheetBody: IDispatch; dispid 59;
    function ICreateSheetBody: IBody; dispid 60;
    function GetSilhoutteEdges(var Root: Double; var Normal: Double): OleVariant; dispid 61;
    function IGetSilhoutteEdges(var Root: Double; var Normal: Double): {??PPUserType4}OleVariant; dispid 62;
    function IGetSilhoutteEdgeCount(var Root: Double; var Normal: Double): Integer; dispid 63;
    function IGetTrimCurveSize(WantCubic: WordBool): Integer; dispid 64;
    function IGetTrimCurve: Double; dispid 65;
    function IMaterialPropertyValues: Double; dispid 66;
    function GetFaceId: SYSINT; dispid 67;
    procedure SetFaceId(IdIn: SYSINT); dispid 68;
    function IGetTrimCurveSize2(WantCubic: Integer; WantNRational: Integer): Integer; dispid 69;
    function GetSilhoutteEdgesVB(Xroot: Double; Yroot: Double; Zroot: Double; Xnormal: Double; 
                                 Ynormal: Double; Znormal: Double): OleVariant; dispid 70;
    procedure RemoveFaceId(IdIn: SYSINT); dispid 71;
    function GetTrimCurves2(WantCubic: WordBool; WantNRational: WordBool): OleVariant; dispid 72;
    function GetShellType: SYSINT; dispid 73;
    procedure IGetFacetData(FacetMesh: SYSINT; var NFacets: SYSINT; var NStrips: SYSINT; 
                            StripVertexNums: {??PPSYSINT1}OleVariant; 
                            VertexCoords: {??PPSingle1}OleVariant; 
                            NormalCoords: {??PPSingle1}OleVariant); dispid 74;
    function GetTessTriStripEdges: OleVariant; dispid 75;
    function IGetTessTriStripEdges: Integer; dispid 76;
    function IGetTessTriStripEdgeSize: Integer; dispid 77;
    function RemoveMaterialProperty: WordBool; dispid 78;
    function GetPatternSeedFeature: IDispatch; dispid 79;
    function IGetPatternSeedFeature: IFeature; dispid 80;
  end;

// *********************************************************************//
// Interface: ISurface
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D40-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISurface = interface(IDispatch)
    ['{83A33D40-27C5-11CE-BFD4-00400513BB57}']
    function Get_PlaneParams: OleVariant; safecall;
    function Get_CylinderParams: OleVariant; safecall;
    function Get_ConeParams: OleVariant; safecall;
    function Get_SphereParams: OleVariant; safecall;
    function Get_TorusParams: OleVariant; safecall;
    function IsPlane: WordBool; safecall;
    function IsCylinder: WordBool; safecall;
    function IsCone: WordBool; safecall;
    function Identity: Integer; safecall;
    function IsSphere: WordBool; safecall;
    function IsTorus: WordBool; safecall;
    function IsParametric: WordBool; safecall;
    function IsBlending: WordBool; safecall;
    function IsOffset: WordBool; safecall;
    function IsSwept: WordBool; safecall;
    function IsRevolved: WordBool; safecall;
    function IsForeign: WordBool; safecall;
    function Parameterization: OleVariant; safecall;
    function Evaluate(UParam: Double; VParam: Double; NumUDeriv: Integer; NumVDeriv: Integer): OleVariant; safecall;
    function GetBSurfParams(WantCubicRational: WordBool; VP0: OleVariant): OleVariant; safecall;
    function AddTrimmingLoop(NCrvs: Integer; VOrder: OleVariant; VDim: OleVariant; 
                             VPeriodic: OleVariant; VNumKnots: OleVariant; 
                             VNumCtrlPoints: OleVariant; VKnots: OleVariant; 
                             VCtrlPointDbls: OleVariant): WordBool; safecall;
    function CreateNewCurve: IDispatch; safecall;
    function ICreateNewCurve: ICurve; safecall;
    function GetRevsurfParams: OleVariant; safecall;
    function GetExtrusionsurfParams: OleVariant; safecall;
    function GetProfileCurve: IDispatch; safecall;
    function IGetProfileCurve: ICurve; safecall;
    function ReverseEvaluate(PositionX: Double; PositionY: Double; PositionZ: Double): OleVariant; safecall;
    function Get_IPlaneParams: Double; safecall;
    function Get_ICylinderParams: Double; safecall;
    function Get_IConeParams: Double; safecall;
    function Get_ISphereParams: Double; safecall;
    function Get_ITorusParams: Double; safecall;
    function IReverseEvaluate(PositionX: Double; PositionY: Double; PositionZ: Double): Double; safecall;
    function IGetRevsurfParams: Double; safecall;
    function IGetExtrusionsurfParams: Double; safecall;
    function IParameterization: Double; safecall;
    function IEvaluate(UParam: Double; VParam: Double; NumUDeriv: Integer; NumVDeriv: Integer): Double; safecall;
    function IGetBSurfParams: Double; safecall;
    function IGetBSurfParamsSize(WantCubicRational: WordBool; var Range: Double): Integer; safecall;
    procedure IAddTrimmingLoop(CurveCount: Integer; var Order: Integer; var Dim: Integer; 
                               var Periodic: Integer; var NumKnots: Integer; 
                               var NumCtrlPoints: Integer; var Knots: Double; 
                               var CtrlPointDbls: Double); safecall;
    function EvaluateAtPoint(PositionX: Double; PositionY: Double; PositionZ: Double): OleVariant; safecall;
    function IEvaluateAtPoint(PositionX: Double; PositionY: Double; PositionZ: Double): Double; safecall;
    function GetOffsetSurfParams: Double; safecall;
    function IGetBSurfParamsSize2(WantCubic: WordBool; WantNonRational: WordBool; var Range: Double): Integer; safecall;
    function Copy: IDispatch; safecall;
    function ICopy: ISurface; safecall;
    function CreateTrimmedSheet(Curves: OleVariant): IDispatch; safecall;
    function ICreateTrimmedSheet(NCurves: Integer; var Curves: ICurve): IBody; safecall;
    function AddTrimmingLoop2(NCrvs: Integer; VOrder: OleVariant; VDim: OleVariant; 
                              VPeriodic: OleVariant; VNumKnots: OleVariant; 
                              VNumCtrlPoints: OleVariant; VKnots: OleVariant; 
                              VCtrlPointDbls: OleVariant; UvRange: OleVariant): WordBool; safecall;
    procedure IAddTrimmingLoop2(CurveCount: Integer; var Order: Integer; var Dim: Integer; 
                                var Periodic: Integer; var NumKnots: Integer; 
                                var NumCtrlPoints: Integer; var Knots: Double; 
                                var CtrlPointDbls: Double; var UvRange: Double); safecall;
    function GetBSurfParams2(WantCubic: WordBool; WantNonRational: WordBool; VP0: OleVariant; 
                             Tolerance: Double; out Sense: WordBool): OleVariant; safecall;
    function IGetBSurfParamsSize3(WantCubic: WordBool; WantNonRational: WordBool; 
                                  var Range: Double; Tolerance: Double; out Sense: WordBool): Integer; safecall;
    function GetClosestPointOn(X: Double; Y: Double; Z: Double): OleVariant; safecall;
    function IGetClosestPointOn(X: Double; Y: Double; Z: Double): Double; safecall;
    function GetOffsetSurfParams2(out BaseSurf: IDispatch; out Sense: WordBool): Double; safecall;
    function IGetOffsetSurfParams2(out BaseSurf: ISurface; out Sense: WordBool): Double; safecall;
    function GetIntersectSurfaceCount(const OtherSurface: ISurface): Integer; safecall;
    function IIntersectSurface(const OtherSurf: ISurface; CurveCount: Integer; 
                               var CurveArray: ICurve; var BoundsArray: Double): WordBool; safecall;
    function IntersectSurface(const OtherSurf: IDispatch; var CurveArray: OleVariant; 
                              var BoundsArray: OleVariant): WordBool; safecall;
    function GetIntersectCurveCount(const OtherCurve: ICurve; var CurveBound: Double): Integer; safecall;
    function IIntersectCurve(const OtherCurve: ICurve; var CurveBound: Double; PointCount: Integer; 
                             var PointArray: Double; var TArray: Double; var UvArray: Double): WordBool; safecall;
    function IntersectCurve(const OtherCurve: IDispatch; CurveBound: OleVariant; 
                            var PointArray: OleVariant; var TArray: OleVariant; 
                            var UvArray: OleVariant): WordBool; safecall;
    function MakeIsoCurve(UorV: WordBool; UvValue: Double): IDispatch; safecall;
    function IMakeIsoCurve(UorV: WordBool; UvValue: Double): ICurve; safecall;
    function ICreateTrimmedSheet2(NCurves: Integer; var Curves: ICurve): IBody2; safecall;
    function MakeIsoCurves(UvRange: OleVariant; Dir: OleVariant; Angle: Double; Tol: Double; 
                           out Curves: OleVariant; out CurveBounds: OleVariant): WordBool; safecall;
    function IGetMakeIsoCurvesCount(var UvRange: Double; var Dir: Double; Angle: Double; Tol: Double): Integer; safecall;
    function IMakeIsoCurves(var UvRange: Double; var Dir: Double; Angle: Double; Tol: Double; 
                            CurveCount: Integer; out Curves: ICurve; out CurveBounds: Double): WordBool; safecall;
    function GetIntersectCurveCount2(const OtherCurve: ICurve; var CurveBound: Double): Integer; safecall;
    function IIntersectCurve2(const OtherCurve: ICurve; var CurveBound: Double; 
                              PointCount: Integer; var PointArray: Double; var TArray: Double; 
                              var UvArray: Double): WordBool; safecall;
    function IntersectCurve2(const OtherCurve: IDispatch; CurveBound: OleVariant; 
                             var PointArray: OleVariant; var TArray: OleVariant; 
                             var UvArray: OleVariant): WordBool; safecall;
    function ICreateTrimmedSheet3(NCurves: Integer; var Curves: ICurve): IBody2; safecall;
    function GetProjectedPointOn(const Point: IMathPoint; const Direction: IMathVector): IMathPoint; safecall;
    function CreateTrimmedSheet4(Curves: OleVariant; PreserveAnalyticCurves: WordBool): IDispatch; safecall;
    function ICreateTrimmedSheet4(NCurves: Integer; var Curves: ICurve; 
                                  PreserveAnalyticCurves: WordBool): IBody; safecall;
    property PlaneParams: OleVariant read Get_PlaneParams;
    property CylinderParams: OleVariant read Get_CylinderParams;
    property ConeParams: OleVariant read Get_ConeParams;
    property SphereParams: OleVariant read Get_SphereParams;
    property TorusParams: OleVariant read Get_TorusParams;
    property IPlaneParams: Double read Get_IPlaneParams;
    property ICylinderParams: Double read Get_ICylinderParams;
    property IConeParams: Double read Get_IConeParams;
    property ISphereParams: Double read Get_ISphereParams;
    property ITorusParams: Double read Get_ITorusParams;
  end;

// *********************************************************************//
// DispIntf:  ISurfaceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D40-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISurfaceDisp = dispinterface
    ['{83A33D40-27C5-11CE-BFD4-00400513BB57}']
    property PlaneParams: OleVariant readonly dispid 1;
    property CylinderParams: OleVariant readonly dispid 2;
    property ConeParams: OleVariant readonly dispid 3;
    property SphereParams: OleVariant readonly dispid 4;
    property TorusParams: OleVariant readonly dispid 5;
    function IsPlane: WordBool; dispid 6;
    function IsCylinder: WordBool; dispid 7;
    function IsCone: WordBool; dispid 8;
    function Identity: Integer; dispid 9;
    function IsSphere: WordBool; dispid 10;
    function IsTorus: WordBool; dispid 11;
    function IsParametric: WordBool; dispid 12;
    function IsBlending: WordBool; dispid 13;
    function IsOffset: WordBool; dispid 14;
    function IsSwept: WordBool; dispid 15;
    function IsRevolved: WordBool; dispid 16;
    function IsForeign: WordBool; dispid 17;
    function Parameterization: OleVariant; dispid 18;
    function Evaluate(UParam: Double; VParam: Double; NumUDeriv: Integer; NumVDeriv: Integer): OleVariant; dispid 19;
    function GetBSurfParams(WantCubicRational: WordBool; VP0: OleVariant): OleVariant; dispid 20;
    function AddTrimmingLoop(NCrvs: Integer; VOrder: OleVariant; VDim: OleVariant; 
                             VPeriodic: OleVariant; VNumKnots: OleVariant; 
                             VNumCtrlPoints: OleVariant; VKnots: OleVariant; 
                             VCtrlPointDbls: OleVariant): WordBool; dispid 21;
    function CreateNewCurve: IDispatch; dispid 22;
    function ICreateNewCurve: ICurve; dispid 26;
    function GetRevsurfParams: OleVariant; dispid 23;
    function GetExtrusionsurfParams: OleVariant; dispid 24;
    function GetProfileCurve: IDispatch; dispid 25;
    function IGetProfileCurve: ICurve; dispid 27;
    function ReverseEvaluate(PositionX: Double; PositionY: Double; PositionZ: Double): OleVariant; dispid 28;
    property IPlaneParams: Double readonly dispid 29;
    property ICylinderParams: Double readonly dispid 30;
    property IConeParams: Double readonly dispid 31;
    property ISphereParams: Double readonly dispid 32;
    property ITorusParams: Double readonly dispid 33;
    function IReverseEvaluate(PositionX: Double; PositionY: Double; PositionZ: Double): Double; dispid 34;
    function IGetRevsurfParams: Double; dispid 35;
    function IGetExtrusionsurfParams: Double; dispid 36;
    function IParameterization: Double; dispid 37;
    function IEvaluate(UParam: Double; VParam: Double; NumUDeriv: Integer; NumVDeriv: Integer): Double; dispid 38;
    function IGetBSurfParams: Double; dispid 39;
    function IGetBSurfParamsSize(WantCubicRational: WordBool; var Range: Double): Integer; dispid 40;
    procedure IAddTrimmingLoop(CurveCount: Integer; var Order: Integer; var Dim: Integer; 
                               var Periodic: Integer; var NumKnots: Integer; 
                               var NumCtrlPoints: Integer; var Knots: Double; 
                               var CtrlPointDbls: Double); dispid 41;
    function EvaluateAtPoint(PositionX: Double; PositionY: Double; PositionZ: Double): OleVariant; dispid 42;
    function IEvaluateAtPoint(PositionX: Double; PositionY: Double; PositionZ: Double): Double; dispid 43;
    function GetOffsetSurfParams: Double; dispid 44;
    function IGetBSurfParamsSize2(WantCubic: WordBool; WantNonRational: WordBool; var Range: Double): Integer; dispid 45;
    function Copy: IDispatch; dispid 46;
    function ICopy: ISurface; dispid 47;
    function CreateTrimmedSheet(Curves: OleVariant): IDispatch; dispid 48;
    function ICreateTrimmedSheet(NCurves: Integer; var Curves: ICurve): IBody; dispid 49;
    function AddTrimmingLoop2(NCrvs: Integer; VOrder: OleVariant; VDim: OleVariant; 
                              VPeriodic: OleVariant; VNumKnots: OleVariant; 
                              VNumCtrlPoints: OleVariant; VKnots: OleVariant; 
                              VCtrlPointDbls: OleVariant; UvRange: OleVariant): WordBool; dispid 50;
    procedure IAddTrimmingLoop2(CurveCount: Integer; var Order: Integer; var Dim: Integer; 
                                var Periodic: Integer; var NumKnots: Integer; 
                                var NumCtrlPoints: Integer; var Knots: Double; 
                                var CtrlPointDbls: Double; var UvRange: Double); dispid 51;
    function GetBSurfParams2(WantCubic: WordBool; WantNonRational: WordBool; VP0: OleVariant; 
                             Tolerance: Double; out Sense: WordBool): OleVariant; dispid 52;
    function IGetBSurfParamsSize3(WantCubic: WordBool; WantNonRational: WordBool; 
                                  var Range: Double; Tolerance: Double; out Sense: WordBool): Integer; dispid 53;
    function GetClosestPointOn(X: Double; Y: Double; Z: Double): OleVariant; dispid 54;
    function IGetClosestPointOn(X: Double; Y: Double; Z: Double): Double; dispid 55;
    function GetOffsetSurfParams2(out BaseSurf: IDispatch; out Sense: WordBool): Double; dispid 56;
    function IGetOffsetSurfParams2(out BaseSurf: ISurface; out Sense: WordBool): Double; dispid 57;
    function GetIntersectSurfaceCount(const OtherSurface: ISurface): Integer; dispid 58;
    function IIntersectSurface(const OtherSurf: ISurface; CurveCount: Integer; 
                               var CurveArray: ICurve; var BoundsArray: Double): WordBool; dispid 59;
    function IntersectSurface(const OtherSurf: IDispatch; var CurveArray: OleVariant; 
                              var BoundsArray: OleVariant): WordBool; dispid 60;
    function GetIntersectCurveCount(const OtherCurve: ICurve; var CurveBound: Double): Integer; dispid 61;
    function IIntersectCurve(const OtherCurve: ICurve; var CurveBound: Double; PointCount: Integer; 
                             var PointArray: Double; var TArray: Double; var UvArray: Double): WordBool; dispid 62;
    function IntersectCurve(const OtherCurve: IDispatch; CurveBound: OleVariant; 
                            var PointArray: OleVariant; var TArray: OleVariant; 
                            var UvArray: OleVariant): WordBool; dispid 63;
    function MakeIsoCurve(UorV: WordBool; UvValue: Double): IDispatch; dispid 64;
    function IMakeIsoCurve(UorV: WordBool; UvValue: Double): ICurve; dispid 65;
    function ICreateTrimmedSheet2(NCurves: Integer; var Curves: ICurve): IBody2; dispid 66;
    function MakeIsoCurves(UvRange: OleVariant; Dir: OleVariant; Angle: Double; Tol: Double; 
                           out Curves: OleVariant; out CurveBounds: OleVariant): WordBool; dispid 67;
    function IGetMakeIsoCurvesCount(var UvRange: Double; var Dir: Double; Angle: Double; Tol: Double): Integer; dispid 68;
    function IMakeIsoCurves(var UvRange: Double; var Dir: Double; Angle: Double; Tol: Double; 
                            CurveCount: Integer; out Curves: ICurve; out CurveBounds: Double): WordBool; dispid 69;
    function GetIntersectCurveCount2(const OtherCurve: ICurve; var CurveBound: Double): Integer; dispid 70;
    function IIntersectCurve2(const OtherCurve: ICurve; var CurveBound: Double; 
                              PointCount: Integer; var PointArray: Double; var TArray: Double; 
                              var UvArray: Double): WordBool; dispid 71;
    function IntersectCurve2(const OtherCurve: IDispatch; CurveBound: OleVariant; 
                             var PointArray: OleVariant; var TArray: OleVariant; 
                             var UvArray: OleVariant): WordBool; dispid 72;
    function ICreateTrimmedSheet3(NCurves: Integer; var Curves: ICurve): IBody2; dispid 73;
    function GetProjectedPointOn(const Point: IMathPoint; const Direction: IMathVector): IMathPoint; dispid 74;
    function CreateTrimmedSheet4(Curves: OleVariant; PreserveAnalyticCurves: WordBool): IDispatch; dispid 75;
    function ICreateTrimmedSheet4(NCurves: Integer; var Curves: ICurve; 
                                  PreserveAnalyticCurves: WordBool): IBody; dispid 76;
  end;

// *********************************************************************//
// Interface: ICurve
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D44-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICurve = interface(IDispatch)
    ['{83A33D44-27C5-11CE-BFD4-00400513BB57}']
    function Get_LineParams: OleVariant; safecall;
    function Get_CircleParams: OleVariant; safecall;
    function Identity: Integer; safecall;
    function IsCircle: WordBool; safecall;
    function IsLine: WordBool; safecall;
    function IsBcurve: WordBool; safecall;
    function GetBCurveParams(WantCubicIn: WordBool): OleVariant; safecall;
    function ConvertLineToBcurve(StartPoint: OleVariant; EndPoint: OleVariant): OleVariant; safecall;
    function ConvertArcToBcurve(Center: OleVariant; Axis: OleVariant; Start: OleVariant; 
                                End_: OleVariant): OleVariant; safecall;
    function ReverseCurve: IDispatch; safecall;
    function IReverseCurve: ICurve; safecall;
    function GetPCurveParams: OleVariant; safecall;
    function Get_ILineParams: Double; safecall;
    function Get_ICircleParams: Double; safecall;
    function IGetBCurveParams: Double; safecall;
    function IGetBCurveParamsSize(WantCubicIn: WordBool): Integer; safecall;
    function IConvertLineToBcurveSize(var StartPoint: Double; var EndPoint: Double): Integer; safecall;
    function IConvertArcToBcurveSize(var Center: Double; var Axis: Double; var Start: Double; 
                                     var End_: Double): Integer; safecall;
    function IGetPCurveParams: Double; safecall;
    function IGetPCurveParamsSize: Integer; safecall;
    function GetLength(StartParam: Double; EndParam: Double): Double; safecall;
    function IConvertPcurveToBcurveSize(Dim: Integer; Order: Integer; Nsegs: Integer; 
                                        var Coeffs: Double; Basis: Integer; var Xform: Double; 
                                        ScaleFactor: Double): Integer; safecall;
    function GetSplinePts(ParamsArrayIn: OleVariant): OleVariant; safecall;
    function IGetSplinePts: Double; safecall;
    function IGetSplinePtsSize(var PropArray: SYSINT; var KnotsArray: Double; 
                               var CntrlPntCoordArray: Double): Integer; safecall;
    function IGetBCurveParamsSize2(WantCubic: WordBool; WantNRational: WordBool): Integer; safecall;
    function Copy: IDispatch; safecall;
    function ICopy: ICurve; safecall;
    function GetTessPts(ChordTolerance: Double; LengthTolerance: Double; StartPoint: OleVariant; 
                        EndPoint: OleVariant): OleVariant; safecall;
    function IGetTessPts(ChordTolerance: Double; LengthTolerance: Double; var StartPoint: Double; 
                         var EndPoint: Double): Double; safecall;
    function IGetTessPtsSize(ChordTolerance: Double; LengthTolerance: Double; 
                             var StartPoint: Double; var EndPoint: Double): Integer; safecall;
    function IntersectCurve(const OtherCurve: IDispatch; ThisStartPoint: OleVariant; 
                            ThisEndPoint: OleVariant; OtherStartPoint: OleVariant; 
                            OtherEndPoint: OleVariant): OleVariant; safecall;
    function IIntersectCurve(const OtherCurve: ICurve; var ThisStartPoint: Double; 
                             var ThisEndPoint: Double; var OtherStartPoint: Double; 
                             var OtherEndPoint: Double): Double; safecall;
    function IIntersectCurveSize(const OtherCurve: ICurve; var ThisStartPoint: Double; 
                                 var ThisEndPoint: Double; var OtherStartPoint: Double; 
                                 var OtherEndPoint: Double): Integer; safecall;
    function CreateTrimmedCurve(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                Z2: Double): IDispatch; safecall;
    function ICreateTrimmedCurve(var Start: Double; var End_: Double): ICurve; safecall;
    function IsEllipse: WordBool; safecall;
    function GetEllipseParams: OleVariant; safecall;
    procedure IGetEllipseParams(var ParamArray: Double); safecall;
    function Evaluate(Parameter: Double): OleVariant; safecall;
    function IEvaluate(Parameter: Double): Double; safecall;
    function GetClosestPointOn(X: Double; Y: Double; Z: Double): OleVariant; safecall;
    function IGetClosestPointOn(X: Double; Y: Double; Z: Double): Double; safecall;
    function GetEndParams(out Start: Double; out End_: Double; out IsClosed: WordBool; 
                          out IsPeriodic: WordBool): WordBool; safecall;
    function GetLength2(StartParam: Double; EndParam: Double): Double; safecall;
    function MakeBsplineCurve: ICurve; safecall;
    function CreateWireBody: IBody2; safecall;
    function GetBaseCurve: ICurve; safecall;
    function IsTrimmedCurve: WordBool; safecall;
    function CreateTrimmedCurve2(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                 Z2: Double): ICurve; safecall;
    function CreateSurfaceCurve(const Surf: ISurface; out Error: Integer): ICurve; safecall;
    procedure ApplyTransform(const Xform: IMathTransform); safecall;
    function SimplifyBCurve(TolIn: Double): ICurve; safecall;
    function ExtentCurve(AtStart: WordBool; Length: Double; LinearExt: WordBool): ICurve; safecall;
    function JoinCurves(Curves: OleVariant): IDispatch; safecall;
    function IJoinCurves(NCurves: Integer; var Curves: ICurve): ICurve; safecall;
    function Evaluate2(Parameter: Double; NumberOfDerivatives: Integer): OleVariant; safecall;
    function IEvaluate2(Parameter: Double; NumberOfDerivatives: Integer): Double; safecall;
    function GetBCurveParams3(WantCubicIn: WordBool; WantNRational: WordBool; 
                              ForceNonPeriodic: WordBool): OleVariant; safecall;
    function IGetBCurveParams3(ArraySize: Integer): Double; safecall;
    function IGetBCurveParamsSize3(WantCubicIn: WordBool; WantNRational: WordBool; 
                                   ForceNonPeriodic: WordBool): Integer; safecall;
    function MakeBsplineCurve2: ICurve; safecall;
    function GetLength3(StartParam: Double; EndParam: Double): Double; safecall;
    property LineParams: OleVariant read Get_LineParams;
    property CircleParams: OleVariant read Get_CircleParams;
    property ILineParams: Double read Get_ILineParams;
    property ICircleParams: Double read Get_ICircleParams;
  end;

// *********************************************************************//
// DispIntf:  ICurveDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D44-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICurveDisp = dispinterface
    ['{83A33D44-27C5-11CE-BFD4-00400513BB57}']
    property LineParams: OleVariant readonly dispid 1;
    property CircleParams: OleVariant readonly dispid 2;
    function Identity: Integer; dispid 3;
    function IsCircle: WordBool; dispid 4;
    function IsLine: WordBool; dispid 5;
    function IsBcurve: WordBool; dispid 6;
    function GetBCurveParams(WantCubicIn: WordBool): OleVariant; dispid 7;
    function ConvertLineToBcurve(StartPoint: OleVariant; EndPoint: OleVariant): OleVariant; dispid 8;
    function ConvertArcToBcurve(Center: OleVariant; Axis: OleVariant; Start: OleVariant; 
                                End_: OleVariant): OleVariant; dispid 9;
    function ReverseCurve: IDispatch; dispid 10;
    function IReverseCurve: ICurve; dispid 12;
    function GetPCurveParams: OleVariant; dispid 11;
    property ILineParams: Double readonly dispid 13;
    property ICircleParams: Double readonly dispid 14;
    function IGetBCurveParams: Double; dispid 15;
    function IGetBCurveParamsSize(WantCubicIn: WordBool): Integer; dispid 16;
    function IConvertLineToBcurveSize(var StartPoint: Double; var EndPoint: Double): Integer; dispid 17;
    function IConvertArcToBcurveSize(var Center: Double; var Axis: Double; var Start: Double; 
                                     var End_: Double): Integer; dispid 18;
    function IGetPCurveParams: Double; dispid 19;
    function IGetPCurveParamsSize: Integer; dispid 20;
    function GetLength(StartParam: Double; EndParam: Double): Double; dispid 21;
    function IConvertPcurveToBcurveSize(Dim: Integer; Order: Integer; Nsegs: Integer; 
                                        var Coeffs: Double; Basis: Integer; var Xform: Double; 
                                        ScaleFactor: Double): Integer; dispid 22;
    function GetSplinePts(ParamsArrayIn: OleVariant): OleVariant; dispid 23;
    function IGetSplinePts: Double; dispid 24;
    function IGetSplinePtsSize(var PropArray: SYSINT; var KnotsArray: Double; 
                               var CntrlPntCoordArray: Double): Integer; dispid 25;
    function IGetBCurveParamsSize2(WantCubic: WordBool; WantNRational: WordBool): Integer; dispid 26;
    function Copy: IDispatch; dispid 27;
    function ICopy: ICurve; dispid 28;
    function GetTessPts(ChordTolerance: Double; LengthTolerance: Double; StartPoint: OleVariant; 
                        EndPoint: OleVariant): OleVariant; dispid 29;
    function IGetTessPts(ChordTolerance: Double; LengthTolerance: Double; var StartPoint: Double; 
                         var EndPoint: Double): Double; dispid 30;
    function IGetTessPtsSize(ChordTolerance: Double; LengthTolerance: Double; 
                             var StartPoint: Double; var EndPoint: Double): Integer; dispid 31;
    function IntersectCurve(const OtherCurve: IDispatch; ThisStartPoint: OleVariant; 
                            ThisEndPoint: OleVariant; OtherStartPoint: OleVariant; 
                            OtherEndPoint: OleVariant): OleVariant; dispid 32;
    function IIntersectCurve(const OtherCurve: ICurve; var ThisStartPoint: Double; 
                             var ThisEndPoint: Double; var OtherStartPoint: Double; 
                             var OtherEndPoint: Double): Double; dispid 33;
    function IIntersectCurveSize(const OtherCurve: ICurve; var ThisStartPoint: Double; 
                                 var ThisEndPoint: Double; var OtherStartPoint: Double; 
                                 var OtherEndPoint: Double): Integer; dispid 34;
    function CreateTrimmedCurve(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                Z2: Double): IDispatch; dispid 35;
    function ICreateTrimmedCurve(var Start: Double; var End_: Double): ICurve; dispid 36;
    function IsEllipse: WordBool; dispid 37;
    function GetEllipseParams: OleVariant; dispid 38;
    procedure IGetEllipseParams(var ParamArray: Double); dispid 39;
    function Evaluate(Parameter: Double): OleVariant; dispid 40;
    function IEvaluate(Parameter: Double): Double; dispid 41;
    function GetClosestPointOn(X: Double; Y: Double; Z: Double): OleVariant; dispid 42;
    function IGetClosestPointOn(X: Double; Y: Double; Z: Double): Double; dispid 43;
    function GetEndParams(out Start: Double; out End_: Double; out IsClosed: WordBool; 
                          out IsPeriodic: WordBool): WordBool; dispid 44;
    function GetLength2(StartParam: Double; EndParam: Double): Double; dispid 45;
    function MakeBsplineCurve: ICurve; dispid 46;
    function CreateWireBody: IBody2; dispid 47;
    function GetBaseCurve: ICurve; dispid 48;
    function IsTrimmedCurve: WordBool; dispid 49;
    function CreateTrimmedCurve2(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                 Z2: Double): ICurve; dispid 50;
    function CreateSurfaceCurve(const Surf: ISurface; out Error: Integer): ICurve; dispid 51;
    procedure ApplyTransform(const Xform: IMathTransform); dispid 52;
    function SimplifyBCurve(TolIn: Double): ICurve; dispid 53;
    function ExtentCurve(AtStart: WordBool; Length: Double; LinearExt: WordBool): ICurve; dispid 54;
    function JoinCurves(Curves: OleVariant): IDispatch; dispid 55;
    function IJoinCurves(NCurves: Integer; var Curves: ICurve): ICurve; dispid 56;
    function Evaluate2(Parameter: Double; NumberOfDerivatives: Integer): OleVariant; dispid 57;
    function IEvaluate2(Parameter: Double; NumberOfDerivatives: Integer): Double; dispid 58;
    function GetBCurveParams3(WantCubicIn: WordBool; WantNRational: WordBool; 
                              ForceNonPeriodic: WordBool): OleVariant; dispid 59;
    function IGetBCurveParams3(ArraySize: Integer): Double; dispid 60;
    function IGetBCurveParamsSize3(WantCubicIn: WordBool; WantNRational: WordBool; 
                                   ForceNonPeriodic: WordBool): Integer; dispid 61;
    function MakeBsplineCurve2: ICurve; dispid 62;
    function GetLength3(StartParam: Double; EndParam: Double): Double; dispid 63;
  end;

// *********************************************************************//
// Interface: IBody2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A075BFD-9962-4431-8321-7AF4903C55AD}
// *********************************************************************//
  IBody2 = interface(IDispatch)
    ['{3A075BFD-9962-4431-8321-7AF4903C55AD}']
    function GetFirstFace: IDispatch; safecall;
    function IGetFirstFace: IFace2; safecall;
    function GetFaceCount: Integer; safecall;
    function CreateNewSurface: IDispatch; safecall;
    function ICreateNewSurface: ISurface; safecall;
    function CreateBodyFromSurfaces: WordBool; safecall;
    function CreatePlanarSurface(VRootPoint: OleVariant; VNormal: OleVariant): IDispatch; safecall;
    function ICreatePlanarSurface(VRootPoint: OleVariant; VNormal: OleVariant): ISurface; safecall;
    function CreateRevolutionSurface(const ProfileCurve: IDispatch; AxisPoint: OleVariant; 
                                     AxisDirection: OleVariant; ProfileEndPtParams: OleVariant): IDispatch; safecall;
    function ICreateRevolutionSurface(const ProfileCurve: ICurve; AxisPoint: OleVariant; 
                                      AxisDirection: OleVariant; ProfileEndPtParams: OleVariant): ISurface; safecall;
    function CreateBsplineSurface(Props: OleVariant; UKnots: OleVariant; VKnots: OleVariant; 
                                  CtrlPtCoords: OleVariant): IDispatch; safecall;
    function ICreateBsplineSurface(Props: OleVariant; UKnots: OleVariant; VKnots: OleVariant; 
                                   CtrlPtCoords: OleVariant): ISurface; safecall;
    function CreateTrimmedSurface: WordBool; safecall;
    function AddProfileLine(RootPoint: OleVariant; Direction: OleVariant): IDispatch; safecall;
    function IAddProfileLine(RootPoint: OleVariant; Direction: OleVariant): ICurve; safecall;
    function AddProfileArc(Center: OleVariant; Axis: OleVariant; Radius: Double; 
                           StartPoint: OleVariant; EndPoint: OleVariant): IDispatch; safecall;
    function IAddProfileArc(Center: OleVariant; Axis: OleVariant; Radius: Double; 
                            StartPoint: OleVariant; EndPoint: OleVariant): ICurve; safecall;
    function AddProfileBspline(Props: OleVariant; Knots: OleVariant; CtrlPtCoords: OleVariant): IDispatch; safecall;
    function IAddProfileBspline(Props: OleVariant; Knots: OleVariant; CtrlPtCoords: OleVariant): ICurve; safecall;
    function CreateExtrusionSurface(const ProfileCurve: IDispatch; AxisDirection: OleVariant): IDispatch; safecall;
    function ICreateExtrusionSurface(const ProfileCurve: ICurve; AxisDirection: OleVariant): ISurface; safecall;
    function GetFirstSelectedFace: IDispatch; safecall;
    function IGetFirstSelectedFace: IFace2; safecall;
    function GetNextSelectedFace: IDispatch; safecall;
    function IGetNextSelectedFace: IFace2; safecall;
    function GetSelectedFaceCount: Integer; safecall;
    function CreateBoundedSurface(UOpt: WordBool; VOpt: WordBool; UvParams: OleVariant): WordBool; safecall;
    function GetIgesErrorCount: Integer; safecall;
    function GetIgesErrorCode(Index: Integer): Integer; safecall;
    function Copy: IDispatch; safecall;
    function ICopy: IBody2; safecall;
    function EnumFaces: IEnumFaces2; safecall;
    function CreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IDispatch; safecall;
    function ICreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IBody2; safecall;
    function DeleteFaces(NumOfFaces: Integer; FaceList: OleVariant): WordBool; safecall;
    procedure Display(const Part: IDispatch; Color: Integer); safecall;
    procedure IDisplay(const Part: IPartDoc; Color: Integer); safecall;
    procedure Hide(const Part: IDispatch); safecall;
    procedure IHide(const Part: IPartDoc); safecall;
    function ICreatePlanarSurfaceDLL(var RootPoint: Double; var Normal: Double): ISurface; safecall;
    function ICreateRevolutionSurfaceDLL(const ProfileCurve: ICurve; var AxisPoint: Double; 
                                         var AxisDirection: Double; var ProfileEndPtParams: Double): ISurface; safecall;
    function IAddProfileLineDLL(var RootPoint: Double; var Direction: Double): ICurve; safecall;
    function IAddProfileArcDLL(var Center: Double; var Axis: Double; Radius: Double; 
                               var StartPoint: Double; var EndPoint: Double): ICurve; safecall;
    function ICreateBsplineSurfaceDLL(var Properties: Integer; var UKnotArray: Double; 
                                      var VKnotArray: Double; var ControlPointCoordArray: Double): ISurface; safecall;
    function IAddProfileBsplineDLL(var Properties: Integer; var KnotArray: Double; 
                                   var ControlPointCoordArray: Double): ICurve; safecall;
    function ICreateExtrusionSurfaceDLL(const ProfileCurve: ICurve; var AxisDirection: Double): ISurface; safecall;
    procedure ICreateBoundedSurface(UOpt: WordBool; VOpt: WordBool; var UvParams: Double); safecall;
    procedure ICombineVolumes(const ToolBody: IBody2); safecall;
    function ISectionBySheet(const Sheet: IBody2; NumMaxSections: Integer; 
                             var SectionedBodies: IBody2): Integer; safecall;
    procedure IGetBodyBox(var BoxCorners: Double); safecall;
    procedure SetIgesInfo(const SystemName: WideString; Granularity: Double; 
                          AttemptKnitting: WordBool); safecall;
    procedure DisplayWireFrameXOR(const Part: IDispatch; Color: Integer); safecall;
    procedure IDisplayWireFrameXOR(const Part: IPartDoc; Color: Integer); safecall;
    procedure Save(const StreamIn: IUnknown); safecall;
    procedure ISave(const StreamIn: IUnknown); safecall;
    function CreateBlendSurface(const Surface1: IDispatch; Range1: Double; 
                                const Surface2: IDispatch; Range2: Double; StartVec: OleVariant; 
                                EndVec: OleVariant; HaveHelpVec: SYSINT; HelpVec: OleVariant; 
                                HaveHelpBox: SYSINT; HelpBox: OleVariant): IDispatch; safecall;
    function ICreateBlendSurface(const Surface1: ISurface; Range1: Double; 
                                 const Surface2: ISurface; Range2: Double; var StartVec: Double; 
                                 var EndVec: Double; HaveHelpVec: SYSINT; var HelpVec: Double; 
                                 HaveHelpBox: SYSINT; var HelpBox: Double): ISurface; safecall;
    function CreateOffsetSurface(const SurfaceIn: IDispatch; Distance: Double): IDispatch; safecall;
    function ICreateOffsetSurface(const SurfaceIn: ISurface; Distance: Double): ISurface; safecall;
    function RemoveRedundantTopology: WordBool; safecall;
    function GetIntersectionEdges(const ToolBodyIn: IDispatch): OleVariant; safecall;
    function IGetIntersectionEdges(const ToolBodyIn: IBody2): IEdge; safecall;
    function IGetIntersectionEdgeCount(const ToolBodyIn: IBody2): Integer; safecall;
    procedure RemoveFacesFromSheet(NumOfFaces: Integer; FacesToRemove: OleVariant); safecall;
    procedure IRemoveFacesFromSheet(NumOfFaces: Integer; var FacesToRemove: IFace2); safecall;
    procedure ICreatePlanarTrimSurfaceDLL(VertexCount: Integer; var Points: Double; 
                                          var Normal: Double); safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(Retval: OleVariant); safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var Retval: Double); safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(ID: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetMaterialIdName: WideString; safecall;
    function SetMaterialIdName(const Name: WideString): WordBool; safecall;
    function GetMaterialUserName: WideString; safecall;
    function SetMaterialUserName(const Name: WideString): WordBool; safecall;
    function GetMassProperties(Density: Double): OleVariant; safecall;
    function IGetMassProperties(Density: Double): Double; safecall;
    function ICreatePsplineSurfaceDLL(Dim: Integer; Uorder: Integer; VOrder: Integer; 
                                      Ncol: Integer; Nrow: Integer; var Coeffs: Double; 
                                      Basis: Integer; var Xform: Double; ScaleFactor: Double): ISurface; safecall;
    function SetXform(XformIn: OleVariant): WordBool; safecall;
    function ISetXform(var XformIn: Double): WordBool; safecall;
    function CreateTempBodyFromSurfaces: IDispatch; safecall;
    function ICreateTempBodyFromSurfaces: IBody2; safecall;
    function Operations(OperationType: SYSINT; const ToolBody: IDispatch; NumMaxSections: Integer): OleVariant; safecall;
    function IOperations(OperationType: SYSINT; const ToolBody: IBody2; NumMaxSections: Integer; 
                         var ResultingBodies: IBody2): Integer; safecall;
    function GetSheetBody(Index: SYSINT): IDispatch; safecall;
    function IGetSheetBody(Index: SYSINT): IBody2; safecall;
    function GetProcessedBody: IDispatch; safecall;
    function IGetProcessedBody: IBody2; safecall;
    function GetProcessedBodyWithSelFace: IDispatch; safecall;
    function IGetProcessedBodyWithSelFace: IBody2; safecall;
    function Check: Integer; safecall;
    function GetExcessBodyArray: OleVariant; safecall;
    function IGetExcessBodyArray: IBody2; safecall;
    function IGetExcessBodyCount: SYSINT; safecall;
    function CreateBaseFeature(const BodyIn: IDispatch): WordBool; safecall;
    function ICreateBaseFeature(const BodyIn: IBody2): WordBool; safecall;
    function DeleteFaces2(NumOfFaces: Integer; FaceList: OleVariant; Option: SYSINT): Integer; safecall;
    function IDeleteFaces2(NumOfFaces: Integer; var FaceList: IFace2; Option: SYSINT): Integer; safecall;
    function IAddVertexPoint(var Point: Double): IVertex; safecall;
    function AddVertexPoint(Point: OleVariant): IDispatch; safecall;
    function GetExtremePoint(X: Double; Y: Double; Z: Double; out Outx: Double; out Outy: Double; 
                             out Outz: Double): WordBool; safecall;
    function GetType: Integer; safecall;
    procedure IDeleteFaces3(NumOfFaces: Integer; var FaceList: IFace2; Option: Integer; 
                            DoLocalCheck: WordBool; var LocalCheckResult: WordBool); safecall;
    procedure SetCurrentSurface(const SurfaceIn: IDispatch); safecall;
    procedure ISetCurrentSurface(const SurfaceIn: ISurface); safecall;
    function DraftBody(NumOfFaces: Integer; FaceList: OleVariant; EdgeList: OleVariant; 
                       DraftAngle: Double; Dir: OleVariant): WordBool; safecall;
    function IDraftBody(NumOfFaces: Integer; var FaceList: IFace2; var EdgeList: IEdge; 
                        DraftAngle: Double; var Dir: Double): WordBool; safecall;
    function DeleteBlends(NumOfFaces: Integer; FaceList: OleVariant): WordBool; safecall;
    function IDeleteBlends(NumOfFaces: Integer; var FaceList: IFace2): WordBool; safecall;
    function Operations2(OperationType: SYSINT; const ToolBody: IDispatch; out ErrorCode: Integer): OleVariant; safecall;
    function IOperations2(OperationType: SYSINT; const ToolBody: IBody2; out ErrorCode: Integer): IEnumBodies2; safecall;
    function GetBodyBox: OleVariant; safecall;
    function DeleteBlends2(NumOfFaces: Integer; FaceList: OleVariant; DoLocalCheck: WordBool): WordBool; safecall;
    function IDeleteBlends2(NumOfFaces: Integer; var FaceList: IFace2; DoLocalCheck: WordBool): WordBool; safecall;
    function GetTessellation(FaceList: OleVariant): IDispatch; safecall;
    function IGetTessellation(NumOfFaces: Integer; var FaceList: IFace2): ITessellation; safecall;
    function Get_Visible: WordBool; safecall;
    function MatchedBoolean(OperationType: SYSINT; const ToolBody: IDispatch; 
                            NumOfMatchingFaces: Integer; FaceList1: OleVariant; 
                            FaceList2: OleVariant; out ErrorCode: Integer): OleVariant; safecall;
    function IMatchedBoolean(OperationType: SYSINT; const ToolBody: IBody2; 
                             NumOfMatchingFaces: Integer; var FaceList1: IFace2; 
                             var FaceList2: IFace2; out ErrorCode: Integer): IEnumBodies2; safecall;
    function GetEdgeCount: Integer; safecall;
    function CreateRuledSurface(const Curve1: IDispatch; const Curve2: IDispatch; 
                                ApexPoint: OleVariant): IDispatch; safecall;
    function ICreateRuledSurface(const Curve1: ICurve; const Curve2: ICurve; var ApexPoint: Double): ISurface; safecall;
    function AddProfileBsplineByPts(NumPoints: Integer; PointArray: OleVariant): IDispatch; safecall;
    function IAddProfileBsplineByPts(NumPoints: Integer; var PointArray: Double): ICurve; safecall;
    function GetEdges: OleVariant; safecall;
    function IGetEdges(Count: Integer): IEdge; safecall;
    function ApplyTransform(const Xform: IMathTransform): WordBool; safecall;
    function Select(Append: WordBool; Mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function MatchedBoolean2(OperationType: SYSINT; ToolBody: OleVariant; 
                             NumOfMatchingFaces: Integer; FaceList1: OleVariant; 
                             FaceList2: OleVariant; out ErrorCode: Integer): OleVariant; safecall;
    function IMatchedBoolean2(OperationType: SYSINT; ToolBodyCount: Integer; 
                              var ToolBodyArr: IBody2; NumOfMatchingFaces: Integer; 
                              var FaceList1: IFace2; var FaceList2: IFace2; out ErrorCode: Integer): IEnumBodies2; safecall;
    procedure HideBody(BHide: WordBool); safecall;
    function Get_IsSafe: WordBool; safecall;
    function GetSafeBody: IBody2; safecall;
    function GetProcessedBody2(MaxUAngle: Double; MaxVAngle: Double): IBody2; safecall;
    function FindAttribute(const AttributeDef: IAttributeDef; WhichOne: Integer): IAttribute; safecall;
    function MatchedBoolean3(OperationType: SYSINT; ToolBody: OleVariant; 
                             NumOfMatchingFaces: Integer; FaceList1: OleVariant; 
                             FaceList2: OleVariant; out ErrorCode: Integer): OleVariant; safecall;
    function IMatchedBoolean3(OperationType: SYSINT; ToolBodyCount: Integer; 
                              var ToolBodyArr: IBody2; NumOfMatchingFaces: Integer; 
                              var FaceList1: IFace2; var FaceList2: IFace2; out ErrorCode: Integer): IEnumBodies2; safecall;
    function GetSelectionId: WideString; safecall;
    function Get_MaterialPropertyValues2: OleVariant; safecall;
    procedure Set_MaterialPropertyValues2(Retval: OleVariant); safecall;
    function Get_IMaterialPropertyValues2: Double; safecall;
    procedure Set_IMaterialPropertyValues2(var Retval: Double); safecall;
    function AddPropertyExtension2(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension2(ID: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension2; safecall;
    function GetMaterialIdName2: WideString; safecall;
    function SetMaterialIdName2(const Name: WideString): WordBool; safecall;
    function GetMaterialUserName2: WideString; safecall;
    function SetMaterialUserName2(const Name: WideString): WordBool; safecall;
    function IGetMaterialPropertyValuesForFace(const FaceIn: IDispatch): Double; safecall;
    procedure Display2(const Part: IPartDoc; Color: Integer; Option: Integer); safecall;
    function IsTemporaryBody: WordBool; safecall;
    function Check2: Integer; safecall;
    function CreatePlanarTrimSurfaceDLL(Points: OleVariant; Normal: OleVariant): WordBool; safecall;
    function DeleteFaces3(FaceList: OleVariant; Option: Integer; DoLocalCheck: WordBool; 
                          out LocalCheckResult: WordBool): WordBool; safecall;
    function Diagnose: IDiagnoseResult; safecall;
    function Get_Check3: IFaultEntity; safecall;
    function DeleteFacesMakeSheetBodies(FaceList: OleVariant): OleVariant; safecall;
    function IDeleteFacesMakeSheetBodiesCount(FaceCount: Integer; var FaceList: IFace2): Integer; safecall;
    function IDeleteFacesMakeSheetBodies(FaceCount: Integer; var FaceList: IFace2; 
                                         SheetCount: Integer): IBody2; safecall;
    function GetTexture(const Config_name: WideString): ITexture; safecall;
    function SetTexture(const Config_name: WideString; const TextureIn: ITexture): WordBool; safecall;
    function RemoveTexture(const Config_name: WideString): WordBool; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Name: WideString); safecall;
    function MakeOffset(Distance: Double; Direction: WordBool): IBody2; safecall;
    function ExtendSurface(EdgesToExtend: OleVariant; ExtendLinear: WordBool; 
                           EndCondition: Integer; Dist: Double; const PUpToVtx: IVertex; 
                           const PUpToFace: IFace): IBody2; safecall;
    function IExtendSurface(EdgeCount: Integer; var EdgesToExtend: IEdge; ExtendLinear: WordBool; 
                            EndCondition: Integer; Dist: Double; const PUpToVtx: IVertex; 
                            const PUpToFace: IFace): IBody2; safecall;
    function OffsetPlanarWireBody(Distance: Double; const Normal: IMathVector; Option: Integer): IBody2; safecall;
    function AddConstantFillets(Radius: Double; EdgesToFillet: OleVariant): OleVariant; safecall;
    function DraftBody2(NumOfFaces: Integer; FaceList: OleVariant; EdgeList: OleVariant; 
                        const BasePoint: IDispatch; DraftAngle: Double; Dir: OleVariant): WordBool; safecall;
    function IDraftBody2(NumOfFaces: Integer; var FaceList: IFace2; var EdgeList: IEdge; 
                         const BasePoint: IMathPoint; DraftAngle: Double; var Dir: Double): WordBool; safecall;
    function Negate: WordBool; safecall;
    function Display3(const Component: IDispatch; Color: Integer; Option: Integer): Integer; safecall;
    function MinimumRadius: Double; safecall;
    procedure ResetEdgeTolerances; safecall;
    function Select2(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    function GetVertexCount: Integer; safecall;
    function GetVertices: OleVariant; safecall;
    function IGetVertices(Count: Integer): IVertex; safecall;
    function GetCoincidenceTransform(const BodyDispIn: IDispatch; out Xform: IMathTransform): WordBool; safecall;
    function IsPatternSeed(const BodyDispIn: IDispatch): WordBool; safecall;
    function RemoveMaterialProperty(Config_opt: Integer; Config_names: OleVariant): WordBool; safecall;
    function IRemoveMaterialProperty(Config_opt: Integer; Config_count: Integer; 
                                     var Config_names: WideString): WordBool; safecall;
    function MatchedBoolean4(OperationType: SYSINT; ToolBody: OleVariant; 
                             NumOfMatchingFaces: Integer; FaceList1: OleVariant; 
                             FaceList2: OleVariant; MatchingTolerance: Double; 
                             out ErrorCode: Integer): OleVariant; safecall;
    function IMatchedBoolean4(OperationType: SYSINT; ToolBodyCount: Integer; 
                              var ToolBodyArr: IBody2; NumOfMatchingFaces: Integer; 
                              var FaceList1: IFace2; var FaceList2: IFace2; 
                              MatchingTolerance: Double; out ErrorCode: Integer): IEnumBodies2; safecall;
    function GetFaces: OleVariant; safecall;
    function IGetFaces(Count: Integer): IFace2; safecall;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
    property Visible: WordBool read Get_Visible;
    property IsSafe: WordBool read Get_IsSafe;
    property MaterialPropertyValues2: OleVariant read Get_MaterialPropertyValues2 write Set_MaterialPropertyValues2;
    property Check3: IFaultEntity read Get_Check3;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  IBody2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A075BFD-9962-4431-8321-7AF4903C55AD}
// *********************************************************************//
  IBody2Disp = dispinterface
    ['{3A075BFD-9962-4431-8321-7AF4903C55AD}']
    function GetFirstFace: IDispatch; dispid 1;
    function IGetFirstFace: IFace2; dispid 20;
    function GetFaceCount: Integer; dispid 2;
    function CreateNewSurface: IDispatch; dispid 3;
    function ICreateNewSurface: ISurface; dispid 21;
    function CreateBodyFromSurfaces: WordBool; dispid 4;
    function CreatePlanarSurface(VRootPoint: OleVariant; VNormal: OleVariant): IDispatch; dispid 5;
    function ICreatePlanarSurface(VRootPoint: OleVariant; VNormal: OleVariant): ISurface; dispid 22;
    function CreateRevolutionSurface(const ProfileCurve: IDispatch; AxisPoint: OleVariant; 
                                     AxisDirection: OleVariant; ProfileEndPtParams: OleVariant): IDispatch; dispid 6;
    function ICreateRevolutionSurface(const ProfileCurve: ICurve; AxisPoint: OleVariant; 
                                      AxisDirection: OleVariant; ProfileEndPtParams: OleVariant): ISurface; dispid 23;
    function CreateBsplineSurface(Props: OleVariant; UKnots: OleVariant; VKnots: OleVariant; 
                                  CtrlPtCoords: OleVariant): IDispatch; dispid 7;
    function ICreateBsplineSurface(Props: OleVariant; UKnots: OleVariant; VKnots: OleVariant; 
                                   CtrlPtCoords: OleVariant): ISurface; dispid 24;
    function CreateTrimmedSurface: WordBool; dispid 8;
    function AddProfileLine(RootPoint: OleVariant; Direction: OleVariant): IDispatch; dispid 9;
    function IAddProfileLine(RootPoint: OleVariant; Direction: OleVariant): ICurve; dispid 25;
    function AddProfileArc(Center: OleVariant; Axis: OleVariant; Radius: Double; 
                           StartPoint: OleVariant; EndPoint: OleVariant): IDispatch; dispid 10;
    function IAddProfileArc(Center: OleVariant; Axis: OleVariant; Radius: Double; 
                            StartPoint: OleVariant; EndPoint: OleVariant): ICurve; dispid 26;
    function AddProfileBspline(Props: OleVariant; Knots: OleVariant; CtrlPtCoords: OleVariant): IDispatch; dispid 11;
    function IAddProfileBspline(Props: OleVariant; Knots: OleVariant; CtrlPtCoords: OleVariant): ICurve; dispid 27;
    function CreateExtrusionSurface(const ProfileCurve: IDispatch; AxisDirection: OleVariant): IDispatch; dispid 12;
    function ICreateExtrusionSurface(const ProfileCurve: ICurve; AxisDirection: OleVariant): ISurface; dispid 28;
    function GetFirstSelectedFace: IDispatch; dispid 13;
    function IGetFirstSelectedFace: IFace2; dispid 29;
    function GetNextSelectedFace: IDispatch; dispid 14;
    function IGetNextSelectedFace: IFace2; dispid 30;
    function GetSelectedFaceCount: Integer; dispid 15;
    function CreateBoundedSurface(UOpt: WordBool; VOpt: WordBool; UvParams: OleVariant): WordBool; dispid 16;
    function GetIgesErrorCount: Integer; dispid 17;
    function GetIgesErrorCode(Index: Integer): Integer; dispid 18;
    function Copy: IDispatch; dispid 19;
    function ICopy: IBody2; dispid 31;
    function EnumFaces: IEnumFaces2; dispid 32;
    function CreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IDispatch; dispid 33;
    function ICreateBodyFromFaces(NumOfFaces: Integer; FaceList: OleVariant): IBody2; dispid 34;
    function DeleteFaces(NumOfFaces: Integer; FaceList: OleVariant): WordBool; dispid 35;
    procedure Display(const Part: IDispatch; Color: Integer); dispid 36;
    procedure IDisplay(const Part: IPartDoc; Color: Integer); dispid 37;
    procedure Hide(const Part: IDispatch); dispid 38;
    procedure IHide(const Part: IPartDoc); dispid 39;
    function ICreatePlanarSurfaceDLL(var RootPoint: Double; var Normal: Double): ISurface; dispid 40;
    function ICreateRevolutionSurfaceDLL(const ProfileCurve: ICurve; var AxisPoint: Double; 
                                         var AxisDirection: Double; var ProfileEndPtParams: Double): ISurface; dispid 41;
    function IAddProfileLineDLL(var RootPoint: Double; var Direction: Double): ICurve; dispid 42;
    function IAddProfileArcDLL(var Center: Double; var Axis: Double; Radius: Double; 
                               var StartPoint: Double; var EndPoint: Double): ICurve; dispid 43;
    function ICreateBsplineSurfaceDLL(var Properties: Integer; var UKnotArray: Double; 
                                      var VKnotArray: Double; var ControlPointCoordArray: Double): ISurface; dispid 44;
    function IAddProfileBsplineDLL(var Properties: Integer; var KnotArray: Double; 
                                   var ControlPointCoordArray: Double): ICurve; dispid 45;
    function ICreateExtrusionSurfaceDLL(const ProfileCurve: ICurve; var AxisDirection: Double): ISurface; dispid 46;
    procedure ICreateBoundedSurface(UOpt: WordBool; VOpt: WordBool; var UvParams: Double); dispid 47;
    procedure ICombineVolumes(const ToolBody: IBody2); dispid 48;
    function ISectionBySheet(const Sheet: IBody2; NumMaxSections: Integer; 
                             var SectionedBodies: IBody2): Integer; dispid 49;
    procedure IGetBodyBox(var BoxCorners: Double); dispid 50;
    procedure SetIgesInfo(const SystemName: WideString; Granularity: Double; 
                          AttemptKnitting: WordBool); dispid 51;
    procedure DisplayWireFrameXOR(const Part: IDispatch; Color: Integer); dispid 52;
    procedure IDisplayWireFrameXOR(const Part: IPartDoc; Color: Integer); dispid 53;
    procedure Save(const StreamIn: IUnknown); dispid 54;
    procedure ISave(const StreamIn: IUnknown); dispid 55;
    function CreateBlendSurface(const Surface1: IDispatch; Range1: Double; 
                                const Surface2: IDispatch; Range2: Double; StartVec: OleVariant; 
                                EndVec: OleVariant; HaveHelpVec: SYSINT; HelpVec: OleVariant; 
                                HaveHelpBox: SYSINT; HelpBox: OleVariant): IDispatch; dispid 56;
    function ICreateBlendSurface(const Surface1: ISurface; Range1: Double; 
                                 const Surface2: ISurface; Range2: Double; var StartVec: Double; 
                                 var EndVec: Double; HaveHelpVec: SYSINT; var HelpVec: Double; 
                                 HaveHelpBox: SYSINT; var HelpBox: Double): ISurface; dispid 57;
    function CreateOffsetSurface(const SurfaceIn: IDispatch; Distance: Double): IDispatch; dispid 58;
    function ICreateOffsetSurface(const SurfaceIn: ISurface; Distance: Double): ISurface; dispid 59;
    function RemoveRedundantTopology: WordBool; dispid 60;
    function GetIntersectionEdges(const ToolBodyIn: IDispatch): OleVariant; dispid 61;
    function IGetIntersectionEdges(const ToolBodyIn: IBody2): IEdge; dispid 62;
    function IGetIntersectionEdgeCount(const ToolBodyIn: IBody2): Integer; dispid 63;
    procedure RemoveFacesFromSheet(NumOfFaces: Integer; FacesToRemove: OleVariant); dispid 64;
    procedure IRemoveFacesFromSheet(NumOfFaces: Integer; var FacesToRemove: IFace2); dispid 65;
    procedure ICreatePlanarTrimSurfaceDLL(VertexCount: Integer; var Points: Double; 
                                          var Normal: Double); dispid 66;
    property MaterialPropertyValues: OleVariant dispid 67;
    function IMaterialPropertyValues: Double; dispid 68;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 69;
    function GetPropertyExtension(ID: Integer): OleVariant; dispid 70;
    procedure ResetPropertyExtension; dispid 71;
    function GetMaterialIdName: WideString; dispid 72;
    function SetMaterialIdName(const Name: WideString): WordBool; dispid 73;
    function GetMaterialUserName: WideString; dispid 74;
    function SetMaterialUserName(const Name: WideString): WordBool; dispid 75;
    function GetMassProperties(Density: Double): OleVariant; dispid 76;
    function IGetMassProperties(Density: Double): Double; dispid 77;
    function ICreatePsplineSurfaceDLL(Dim: Integer; Uorder: Integer; VOrder: Integer; 
                                      Ncol: Integer; Nrow: Integer; var Coeffs: Double; 
                                      Basis: Integer; var Xform: Double; ScaleFactor: Double): ISurface; dispid 78;
    function SetXform(XformIn: OleVariant): WordBool; dispid 79;
    function ISetXform(var XformIn: Double): WordBool; dispid 80;
    function CreateTempBodyFromSurfaces: IDispatch; dispid 81;
    function ICreateTempBodyFromSurfaces: IBody2; dispid 82;
    function Operations(OperationType: SYSINT; const ToolBody: IDispatch; NumMaxSections: Integer): OleVariant; dispid 83;
    function IOperations(OperationType: SYSINT; const ToolBody: IBody2; NumMaxSections: Integer; 
                         var ResultingBodies: IBody2): Integer; dispid 84;
    function GetSheetBody(Index: SYSINT): IDispatch; dispid 85;
    function IGetSheetBody(Index: SYSINT): IBody2; dispid 86;
    function GetProcessedBody: IDispatch; dispid 87;
    function IGetProcessedBody: IBody2; dispid 88;
    function GetProcessedBodyWithSelFace: IDispatch; dispid 89;
    function IGetProcessedBodyWithSelFace: IBody2; dispid 90;
    function Check: Integer; dispid 91;
    function GetExcessBodyArray: OleVariant; dispid 92;
    function IGetExcessBodyArray: IBody2; dispid 93;
    function IGetExcessBodyCount: SYSINT; dispid 94;
    function CreateBaseFeature(const BodyIn: IDispatch): WordBool; dispid 95;
    function ICreateBaseFeature(const BodyIn: IBody2): WordBool; dispid 96;
    function DeleteFaces2(NumOfFaces: Integer; FaceList: OleVariant; Option: SYSINT): Integer; dispid 97;
    function IDeleteFaces2(NumOfFaces: Integer; var FaceList: IFace2; Option: SYSINT): Integer; dispid 98;
    function IAddVertexPoint(var Point: Double): IVertex; dispid 99;
    function AddVertexPoint(Point: OleVariant): IDispatch; dispid 100;
    function GetExtremePoint(X: Double; Y: Double; Z: Double; out Outx: Double; out Outy: Double; 
                             out Outz: Double): WordBool; dispid 101;
    function GetType: Integer; dispid 102;
    procedure IDeleteFaces3(NumOfFaces: Integer; var FaceList: IFace2; Option: Integer; 
                            DoLocalCheck: WordBool; var LocalCheckResult: WordBool); dispid 103;
    procedure SetCurrentSurface(const SurfaceIn: IDispatch); dispid 104;
    procedure ISetCurrentSurface(const SurfaceIn: ISurface); dispid 105;
    function DraftBody(NumOfFaces: Integer; FaceList: OleVariant; EdgeList: OleVariant; 
                       DraftAngle: Double; Dir: OleVariant): WordBool; dispid 106;
    function IDraftBody(NumOfFaces: Integer; var FaceList: IFace2; var EdgeList: IEdge; 
                        DraftAngle: Double; var Dir: Double): WordBool; dispid 107;
    function DeleteBlends(NumOfFaces: Integer; FaceList: OleVariant): WordBool; dispid 108;
    function IDeleteBlends(NumOfFaces: Integer; var FaceList: IFace2): WordBool; dispid 109;
    function Operations2(OperationType: SYSINT; const ToolBody: IDispatch; out ErrorCode: Integer): OleVariant; dispid 110;
    function IOperations2(OperationType: SYSINT; const ToolBody: IBody2; out ErrorCode: Integer): IEnumBodies2; dispid 111;
    function GetBodyBox: OleVariant; dispid 112;
    function DeleteBlends2(NumOfFaces: Integer; FaceList: OleVariant; DoLocalCheck: WordBool): WordBool; dispid 113;
    function IDeleteBlends2(NumOfFaces: Integer; var FaceList: IFace2; DoLocalCheck: WordBool): WordBool; dispid 114;
    function GetTessellation(FaceList: OleVariant): IDispatch; dispid 115;
    function IGetTessellation(NumOfFaces: Integer; var FaceList: IFace2): ITessellation; dispid 116;
    property Visible: WordBool readonly dispid 117;
    function MatchedBoolean(OperationType: SYSINT; const ToolBody: IDispatch; 
                            NumOfMatchingFaces: Integer; FaceList1: OleVariant; 
                            FaceList2: OleVariant; out ErrorCode: Integer): OleVariant; dispid 118;
    function IMatchedBoolean(OperationType: SYSINT; const ToolBody: IBody2; 
                             NumOfMatchingFaces: Integer; var FaceList1: IFace2; 
                             var FaceList2: IFace2; out ErrorCode: Integer): IEnumBodies2; dispid 119;
    function GetEdgeCount: Integer; dispid 120;
    function CreateRuledSurface(const Curve1: IDispatch; const Curve2: IDispatch; 
                                ApexPoint: OleVariant): IDispatch; dispid 121;
    function ICreateRuledSurface(const Curve1: ICurve; const Curve2: ICurve; var ApexPoint: Double): ISurface; dispid 122;
    function AddProfileBsplineByPts(NumPoints: Integer; PointArray: OleVariant): IDispatch; dispid 123;
    function IAddProfileBsplineByPts(NumPoints: Integer; var PointArray: Double): ICurve; dispid 124;
    function GetEdges: OleVariant; dispid 125;
    function IGetEdges(Count: Integer): IEdge; dispid 126;
    function ApplyTransform(const Xform: IMathTransform): WordBool; dispid 127;
    function Select(Append: WordBool; Mark: Integer): WordBool; dispid 128;
    function DeSelect: WordBool; dispid 129;
    function MatchedBoolean2(OperationType: SYSINT; ToolBody: OleVariant; 
                             NumOfMatchingFaces: Integer; FaceList1: OleVariant; 
                             FaceList2: OleVariant; out ErrorCode: Integer): OleVariant; dispid 130;
    function IMatchedBoolean2(OperationType: SYSINT; ToolBodyCount: Integer; 
                              var ToolBodyArr: IBody2; NumOfMatchingFaces: Integer; 
                              var FaceList1: IFace2; var FaceList2: IFace2; out ErrorCode: Integer): IEnumBodies2; dispid 131;
    procedure HideBody(BHide: WordBool); dispid 132;
    property IsSafe: WordBool readonly dispid 133;
    function GetSafeBody: IBody2; dispid 134;
    function GetProcessedBody2(MaxUAngle: Double; MaxVAngle: Double): IBody2; dispid 135;
    function FindAttribute(const AttributeDef: IAttributeDef; WhichOne: Integer): IAttribute; dispid 136;
    function MatchedBoolean3(OperationType: SYSINT; ToolBody: OleVariant; 
                             NumOfMatchingFaces: Integer; FaceList1: OleVariant; 
                             FaceList2: OleVariant; out ErrorCode: Integer): OleVariant; dispid 137;
    function IMatchedBoolean3(OperationType: SYSINT; ToolBodyCount: Integer; 
                              var ToolBodyArr: IBody2; NumOfMatchingFaces: Integer; 
                              var FaceList1: IFace2; var FaceList2: IFace2; out ErrorCode: Integer): IEnumBodies2; dispid 138;
    function GetSelectionId: WideString; dispid 139;
    property MaterialPropertyValues2: OleVariant dispid 140;
    function IMaterialPropertyValues2: Double; dispid 141;
    function AddPropertyExtension2(PropertyExtension: OleVariant): Integer; dispid 142;
    function GetPropertyExtension2(ID: Integer): OleVariant; dispid 143;
    procedure ResetPropertyExtension2; dispid 144;
    function GetMaterialIdName2: WideString; dispid 145;
    function SetMaterialIdName2(const Name: WideString): WordBool; dispid 146;
    function GetMaterialUserName2: WideString; dispid 147;
    function SetMaterialUserName2(const Name: WideString): WordBool; dispid 148;
    function IGetMaterialPropertyValuesForFace(const FaceIn: IDispatch): Double; dispid 149;
    procedure Display2(const Part: IPartDoc; Color: Integer; Option: Integer); dispid 150;
    function IsTemporaryBody: WordBool; dispid 151;
    function Check2: Integer; dispid 152;
    function CreatePlanarTrimSurfaceDLL(Points: OleVariant; Normal: OleVariant): WordBool; dispid 153;
    function DeleteFaces3(FaceList: OleVariant; Option: Integer; DoLocalCheck: WordBool; 
                          out LocalCheckResult: WordBool): WordBool; dispid 154;
    function Diagnose: IDiagnoseResult; dispid 155;
    property Check3: IFaultEntity readonly dispid 156;
    function DeleteFacesMakeSheetBodies(FaceList: OleVariant): OleVariant; dispid 157;
    function IDeleteFacesMakeSheetBodiesCount(FaceCount: Integer; var FaceList: IFace2): Integer; dispid 158;
    function IDeleteFacesMakeSheetBodies(FaceCount: Integer; var FaceList: IFace2; 
                                         SheetCount: Integer): IBody2; dispid 159;
    function GetTexture(const Config_name: WideString): ITexture; dispid 160;
    function SetTexture(const Config_name: WideString; const TextureIn: ITexture): WordBool; dispid 161;
    function RemoveTexture(const Config_name: WideString): WordBool; dispid 162;
    property Name: WideString dispid 163;
    function MakeOffset(Distance: Double; Direction: WordBool): IBody2; dispid 164;
    function ExtendSurface(EdgesToExtend: OleVariant; ExtendLinear: WordBool; 
                           EndCondition: Integer; Dist: Double; const PUpToVtx: IVertex; 
                           const PUpToFace: IFace): IBody2; dispid 165;
    function IExtendSurface(EdgeCount: Integer; var EdgesToExtend: IEdge; ExtendLinear: WordBool; 
                            EndCondition: Integer; Dist: Double; const PUpToVtx: IVertex; 
                            const PUpToFace: IFace): IBody2; dispid 166;
    function OffsetPlanarWireBody(Distance: Double; const Normal: IMathVector; Option: Integer): IBody2; dispid 167;
    function AddConstantFillets(Radius: Double; EdgesToFillet: OleVariant): OleVariant; dispid 168;
    function DraftBody2(NumOfFaces: Integer; FaceList: OleVariant; EdgeList: OleVariant; 
                        const BasePoint: IDispatch; DraftAngle: Double; Dir: OleVariant): WordBool; dispid 169;
    function IDraftBody2(NumOfFaces: Integer; var FaceList: IFace2; var EdgeList: IEdge; 
                         const BasePoint: IMathPoint; DraftAngle: Double; var Dir: Double): WordBool; dispid 170;
    function Negate: WordBool; dispid 171;
    function Display3(const Component: IDispatch; Color: Integer; Option: Integer): Integer; dispid 172;
    function MinimumRadius: Double; dispid 173;
    procedure ResetEdgeTolerances; dispid 174;
    function Select2(Append: WordBool; const Data: ISelectData): WordBool; dispid 175;
    function GetVertexCount: Integer; dispid 176;
    function GetVertices: OleVariant; dispid 177;
    function IGetVertices(Count: Integer): IVertex; dispid 178;
    function GetCoincidenceTransform(const BodyDispIn: IDispatch; out Xform: IMathTransform): WordBool; dispid 179;
    function IsPatternSeed(const BodyDispIn: IDispatch): WordBool; dispid 180;
    function RemoveMaterialProperty(Config_opt: Integer; Config_names: OleVariant): WordBool; dispid 181;
    function IRemoveMaterialProperty(Config_opt: Integer; Config_count: Integer; 
                                     var Config_names: WideString): WordBool; dispid 182;
    function MatchedBoolean4(OperationType: SYSINT; ToolBody: OleVariant; 
                             NumOfMatchingFaces: Integer; FaceList1: OleVariant; 
                             FaceList2: OleVariant; MatchingTolerance: Double; 
                             out ErrorCode: Integer): OleVariant; dispid 183;
    function IMatchedBoolean4(OperationType: SYSINT; ToolBodyCount: Integer; 
                              var ToolBodyArr: IBody2; NumOfMatchingFaces: Integer; 
                              var FaceList1: IFace2; var FaceList2: IFace2; 
                              MatchingTolerance: Double; out ErrorCode: Integer): IEnumBodies2; dispid 184;
    function GetFaces: OleVariant; dispid 185;
    function IGetFaces(Count: Integer): IFace2; dispid 186;
  end;

// *********************************************************************//
// Interface: IFace2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4A8BA4D8-DA25-4B75-8E2D-4922B74D81ED}
// *********************************************************************//
  IFace2 = interface(IDispatch)
    ['{4A8BA4D8-DA25-4B75-8E2D-4922B74D81ED}']
    function Get_Normal: OleVariant; safecall;
    procedure Set_Normal(Retval: OleVariant); safecall;
    function Get_MaterialUserName: WideString; safecall;
    procedure Set_MaterialUserName(const Retval: WideString); safecall;
    function Get_MaterialIdName: WideString; safecall;
    procedure Set_MaterialIdName(const Retval: WideString); safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(Retval: OleVariant); safecall;
    function Get_INormal: Double; safecall;
    procedure Set_INormal(var Retval: Double); safecall;
    function GetNextFace: IDispatch; safecall;
    function IGetNextFace: IFace2; safecall;
    function GetSurface: IDispatch; safecall;
    function IGetSurface: ISurface; safecall;
    function GetEdgeCount: Integer; safecall;
    function GetEdges: OleVariant; safecall;
    function IGetEdges: IEdge; safecall;
    function GetFeature: IDispatch; safecall;
    function IGetFeature: IFeature; safecall;
    function GetFeatureId: Integer; safecall;
    function GetTrimCurves(WantCubic: WordBool): OleVariant; safecall;
    function GetUVBounds: OleVariant; safecall;
    function FaceInSurfaceSense: WordBool; safecall;
    function GetLoopCount: Integer; safecall;
    function GetFirstLoop: IDispatch; safecall;
    function IGetFirstLoop: ILoop2; safecall;
    function IsSame(const FaceIn: IDispatch): WordBool; safecall;
    function IIsSame(const FaceIn: IFace2): WordBool; safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(ID: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetTessTriangles(NoConversion: WordBool): OleVariant; safecall;
    function GetTessNorms: OleVariant; safecall;
    function GetTessTriStrips(NoConversion: WordBool): OleVariant; safecall;
    function GetTessTriStripNorms: OleVariant; safecall;
    function EnumLoops: IEnumLoops2; safecall;
    function EnumEdges: IEnumEdges; safecall;
    function GetBody: IDispatch; safecall;
    function IGetBody: IBody2; safecall;
    function IGetTessTriangles(NoConversion: WordBool): Single; safecall;
    function IGetTessNorms: Single; safecall;
    function GetTessTriangleCount: Integer; safecall;
    function IGetTessTriStrips(NoConversion: WordBool): Single; safecall;
    function IGetTessTriStripNorms: Single; safecall;
    function GetTessTriStripSize: Integer; safecall;
    function IGetUVBounds: Double; safecall;
    function GetClosestPointOn(X: Double; Y: Double; Z: Double): OleVariant; safecall;
    function IGetClosestPointOn(X: Double; Y: Double; Z: Double): Double; safecall;
    procedure Highlight(State: WordBool); safecall;
    procedure IHighlight(State: WordBool); safecall;
    function GetTrimCurveTopology: OleVariant; safecall;
    function IGetTrimCurveTopology: IDispatch; safecall;
    function GetTrimCurveTopologyCount: Integer; safecall;
    function GetTrimCurveTopologyTypes: OleVariant; safecall;
    function IGetTrimCurveTopologyTypes: Integer; safecall;
    function RemoveRedundantTopology: WordBool; safecall;
    function CreateSheetBodyByFaceExtension(BoxLowIn: OleVariant; BoxHighIn: OleVariant): IDispatch; safecall;
    function ICreateSheetBodyByFaceExtension(var BoxLowIn: Double; var BoxHighIn: Double): IBody2; safecall;
    function GetArea: Double; safecall;
    function GetBox: OleVariant; safecall;
    function IGetBox: Double; safecall;
    function RemoveInnerLoops(NumOfLoops: Integer; InnerLoopsIn: OleVariant): IDispatch; safecall;
    function IRemoveInnerLoops(NumOfLoops: Integer; var InnerLoopsIn: ILoop2): IFace2; safecall;
    function CreateSheetBody: IDispatch; safecall;
    function ICreateSheetBody: IBody2; safecall;
    function GetSilhoutteEdges(var Root: Double; var Normal: Double): OleVariant; safecall;
    function IGetSilhoutteEdges(var Root: Double; var Normal: Double): IEdge; safecall;
    function IGetSilhoutteEdgeCount(var Root: Double; var Normal: Double): Integer; safecall;
    function IGetTrimCurveSize(WantCubic: WordBool): Integer; safecall;
    function IGetTrimCurve: Double; safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var Retval: Double); safecall;
    function GetFaceId: SYSINT; safecall;
    procedure SetFaceId(IdIn: SYSINT); safecall;
    function IGetTrimCurveSize2(WantCubic: Integer; WantNRational: Integer): Integer; safecall;
    function GetSilhoutteEdgesVB(Xroot: Double; Yroot: Double; Zroot: Double; Xnormal: Double; 
                                 Ynormal: Double; Znormal: Double): OleVariant; safecall;
    procedure RemoveFaceId(IdIn: SYSINT); safecall;
    function GetTrimCurves2(WantCubic: WordBool; WantNRational: WordBool): OleVariant; safecall;
    function GetShellType: SYSINT; safecall;
    procedure IGetFacetData(FacetMesh: SYSINT; var NFacets: SYSINT; var NStrips: SYSINT; 
                            var StripVertexNums: SYSINT; var VertexCoords: Single; 
                            var NormalCoords: Single); safecall;
    function GetTessTriStripEdges: OleVariant; safecall;
    function IGetTessTriStripEdges: Integer; safecall;
    function IGetTessTriStripEdgeSize: Integer; safecall;
    function RemoveMaterialProperty: WordBool; safecall;
    function GetPatternSeedFeature: IDispatch; safecall;
    function IGetPatternSeedFeature: IFeature; safecall;
    procedure SetMaterialPropertyValues2(Material_values: OleVariant; Config_opt: Integer; 
                                         Config_names: OleVariant); safecall;
    procedure ISetMaterialPropertyValues2(var Material_values: Double; Config_opt: Integer; 
                                          Config_count: Integer; var Config_names: WideString); safecall;
    function GetMaterialPropertyValues2(Config_opt: Integer; Config_names: OleVariant): OleVariant; safecall;
    function IGetMaterialPropertyValues2(Config_opt: Integer; Config_count: Integer; 
                                         var Config_names: WideString): Double; safecall;
    function IGetTessTextures: Single; safecall;
    function RemoveMaterialProperty2(Config_opt: Integer; Config_names: OleVariant): WordBool; safecall;
    function IRemoveMaterialProperty2(Config_opt: Integer; Config_count: Integer; 
                                      var Config_names: WideString): WordBool; safecall;
    procedure ImprintCurve(const Curve: IDispatch; out NewEdges: OleVariant; 
                           out NewFaces: OleVariant); safecall;
    procedure ImprintCurveCount(const Curve: ICurve; out NewEdgeCount: Integer; 
                                out NewFaceCount: Integer); safecall;
    procedure IImprintCurve(const Curve: ICurve; NewEdgeCount: Integer; out NewEdges: IEdge; 
                            NewFaceCount: Integer; out NewFaces: IFace2); safecall;
    function Get_Check: IFaultEntity; safecall;
    function AttachSurface(const SurfIn: ISurface; SenseIn: WordBool): WordBool; safecall;
    function DetachSurface: WordBool; safecall;
    function GetTexture(const Config_name: WideString): ITexture; safecall;
    function SetTexture(const Config_name: WideString; const TextureIn: ITexture): WordBool; safecall;
    function RemoveTexture(const Config_name: WideString): WordBool; safecall;
    function GetTessTextures: OleVariant; safecall;
    function GetProjectedPointOn(const Point: IMathPoint; const Direction: IMathVector): IMathPoint; safecall;
    function IsCoincident(const FaceIn: IDispatch; Tolerance: Double): Integer; safecall;
    function IIsCoincident(const FaceIn: IFace2; Tolerance: Double): Integer; safecall;
    function GetDecalsCount: Integer; safecall;
    function GetAllDecalProperties: OleVariant; safecall;
    function IGetAllDecalProperties(Count: Integer): IFaceDecalProperties; safecall;
    procedure IGetDecalProperties(const PDecal: IDecal; 
                                  var pFaceDecalProperties: IFaceDecalProperties); safecall;
    function GetSeedFeature: IFeature; safecall;
    property Normal: OleVariant read Get_Normal write Set_Normal;
    property MaterialUserName: WideString read Get_MaterialUserName write Set_MaterialUserName;
    property MaterialIdName: WideString read Get_MaterialIdName write Set_MaterialIdName;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
    property Check: IFaultEntity read Get_Check;
  end;

// *********************************************************************//
// DispIntf:  IFace2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4A8BA4D8-DA25-4B75-8E2D-4922B74D81ED}
// *********************************************************************//
  IFace2Disp = dispinterface
    ['{4A8BA4D8-DA25-4B75-8E2D-4922B74D81ED}']
    property Normal: OleVariant dispid 1;
    property MaterialUserName: WideString dispid 14;
    property MaterialIdName: WideString dispid 15;
    property MaterialPropertyValues: OleVariant dispid 16;
    function INormal: Double; dispid 40;
    function GetNextFace: IDispatch; dispid 2;
    function IGetNextFace: IFace2; dispid 24;
    function GetSurface: IDispatch; dispid 3;
    function IGetSurface: ISurface; dispid 25;
    function GetEdgeCount: Integer; dispid 4;
    function GetEdges: OleVariant; dispid 5;
    function IGetEdges: IEdge; dispid 26;
    function GetFeature: IDispatch; dispid 6;
    function IGetFeature: IFeature; dispid 27;
    function GetFeatureId: Integer; dispid 7;
    function GetTrimCurves(WantCubic: WordBool): OleVariant; dispid 8;
    function GetUVBounds: OleVariant; dispid 9;
    function FaceInSurfaceSense: WordBool; dispid 10;
    function GetLoopCount: Integer; dispid 11;
    function GetFirstLoop: IDispatch; dispid 12;
    function IGetFirstLoop: ILoop2; dispid 28;
    function IsSame(const FaceIn: IDispatch): WordBool; dispid 13;
    function IIsSame(const FaceIn: IFace2): WordBool; dispid 29;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 17;
    function GetPropertyExtension(ID: Integer): OleVariant; dispid 18;
    procedure ResetPropertyExtension; dispid 19;
    function GetTessTriangles(NoConversion: WordBool): OleVariant; dispid 20;
    function GetTessNorms: OleVariant; dispid 21;
    function GetTessTriStrips(NoConversion: WordBool): OleVariant; dispid 22;
    function GetTessTriStripNorms: OleVariant; dispid 23;
    function EnumLoops: IEnumLoops2; dispid 30;
    function EnumEdges: IEnumEdges; dispid 31;
    function GetBody: IDispatch; dispid 32;
    function IGetBody: IBody2; dispid 33;
    function IGetTessTriangles(NoConversion: WordBool): Single; dispid 34;
    function IGetTessNorms: Single; dispid 35;
    function GetTessTriangleCount: Integer; dispid 36;
    function IGetTessTriStrips(NoConversion: WordBool): Single; dispid 37;
    function IGetTessTriStripNorms: Single; dispid 38;
    function GetTessTriStripSize: Integer; dispid 39;
    function IGetUVBounds: Double; dispid 41;
    function GetClosestPointOn(X: Double; Y: Double; Z: Double): OleVariant; dispid 42;
    function IGetClosestPointOn(X: Double; Y: Double; Z: Double): Double; dispid 43;
    procedure Highlight(State: WordBool); dispid 44;
    procedure IHighlight(State: WordBool); dispid 45;
    function GetTrimCurveTopology: OleVariant; dispid 46;
    function IGetTrimCurveTopology: IDispatch; dispid 47;
    function GetTrimCurveTopologyCount: Integer; dispid 48;
    function GetTrimCurveTopologyTypes: OleVariant; dispid 49;
    function IGetTrimCurveTopologyTypes: Integer; dispid 50;
    function RemoveRedundantTopology: WordBool; dispid 51;
    function CreateSheetBodyByFaceExtension(BoxLowIn: OleVariant; BoxHighIn: OleVariant): IDispatch; dispid 52;
    function ICreateSheetBodyByFaceExtension(var BoxLowIn: Double; var BoxHighIn: Double): IBody2; dispid 53;
    function GetArea: Double; dispid 54;
    function GetBox: OleVariant; dispid 55;
    function IGetBox: Double; dispid 56;
    function RemoveInnerLoops(NumOfLoops: Integer; InnerLoopsIn: OleVariant): IDispatch; dispid 57;
    function IRemoveInnerLoops(NumOfLoops: Integer; var InnerLoopsIn: ILoop2): IFace2; dispid 58;
    function CreateSheetBody: IDispatch; dispid 59;
    function ICreateSheetBody: IBody2; dispid 60;
    function GetSilhoutteEdges(var Root: Double; var Normal: Double): OleVariant; dispid 61;
    function IGetSilhoutteEdges(var Root: Double; var Normal: Double): IEdge; dispid 62;
    function IGetSilhoutteEdgeCount(var Root: Double; var Normal: Double): Integer; dispid 63;
    function IGetTrimCurveSize(WantCubic: WordBool): Integer; dispid 64;
    function IGetTrimCurve: Double; dispid 65;
    function IMaterialPropertyValues: Double; dispid 66;
    function GetFaceId: SYSINT; dispid 67;
    procedure SetFaceId(IdIn: SYSINT); dispid 68;
    function IGetTrimCurveSize2(WantCubic: Integer; WantNRational: Integer): Integer; dispid 69;
    function GetSilhoutteEdgesVB(Xroot: Double; Yroot: Double; Zroot: Double; Xnormal: Double; 
                                 Ynormal: Double; Znormal: Double): OleVariant; dispid 70;
    procedure RemoveFaceId(IdIn: SYSINT); dispid 71;
    function GetTrimCurves2(WantCubic: WordBool; WantNRational: WordBool): OleVariant; dispid 72;
    function GetShellType: SYSINT; dispid 73;
    procedure IGetFacetData(FacetMesh: SYSINT; var NFacets: SYSINT; var NStrips: SYSINT; 
                            var StripVertexNums: SYSINT; var VertexCoords: Single; 
                            var NormalCoords: Single); dispid 74;
    function GetTessTriStripEdges: OleVariant; dispid 75;
    function IGetTessTriStripEdges: Integer; dispid 76;
    function IGetTessTriStripEdgeSize: Integer; dispid 77;
    function RemoveMaterialProperty: WordBool; dispid 78;
    function GetPatternSeedFeature: IDispatch; dispid 79;
    function IGetPatternSeedFeature: IFeature; dispid 80;
    procedure SetMaterialPropertyValues2(Material_values: OleVariant; Config_opt: Integer; 
                                         Config_names: OleVariant); dispid 81;
    procedure ISetMaterialPropertyValues2(var Material_values: Double; Config_opt: Integer; 
                                          Config_count: Integer; var Config_names: WideString); dispid 82;
    function GetMaterialPropertyValues2(Config_opt: Integer; Config_names: OleVariant): OleVariant; dispid 83;
    function IGetMaterialPropertyValues2(Config_opt: Integer; Config_count: Integer; 
                                         var Config_names: WideString): Double; dispid 84;
    function IGetTessTextures: Single; dispid 85;
    function RemoveMaterialProperty2(Config_opt: Integer; Config_names: OleVariant): WordBool; dispid 86;
    function IRemoveMaterialProperty2(Config_opt: Integer; Config_count: Integer; 
                                      var Config_names: WideString): WordBool; dispid 87;
    procedure ImprintCurve(const Curve: IDispatch; out NewEdges: OleVariant; 
                           out NewFaces: OleVariant); dispid 88;
    procedure ImprintCurveCount(const Curve: ICurve; out NewEdgeCount: Integer; 
                                out NewFaceCount: Integer); dispid 89;
    procedure IImprintCurve(const Curve: ICurve; NewEdgeCount: Integer; out NewEdges: IEdge; 
                            NewFaceCount: Integer; out NewFaces: IFace2); dispid 90;
    property Check: IFaultEntity readonly dispid 91;
    function AttachSurface(const SurfIn: ISurface; SenseIn: WordBool): WordBool; dispid 92;
    function DetachSurface: WordBool; dispid 93;
    function GetTexture(const Config_name: WideString): ITexture; dispid 94;
    function SetTexture(const Config_name: WideString; const TextureIn: ITexture): WordBool; dispid 95;
    function RemoveTexture(const Config_name: WideString): WordBool; dispid 96;
    function GetTessTextures: OleVariant; dispid 97;
    function GetProjectedPointOn(const Point: IMathPoint; const Direction: IMathVector): IMathPoint; dispid 98;
    function IsCoincident(const FaceIn: IDispatch; Tolerance: Double): Integer; dispid 99;
    function IIsCoincident(const FaceIn: IFace2; Tolerance: Double): Integer; dispid 100;
    function GetDecalsCount: Integer; dispid 101;
    function GetAllDecalProperties: OleVariant; dispid 102;
    function IGetAllDecalProperties(Count: Integer): IFaceDecalProperties; dispid 103;
    procedure IGetDecalProperties(const PDecal: IDecal; 
                                  var pFaceDecalProperties: IFaceDecalProperties); dispid 104;
    function GetSeedFeature: IFeature; dispid 105;
  end;

// *********************************************************************//
// Interface: IEdge
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D42-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEdge = interface(IDispatch)
    ['{83A33D42-27C5-11CE-BFD4-00400513BB57}']
    function GetCurve: IDispatch; safecall;
    function IGetCurve: ICurve; safecall;
    function GetCurveParams: OleVariant; safecall;
    function IGetCurveParams: Double; safecall;
    function Evaluate(Parameter: Double): OleVariant; safecall;
    function IEvaluate(Parameter: Double): Double; safecall;
    function GetParameter(X: Double; Y: Double; Z: Double): OleVariant; safecall;
    function IGetParameter(X: Double; Y: Double; Z: Double): Double; safecall;
    function EdgeInFaceSense(const Facedisp: IDispatch): WordBool; safecall;
    function IEdgeInFaceSense(const Facedisp: IFace): WordBool; safecall;
    function GetTwoAdjacentFaces: OleVariant; safecall;
    procedure IGetTwoAdjacentFaces(out Face1: IFace; out Face2: IFace); safecall;
    function EnumCoEdges: IEnumCoEdges; safecall;
    function GetStartVertex: IDispatch; safecall;
    function IGetStartVertex: IVertex; safecall;
    function GetEndVertex: IDispatch; safecall;
    function IGetEndVertex: IVertex; safecall;
    function GetClosestPointOn(X: Double; Y: Double; Z: Double): OleVariant; safecall;
    function IGetClosestPointOn(X: Double; Y: Double; Z: Double): Double; safecall;
    function RemoveRedundantTopology: WordBool; safecall;
    function GetID: SYSINT; safecall;
    procedure SetId(IdIn: SYSINT); safecall;
    procedure RemoveId; safecall;
    function GetCurveParams2: OleVariant; safecall;
    function IGetCurveParams2: Double; safecall;
    function IsParamReversed: WordBool; safecall;
    procedure Highlight(State: WordBool); safecall;
    function GetCoEdges: OleVariant; safecall;
    function IEdgeInFaceSense2(const Facedisp: IFace2): WordBool; safecall;
    function GetTwoAdjacentFaces2: OleVariant; safecall;
    procedure IGetTwoAdjacentFaces2(out Face1: IFace2; out Face2: IFace2); safecall;
    procedure Display(Width: Integer; Red: Double; Green: Double; Blue: Double; 
                      HighlightState: WordBool); safecall;
    function GetTangentEdgesCount: Integer; safecall;
    function IGetTangentEdges(Count: Integer): IEdge; safecall;
    function GetTangentEdges: OleVariant; safecall;
    function CreateWireBody: IBody2; safecall;
    function GetBody: IBody2; safecall;
    function Get_Check: IFaultEntity; safecall;
    function Evaluate2(Parameter: Double; NumberOfDerivatives: Integer): OleVariant; safecall;
    function IEvaluate2(Parameter: Double; NumberOfDerivatives: Integer): Double; safecall;
    property Check: IFaultEntity read Get_Check;
  end;

// *********************************************************************//
// DispIntf:  IEdgeDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D42-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEdgeDisp = dispinterface
    ['{83A33D42-27C5-11CE-BFD4-00400513BB57}']
    function GetCurve: IDispatch; dispid 1;
    function IGetCurve: ICurve; dispid 7;
    function GetCurveParams: OleVariant; dispid 2;
    function IGetCurveParams: Double; dispid 15;
    function Evaluate(Parameter: Double): OleVariant; dispid 3;
    function IEvaluate(Parameter: Double): Double; dispid 16;
    function GetParameter(X: Double; Y: Double; Z: Double): OleVariant; dispid 4;
    function IGetParameter(X: Double; Y: Double; Z: Double): Double; dispid 17;
    function EdgeInFaceSense(const Facedisp: IDispatch): WordBool; dispid 5;
    function IEdgeInFaceSense(const Facedisp: IFace): WordBool; dispid 8;
    function GetTwoAdjacentFaces: OleVariant; dispid 6;
    procedure IGetTwoAdjacentFaces(out Face1: IFace; out Face2: IFace); dispid 9;
    function EnumCoEdges: IEnumCoEdges; dispid 10;
    function GetStartVertex: IDispatch; dispid 11;
    function IGetStartVertex: IVertex; dispid 12;
    function GetEndVertex: IDispatch; dispid 13;
    function IGetEndVertex: IVertex; dispid 14;
    function GetClosestPointOn(X: Double; Y: Double; Z: Double): OleVariant; dispid 18;
    function IGetClosestPointOn(X: Double; Y: Double; Z: Double): Double; dispid 19;
    function RemoveRedundantTopology: WordBool; dispid 20;
    function GetID: SYSINT; dispid 21;
    procedure SetId(IdIn: SYSINT); dispid 22;
    procedure RemoveId; dispid 23;
    function GetCurveParams2: OleVariant; dispid 24;
    function IGetCurveParams2: Double; dispid 25;
    function IsParamReversed: WordBool; dispid 26;
    procedure Highlight(State: WordBool); dispid 27;
    function GetCoEdges: OleVariant; dispid 28;
    function IEdgeInFaceSense2(const Facedisp: IFace2): WordBool; dispid 29;
    function GetTwoAdjacentFaces2: OleVariant; dispid 30;
    procedure IGetTwoAdjacentFaces2(out Face1: IFace2; out Face2: IFace2); dispid 31;
    procedure Display(Width: Integer; Red: Double; Green: Double; Blue: Double; 
                      HighlightState: WordBool); dispid 32;
    function GetTangentEdgesCount: Integer; dispid 33;
    function IGetTangentEdges(Count: Integer): IEdge; dispid 34;
    function GetTangentEdges: OleVariant; dispid 35;
    function CreateWireBody: IBody2; dispid 36;
    function GetBody: IBody2; dispid 37;
    property Check: IFaultEntity readonly dispid 38;
    function Evaluate2(Parameter: Double; NumberOfDerivatives: Integer): OleVariant; dispid 39;
    function IEvaluate2(Parameter: Double; NumberOfDerivatives: Integer): Double; dispid 40;
  end;

// *********************************************************************//
// Interface: IEnumCoEdges
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33D61-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumCoEdges = interface(IUnknown)
    ['{83A33D61-27C5-11CE-BFD4-00400513BB57}']
    function Next(Celt: Integer; out Rgelt: ICoEdge; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumCoEdges): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ICoEdge
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D57-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICoEdge = interface(IDispatch)
    ['{83A33D57-27C5-11CE-BFD4-00400513BB57}']
    function GetEdge: IDispatch; safecall;
    function IGetEdge: IEdge; safecall;
    function GetNext: IDispatch; safecall;
    function IGetNext: ICoEdge; safecall;
    function GetLoop: IDispatch; safecall;
    function IGetLoop: ILoop; safecall;
    function GetSense: WordBool; safecall;
    function GetPartner: IDispatch; safecall;
    function IGetPartner: ICoEdge; safecall;
    function GetCurveParams: OleVariant; safecall;
    function Evaluate(Param: Double): OleVariant; safecall;
    function IGetCurveParams: Double; safecall;
    function IEvaluate(Param: Double): Double; safecall;
    function GetCurve: IDispatch; safecall;
    function IGetCurve: ICurve; safecall;
    function IGetLoop2: ILoop2; safecall;
    function Evaluate2(Param: Double; NumberOfDerivatives: Integer): OleVariant; safecall;
    function IEvaluate2(Param: Double; NumberOfDerivatives: Integer): Double; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICoEdgeDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D57-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICoEdgeDisp = dispinterface
    ['{83A33D57-27C5-11CE-BFD4-00400513BB57}']
    function GetEdge: IDispatch; dispid 1;
    function IGetEdge: IEdge; dispid 3;
    function GetNext: IDispatch; dispid 2;
    function IGetNext: ICoEdge; dispid 4;
    function GetLoop: IDispatch; dispid 5;
    function IGetLoop: ILoop; dispid 6;
    function GetSense: WordBool; dispid 7;
    function GetPartner: IDispatch; dispid 8;
    function IGetPartner: ICoEdge; dispid 9;
    function GetCurveParams: OleVariant; dispid 10;
    function Evaluate(Param: Double): OleVariant; dispid 11;
    function IGetCurveParams: Double; dispid 12;
    function IEvaluate(Param: Double): Double; dispid 13;
    function GetCurve: IDispatch; dispid 14;
    function IGetCurve: ICurve; dispid 15;
    function IGetLoop2: ILoop2; dispid 16;
    function Evaluate2(Param: Double; NumberOfDerivatives: Integer): OleVariant; dispid 17;
    function IEvaluate2(Param: Double; NumberOfDerivatives: Integer): Double; dispid 18;
  end;

// *********************************************************************//
// Interface: ILoop
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D53-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ILoop = interface(IDispatch)
    ['{83A33D53-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: ILoop; safecall;
    function GetEdges: OleVariant; safecall;
    function IGetEdges: PPUserType4; safecall;
    function GetEdgeCount: Integer; safecall;
    function IsOuter: WordBool; safecall;
    function GetFirstCoEdge: IDispatch; safecall;
    function IGetFirstCoEdge: ICoEdge; safecall;
    function EnumEdges: IEnumEdges; safecall;
    function EnumCoEdges: IEnumCoEdges; safecall;
    function GetFace: IDispatch; safecall;
    function IGetFace: IFace; safecall;
    function SweepPlanarLoop(X: Double; Y: Double; Z: Double; DraftAngle: Double): OleVariant; safecall;
    function ISweepPlanarLoop(X: Double; Y: Double; Z: Double; DraftAngle: Double; 
                              var StopFacesOut: IFace): IBody; safecall;
    procedure Dummy015; safecall;
    procedure Dummy016; safecall;
    function RevolvePlanarLoop(X: Double; Y: Double; Z: Double; Axisx: Double; Axisy: Double; 
                               Axisz: Double; RevAngle: Double): OleVariant; safecall;
    function IRevolvePlanarLoop(X: Double; Y: Double; Z: Double; Axisx: Double; Axisy: Double; 
                                Axisz: Double; RevAngle: Double; var StopFacesOut: IFace): IBody; safecall;
  end;

// *********************************************************************//
// DispIntf:  ILoopDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D53-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ILoopDisp = dispinterface
    ['{83A33D53-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: ILoop; dispid 7;
    function GetEdges: OleVariant; dispid 2;
    function IGetEdges: {??PPUserType4}OleVariant; dispid 8;
    function GetEdgeCount: Integer; dispid 3;
    function IsOuter: WordBool; dispid 4;
    function GetFirstCoEdge: IDispatch; dispid 5;
    function IGetFirstCoEdge: ICoEdge; dispid 6;
    function EnumEdges: IEnumEdges; dispid 9;
    function EnumCoEdges: IEnumCoEdges; dispid 10;
    function GetFace: IDispatch; dispid 11;
    function IGetFace: IFace; dispid 12;
    function SweepPlanarLoop(X: Double; Y: Double; Z: Double; DraftAngle: Double): OleVariant; dispid 13;
    function ISweepPlanarLoop(X: Double; Y: Double; Z: Double; DraftAngle: Double; 
                              var StopFacesOut: IFace): IBody; dispid 14;
    procedure Dummy015; dispid 15;
    procedure Dummy016; dispid 16;
    function RevolvePlanarLoop(X: Double; Y: Double; Z: Double; Axisx: Double; Axisy: Double; 
                               Axisz: Double; RevAngle: Double): OleVariant; dispid 17;
    function IRevolvePlanarLoop(X: Double; Y: Double; Z: Double; Axisx: Double; Axisy: Double; 
                                Axisz: Double; RevAngle: Double; var StopFacesOut: IFace): IBody; dispid 18;
  end;

// *********************************************************************//
// Interface: IEnumEdges
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33D5F-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumEdges = interface(IUnknown)
    ['{83A33D5F-27C5-11CE-BFD4-00400513BB57}']
    function Next(Celt: Integer; out Rgelt: IEdge; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumEdges): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ILoop2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9350CA6E-0ADB-485A-8941-9407DD7B3B8E}
// *********************************************************************//
  ILoop2 = interface(IDispatch)
    ['{9350CA6E-0ADB-485A-8941-9407DD7B3B8E}']
    function GetNext: IDispatch; safecall;
    function IGetNext: ILoop2; safecall;
    function GetEdges: OleVariant; safecall;
    function IGetEdges: IEdge; safecall;
    function GetEdgeCount: Integer; safecall;
    function IsOuter: WordBool; safecall;
    function GetFirstCoEdge: IDispatch; safecall;
    function IGetFirstCoEdge: ICoEdge; safecall;
    function EnumEdges: IEnumEdges; safecall;
    function EnumCoEdges: IEnumCoEdges; safecall;
    function GetFace: IDispatch; safecall;
    function IGetFace: IFace2; safecall;
    function SweepPlanarLoop(X: Double; Y: Double; Z: Double; DraftAngle: Double): OleVariant; safecall;
    function ISweepPlanarLoop(X: Double; Y: Double; Z: Double; DraftAngle: Double; 
                              var StopFacesOut: IFace2): IBody2; safecall;
    procedure Dummy015; safecall;
    procedure Dummy016; safecall;
    function RevolvePlanarLoop(X: Double; Y: Double; Z: Double; Axisx: Double; Axisy: Double; 
                               Axisz: Double; RevAngle: Double): OleVariant; safecall;
    function IRevolvePlanarLoop(X: Double; Y: Double; Z: Double; Axisx: Double; Axisy: Double; 
                                Axisz: Double; RevAngle: Double; var StopFacesOut: IFace2): IBody2; safecall;
    function IsSingular: WordBool; safecall;
    function GetVertexCount: Integer; safecall;
    function GetVertices: OleVariant; safecall;
    procedure IGetVertices(NumVertices: Integer; var Vertices: IVertex); safecall;
  end;

// *********************************************************************//
// DispIntf:  ILoop2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9350CA6E-0ADB-485A-8941-9407DD7B3B8E}
// *********************************************************************//
  ILoop2Disp = dispinterface
    ['{9350CA6E-0ADB-485A-8941-9407DD7B3B8E}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: ILoop2; dispid 7;
    function GetEdges: OleVariant; dispid 2;
    function IGetEdges: IEdge; dispid 8;
    function GetEdgeCount: Integer; dispid 3;
    function IsOuter: WordBool; dispid 4;
    function GetFirstCoEdge: IDispatch; dispid 5;
    function IGetFirstCoEdge: ICoEdge; dispid 6;
    function EnumEdges: IEnumEdges; dispid 9;
    function EnumCoEdges: IEnumCoEdges; dispid 10;
    function GetFace: IDispatch; dispid 11;
    function IGetFace: IFace2; dispid 12;
    function SweepPlanarLoop(X: Double; Y: Double; Z: Double; DraftAngle: Double): OleVariant; dispid 13;
    function ISweepPlanarLoop(X: Double; Y: Double; Z: Double; DraftAngle: Double; 
                              var StopFacesOut: IFace2): IBody2; dispid 14;
    procedure Dummy015; dispid 15;
    procedure Dummy016; dispid 16;
    function RevolvePlanarLoop(X: Double; Y: Double; Z: Double; Axisx: Double; Axisy: Double; 
                               Axisz: Double; RevAngle: Double): OleVariant; dispid 17;
    function IRevolvePlanarLoop(X: Double; Y: Double; Z: Double; Axisx: Double; Axisy: Double; 
                                Axisz: Double; RevAngle: Double; var StopFacesOut: IFace2): IBody2; dispid 18;
    function IsSingular: WordBool; dispid 19;
    function GetVertexCount: Integer; dispid 20;
    function GetVertices: OleVariant; dispid 21;
    procedure IGetVertices(NumVertices: Integer; var Vertices: IVertex); dispid 22;
  end;

// *********************************************************************//
// Interface: IVertex
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D63-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IVertex = interface(IDispatch)
    ['{83A33D63-27C5-11CE-BFD4-00400513BB57}']
    function GetPoint: OleVariant; safecall;
    function IGetPoint: Double; safecall;
    function EnumEdges: IEnumEdges; safecall;
    function GetClosestPointOn(X: Double; Y: Double; Z: Double): OleVariant; safecall;
    function IGetClosestPointOn(X: Double; Y: Double; Z: Double): Double; safecall;
    function EnumEdgesOriented: IEnumEdges; safecall;
    function GetEdges: OleVariant; safecall;
    function GetEdgesOriented: OleVariant; safecall;
    function GetAdjacentFaces: OleVariant; safecall;
    function IGetAdjacentFacesCount: Integer; safecall;
    function IGetAdjacentFaces(NFaceCount: Integer): IFace2; safecall;
    procedure Display(const TopDoc: IModelDoc2; Color: Integer; Scale: Double; 
                      HighlightState: WordBool); safecall;
  end;

// *********************************************************************//
// DispIntf:  IVertexDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D63-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IVertexDisp = dispinterface
    ['{83A33D63-27C5-11CE-BFD4-00400513BB57}']
    function GetPoint: OleVariant; dispid 1;
    function IGetPoint: Double; dispid 2;
    function EnumEdges: IEnumEdges; dispid 3;
    function GetClosestPointOn(X: Double; Y: Double; Z: Double): OleVariant; dispid 4;
    function IGetClosestPointOn(X: Double; Y: Double; Z: Double): Double; dispid 5;
    function EnumEdgesOriented: IEnumEdges; dispid 6;
    function GetEdges: OleVariant; dispid 7;
    function GetEdgesOriented: OleVariant; dispid 8;
    function GetAdjacentFaces: OleVariant; dispid 9;
    function IGetAdjacentFacesCount: Integer; dispid 10;
    function IGetAdjacentFaces(NFaceCount: Integer): IFace2; dispid 11;
    procedure Display(const TopDoc: IModelDoc2; Color: Integer; Scale: Double; 
                      HighlightState: WordBool); dispid 12;
  end;

// *********************************************************************//
// Interface: IModelDoc2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B90793FB-EF3D-4B80-A5C4-99959CDB6CEB}
// *********************************************************************//
  IModelDoc2 = interface(IDispatch)
    ['{B90793FB-EF3D-4B80-A5C4-99959CDB6CEB}']
    function Get_SelectionManager: IDispatch; safecall;
    function Get_ISelectionManager: ISelectionMgr; safecall;
    procedure Set_SelectionManager(const Retval: IDispatch); safecall;
    function Get_ActiveView: IDispatch; safecall;
    function Get_IActiveView: IModelView; safecall;
    procedure Set_ActiveView(const Retval: IDispatch); safecall;
    function Get_LengthUnit: Integer; safecall;
    procedure Set_LengthUnit(Retval: Integer); safecall;
    function Get_LightSourceUserName(ID: Integer): WideString; safecall;
    procedure Set_LightSourceUserName(ID: Integer; const Retval: WideString); safecall;
    function Get_LightSourcePropertyValues(ID: Integer): OleVariant; safecall;
    procedure Set_LightSourcePropertyValues(ID: Integer; Retval: OleVariant); safecall;
    function Get_SceneName: WideString; safecall;
    procedure Set_SceneName(const Retval: WideString); safecall;
    function Get_SceneUserName: WideString; safecall;
    procedure Set_SceneUserName(const Retval: WideString); safecall;
    procedure FeatureFillet(R1: Double; Propagate: WordBool; Ftyp: WordBool; VarRadTyp: WordBool; 
                            OverflowType: Integer); safecall;
    procedure GridOptions(DispGrid: WordBool; GridSpacing: Double; Snap: WordBool; 
                          DotStyle: WordBool; NMajor: Smallint; NMinor: Smallint; 
                          Align2edge: WordBool; AngleSnap: WordBool; AngleUnit: Double; 
                          MinorAuto: WordBool); safecall;
    procedure SetUnits(UType: Smallint; FractBase: Smallint; FractDenom: Smallint; 
                       SigDigits: Smallint; RoundToFraction: WordBool); safecall;
    procedure LBDownAt(Flags: Integer; X: Double; Y: Double; Z: Double); safecall;
    procedure LBUpAt(Flags: Integer; X: Double; Y: Double; Z: Double); safecall;
    procedure DragTo(Flags: Integer; X: Double; Y: Double; Z: Double); safecall;
    procedure SelectAt(Flags: Integer; X: Double; Y: Double; Z: Double); safecall;
    procedure CreateLineVB(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double); safecall;
    function CreateLine(P1: OleVariant; P2: OleVariant): WordBool; safecall;
    procedure CreateCenterLineVB(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                 Z2: Double); safecall;
    function CreateCenterLine(P1: OleVariant; P2: OleVariant): WordBool; safecall;
    procedure CreateArcVB(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                          P2z: Double; P3x: Double; P3y: Double; P3z: Double; Dir: Smallint); safecall;
    function CreateArc(P1: OleVariant; P2: OleVariant; P3: OleVariant; Dir: Smallint): WordBool; safecall;
    procedure CreateCircleVB(P1x: Double; P1y: Double; P1z: Double; Radius: Double); safecall;
    function CreateCircleByRadius(P1: OleVariant; Radius: Double): WordBool; safecall;
    function GetLines: OleVariant; safecall;
    procedure SketchTrim(Op: Integer; SelEnd: Integer; X: Double; Y: Double); safecall;
    procedure SketchOffsetEdges(Val: Double); safecall;
    procedure SketchRectangle(Val1: Double; Val2: Double; Z1: Double; Val3: Double; Val4: Double; 
                              Z2: Double; Val5: WordBool); safecall;
    procedure SketchPoint(X: Double; Y: Double; Z: Double); safecall;
    procedure FeatureCut(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                         D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; Ddir1: WordBool; 
                         Ddir2: WordBool; Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                         OffsetReverse2: WordBool); safecall;
    procedure FeatureBoss(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool); safecall;
    procedure SimpleHole(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                         D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; Ddir1: WordBool; 
                         Ddir2: WordBool; Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                         OffsetReverse2: WordBool); safecall;
    procedure FeatureLinearPattern(Num1: Integer; Spacing1: Double; Num2: Integer; 
                                   Spacing2: Double; FlipDir1: WordBool; FlipDir2: WordBool; 
                                   const DName1: WideString; const DName2: WideString); safecall;
    procedure NameView(const VName: WideString); safecall;
    procedure ShowNamedView(const VName: WideString); safecall;
    procedure CreatePlaneAtOffset(Val: Double; FlipDir: WordBool); safecall;
    procedure Toolbars(M: WordBool; Vw: WordBool; SkMain: WordBool; Sk: WordBool; Feat: WordBool; 
                       Constr: WordBool; Macro: WordBool); safecall;
    procedure CreatePlaneAtAngle(Val: Double; FlipDir: WordBool); safecall;
    procedure SetParamValue(Val: Double); safecall;
    procedure AddRelation(const RelStr: WideString); safecall;
    procedure DeleteAllRelations; safecall;
    procedure HoleWizard(Depth: Double; EndType: Smallint; Flip: WordBool; Dir: WordBool; 
                         HType: Integer; D1: Double; D2: Double; D3: Double; D4: Double; 
                         D5: Double; D6: Double; D7: Double; D8: Double; D9: Double; D10: Double; 
                         D11: Double; D12: Double); safecall;
    function SaveAs(const NewName: WideString): WordBool; safecall;
    procedure ActivateSelectedFeature; safecall;
    procedure SelectByName(Flags: Integer; const IdStr: WideString); safecall;
    procedure SketchAddConstraints(const IdStr: WideString); safecall;
    procedure SketchConstraintsDel(ConstrInd: Integer; const IdStr: WideString); safecall;
    procedure SketchConstraintsDelAll; safecall;
    procedure Lock; safecall;
    procedure UnLock; safecall;
    procedure InsertFeatureShell(Thickness: Double; Outward: WordBool); safecall;
    procedure SketchFillet(Rad: Double); safecall;
    procedure FeatureChamfer(Width: Double; Angle: Double; Flip: WordBool); safecall;
    procedure InsertMfDraft(Angle: Double; FlipDir: WordBool; IsEdgeDraft: WordBool; 
                            PropType: Integer); safecall;
    procedure ParentChildRelationship; safecall;
    procedure SketchSpline(MorePts: Integer; X: Double; Y: Double; Z: Double); safecall;
    procedure SelectSketchPoint(X: Double; Y: Double; Incidence: Integer); safecall;
    procedure SelectSketchLine(X0: Double; Y0: Double; Inc0: Integer; X1: Double; Y1: Double; 
                               Inc1: Integer); safecall;
    procedure SelectSketchArc(X0: Double; Y0: Double; Inc0: Integer; X1: Double; Y1: Double; 
                              Inc1: Integer; XC: Double; YC: Double; IncC: Integer; RotDir: Integer); safecall;
    procedure SelectSketchSpline(Size: Integer; X0: Double; Y0: Double; Inc0: Integer; X1: Double; 
                                 Y1: Double; Inc1: Integer; XC: Double; YC: Double; IncC: Integer); safecall;
    function CreateTangentArc(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                              P2z: Double): WordBool; safecall;
    function Create3PointArc(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                             P2z: Double; P3x: Double; P3y: Double; P3z: Double): WordBool; safecall;
    function CreateArcByCenter(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                               P2z: Double; P3x: Double; P3y: Double; P3z: Double): WordBool; safecall;
    function CreateCircle(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                          P2z: Double): WordBool; safecall;
    function AddDimension(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function AddHorizontalDimension(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function AddVerticalDimension(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function SelectSketchItem(SelOpt: Integer; const Name: WideString; X: Double; Y: Double; 
                              Z: Double): WordBool; safecall;
    procedure ClearSelection; safecall;
    procedure Select(const SelID: WideString; const SelParams: WideString; X: Double; Y: Double; 
                     Z: Double); safecall;
    procedure AndSelect(const SelID: WideString; const SelParams: WideString; X: Double; Y: Double; 
                        Z: Double); safecall;
    function CreatePoint(PointX: Double; PointY: Double; PointZ: Double): WordBool; safecall;
    function CreateLineDB(Sx: Double; Sy: Double; Sz: Double; Ex: Double; Ey: Double; Ez: Double): WordBool; safecall;
    function CreateArcDB(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double; 
                         X3: Double; Y3: Double; Z3: Double; Dir: Smallint): WordBool; safecall;
    function CreateCircleDB(Cx: Double; Cy: Double; Cz: Double; Radius: Double): WordBool; safecall;
    function CreatePointDB(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function GetTitle: WideString; safecall;
    function GetPathName: WideString; safecall;
    function GetType: Integer; safecall;
    procedure InsertObject; safecall;
    procedure EditClearAll; safecall;
    procedure EditCopy; safecall;
    procedure EditCut; safecall;
    procedure ObjectDisplayContent; safecall;
    procedure ObjectDisplayAsIcon; safecall;
    procedure ObjectResetsize; safecall;
    procedure WindowRedraw; safecall;
    procedure Dummy3; safecall;
    procedure SetPickMode; safecall;
    procedure ViewRotateminusx; safecall;
    procedure ViewRotateminusy; safecall;
    procedure ViewRotateminusz; safecall;
    procedure ViewRotateplusx; safecall;
    procedure ViewRotateplusy; safecall;
    procedure ViewRotateplusz; safecall;
    procedure ViewTranslateminusx; safecall;
    procedure ViewTranslateminusy; safecall;
    procedure ViewTranslateplusx; safecall;
    procedure ViewTranslateplusy; safecall;
    procedure ViewRotXMinusNinety; safecall;
    procedure ViewRotYMinusNinety; safecall;
    procedure ViewRotYPlusNinety; safecall;
    procedure ViewZoomin; safecall;
    procedure ViewZoomout; safecall;
    procedure ViewDisplayHiddenremoved; safecall;
    procedure ViewDisplayWireframe; safecall;
    procedure ViewDisplayShaded; safecall;
    procedure ViewRwShading; safecall;
    procedure ViewOglShading; safecall;
    procedure ViewZoomtofit; safecall;
    procedure ViewRotate; safecall;
    procedure ViewTranslate; safecall;
    procedure ViewZoomto; safecall;
    procedure ViewDisplayHiddengreyed; safecall;
    procedure ViewDisplayFaceted; safecall;
    procedure ViewConstraint; safecall;
    procedure UserFavors; safecall;
    procedure FeatureCirPattern(Num: Integer; Spacing: Double; FlipDir: WordBool; 
                                const DName: WideString); safecall;
    procedure EditSketch; safecall;
    procedure FeatEdit; safecall;
    procedure FeatEditDef; safecall;
    procedure InsertPoint; safecall;
    procedure InsertFamilyTableNew; safecall;
    procedure Dummy1; safecall;
    procedure InsertFamilyTableEdit; safecall;
    procedure Dummy2; safecall;
    procedure ToolsMacro; safecall;
    procedure ToolsGrid; safecall;
    procedure SketchCenterline; safecall;
    procedure SketchAlign; safecall;
    procedure SketchArc; safecall;
    procedure SketchTangentArc; safecall;
    procedure SketchCircle; safecall;
    procedure SketchUndo; safecall;
    procedure UserPreferences; safecall;
    procedure Lights; safecall;
    procedure SketchConstrainCoincident; safecall;
    procedure SketchConstrainConcentric; safecall;
    procedure SketchConstrainPerp; safecall;
    procedure SketchConstrainTangent; safecall;
    procedure SketchConstrainParallel; safecall;
    procedure SketchUseEdge; safecall;
    procedure SketchUseEdgeCtrline; safecall;
    procedure SketchMirror; safecall;
    procedure Save; safecall;
    procedure Close; safecall;
    procedure ViewDispRefaxes; safecall;
    procedure ViewDispRefplanes; safecall;
    procedure InsertSketch; safecall;
    procedure InsertProtrusionSwept(Propagate: WordBool; Alignment: WordBool; 
                                    KeepNormalConstant: WordBool); safecall;
    procedure InsertProtrusionBlend(Closed: WordBool); safecall;
    procedure ToolsMassProps; safecall;
    procedure PropertySheet; safecall;
    procedure BlankRefGeom; safecall;
    procedure UnBlankRefGeom; safecall;
    procedure EditDelete; safecall;
    procedure InsertProjectedSketch; safecall;
    function CreatePlaneFixed(P1: OleVariant; P2: OleVariant; P3: OleVariant; UseGlobal: WordBool): WordBool; safecall;
    procedure Dummy5; safecall;
    procedure Dummy6; safecall;
    procedure DebugCheckBody; safecall;
    procedure Dummy8; safecall;
    procedure DimPreferences; safecall;
    procedure UnblankSketch; safecall;
    procedure EditSketchOrSingleSketchFeature; safecall;
    procedure DebugCheckIgesGeom; safecall;
    procedure BlankSketch; safecall;
    function GetDefaultTextHeight: Double; safecall;
    function IsActive(const CompStr: WideString): WordBool; safecall;
    function CreateEllipse(Center: OleVariant; Major: OleVariant; Minor: OleVariant): WordBool; safecall;
    function CreateEllipseVB(CenterX: Double; CenterY: Double; CenterZ: Double; MajorX: Double; 
                             MajorY: Double; MajorZ: Double; MinorX: Double; MinorY: Double; 
                             MinorZ: Double): WordBool; safecall;
    function CreateEllipticalArcByCenter(Center: OleVariant; Major: OleVariant; Minor: OleVariant; 
                                         Start: OleVariant; End_: OleVariant): WordBool; safecall;
    function CreateEllipticalArcByCenterVB(CenterX: Double; CenterY: Double; CenterZ: Double; 
                                           MajorX: Double; MajorY: Double; MajorZ: Double; 
                                           MinorX: Double; MinorY: Double; MinorZ: Double; 
                                           StartX: Double; StartY: Double; StartZ: Double; 
                                           EndX: Double; EndY: Double; EndZ: Double): WordBool; safecall;
    function GetActiveSketch: IDispatch; safecall;
    function IGetActiveSketch: ISketch; safecall;
    function GetTessellationQuality: Integer; safecall;
    procedure SetTessellationQuality(QualityNum: Integer); safecall;
    function Parameter(const StringIn: WideString): IDispatch; safecall;
    function IParameter(const StringIn: WideString): IDimension; safecall;
    function SelectByID(const SelID: WideString; const SelParams: WideString; X: Double; Y: Double; 
                        Z: Double): WordBool; safecall;
    function AndSelectByID(const SelID: WideString; const SelParams: WideString; X: Double; 
                           Y: Double; Z: Double): WordBool; safecall;
    procedure Insert3DSketch; safecall;
    function GetLightSourceName(ID: Integer): WideString; safecall;
    function AddLightSource(const IdName: WideString; LTyp: SYSINT; const UserName: WideString): WordBool; safecall;
    function AddLightSourceExtProperty(ID: Integer; PropertyExtension: OleVariant): Integer; safecall;
    procedure ResetLightSourceExtProperty(ID: Integer); safecall;
    procedure DeleteLightSource(ID: Integer); safecall;
    function GetLightSourceExtProperty(ID: Integer; PropertyId: Integer): OleVariant; safecall;
    function AddLightToScene(const LpszNewValue: WideString): Integer; safecall;
    function AddSceneExtProperty(PropertyExtension: OleVariant): Integer; safecall;
    procedure ResetSceneExtProperty; safecall;
    function GetSceneExtProperty(PropertyId: Integer): OleVariant; safecall;
    procedure FileSummaryInfo; safecall;
    function GetGridSettings: OleVariant; safecall;
    procedure ToolsSketchTranslate; safecall;
    procedure ToolsDistance; safecall;
    procedure SkToolsAutoConstr; safecall;
    procedure ToolsSketchScale; safecall;
    procedure Paste; safecall;
    procedure ToolsConfiguration; safecall;
    procedure EntityProperties; safecall;
    function GetArcCentersDisplayed: WordBool; safecall;
    procedure SetArcCentersDisplayed(Setting: WordBool); safecall;
    procedure AutoSolveToggle; safecall;
    procedure Dummy7; safecall;
    function IGetLines: Double; safecall;
    function GetLineCount: Integer; safecall;
    procedure ICreateEllipse(var Center: Double; var Major: Double; var Minor: Double); safecall;
    procedure ICreateEllipticalArcByCenter(var Center: Double; var Major: Double; 
                                           var Minor: Double; var Start: Double; var End_: Double); safecall;
    function Get_ILightSourcePropertyValues(ID: Integer): Double; safecall;
    procedure Set_ILightSourcePropertyValues(ID: Integer; var Retval: Double); safecall;
    procedure InsertCutSwept(Propagate: WordBool; Alignment: WordBool; KeepNormalConstant: WordBool); safecall;
    procedure InsertCutBlend(Closed: WordBool); safecall;
    procedure InsertHelix(Reversed: WordBool; Clockwised: WordBool; Tapered: WordBool; 
                          Outward: WordBool; Helixdef: Integer; Height: Double; Pitch: Double; 
                          Revolution: Double; TaperAngle: Double; Startangle: Double); safecall;
    procedure ICreateLine(var P1: Double; var P2: Double); safecall;
    procedure ICreateCenterLine(var P1: Double; var P2: Double); safecall;
    procedure ICreateArc(var P1: Double; var P2: Double; var P3: Double; Dir: Smallint); safecall;
    procedure ICreateCircleByRadius(var P1: Double; Radius: Double); safecall;
    procedure GraphicsRedraw; safecall;
    function GetVisibilityOfConstructPlanes: WordBool; safecall;
    function GetDisplayWhenAdded: WordBool; safecall;
    procedure SetDisplayWhenAdded(Setting: WordBool); safecall;
    function GetAddToDB: WordBool; safecall;
    procedure SetAddToDB(Setting: WordBool); safecall;
    function DeSelectByID(const SelID: WideString; const SelParams: WideString; X: Double; 
                          Y: Double; Z: Double): WordBool; safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(Retval: WordBool); safecall;
    procedure PrintDirect; safecall;
    procedure PrintPreview; safecall;
    procedure Quit; safecall;
    procedure CreatePlaneThru3Points; safecall;
    procedure ViewRotXPlusNinety; safecall;
    function GetUnits: OleVariant; safecall;
    procedure SetAngularUnits(UType: Smallint; FractBase: Smallint; FractDenom: Smallint; 
                              SigDigits: Smallint); safecall;
    function GetAngularUnits: OleVariant; safecall;
    function IGetUnits: Smallint; safecall;
    procedure ISetAngularUnits(UType: Smallint; FractBase: Smallint; FractDenom: Smallint; 
                               SigDigits: Smallint); safecall;
    function IGetAngularUnits: Smallint; safecall;
    procedure ShowConfiguration(const ConfigurationName: WideString); safecall;
    procedure ResetConfiguration; safecall;
    procedure AddConfiguration(const Name: WideString; const Comment: WideString; 
                               const AlternateName: WideString; SuppressByDefault: WordBool; 
                               HideByDefault: WordBool; MinFeatureManager: WordBool; 
                               InheritProperties: WordBool; Flags: LongWord); safecall;
    procedure DeleteConfiguration(const ConfigurationName: WideString); safecall;
    procedure EditConfiguration(const Name: WideString; const NewName: WideString; 
                                const Comment: WideString; const AlternateName: WideString; 
                                SuppressByDefault: WordBool; HideByDefault: WordBool; 
                                MinFeatureManager: WordBool; InheritProperties: WordBool; 
                                Flags: LongWord); safecall;
    procedure CreatePlanePerCurveAndPassPoint(OrigAtCurve: WordBool); safecall;
    function CreateFeatureMgrView(var Bitmap: Integer): IDispatch; safecall;
    function AddFeatureMgrView(var Bitmap: Integer; var AppView: Integer): WordBool; safecall;
    function GetStandardViewRotation(ViewId: Integer): OleVariant; safecall;
    function IGetStandardViewRotation(ViewId: Integer): Double; safecall;
    procedure FeatureExtruRefSurface(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                     T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                     Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; 
                                     Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                                     OffsetReverse2: WordBool); safecall;
    function IGet3rdPartyStorage(const StringIn: WideString; IsStoring: WordBool): IUnknown; safecall;
    procedure DeleteFeatureMgrView(var AppView: Integer); safecall;
    function GetMassProperties: OleVariant; safecall;
    function IGetMassProperties(var MPropsData: Double): WordBool; safecall;
    function GetLightSourceCount: Integer; safecall;
    function GetLightSourceIdFromName(const LightName: WideString): Integer; safecall;
    procedure SetNextSelectionGroupId(ID: Integer); safecall;
    procedure ISetNextSelectionGroupId(ID: Integer); safecall;
    function InsertMidSurfaceExt(Placement: Double; KnitFlag: WordBool): IDispatch; safecall;
    function IInsertMidSurfaceExt(Placement: Double; KnitFlag: WordBool): IMidSurface2; safecall;
    procedure ICreatePlaneFixed(var P1: Double; var P2: Double; var P3: Double; UseGlobal: WordBool); safecall;
    function SelectByMark(const SelID: WideString; const SelParams: WideString; X: Double; 
                          Y: Double; Z: Double; Mark: Integer): WordBool; safecall;
    function AndSelectByMark(const SelID: WideString; const SelParams: WideString; X: Double; 
                             Y: Double; Z: Double; Mark: Integer): WordBool; safecall;
    function GetDependencies(Traverseflag: Integer; Searchflag: Integer): OleVariant; safecall;
    function IGetDependencies(Traverseflag: Integer; Searchflag: Integer): WideString; safecall;
    function GetNumDependencies(Traverseflag: Integer; Searchflag: Integer): Integer; safecall;
    function IGetNumDependencies(Traverseflag: Integer; Searchflag: Integer): Integer; safecall;
    function FirstFeature: IDispatch; safecall;
    function IFirstFeature: IFeature; safecall;
    procedure UnderiveSketch; safecall;
    procedure DeriveSketch; safecall;
    function IsExploded: WordBool; safecall;
    function DeleteSelection(ConfirmFlag: WordBool): WordBool; safecall;
    function DeleteNamedView(const ViewName: WideString): WordBool; safecall;
    function SetLightSourceName(ID: Integer; const NewName: WideString): WordBool; safecall;
    procedure Insert3DSplineCurve(CurveClosed: WordBool); safecall;
    function SetLightSourcePropertyValuesVB(const IdName: WideString; LType: SYSINT; Diff: Double; 
                                            RgbColor: Integer; Dist: Double; DirX: Double; 
                                            DirY: Double; DirZ: Double; SpotDirX: Double; 
                                            SpotDirY: Double; SpotDirZ: Double; SpotAngle: Double; 
                                            FallOff0: Double; FallOff1: Double; FallOff2: Double; 
                                            Ambient: Double; Specular: Double; 
                                            SpotExponent: Double; BDisable: WordBool): WordBool; safecall;
    function ICreateFeatureMgrView(var Bitmap: Integer): IFeatMgrView; safecall;
    function SelectedEdgeProperties(const EdgeName: WideString): WordBool; safecall;
    function SelectedFaceProperties(RgbColor: Integer; Ambient: Double; Diffuse: Double; 
                                    Specular: Double; Shininess: Double; Transparency: Double; 
                                    Emission: Double; UsePartProps: WordBool; 
                                    const FaceName: WideString): WordBool; safecall;
    function SelectedFeatureProperties(RgbColor: Integer; Ambient: Double; Diffuse: Double; 
                                       Specular: Double; Shininess: Double; Transparency: Double; 
                                       Emission: Double; UsePartProps: WordBool; 
                                       Suppressed: WordBool; const FeatureName: WideString): WordBool; safecall;
    procedure InsertSplitLineSil; safecall;
    procedure InsertSplitLineProject(IsDirectional: WordBool; FlipDir: WordBool); safecall;
    procedure InsertRib(Is2Sided: WordBool; ReverseThicknessDir: WordBool; Thickness: Double; 
                        ReferenceEdgeIndex: Integer; ReverseMaterialDir: WordBool; 
                        IsDrafted: WordBool; DraftOutward: WordBool; DraftAngle: Double); safecall;
    function AddRadialDimension(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function AddDiameterDimension(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function GetModelViewNames: OleVariant; safecall;
    function IGetModelViewNames: WideString; safecall;
    function GetModelViewCount: SYSINT; safecall;
    function GetUserPreferenceDoubleValue(UserPreferenceValue: Integer): Double; safecall;
    function SetUserPreferenceDoubleValue(UserPreferenceValue: Integer; Value: Double): WordBool; safecall;
    procedure ViewDisplayCurvature; safecall;
    procedure Scale; safecall;
    procedure AddIns; safecall;
    function InsertCurveFile(const FileName: WideString): WordBool; safecall;
    procedure InsertCurveFileBegin; safecall;
    function InsertCurveFilePoint(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function InsertCurveFileEnd: WordBool; safecall;
    function ChangeSketchPlane: WordBool; safecall;
    procedure ViewOrientationUndo; safecall;
    procedure PrintOut(FromPage: Integer; ToPage: Integer; NumCopies: Integer; Collate: WordBool; 
                       const Printer: WideString; Scale: Double; PrintToFile: WordBool); safecall;
    procedure SketchOffsetEntities(Offset: Double; Flip: WordBool); safecall;
    procedure InsertLibraryFeature(const LibFeatPartNameIn: WideString); safecall;
    procedure SketchModifyTranslate(StartX: Double; StartY: Double; EndX: Double; EndY: Double); safecall;
    procedure SketchModifyRotate(CenterX: Double; CenterY: Double; Angle: Double); safecall;
    procedure SketchModifyFlip(AxisFlag: SYSINT); safecall;
    function SketchModifyScale(ScaleFactor: Double): WordBool; safecall;
    function GetActiveConfiguration: IDispatch; safecall;
    function IGetActiveConfiguration: IConfiguration; safecall;
    function GetUserPreferenceToggle(UserPreferenceToggle: Integer): WordBool; safecall;
    function SetUserPreferenceToggle(UserPreferenceValue: Integer; OnFlag: WordBool): WordBool; safecall;
    procedure InsertSweepRefSurface(Propagate: WordBool; TwistCtrlOption: Smallint; 
                                    KeepTangency: WordBool; ForceNonRational: WordBool); safecall;
    procedure InsertLoftRefSurface(Closed: WordBool; KeepTangency: WordBool; 
                                   ForceNonRational: WordBool); safecall;
    procedure InsertProtrusionSwept2(Propagate: WordBool; Alignment: WordBool; 
                                     TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool); safecall;
    procedure InsertProtrusionBlend2(Closed: WordBool; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool); safecall;
    procedure InsertCutSwept2(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                              KeepTangency: WordBool; ForceNonRational: WordBool); safecall;
    procedure InsertCutBlend2(Closed: WordBool; KeepTangency: WordBool; ForceNonRational: WordBool); safecall;
    function IsEditingSelf: WordBool; safecall;
    procedure ShowNamedView2(const VName: WideString; ViewId: Integer); safecall;
    procedure InsertDome(Height: Double; ReverseDir: WordBool; DoEllipticSurface: WordBool); safecall;
    function Get_MaterialUserName: WideString; safecall;
    procedure Set_MaterialUserName(const Retval: WideString); safecall;
    function Get_MaterialIdName: WideString; safecall;
    procedure Set_MaterialIdName(const Retval: WideString); safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(Retval: OleVariant); safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var Retval: Double); safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(ID: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetUpdateStamp: Integer; safecall;
    procedure ViewZoomTo2(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double); safecall;
    procedure ScreenRotate; safecall;
    function Get_PrintSetup(SetupType: Integer): Smallint; safecall;
    procedure Set_PrintSetup(SetupType: Integer; SetupValue: Smallint); safecall;
    procedure GraphicsRedraw2; safecall;
    procedure InsertCosmeticThread(Type_: Smallint; Depth: Double; Length: Double; 
                                   const Note: WideString); safecall;
    procedure HideCosmeticThread; safecall;
    procedure ShowCosmeticThread; safecall;
    procedure SimpleHole2(Dia: Double; Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                          T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool); safecall;
    procedure IRelease3rdPartyStorage(const StringIn: WideString); safecall;
    function FeatureRevolve2(Angle: Double; ReverseDir: WordBool; Angle2: Double; RevType: Integer; 
                             Options: Integer): Integer; safecall;
    function FeatureRevolveCut2(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                RevType: Integer; Options: Integer): Integer; safecall;
    procedure SetSaveFlag; safecall;
    function GetExternalReferenceName: WideString; safecall;
    function SelectByRay(DoubleInfoIn: OleVariant; TypeWanted: Integer): WordBool; safecall;
    function ISelectByRay(var PointIn: Double; var VectorIn: Double; RadiusIn: Double; 
                          TypeWanted: Integer): WordBool; safecall;
    procedure SetSceneBkgDIB(L_dib: Integer); safecall;
    function Get_SceneBkgImageFileName: WideString; safecall;
    procedure Set_SceneBkgImageFileName(const Retval: WideString); safecall;
    procedure InsertBkgImage(const NewName: WideString); safecall;
    procedure DeleteBkgImage; safecall;
    procedure InsertSplinePoint(X: Double; Y: Double; Z: Double); safecall;
    procedure InsertLoftRefSurface2(Closed: WordBool; KeepTangency: WordBool; 
                                    ForceNonRational: WordBool; TessToleranceFactor: Double; 
                                    StartMatchingType: Smallint; EndMatchingType: Smallint); safecall;
    procedure InsertProtrusionBlend3(Closed: WordBool; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; TessToleranceFactor: Double; 
                                     StartMatchingType: Smallint; EndMatchingType: Smallint); safecall;
    procedure InsertCutBlend3(Closed: WordBool; KeepTangency: WordBool; ForceNonRational: WordBool; 
                              TessToleranceFactor: Double; StartMatchingType: Smallint; 
                              EndMatchingType: Smallint); safecall;
    procedure AlignDimensions; safecall;
    procedure BreakDimensionAlignment; safecall;
    procedure SketchFillet1(Rad: Double); safecall;
    procedure FeatureChamferType(ChamferType: Smallint; Width: Double; Angle: Double; 
                                 Flip: WordBool; OtherDist: Double; VertexChamDist1: Double; 
                                 VertexChamDist2: Double; VertexChamDist3: Double); safecall;
    procedure FeatureCutThin(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                             D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                             Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                             OffsetReverse1: WordBool; OffsetReverse2: WordBool; Thk1: Double; 
                             Thk2: Double; EndThk: Double; RevThinDir: Integer; CapEnds: Integer; 
                             AddBends: WordBool; BendRad: Double); safecall;
    procedure FeatureBossThin(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                              T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                              Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                              Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                              Thk1: Double; Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                              CapEnds: Integer; AddBends: WordBool; BendRad: Double); safecall;
    function InsertDatumTargetSymbol(const Datum1: WideString; const Datum2: WideString; 
                                     const Datum3: WideString; AreaStyle: Smallint; 
                                     AreaOutside: WordBool; Value1: Double; Value2: Double; 
                                     const ValueStr1: WideString; const ValueStr2: WideString; 
                                     ArrowsSmart: WordBool; ArrowStyle: Smallint; 
                                     LeaderLineStyle: Smallint; LeaderBent: WordBool; 
                                     ShowArea: WordBool; ShowSymbol: WordBool): WordBool; safecall;
    function EditDatumTargetSymbol(const Datum1: WideString; const Datum2: WideString; 
                                   const Datum3: WideString; AreaStyle: Smallint; 
                                   AreaOutside: WordBool; Value1: Double; Value2: Double; 
                                   const ValueStr1: WideString; const ValueStr2: WideString; 
                                   ArrowsSmart: WordBool; ArrowStyle: Smallint; 
                                   LeaderLineStyle: Smallint; LeaderBent: WordBool; 
                                   ShowArea: WordBool; ShowSymbol: WordBool): WordBool; safecall;
    procedure InsertBOMBalloon; safecall;
    function FeatureReferenceCurve(NumOfCurves: Integer; BaseCurves: OleVariant; Merge: WordBool; 
                                   const FromFileName: WideString; out ErrorCode: Integer): IDispatch; safecall;
    function IFeatureReferenceCurve(NumOfCurves: Integer; var BaseCurves: ICurve; Merge: WordBool; 
                                    const FromFileName: WideString; out ErrorCode: Integer): IReferenceCurve; safecall;
    procedure FontBold(Bold: WordBool); safecall;
    procedure FontItalic(Italic: WordBool); safecall;
    procedure FontUnderline(Underline: WordBool); safecall;
    procedure FontFace(const Face: WideString); safecall;
    procedure FontPoints(Points: Smallint); safecall;
    procedure FontUnits(Units: Double); safecall;
    function SketchSplineByEqnParams(ParamsIn: OleVariant): WordBool; safecall;
    procedure AlignParallelDimensions; safecall;
    procedure SetBlockingState(StateIn: Integer); safecall;
    procedure ResetBlockingState; safecall;
    function GetSceneBkgDIB: Integer; safecall;
    procedure InsertHatchedFace; safecall;
    function GetColorTable: IDispatch; safecall;
    function IGetColorTable: IColorTable; safecall;
    procedure InsertSweepRefSurface2(Propagate: WordBool; TwistCtrlOption: Smallint; 
                                     KeepTangency: WordBool; ForceNonRational: WordBool; 
                                     StartMatchingType: Smallint; EndMatchingType: Smallint); safecall;
    procedure InsertProtrusionSwept3(Propagate: WordBool; Alignment: WordBool; 
                                     TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; StartMatchingType: Smallint; 
                                     EndMatchingType: Smallint); safecall;
    procedure InsertCutSwept3(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                              KeepTangency: WordBool; ForceNonRational: WordBool; 
                              StartMatchingType: Smallint; EndMatchingType: Smallint); safecall;
    function IsOpenedViewOnly: WordBool; safecall;
    function IsOpenedReadOnly: WordBool; safecall;
    procedure ViewZoomToSelection; safecall;
    procedure FeatureBossThicken(Thickness: Double; Direction: Integer; FaceIndex: Integer); safecall;
    procedure FeatureCutThicken(Thickness: Double; Direction: Integer; FaceIndex: Integer); safecall;
    function InsertAxis: WordBool; safecall;
    procedure EditUndo(NSteps: LongWord); safecall;
    procedure SelectMidpoint; safecall;
    function ISketchSplineByEqnParams(var PropArray: SYSINT; var KnotsArray: Double; 
                                      var CntrlPntCoordArray: Double): Integer; safecall;
    function VersionHistory: OleVariant; safecall;
    function IVersionHistory: WideString; safecall;
    function IGetVersionHistoryCount: SYSINT; safecall;
    procedure Rebuild(Options: Integer); safecall;
    procedure InsertFeatureShellAddThickness(Thickness: Double); safecall;
    procedure InsertOffsetSurface(Thickness: Double; Reverse: WordBool); safecall;
    procedure SimplifySpline(ToleranceIn: Double); safecall;
    function Get_SummaryInfo(FieldId: Integer): WideString; safecall;
    procedure Set_SummaryInfo(FieldId: Integer; const Retval: WideString); safecall;
    function Get_CustomInfo(const FieldName: WideString): WideString; safecall;
    procedure Set_CustomInfo(const FieldName: WideString; const Retval: WideString); safecall;
    function GetCustomInfoCount: Integer; safecall;
    function GetCustomInfoType(const FieldName: WideString): WideString; safecall;
    function GetCustomInfoNames: OleVariant; safecall;
    function IGetCustomInfoNames: WideString; safecall;
    function AddCustomInfo(const FieldName: WideString; const FieldType: WideString; 
                           const FieldValue: WideString): WordBool; safecall;
    function DeleteCustomInfo(const FieldName: WideString): WordBool; safecall;
    procedure PrintOut2(FromPage: Integer; ToPage: Integer; NumCopies: Integer; Collate: WordBool; 
                        const Printer: WideString; Scale: Double; PrintToFile: WordBool; 
                        const PtfName: WideString); safecall;
    function SetReadOnlyState(SetReadOnly: WordBool): WordBool; safecall;
    function InsertFamilyTableOpen(const FileName: WideString): WordBool; safecall;
    function MultiSelectByRay(DoubleInfoIn: OleVariant; TypeWanted: Integer; Append: WordBool): WordBool; safecall;
    function IMultiSelectByRay(var PointIn: Double; var VectorIn: Double; RadiusIn: Double; 
                               TypeWanted: Integer; Append: WordBool): WordBool; safecall;
    procedure InsertNewNote3(const UpperText: WideString; NoLeader: WordBool; BentLeader: WordBool; 
                             ArrowStyle: Smallint; LeaderSide: Smallint; Angle: Double; 
                             BalloonStyle: Smallint; BalloonFit: Smallint; SmartArrow: WordBool); safecall;
    procedure InsertWeldSymbol2(const Dim1: WideString; const Symbol: WideString; 
                                const Dim2: WideString; Symmetric: WordBool; FieldWeld: WordBool; 
                                ShowOtherSide: WordBool; DashOnTop: WordBool; Peripheral: WordBool; 
                                HasProcess: WordBool; const ProcessValue: WideString); safecall;
    function InsertSurfaceFinishSymbol2(SymType: Integer; LeaderType: Integer; LocX: Double; 
                                        LocY: Double; LocZ: Double; LaySymbol: Integer; 
                                        ArrowType: Integer; const MachAllowance: WideString; 
                                        const OtherVals: WideString; const ProdMethod: WideString; 
                                        const SampleLen: WideString; 
                                        const MaxRoughness: WideString; 
                                        const MinRoughness: WideString; 
                                        const RoughnessSpacing: WideString): WordBool; safecall;
    function SaveSilent: Integer; safecall;
    function SaveAsSilent(const NewName: WideString; SaveAsCopy: WordBool): Integer; safecall;
    function AddCustomInfo2(const FieldName: WideString; FieldType: Integer; 
                            const FieldValue: WideString): WordBool; safecall;
    function GetCustomInfoType2(const FieldName: WideString): Integer; safecall;
    function InsertRefPoint: WordBool; safecall;
    function FeatureFillet2(R1: Double; Propagate: WordBool; Ftyp: WordBool; VarRadTyp: WordBool; 
                            OverflowType: Integer; NRadii: SYSINT; Radii: OleVariant): Integer; safecall;
    function IFeatureFillet2(R1: Double; Propagate: WordBool; Ftyp: WordBool; VarRadTyp: WordBool; 
                             OverflowType: Integer; NRadii: SYSINT; var Radii: Double): Integer; safecall;
    function GetFirstAnnotation: IDispatch; safecall;
    function IGetFirstAnnotation: IAnnotation; safecall;
    function InsertCoordinateSystem(XFlippedIn: WordBool; YFlippedIn: WordBool; ZFlippedIn: WordBool): WordBool; safecall;
    function GetToolbarVisibility(Toolbar: Integer): WordBool; safecall;
    procedure SetToolbarVisibility(Toolbar: Integer; Visibility: WordBool); safecall;
    procedure ViewDispCoordinateSystems; safecall;
    procedure ViewDispTempRefaxes; safecall;
    procedure ViewDispRefPoints; safecall;
    procedure ViewDispOrigins; safecall;
    function GetCoordinateSystemXformByName(const NameIn: WideString): OleVariant; safecall;
    function IGetCoordinateSystemXformByName(const NameIn: WideString): Double; safecall;
    function GetCurrentCoordinateSystemName: WideString; safecall;
    function EnumModelViews: IEnumModelViews; safecall;
    function InsertCompositeCurve: WordBool; safecall;
    procedure SketchParabola(Val1: Double; Val2: Double; Z1: Double; Val3: Double; Val4: Double; 
                             Z2: Double; Val5: Double; Val6: Double; Z3: Double; Val7: Double; 
                             Val8: Double; Z4: Double); safecall;
    procedure InsertRadiateSurface(Distance: Double; FlipDir: WordBool; TangentPropagate: WordBool); safecall;
    procedure InsertSewRefSurface; safecall;
    function InsertShape(PressureOn: Integer; TangentsOn: Integer; PressureGain: Double; 
                         TangentGain: Double; CurveSpringGain: Double; Alpha: Double; Beta: Double; 
                         Gamma: Double; Delta: Double; Degree: Integer; Split: Integer; 
                         Tuning: Integer): Integer; safecall;
    procedure InsertMfDraft2(Angle: Double; FlipDir: WordBool; IsEdgeDraft: WordBool; 
                             PropType: Integer; StepDraft: WordBool); safecall;
    function GetConfigurationCount: Integer; safecall;
    function GetConfigurationNames: OleVariant; safecall;
    function IGetConfigurationNames(var Count: Integer): WideString; safecall;
    procedure FeatureCut2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          KeepPieceIndex: Integer); safecall;
    procedure InsertCutSurface(Flip: WordBool; KeepPieceIndex: Integer); safecall;
    function GetDetailingDefaults: IDispatch; safecall;
    function IGetDetailingDefaults: IDetailingDefaults; safecall;
    function ListExternalFileReferencesCount(UseSearchRules: WordBool): Integer; safecall;
    function ListExternalFileReferences(UseSearchRules: WordBool): OleVariant; safecall;
    function IListExternalFileReferences(UseSearchRules: WordBool; NumRefs: Integer): WideString; safecall;
    function SketchSplineByEqnParams2(ParamsIn: OleVariant): WordBool; safecall;
    function GetFirstModelView: IDispatch; safecall;
    function IGetFirstModelView: IModelView; safecall;
    function InsertPlanarRefSurface: WordBool; safecall;
    function GetNext: IDispatch; safecall;
    function GetSaveFlag: WordBool; safecall;
    function AddCustomInfo3(const Configuration: WideString; const FieldName: WideString; 
                            FieldType: Integer; const FieldValue: WideString): WordBool; safecall;
    function Get_CustomInfo2(const Configuration: WideString; const FieldName: WideString): WideString; safecall;
    procedure Set_CustomInfo2(const Configuration: WideString; const FieldName: WideString; 
                              const Retval: WideString); safecall;
    function DeleteCustomInfo2(const Configuration: WideString; const FieldName: WideString): WordBool; safecall;
    function GetCustomInfoCount2(const Configuration: WideString): Integer; safecall;
    function GetCustomInfoNames2(const Configuration: WideString): OleVariant; safecall;
    function IGetCustomInfoNames2(const Configuration: WideString): WideString; safecall;
    function GetCustomInfoType3(const Configuration: WideString; const FieldName: WideString): Integer; safecall;
    function GetConsiderLeadersAsLines: WordBool; safecall;
    function SetConsiderLeadersAsLines(LeadersAsLines: WordBool): WordBool; safecall;
    procedure InsertRevolvedRefSurface(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                       RevType: SYSINT); safecall;
    function GetBendState: Integer; safecall;
    function SetBendState(BendState: Integer): Integer; safecall;
    function Get_ShowFeatureErrorDialog: WordBool; safecall;
    procedure Set_ShowFeatureErrorDialog(Retval: WordBool); safecall;
    procedure ClearUndoList; safecall;
    function GetFeatureManagerWidth: Integer; safecall;
    function SetFeatureManagerWidth(Width: Integer): Integer; safecall;
    function InsertProjectedSketch2(Reverse: Integer): IDispatch; safecall;
    function IInsertProjectedSketch2(Reverse: Integer): IFeature; safecall;
    function GetFeatureCount: Integer; safecall;
    function FeatureByPositionReverse(Num: Integer): IDispatch; safecall;
    function IFeatureByPositionReverse(Num: Integer): IFeature; safecall;
    function RayIntersections(BodiesIn: OleVariant; BasePointsIn: OleVariant; 
                              VectorsIn: OleVariant; Options: Integer; HitRadius: Double; 
                              Offset: Double): Integer; safecall;
    function IRayIntersections(var BodiesIn: IBody2; NumBodies: Integer; var BasePointsIn: Double; 
                               var VectorsIn: Double; NumRays: Integer; Options: Integer; 
                               HitRadius: Double; Offset: Double): Integer; safecall;
    function GetRayIntersectionsPoints: OleVariant; safecall;
    function IGetRayIntersectionsPoints: Double; safecall;
    function GetRayIntersectionsTopology: OleVariant; safecall;
    function IGetRayIntersectionsTopology: IUnknown; safecall;
    procedure EditSeedFeat; safecall;
    function EditSuppress: WordBool; safecall;
    function EditUnsuppress: WordBool; safecall;
    function EditUnsuppressDependent: WordBool; safecall;
    function EditRollback: WordBool; safecall;
    function Save2(Silent: WordBool): Integer; safecall;
    function SaveAs2(const NewName: WideString; SaveAsVersion: Integer; SaveAsCopy: WordBool; 
                     Silent: WordBool): Integer; safecall;
    procedure SetPopupMenuMode(ModeIn: SYSINT); safecall;
    function GetPopupMenuMode: SYSINT; safecall;
    procedure CloseFamilyTable; safecall;
    procedure CreatePlaneAtSurface(InterIndex: SYSINT; ProjOpt: WordBool; ReverseDir: WordBool; 
                                   NormalPlane: WordBool; Angle: Double); safecall;
    procedure SketchOffset(Offset: Double; ContourMode: WordBool); safecall;
    function CreateLinearSketchStepAndRepeat(NumX: Integer; NumY: Integer; SpacingX: Double; 
                                             SpacingY: Double; AngleX: Double; AngleY: Double; 
                                             const DeleteInstances: WideString): WordBool; safecall;
    function SetAmbientLightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                       Specular: Double; Colour: Integer; Enabled: WordBool; 
                                       Fixed: WordBool): WordBool; safecall;
    function GetAmbientLightProperties(const Name: WideString; var Ambient: Double; 
                                       var Diffuse: Double; var Specular: Double; 
                                       var Colour: Integer; var Enabled: WordBool; 
                                       var Fixed: WordBool): WordBool; safecall;
    function SetPointLightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                     Specular: Double; Colour: Integer; Enabled: WordBool; 
                                     Fixed: WordBool; X: Double; Y: Double; Z: Double): WordBool; safecall;
    function GetPointLightProperties(const Name: WideString; var Ambient: Double; 
                                     var Diffuse: Double; var Specular: Double; 
                                     var Colour: Integer; var Enabled: WordBool; 
                                     var Fixed: WordBool; var X: Double; var Y: Double; 
                                     var Z: Double): WordBool; safecall;
    function SetDirectionLightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                         Specular: Double; Colour: Integer; Enabled: WordBool; 
                                         Fixed: WordBool; X: Double; Y: Double; Z: Double): WordBool; safecall;
    function GetDirectionLightProperties(const Name: WideString; var Ambient: Double; 
                                         var Diffuse: Double; var Specular: Double; 
                                         var Colour: Integer; var Enabled: WordBool; 
                                         var Fixed: WordBool; var X: Double; var Y: Double; 
                                         var Z: Double): WordBool; safecall;
    function SetSpotlightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                    Specular: Double; Colour: Integer; Enabled: WordBool; 
                                    Fixed: WordBool; Posx: Double; Posy: Double; Posz: Double; 
                                    Targetx: Double; Targety: Double; Targetz: Double; 
                                    ConeAngle: Double): WordBool; safecall;
    function GetSpotlightProperties(const Name: WideString; var Ambient: Double; 
                                    var Diffuse: Double; var Specular: Double; var Colour: Integer; 
                                    var Enabled: WordBool; var Fixed: WordBool; var X: Double; 
                                    var Y: Double; var Z: Double; var Targetx: Double; 
                                    var Targety: Double; var Targetz: Double; var ConeAngle: Double): WordBool; safecall;
    procedure SplitOpenSegment(X: Double; Y: Double; Z: Double); safecall;
    procedure AutoInferToggle; safecall;
    procedure SketchRectangleAtAnyAngle(Val1: Double; Val2: Double; Z1: Double; Val3: Double; 
                                        Val4: Double; Z2: Double; Val3x: Double; Val3y: Double; 
                                        Z3: Double; Val5: WordBool); safecall;
    function CreateCircularSketchStepAndRepeat(ArcRadius: Double; ArcAngle: Double; 
                                               PatternNum: Integer; PatternSpacing: Double; 
                                               PatternRotate: WordBool; 
                                               const DeleteInstances: WideString): WordBool; safecall;
    procedure SplitClosedSegment(X0: Double; Y0: Double; Z0: Double; X1: Double; Y1: Double; 
                                 Z1: Double); safecall;
    function IsLightLockedToModel(LightId: Integer): WordBool; safecall;
    function LockLightToModel(LightId: Integer; Fix: WordBool): WordBool; safecall;
    function FeatureFillet3(R1: Double; Propagate: WordBool; Ftyp: SYSINT; VarRadTyp: WordBool; 
                            OverflowType: Integer; NRadii: SYSINT; Radii: OleVariant; 
                            UseHelpPoint: WordBool; UseTangentHoldLine: WordBool): Integer; safecall;
    function IFeatureFillet3(R1: Double; Propagate: WordBool; Ftyp: SYSINT; VarRadTyp: WordBool; 
                             OverflowType: Integer; NRadii: SYSINT; var Radii: Double; 
                             UseHelpPoint: WordBool; UseTangentHoldLine: WordBool): Integer; safecall;
    procedure InsertConnectionPoint; safecall;
    procedure InsertRoutePoint; safecall;
    procedure FeatureBossThicken2(Thickness: Double; Direction: Integer; FaceIndex: Integer; 
                                  FillVolume: WordBool); safecall;
    procedure FeatureCutThicken2(Thickness: Double; Direction: Integer; FaceIndex: Integer; 
                                 FillVolume: WordBool); safecall;
    function GetConfigurationByName(const Name: WideString): IDispatch; safecall;
    function IGetConfigurationByName(const Name: WideString): IConfiguration; safecall;
    function CreatePoint2(PointX: Double; PointY: Double; PointZ: Double): IDispatch; safecall;
    function ICreatePoint2(PointX: Double; PointY: Double; PointZ: Double): ISketchPoint; safecall;
    function CreateLine2(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                         P2z: Double): IDispatch; safecall;
    function ICreateLine2(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                          P2z: Double): ISketchSegment; safecall;
    function GetActiveSketch2: IDispatch; safecall;
    function IGetActiveSketch2: ISketch; safecall;
    procedure DrawLightIcons; safecall;
    function GetLayerManager: IDispatch; safecall;
    function IGetLayerManager: ILayerMgr; safecall;
    function CreateCircle2(XC: Double; YC: Double; Zc: Double; Xp: Double; Yp: Double; Zp: Double): IDispatch; safecall;
    function ICreateCircle2(XC: Double; YC: Double; Zc: Double; Xp: Double; Yp: Double; Zp: Double): ISketchSegment; safecall;
    function CreateCircleByRadius2(XC: Double; YC: Double; Zc: Double; Radius: Double): IDispatch; safecall;
    function ICreateCircleByRadius2(XC: Double; YC: Double; Zc: Double; Radius: Double): ISketchSegment; safecall;
    function CreateArc2(XC: Double; YC: Double; Zc: Double; Xp1: Double; Yp1: Double; Zp1: Double; 
                        Xp2: Double; Yp2: Double; Zp2: Double; Direction: Smallint): IDispatch; safecall;
    function ICreateArc2(XC: Double; YC: Double; Zc: Double; Xp1: Double; Yp1: Double; Zp1: Double; 
                         Xp2: Double; Yp2: Double; Zp2: Double; Direction: Smallint): ISketchSegment; safecall;
    function CreateEllipse2(CenterX: Double; CenterY: Double; CenterZ: Double; MajorX: Double; 
                            MajorY: Double; MajorZ: Double; MinorX: Double; MinorY: Double; 
                            MinorZ: Double): IDispatch; safecall;
    function ICreateEllipse2(CenterX: Double; CenterY: Double; CenterZ: Double; MajorX: Double; 
                             MajorY: Double; MajorZ: Double; MinorX: Double; MinorY: Double; 
                             MinorZ: Double): ISketchSegment; safecall;
    function CreateEllipticalArc2(CenterX: Double; CenterY: Double; CenterZ: Double; 
                                  MajorX: Double; MajorY: Double; MajorZ: Double; MinorX: Double; 
                                  MinorY: Double; MinorZ: Double; StartX: Double; StartY: Double; 
                                  StartZ: Double; EndX: Double; EndY: Double; EndZ: Double): IDispatch; safecall;
    function ICreateEllipticalArc2(CenterX: Double; CenterY: Double; CenterZ: Double; 
                                   MajorX: Double; MajorY: Double; MajorZ: Double; MinorX: Double; 
                                   MinorY: Double; MinorZ: Double; StartX: Double; StartY: Double; 
                                   StartZ: Double; EndX: Double; EndY: Double; EndZ: Double): ISketchSegment; safecall;
    function CreateSpline(PointData: OleVariant): IDispatch; safecall;
    function ICreateSpline(PointCount: Integer; var PointData: Double): ISketchSegment; safecall;
    procedure ViewZoomtofit2; safecall;
    procedure SetInferenceMode(InferenceMode: WordBool); safecall;
    function GetInferenceMode: WordBool; safecall;
    function SetTitle2(const NewTitle: WideString): WordBool; safecall;
    function SketchFillet2(Rad: Double; ConstrainedCorners: Smallint): WordBool; safecall;
    function IsTessellationValid: WordBool; safecall;
    procedure EditRoute; safecall;
    procedure FileReload; safecall;
    function GetDesignTable: IDispatch; safecall;
    function IGetDesignTable: IDesignTable; safecall;
    function GetEntityName(const Entity: IDispatch): WideString; safecall;
    function IGetEntityName(const Entity: IEntity): WideString; safecall;
    function IGetNext: IModelDoc2; safecall;
    function ShowConfiguration2(const ConfigurationName: WideString): WordBool; safecall;
    function AddConfiguration2(const Name: WideString; const Comment: WideString; 
                               const AlternateName: WideString; SuppressByDefault: WordBool; 
                               HideByDefault: WordBool; MinFeatureManager: WordBool; 
                               InheritProperties: WordBool; Flags: LongWord): WordBool; safecall;
    function DeleteConfiguration2(const ConfigurationName: WideString): WordBool; safecall;
    function EditConfiguration2(const Name: WideString; const NewName: WideString; 
                                const Comment: WideString; const AlternateName: WideString; 
                                SuppressByDefault: WordBool; HideByDefault: WordBool; 
                                MinFeatureManager: WordBool; InheritProperties: WordBool; 
                                Flags: LongWord): WordBool; safecall;
    function CreateSplineByEqnParams(ParamsIn: OleVariant): IDispatch; safecall;
    function ICreateSplineByEqnParams(var PropArray: SYSINT; var KnotsArray: Double; 
                                      var CntrlPntCoordArray: Double): ISketchSegment; safecall;
    function CreateFeatureMgrView2(var Bitmap: Integer; const ToolTip: WideString): IDispatch; safecall;
    function ICreateFeatureMgrView2(var Bitmap: Integer; const ToolTip: WideString): IFeatMgrView; safecall;
    function AddFeatureMgrView2(var Bitmap: Integer; var AppView: Integer; const ToolTip: WideString): WordBool; safecall;
    procedure FeatureCut3(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          KeepPieceIndex: Integer); safecall;
    function GetFirstAnnotation2: IDispatch; safecall;
    function IGetFirstAnnotation2: IAnnotation; safecall;
    procedure InsertExtendSurface(ExtendLinear: WordBool; EndCondition: Integer; Distance: Double); safecall;
    procedure InsertTangencySurface(OneSide: WordBool; IsFlip: WordBool); safecall;
    function CreateSplinesByEqnParams(ParamsIn: OleVariant): OleVariant; safecall;
    function ICreateSplinesByEqnParams(var PropArray: SYSINT; var KnotsArray: Double; 
                                       var CntrlPntCoordArray: Double): IEnumSketchSegments; safecall;
    function CreateClippedSplines(ParamsIn: OleVariant; X1: Double; Y1: Double; X2: Double; 
                                  Y2: Double): OleVariant; safecall;
    function ICreateClippedSplines(var PropArray: SYSINT; var KnotsArray: Double; 
                                   var CntrlPntCoordArray: Double; X1: Double; Y1: Double; 
                                   X2: Double; Y2: Double): IEnumSketchSegments; safecall;
    function EditSuppress2: WordBool; safecall;
    function EditUnsuppress2: WordBool; safecall;
    function EditUnsuppressDependent2: WordBool; safecall;
    function EditRollback2: WordBool; safecall;
    procedure HideDimension; safecall;
    procedure ShowFeatureDimensions; safecall;
    procedure HideFeatureDimensions; safecall;
    procedure Sketch3DIntersections; safecall;
    function FeatureFillet4(R1: Double; Propagate: WordBool; UniformRadius: WordBool; Ftyp: SYSINT; 
                            VarRadTyp: WordBool; OverflowType: Integer; NRadii: SYSINT; 
                            Radii: OleVariant; UseHelpPoint: WordBool; 
                            UseTangentHoldLine: WordBool; CornerType: WordBool; 
                            SetbackDistCount: SYSINT; SetBackDistances: OleVariant): Integer; safecall;
    function IFeatureFillet4(R1: Double; Propagate: WordBool; UniformRadius: WordBool; 
                             Ftyp: SYSINT; VarRadTyp: WordBool; OverflowType: Integer; 
                             NRadii: SYSINT; var Radii: Double; UseHelpPoint: WordBool; 
                             UseTangentHoldLine: WordBool; CornerType: WordBool; 
                             SetbackDistCount: SYSINT; var SetBackDistances: Double): Integer; safecall;
    procedure InsertDeleteFace; safecall;
    function GetDependencies2(Traverseflag: WordBool; Searchflag: WordBool; 
                              AddReadOnlyInfo: WordBool): OleVariant; safecall;
    function IGetDependencies2(Traverseflag: WordBool; Searchflag: WordBool; 
                               AddReadOnlyInfo: WordBool): WideString; safecall;
    function IGetNumDependencies2(Traverseflag: WordBool; Searchflag: WordBool; 
                                  AddReadOnlyInfo: WordBool): Integer; safecall;
    procedure InsertScale(ScaleFactor_x: Double; ScaleFactor_y: Double; ScaleFactor_z: Double; 
                          IsUniform: WordBool; ScaleType: SYSINT); safecall;
    procedure LockAllExternalReferences; safecall;
    procedure UnlockAllExternalReferences; safecall;
    procedure BreakAllExternalReferences; safecall;
    function EditDimensionProperties(TolType: Integer; TolMax: Double; TolMin: Double; 
                                     const TolMaxFit: WideString; const TolMinFit: WideString; 
                                     UseDocPrec: WordBool; Precision: Integer; ArrowsIn: Integer; 
                                     UseDocArrows: WordBool; Arrow1: Integer; Arrow2: Integer): WordBool; safecall;
    function SketchPolygon(XCenter: Double; YCenter: Double; XEdge: Double; YEdge: Double; 
                           NSides: SYSINT; BInscribed: WordBool): WordBool; safecall;
    function GetBlockingState: Integer; safecall;
    function CreateFeatureMgrView3(var Bitmap: Integer; const ToolTip: WideString; 
                                   WhichPane: Integer): IDispatch; safecall;
    function ICreateFeatureMgrView3(var Bitmap: Integer; const ToolTip: WideString; 
                                    WhichPane: Integer): IFeatMgrView; safecall;
    function AddFeatureMgrView3(var Bitmap: Integer; var AppView: Integer; 
                                const ToolTip: WideString; WhichPane: Integer): WordBool; safecall;
    function CreatePlaneAtOffset2(Val: Double; FlipDir: WordBool): IDispatch; safecall;
    function ICreatePlaneAtOffset2(Val: Double; FlipDir: WordBool): IRefPlane; safecall;
    function CreatePlaneAtAngle2(Val: Double; FlipDir: WordBool): IDispatch; safecall;
    function ICreatePlaneAtAngle2(Val: Double; FlipDir: WordBool): IRefPlane; safecall;
    function CreatePlaneThru3Points2: IDispatch; safecall;
    function ICreatePlaneThru3Points2: IRefPlane; safecall;
    function CreatePlanePerCurveAndPassPoint2(OrigAtCurve: WordBool): IDispatch; safecall;
    function ICreatePlanePerCurveAndPassPoint2(OrigAtCurve: WordBool): IRefPlane; safecall;
    function CreatePlaneAtSurface2(InterIndex: SYSINT; ProjOpt: WordBool; ReverseDir: WordBool; 
                                   NormalPlane: WordBool; Angle: Double): IDispatch; safecall;
    function ICreatePlaneAtSurface2(InterIndex: SYSINT; ProjOpt: WordBool; ReverseDir: WordBool; 
                                    NormalPlane: WordBool; Angle: Double): IRefPlane; safecall;
    function GetUserPreferenceIntegerValue(UserPreferenceValue: Integer): Integer; safecall;
    function SetUserPreferenceIntegerValue(UserPreferenceValue: Integer; Value: Integer): WordBool; safecall;
    function GetUserPreferenceTextFormat(UserPreferenceValue: Integer): IDispatch; safecall;
    function IGetUserPreferenceTextFormat(UserPreferenceValue: Integer): ITextFormat; safecall;
    function SetUserPreferenceTextFormat(UserPreferenceValue: Integer; const Value: IDispatch): WordBool; safecall;
    function ISetUserPreferenceTextFormat(UserPreferenceValue: Integer; const Value: ITextFormat): WordBool; safecall;
    procedure InsertRib2(Is2Sided: WordBool; ReverseThicknessDir: WordBool; Thickness: Double; 
                         ReferenceEdgeIndex: Integer; ReverseMaterialDir: WordBool; 
                         IsDrafted: WordBool; DraftOutward: WordBool; DraftAngle: Double; 
                         IsNormToSketch: WordBool); safecall;
    function InsertObjectFromFile(const FilePath: WideString; CreateLink: WordBool; Xx: Double; 
                                  Yy: Double; Zz: Double): WordBool; safecall;
    procedure InspectCurvature; safecall;
    procedure RemoveInspectCurvature; safecall;
    function InsertDatumTag2: IDispatch; safecall;
    function IInsertDatumTag2: IDatumTag; safecall;
    function ActivateFeatureMgrView(var AppView: Integer): Integer; safecall;
    procedure FeatureSketchDrivenPattern(UseCentroid: WordBool); safecall;
    procedure HideShowBodies; safecall;
    procedure HideSolidBody; safecall;
    procedure ShowSolidBody; safecall;
    procedure InsertFramePoint(Xx: Double; Yy: Double; Zz: Double); safecall;
    procedure LockFramePoint; safecall;
    procedure UnlockFramePoint; safecall;
    function InsertGtol: IDispatch; safecall;
    function IInsertGtol: IGtol; safecall;
    function DeActivateFeatureMgrView(var AppView: Integer): WordBool; safecall;
    function InsertNote(const Text: WideString): IDispatch; safecall;
    function IInsertNote(const Text: WideString): INote; safecall;
    procedure SetSaveAsFileName(const FileName: WideString); safecall;
    procedure ClosePrintPreview; safecall;
    procedure HideComponent2; safecall;
    procedure ShowComponent2; safecall;
    function SaveBMP(const FileNameIn: WideString; WidthIn: Integer; HeightIn: Integer): WordBool; safecall;
    procedure InsertSketch2(UpdateEditRebuild: WordBool); safecall;
    procedure Insert3DSketch2(UpdateEditRebuild: WordBool); safecall;
    procedure InsertDeleteHole; safecall;
    procedure PreTrimSurface(BMutualTrimIn: WordBool); safecall;
    procedure PostTrimSurface(BSewSurfaceIn: WordBool); safecall;
    procedure SketchConvertIsoCurves(PercentRatio: Double; VORuDir: WordBool; 
                                     DoConstrain: WordBool; SkipHoles: WordBool); safecall;
    procedure SelectLoop; safecall;
    procedure InsertSheetMetalBaseFlange(Thickness: Double; ThickenDir: WordBool; Radius: Double; 
                                         ExtrudeDist1: Double; ExtrudeDist2: Double; 
                                         FlipExtruDir: WordBool; EndCondition1: Integer; 
                                         EndCondition2: Integer; DirToUse: Integer); safecall;
    procedure InsertSheetMetalFold; safecall;
    procedure InsertSheetMetalUnfold; safecall;
    procedure InsertSheetMetalMiterFlange(UseReliefRatio: WordBool; UseDefaultGap: WordBool; 
                                          UseAutoRelief: WordBool; GlobalRadius: Double; 
                                          RipGap: Double; AutoReliefRatio: Double; 
                                          AutoReliefWidth: Double; AutoReliefDepth: Double; 
                                          ReliefType: Integer; RipLocation: Integer; 
                                          TrimSideBends: WordBool); safecall;
    procedure CreateGroup; safecall;
    procedure RemoveItemsFromGroup; safecall;
    procedure RemoveGroups; safecall;
    function InsertBOMBalloon2(Style: Integer; Size: Integer; UpperTextStyle: Integer; 
                               const UpperText: WideString; LowerTextStyle: Integer; 
                               const LowerText: WideString): IDispatch; safecall;
    function IInsertBOMBalloon2(Style: Integer; Size: Integer; UpperTextStyle: Integer; 
                                const UpperText: WideString; LowerTextStyle: Integer; 
                                const LowerText: WideString): INote; safecall;
    procedure EditRedo(NSteps: LongWord); safecall;
    procedure InsertProtrusionBlend4(Closed: WordBool; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; TessToleranceFactor: Double; 
                                     StartMatchingType: Smallint; EndMatchingType: Smallint; 
                                     IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                                     ThinType: Smallint); safecall;
    procedure InsertCutBlend4(Closed: WordBool; KeepTangency: WordBool; ForceNonRational: WordBool; 
                              TessToleranceFactor: Double; StartMatchingType: Smallint; 
                              EndMatchingType: Smallint; IsThinBody: WordBool; Thickness1: Double; 
                              Thickness2: Double; ThinType: Smallint); safecall;
    procedure InsertProtrusionSwept4(Propagate: WordBool; Alignment: WordBool; 
                                     TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; StartMatchingType: Smallint; 
                                     EndMatchingType: Smallint; IsThinBody: WordBool; 
                                     Thickness1: Double; Thickness2: Double; ThinType: Smallint); safecall;
    procedure InsertCutSwept4(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                              KeepTangency: WordBool; ForceNonRational: WordBool; 
                              StartMatchingType: Smallint; EndMatchingType: Smallint; 
                              IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                              ThinType: Smallint); safecall;
    procedure SelectTangency; safecall;
    function InsertBendTableOpen(const FileName: WideString): WordBool; safecall;
    function InsertBendTableNew(const FileName: WideString; const Units: WideString; 
                                const Type_: WideString): WordBool; safecall;
    procedure InsertBendTableEdit; safecall;
    procedure DeleteBendTable; safecall;
    procedure InsertSheetMetal3dBend(Angle: Double; Radius: Double; FlipDir: WordBool; 
                                     BendPos: Smallint); safecall;
    function CreateTangentArc2(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                               P2z: Double; ArcTypeIn: Integer): WordBool; safecall;
    function GetMassProperties2(var Status: Integer): OleVariant; safecall;
    function IGetMassProperties2(var Status: Integer): Double; safecall;
    procedure SketchChamfer(AngleORdist: Double; Dist1: Double; Options: Integer); safecall;
    procedure FeatureCut4(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          KeepPieceIndex: Integer; NormalCut: WordBool); safecall;
    function GetPropertyManagerPage(DialogId: Integer; const Title: WideString; 
                                    const Handler: IUnknown): IPropertyManagerPage; safecall;
    procedure AlignOrdinate; safecall;
    procedure EditOrdinate; safecall;
    function ReattachOrdinate: WordBool; safecall;
    function EditBalloonProperties(Style: Integer; Size: Integer; UpperTextStyle: Integer; 
                                   const UpperText: WideString; LowerTextStyle: Integer; 
                                   const LowerText: WideString): IDispatch; safecall;
    function EditDimensionProperties2(TolType: Integer; TolMax: Double; TolMin: Double; 
                                      const TolMaxFit: WideString; const TolMinFit: WideString; 
                                      UseDocPrec: WordBool; Precision: Integer; ArrowsIn: Integer; 
                                      UseDocArrows: WordBool; Arrow1: Integer; Arrow2: Integer; 
                                      const PrefixText: WideString; const SuffixText: WideString; 
                                      ShowValue: WordBool; const CalloutText1: WideString; 
                                      const CalloutText2: WideString; CenterText: WordBool): WordBool; safecall;
    procedure InsertSheetMetalClosedCorner; safecall;
    function SketchUseEdge2(Chain: WordBool): WordBool; safecall;
    function SketchOffsetEntities2(Offset: Double; BothDirections: WordBool; Chain: WordBool): WordBool; safecall;
    function SketchOffset2(Offset: Double; BothDirections: WordBool; Chain: WordBool): WordBool; safecall;
    function AddDimension2(X: Double; Y: Double; Z: Double): IDispatch; safecall;
    function IAddDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; safecall;
    function AddHorizontalDimension2(X: Double; Y: Double; Z: Double): IDispatch; safecall;
    function IAddHorizontalDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; safecall;
    function AddVerticalDimension2(X: Double; Y: Double; Z: Double): IDispatch; safecall;
    function IAddVerticalDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; safecall;
    function AddRadialDimension2(X: Double; Y: Double; Z: Double): IDispatch; safecall;
    function IAddRadialDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; safecall;
    function AddDiameterDimension2(X: Double; Y: Double; Z: Double): IDispatch; safecall;
    function IAddDiameterDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; safecall;
    function GetUserUnit(UnitType: Integer): IDispatch; safecall;
    function IGetUserUnit(UnitType: Integer): IUserUnit; safecall;
    function InsertWeldSymbol3: IDispatch; safecall;
    function IInsertWeldSymbol3: IWeldSymbol; safecall;
    function SaveAs3(const NewName: WideString; SaveAsVersion: Integer; Options: Integer): Integer; safecall;
    function GetUserPreferenceStringValue(UserPreference: Integer): WideString; safecall;
    function SetUserPreferenceStringValue(UserPreference: Integer; const Value: WideString): WordBool; safecall;
    procedure DeleteDesignTable; safecall;
    function EditRebuild3: WordBool; safecall;
    function ForceRebuild3(TopOnly: WordBool): WordBool; safecall;
    function FeatureFillet5(Options: Integer; R1: Double; Ftyp: Integer; OverflowType: Integer; 
                            Radii: OleVariant; SetBackDistances: OleVariant; 
                            PointRadiusArray: OleVariant): Integer; safecall;
    function IFeatureFillet5(Options: Integer; R1: Double; Ftyp: Integer; OverflowType: Integer; 
                             NRadii: Integer; var Radii: Double; SetbackDistCount: Integer; 
                             var SetBackDistances: Double; PointCount: Integer; 
                             var PointRadiusArray: Double): Integer; safecall;
    procedure InsertSheetMetalBreakCorner(Type_: Integer; Distance: Double); safecall;
    procedure InsertSheetMetalHem(Type_: Integer; Position: Integer; Reverse: WordBool; 
                                  DLength: Double; DGap: Double; DAngle: Double; DRad: Double; 
                                  DMiterGap: Double); safecall;
    function CreatePlaneAtOffset3(Val: Double; FlipDir: WordBool; AutoSize: WordBool): IDispatch; safecall;
    function ICreatePlaneAtOffset3(Val: Double; FlipDir: WordBool; AutoSize: WordBool): IRefPlane; safecall;
    function CreatePlaneAtAngle3(Val: Double; FlipDir: WordBool; AutoSize: WordBool): IDispatch; safecall;
    function ICreatePlaneAtAngle3(Val: Double; FlipDir: WordBool; AutoSize: WordBool): IRefPlane; safecall;
    function CreatePlaneThru3Points3(AutoSize: WordBool): IDispatch; safecall;
    function ICreatePlaneThru3Points3(AutoSize: WordBool): IRefPlane; safecall;
    function CreatePlaneThruPtParallelToPlane(AutoSize: WordBool): IDispatch; safecall;
    function ICreatePlaneThruPtParallelToPlane(AutoSize: WordBool): IRefPlane; safecall;
    function CreatePlaneThruLineAndPt(AutoSize: WordBool): IDispatch; safecall;
    function ICreatePlaneThruLineAndPt(AutoSize: WordBool): IRefPlane; safecall;
    function CreatePlanePerCurveAndPassPoint3(OrigAtCurve: WordBool; AutoSize: WordBool): IDispatch; safecall;
    function ICreatePlanePerCurveAndPassPoint3(OrigAtCurve: WordBool; AutoSize: WordBool): IRefPlane; safecall;
    function CreatePlaneAtSurface3(InterIndex: Smallint; ProjOpt: WordBool; ReverseDir: WordBool; 
                                   NormalPlane: WordBool; Angle: Double; AutoSize: WordBool): IDispatch; safecall;
    function ICreatePlaneAtSurface3(InterIndex: Smallint; ProjOpt: WordBool; ReverseDir: WordBool; 
                                    NormalPlane: WordBool; Angle: Double; AutoSize: WordBool): IRefPlane; safecall;
    function InsertAxis2(AutoSize: WordBool): WordBool; safecall;
    function InsertSketchPicture(const FileName: WideString): WordBool; safecall;
    procedure GetZebraStripeData(var Size: Double; var Ratio: Double; var Color1: Integer; 
                                 var Color2: Integer); safecall;
    procedure SetZebraStripeData(Size: Double; Ratio: Double; Color1: Integer; Color2: Integer); safecall;
    procedure InsertSketchPictureData(Width: Smallint; Height: Smallint; PDataIn: Integer); safecall;
    procedure FeatureCurvePattern(Num1: Integer; Spacing1: Double; Num2: Integer; Spacing2: Double; 
                                  FlipDir1: WordBool; FlipDir2: WordBool; EqualSpacing1: WordBool; 
                                  EqualSpacing2: WordBool; UseCentroid: WordBool; 
                                  AlignToSeed: WordBool; OffsetCurve: WordBool; 
                                  PatternSeedOnly: WordBool); safecall;
    procedure InsertFeatureReplaceFace; safecall;
    procedure InsertRip(Gap: Double); safecall;
    function InsertSheetMetalEdgeFlange(const FlangeEdge: IDispatch; const SketchFeat: IDispatch; 
                                        BooleanOptions: Integer; DAngle: Double; DRadius: Double; 
                                        BendPosition: Integer; DOffsetDist: Double; 
                                        ReliefType: Integer; DReliefRatio: Double; 
                                        DReliefWidth: Double; DReliefDepth: Double): IDispatch; safecall;
    function IInsertSheetMetalEdgeFlange(const FlangeEdge: IEdge; const SketchFeat: IFeature; 
                                         BooleanOptions: Integer; DAngle: Double; DRadius: Double; 
                                         BendPosition: Integer; DOffsetDist: Double; 
                                         ReliefType: Integer; DReliefRatio: Double; 
                                         DReliefWidth: Double; DReliefDepth: Double): IFeature; safecall;
    function InsertSketchText(Ptx: Double; Pty: Double; Ptz: Double; const Text: WideString; 
                              Alignment: Integer; FlipDirection: Integer; 
                              HorizontalMirror: Integer; WidthFactor: Integer; 
                              SpaceBetweenChars: Integer): IDispatch; safecall;
    function IInsertSketchText(Ptx: Double; Pty: Double; Ptz: Double; const Text: WideString; 
                               Alignment: Integer; FlipDirection: Integer; 
                               HorizontalMirror: Integer; WidthFactor: Integer; 
                               SpaceBetweenChars: Integer): ISketchText; safecall;
    procedure DissolveSketchText; safecall;
    procedure MoldDraftAnalysis(Angle: Double; Options: Integer; Colors: OleVariant; Shows: Integer); safecall;
    procedure InsertSheetMetalJog(Angle: Double; Radius: Double; OffsetDist: Double; 
                                  FlipDir: WordBool; FixProjLen: WordBool; DimPos: Smallint; 
                                  BendPos: Smallint); safecall;
    function InsertSketchForEdgeFlange(const FlangeEdge: IDispatch; DAngle: Double; 
                                       FlipDir: WordBool): IDispatch; safecall;
    function IInsertSketchForEdgeFlange(const FlangeEdge: IEdge; DAngle: Double; FlipDir: WordBool): IFeature; safecall;
    procedure ClearSelection2(All: WordBool); safecall;
    procedure ListExternalFileReferences2(out ModelPathName: OleVariant; 
                                          out ComponentPathName: OleVariant; 
                                          out Feature: OleVariant; out DataType: OleVariant; 
                                          out Status: OleVariant; out RefEntity: OleVariant; 
                                          out FeatCom: OleVariant); safecall;
    function ListExternalFileReferencesCount2: Integer; safecall;
    procedure IListExternalFileReferences2(NumRefs: Integer; out ModelPathName: WideString; 
                                           out CompPathName: WideString; out Feature: WideString; 
                                           out DataType: WideString; out Status: Integer; 
                                           out RefEntity: WideString; out FeatComp: WideString); safecall;
    function InsertDeleteFace2(Refill: Integer): WordBool; safecall;
    procedure AddLoftSection; safecall;
    function InsertMacroFeature(const CmdFile: WideString; const CmdModule: WideString; 
                                const CmdProcedure: WideString; ParamNames: OleVariant; 
                                ParamTypes: OleVariant; ParamValues: OleVariant; 
                                const PmFile: WideString; const PmModule: WideString; 
                                const PmProcedure: WideString): IDispatch; safecall;
    function IInsertMacroFeature(const CmdFile: WideString; const CmdModule: WideString; 
                                 const CmdProcedure: WideString; ParamCount: Integer; 
                                 var ParamNames: WideString; var ParamTypes: Integer; 
                                 var ParamValues: WideString; const PmFile: WideString; 
                                 const PmModule: WideString; const PmProcedure: WideString): IFeature; safecall;
    procedure ListAuxiliaryExternalFileReferences(out Feature: OleVariant; 
                                                  out ExternalFileName: OleVariant); safecall;
    function ListAuxiliaryExternalFileReferencesCount: Integer; safecall;
    procedure IListAuxiliaryExternalFileReferences(NumRefs: Integer; out Feature: WideString; 
                                                   out ExternalFileName: WideString); safecall;
    procedure FeatureCut5(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          TranslateSurface1: WordBool; TranslateSurface2: WordBool; 
                          KeepPieceIndex: Integer; NormalCut: WordBool); safecall;
    procedure FeatureBoss2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                           D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                           Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                           OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                           TranslateSurface1: WordBool; TranslateSurface2: WordBool); safecall;
    function DissolveLibraryFeature: WordBool; safecall;
    procedure FeatureExtruRefSurface2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                      T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                      Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; 
                                      Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                                      OffsetReverse2: WordBool; TranslateSurface1: WordBool; 
                                      TranslateSurface2: WordBool); safecall;
    procedure FeatureCutThin2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                              T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                              Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                              Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                              TranslateSurface1: WordBool; TranslateSurface2: WordBool; 
                              Thk1: Double; Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                              CapEnds: Integer; AddBends: WordBool; BendRad: Double); safecall;
    procedure FeatureBossThin2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                               T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                               Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                               Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                               TranslateSurface1: WordBool; TranslateSurface2: WordBool; 
                               Thk1: Double; Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                               CapEnds: Integer; AddBends: WordBool; BendRad: Double); safecall;
    procedure SimpleHole3(Dia: Double; Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                          T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          TranslateSurface1: WordBool; TranslateSurface2: WordBool); safecall;
    procedure EditUndo2(Steps: Integer); safecall;
    procedure EditRedo2(Steps: Integer); safecall;
    function AddConfiguration3(const Name: WideString; const Comment: WideString; 
                               const AlternateName: WideString; Options: Integer): IDispatch; safecall;
    function IAddConfiguration3(const Name: WideString; const Comment: WideString; 
                                const AlternateName: WideString; Options: Integer): IConfiguration; safecall;
    function EditConfiguration3(const Name: WideString; const NewName: WideString; 
                                const Comment: WideString; const AlternateName: WideString; 
                                Options: Integer): WordBool; safecall;
    function GetEquationMgr: IEquationMgr; safecall;
    function ClosestDistance(const Object1: IDispatch; const Object2: IDispatch; 
                             out Point1: OleVariant; out Point2: OleVariant): Double; safecall;
    function IClosestDistance(const Object1: IDispatch; const Object2: IDispatch; 
                              out Point1: Double; out Point2: Double): Double; safecall;
    function ReloadOrReplace(ReadOnly: WordBool; const ReplaceFileName: WideString; 
                             DiscardChanges: WordBool): Integer; safecall;
    function Get_FeatureManagerSplitterPosition: Double; safecall;
    procedure Set_FeatureManagerSplitterPosition(SplitterPosition: Double); safecall;
    function GetCustomInfoValue(const Configuration: WideString; const FieldName: WideString): WideString; safecall;
    function Get_Printer: WideString; safecall;
    procedure Set_Printer(const Name: WideString); safecall;
    function Get_PageSetup: IDispatch; safecall;
    function Get_IPageSetup: IPageSetup; safecall;
    function InsertStackedBalloon(Style: Integer; Size: Integer; UpperTextStyle: Integer; 
                                  const UpperText: WideString; LowerTextStyle: Integer; 
                                  const LowerText: WideString): INote; safecall;
    function SaveAs4(const Name: WideString; Version: Integer; Options: Integer; 
                     var Errors: Integer; var Warnings: Integer): WordBool; safecall;
    function Save3(Options: Integer; var Errors: Integer; var Warnings: Integer): WordBool; safecall;
    function CreatePlaneFixed2(P1: OleVariant; P2: OleVariant; P3: OleVariant; UseGlobal: WordBool): IDispatch; safecall;
    function ICreatePlaneFixed2(var P1: Double; var P2: Double; var P3: Double; UseGlobal: WordBool): IRefPlane; safecall;
    function Get_LargeAssemblyMode: WordBool; safecall;
    procedure Set_LargeAssemblyMode(Large: WordBool); safecall;
    function AddOrEditConfiguration(const ConfigName: WideString; Params: OleVariant; 
                                    Values: OleVariant): Integer; safecall;
    function IAddOrEditConfiguration(const ConfigName: WideString; ParamCount: Integer; 
                                     var ParamNames: WideString; var ParamValues: WideString): Integer; safecall;
    function ForceReleaseLocks: Integer; safecall;
    function Get_FeatureManager: IFeatureManager; safecall;
    function Get_ModelViewManager: IModelViewManager; safecall;
    function Get_Extension: IModelDocExtension; safecall;
    function Get_ConfigurationManager: IConfigurationManager; safecall;
    function Get_SketchManager: ISketchManager; safecall;
    function EditDimensionProperties3(TolType: Integer; TolMax: Double; TolMin: Double; 
                                      const TolMaxFit: WideString; const TolMinFit: WideString; 
                                      UseDocPrec: WordBool; Precision: Integer; ArrowsIn: Integer; 
                                      UseDocArrows: WordBool; Arrow1: Integer; Arrow2: Integer; 
                                      const PrefixText: WideString; const SuffixText: WideString; 
                                      ShowValue: WordBool; const CalloutText1: WideString; 
                                      const CalloutText2: WideString; CenterText: WordBool; 
                                      ConfigOption: Integer; ConfigNames: OleVariant): WordBool; safecall;
    function IEditDimensionProperties3(TolType: Integer; TolMax: Double; TolMin: Double; 
                                       const TolMaxFit: WideString; const TolMinFit: WideString; 
                                       UseDocPrec: WordBool; Precision: Integer; ArrowsIn: Integer; 
                                       UseDocArrows: WordBool; Arrow1: Integer; Arrow2: Integer; 
                                       const PrefixText: WideString; const SuffixText: WideString; 
                                       ShowValue: WordBool; const CalloutText1: WideString; 
                                       const CalloutText2: WideString; CenterText: WordBool; 
                                       ConfigOption: Integer; Count: Integer; 
                                       var ConfigNames: WideString): WordBool; safecall;
    property SelectionManager: IDispatch read Get_SelectionManager write Set_SelectionManager;
    property ISelectionManager: ISelectionMgr read Get_ISelectionManager;
    property ActiveView: IDispatch read Get_ActiveView write Set_ActiveView;
    property IActiveView: IModelView read Get_IActiveView;
    property LengthUnit: Integer read Get_LengthUnit write Set_LengthUnit;
    property LightSourceUserName[ID: Integer]: WideString read Get_LightSourceUserName write Set_LightSourceUserName;
    property LightSourcePropertyValues[ID: Integer]: OleVariant read Get_LightSourcePropertyValues write Set_LightSourcePropertyValues;
    property SceneName: WideString read Get_SceneName write Set_SceneName;
    property SceneUserName: WideString read Get_SceneUserName write Set_SceneUserName;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property MaterialUserName: WideString read Get_MaterialUserName write Set_MaterialUserName;
    property MaterialIdName: WideString read Get_MaterialIdName write Set_MaterialIdName;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
    property PrintSetup[SetupType: Integer]: Smallint read Get_PrintSetup write Set_PrintSetup;
    property SceneBkgImageFileName: WideString read Get_SceneBkgImageFileName write Set_SceneBkgImageFileName;
    property SummaryInfo[FieldId: Integer]: WideString read Get_SummaryInfo write Set_SummaryInfo;
    property CustomInfo[const FieldName: WideString]: WideString read Get_CustomInfo write Set_CustomInfo;
    property CustomInfo2[const Configuration: WideString; const FieldName: WideString]: WideString read Get_CustomInfo2 write Set_CustomInfo2;
    property ShowFeatureErrorDialog: WordBool read Get_ShowFeatureErrorDialog write Set_ShowFeatureErrorDialog;
    property FeatureManagerSplitterPosition: Double read Get_FeatureManagerSplitterPosition write Set_FeatureManagerSplitterPosition;
    property Printer: WideString read Get_Printer write Set_Printer;
    property PageSetup: IDispatch read Get_PageSetup;
    property IPageSetup: IPageSetup read Get_IPageSetup;
    property LargeAssemblyMode: WordBool read Get_LargeAssemblyMode write Set_LargeAssemblyMode;
    property FeatureManager: IFeatureManager read Get_FeatureManager;
    property ModelViewManager: IModelViewManager read Get_ModelViewManager;
    property Extension: IModelDocExtension read Get_Extension;
    property ConfigurationManager: IConfigurationManager read Get_ConfigurationManager;
    property SketchManager: ISketchManager read Get_SketchManager;
  end;

// *********************************************************************//
// DispIntf:  IModelDoc2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B90793FB-EF3D-4B80-A5C4-99959CDB6CEB}
// *********************************************************************//
  IModelDoc2Disp = dispinterface
    ['{B90793FB-EF3D-4B80-A5C4-99959CDB6CEB}']
    property SelectionManager: IDispatch dispid 65537;
    property ISelectionManager: ISelectionMgr readonly dispid 65711;
    property ActiveView: IDispatch dispid 65538;
    property IActiveView: IModelView readonly dispid 65712;
    property LengthUnit: Integer dispid 65539;
    property LightSourceUserName[ID: Integer]: WideString dispid 65716;
    property LightSourcePropertyValues[ID: Integer]: OleVariant dispid 65717;
    property SceneName: WideString dispid 65718;
    property SceneUserName: WideString dispid 65719;
    procedure FeatureFillet(R1: Double; Propagate: WordBool; Ftyp: WordBool; VarRadTyp: WordBool; 
                            OverflowType: Integer); dispid 65540;
    procedure GridOptions(DispGrid: WordBool; GridSpacing: Double; Snap: WordBool; 
                          DotStyle: WordBool; NMajor: Smallint; NMinor: Smallint; 
                          Align2edge: WordBool; AngleSnap: WordBool; AngleUnit: Double; 
                          MinorAuto: WordBool); dispid 65541;
    procedure SetUnits(UType: Smallint; FractBase: Smallint; FractDenom: Smallint; 
                       SigDigits: Smallint; RoundToFraction: WordBool); dispid 65542;
    procedure LBDownAt(Flags: Integer; X: Double; Y: Double; Z: Double); dispid 65543;
    procedure LBUpAt(Flags: Integer; X: Double; Y: Double; Z: Double); dispid 65544;
    procedure DragTo(Flags: Integer; X: Double; Y: Double; Z: Double); dispid 65545;
    procedure SelectAt(Flags: Integer; X: Double; Y: Double; Z: Double); dispid 65546;
    procedure CreateLineVB(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double); dispid 65547;
    function CreateLine(P1: OleVariant; P2: OleVariant): WordBool; dispid 65548;
    procedure CreateCenterLineVB(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                 Z2: Double); dispid 65549;
    function CreateCenterLine(P1: OleVariant; P2: OleVariant): WordBool; dispid 65550;
    procedure CreateArcVB(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                          P2z: Double; P3x: Double; P3y: Double; P3z: Double; Dir: Smallint); dispid 65551;
    function CreateArc(P1: OleVariant; P2: OleVariant; P3: OleVariant; Dir: Smallint): WordBool; dispid 65552;
    procedure CreateCircleVB(P1x: Double; P1y: Double; P1z: Double; Radius: Double); dispid 65553;
    function CreateCircleByRadius(P1: OleVariant; Radius: Double): WordBool; dispid 65554;
    function GetLines: OleVariant; dispid 65555;
    procedure SketchTrim(Op: Integer; SelEnd: Integer; X: Double; Y: Double); dispid 65556;
    procedure SketchOffsetEdges(Val: Double); dispid 65557;
    procedure SketchRectangle(Val1: Double; Val2: Double; Z1: Double; Val3: Double; Val4: Double; 
                              Z2: Double; Val5: WordBool); dispid 65558;
    procedure SketchPoint(X: Double; Y: Double; Z: Double); dispid 65559;
    procedure FeatureCut(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                         D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; Ddir1: WordBool; 
                         Ddir2: WordBool; Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                         OffsetReverse2: WordBool); dispid 65560;
    procedure FeatureBoss(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool); dispid 65561;
    procedure SimpleHole(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                         D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; Ddir1: WordBool; 
                         Ddir2: WordBool; Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                         OffsetReverse2: WordBool); dispid 65562;
    procedure FeatureLinearPattern(Num1: Integer; Spacing1: Double; Num2: Integer; 
                                   Spacing2: Double; FlipDir1: WordBool; FlipDir2: WordBool; 
                                   const DName1: WideString; const DName2: WideString); dispid 65563;
    procedure NameView(const VName: WideString); dispid 65564;
    procedure ShowNamedView(const VName: WideString); dispid 65565;
    procedure CreatePlaneAtOffset(Val: Double; FlipDir: WordBool); dispid 65566;
    procedure Toolbars(M: WordBool; Vw: WordBool; SkMain: WordBool; Sk: WordBool; Feat: WordBool; 
                       Constr: WordBool; Macro: WordBool); dispid 65567;
    procedure CreatePlaneAtAngle(Val: Double; FlipDir: WordBool); dispid 65568;
    procedure SetParamValue(Val: Double); dispid 65569;
    procedure AddRelation(const RelStr: WideString); dispid 65570;
    procedure DeleteAllRelations; dispid 65571;
    procedure HoleWizard(Depth: Double; EndType: Smallint; Flip: WordBool; Dir: WordBool; 
                         HType: Integer; D1: Double; D2: Double; D3: Double; D4: Double; 
                         D5: Double; D6: Double; D7: Double; D8: Double; D9: Double; D10: Double; 
                         D11: Double; D12: Double); dispid 65572;
    function SaveAs(const NewName: WideString): WordBool; dispid 65573;
    procedure ActivateSelectedFeature; dispid 65574;
    procedure SelectByName(Flags: Integer; const IdStr: WideString); dispid 65575;
    procedure SketchAddConstraints(const IdStr: WideString); dispid 65576;
    procedure SketchConstraintsDel(ConstrInd: Integer; const IdStr: WideString); dispid 65577;
    procedure SketchConstraintsDelAll; dispid 65578;
    procedure Lock; dispid 65579;
    procedure UnLock; dispid 65580;
    procedure InsertFeatureShell(Thickness: Double; Outward: WordBool); dispid 65581;
    procedure SketchFillet(Rad: Double); dispid 65582;
    procedure FeatureChamfer(Width: Double; Angle: Double; Flip: WordBool); dispid 65583;
    procedure InsertMfDraft(Angle: Double; FlipDir: WordBool; IsEdgeDraft: WordBool; 
                            PropType: Integer); dispid 65584;
    procedure ParentChildRelationship; dispid 65585;
    procedure SketchSpline(MorePts: Integer; X: Double; Y: Double; Z: Double); dispid 65586;
    procedure SelectSketchPoint(X: Double; Y: Double; Incidence: Integer); dispid 65587;
    procedure SelectSketchLine(X0: Double; Y0: Double; Inc0: Integer; X1: Double; Y1: Double; 
                               Inc1: Integer); dispid 65588;
    procedure SelectSketchArc(X0: Double; Y0: Double; Inc0: Integer; X1: Double; Y1: Double; 
                              Inc1: Integer; XC: Double; YC: Double; IncC: Integer; RotDir: Integer); dispid 65589;
    procedure SelectSketchSpline(Size: Integer; X0: Double; Y0: Double; Inc0: Integer; X1: Double; 
                                 Y1: Double; Inc1: Integer; XC: Double; YC: Double; IncC: Integer); dispid 65590;
    function CreateTangentArc(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                              P2z: Double): WordBool; dispid 65591;
    function Create3PointArc(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                             P2z: Double; P3x: Double; P3y: Double; P3z: Double): WordBool; dispid 65592;
    function CreateArcByCenter(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                               P2z: Double; P3x: Double; P3y: Double; P3z: Double): WordBool; dispid 65593;
    function CreateCircle(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                          P2z: Double): WordBool; dispid 65594;
    function AddDimension(X: Double; Y: Double; Z: Double): WordBool; dispid 65595;
    function AddHorizontalDimension(X: Double; Y: Double; Z: Double): WordBool; dispid 65596;
    function AddVerticalDimension(X: Double; Y: Double; Z: Double): WordBool; dispid 65597;
    function SelectSketchItem(SelOpt: Integer; const Name: WideString; X: Double; Y: Double; 
                              Z: Double): WordBool; dispid 65598;
    procedure ClearSelection; dispid 65599;
    procedure Select(const SelID: WideString; const SelParams: WideString; X: Double; Y: Double; 
                     Z: Double); dispid 65600;
    procedure AndSelect(const SelID: WideString; const SelParams: WideString; X: Double; Y: Double; 
                        Z: Double); dispid 65601;
    function CreatePoint(PointX: Double; PointY: Double; PointZ: Double): WordBool; dispid 65602;
    function CreateLineDB(Sx: Double; Sy: Double; Sz: Double; Ex: Double; Ey: Double; Ez: Double): WordBool; dispid 65603;
    function CreateArcDB(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double; 
                         X3: Double; Y3: Double; Z3: Double; Dir: Smallint): WordBool; dispid 65604;
    function CreateCircleDB(Cx: Double; Cy: Double; Cz: Double; Radius: Double): WordBool; dispid 65605;
    function CreatePointDB(X: Double; Y: Double; Z: Double): WordBool; dispid 65606;
    function GetTitle: WideString; dispid 65607;
    function GetPathName: WideString; dispid 65608;
    function GetType: Integer; dispid 65609;
    procedure InsertObject; dispid 65610;
    procedure EditClearAll; dispid 65611;
    procedure EditCopy; dispid 65612;
    procedure EditCut; dispid 65613;
    procedure ObjectDisplayContent; dispid 65614;
    procedure ObjectDisplayAsIcon; dispid 65615;
    procedure ObjectResetsize; dispid 65616;
    procedure WindowRedraw; dispid 65617;
    procedure Dummy3; dispid 65618;
    procedure SetPickMode; dispid 65619;
    procedure ViewRotateminusx; dispid 65620;
    procedure ViewRotateminusy; dispid 65621;
    procedure ViewRotateminusz; dispid 65622;
    procedure ViewRotateplusx; dispid 65623;
    procedure ViewRotateplusy; dispid 65624;
    procedure ViewRotateplusz; dispid 65625;
    procedure ViewTranslateminusx; dispid 65626;
    procedure ViewTranslateminusy; dispid 65627;
    procedure ViewTranslateplusx; dispid 65628;
    procedure ViewTranslateplusy; dispid 65629;
    procedure ViewRotXMinusNinety; dispid 65630;
    procedure ViewRotYMinusNinety; dispid 65631;
    procedure ViewRotYPlusNinety; dispid 65632;
    procedure ViewZoomin; dispid 65633;
    procedure ViewZoomout; dispid 65634;
    procedure ViewDisplayHiddenremoved; dispid 65635;
    procedure ViewDisplayWireframe; dispid 65636;
    procedure ViewDisplayShaded; dispid 65637;
    procedure ViewRwShading; dispid 65638;
    procedure ViewOglShading; dispid 65639;
    procedure ViewZoomtofit; dispid 65640;
    procedure ViewRotate; dispid 65641;
    procedure ViewTranslate; dispid 65642;
    procedure ViewZoomto; dispid 65643;
    procedure ViewDisplayHiddengreyed; dispid 65644;
    procedure ViewDisplayFaceted; dispid 65645;
    procedure ViewConstraint; dispid 65646;
    procedure UserFavors; dispid 65647;
    procedure FeatureCirPattern(Num: Integer; Spacing: Double; FlipDir: WordBool; 
                                const DName: WideString); dispid 65648;
    procedure EditSketch; dispid 65649;
    procedure FeatEdit; dispid 65650;
    procedure FeatEditDef; dispid 65651;
    procedure InsertPoint; dispid 65652;
    procedure InsertFamilyTableNew; dispid 65653;
    procedure Dummy1; dispid 65654;
    procedure InsertFamilyTableEdit; dispid 65655;
    procedure Dummy2; dispid 65656;
    procedure ToolsMacro; dispid 65657;
    procedure ToolsGrid; dispid 65658;
    procedure SketchCenterline; dispid 65659;
    procedure SketchAlign; dispid 65660;
    procedure SketchArc; dispid 65661;
    procedure SketchTangentArc; dispid 65662;
    procedure SketchCircle; dispid 65663;
    procedure SketchUndo; dispid 65664;
    procedure UserPreferences; dispid 65665;
    procedure Lights; dispid 65666;
    procedure SketchConstrainCoincident; dispid 65667;
    procedure SketchConstrainConcentric; dispid 65668;
    procedure SketchConstrainPerp; dispid 65669;
    procedure SketchConstrainTangent; dispid 65670;
    procedure SketchConstrainParallel; dispid 65671;
    procedure SketchUseEdge; dispid 65672;
    procedure SketchUseEdgeCtrline; dispid 65673;
    procedure SketchMirror; dispid 65674;
    procedure Save; dispid 65675;
    procedure Close; dispid 65676;
    procedure ViewDispRefaxes; dispid 65677;
    procedure ViewDispRefplanes; dispid 65678;
    procedure InsertSketch; dispid 65679;
    procedure InsertProtrusionSwept(Propagate: WordBool; Alignment: WordBool; 
                                    KeepNormalConstant: WordBool); dispid 65680;
    procedure InsertProtrusionBlend(Closed: WordBool); dispid 65681;
    procedure ToolsMassProps; dispid 65682;
    procedure PropertySheet; dispid 65683;
    procedure BlankRefGeom; dispid 65684;
    procedure UnBlankRefGeom; dispid 65685;
    procedure EditDelete; dispid 65686;
    procedure InsertProjectedSketch; dispid 65687;
    function CreatePlaneFixed(P1: OleVariant; P2: OleVariant; P3: OleVariant; UseGlobal: WordBool): WordBool; dispid 65688;
    procedure Dummy5; dispid 65689;
    procedure Dummy6; dispid 65690;
    procedure DebugCheckBody; dispid 65691;
    procedure Dummy8; dispid 65692;
    procedure DimPreferences; dispid 65693;
    procedure UnblankSketch; dispid 65694;
    procedure EditSketchOrSingleSketchFeature; dispid 65695;
    procedure DebugCheckIgesGeom; dispid 65696;
    procedure BlankSketch; dispid 65697;
    function GetDefaultTextHeight: Double; dispid 65698;
    function IsActive(const CompStr: WideString): WordBool; dispid 65699;
    function CreateEllipse(Center: OleVariant; Major: OleVariant; Minor: OleVariant): WordBool; dispid 65700;
    function CreateEllipseVB(CenterX: Double; CenterY: Double; CenterZ: Double; MajorX: Double; 
                             MajorY: Double; MajorZ: Double; MinorX: Double; MinorY: Double; 
                             MinorZ: Double): WordBool; dispid 65701;
    function CreateEllipticalArcByCenter(Center: OleVariant; Major: OleVariant; Minor: OleVariant; 
                                         Start: OleVariant; End_: OleVariant): WordBool; dispid 65702;
    function CreateEllipticalArcByCenterVB(CenterX: Double; CenterY: Double; CenterZ: Double; 
                                           MajorX: Double; MajorY: Double; MajorZ: Double; 
                                           MinorX: Double; MinorY: Double; MinorZ: Double; 
                                           StartX: Double; StartY: Double; StartZ: Double; 
                                           EndX: Double; EndY: Double; EndZ: Double): WordBool; dispid 65703;
    function GetActiveSketch: IDispatch; dispid 65704;
    function IGetActiveSketch: ISketch; dispid 65713;
    function GetTessellationQuality: Integer; dispid 65705;
    procedure SetTessellationQuality(QualityNum: Integer); dispid 65706;
    function Parameter(const StringIn: WideString): IDispatch; dispid 65707;
    function IParameter(const StringIn: WideString): IDimension; dispid 65714;
    function SelectByID(const SelID: WideString; const SelParams: WideString; X: Double; Y: Double; 
                        Z: Double): WordBool; dispid 65708;
    function AndSelectByID(const SelID: WideString; const SelParams: WideString; X: Double; 
                           Y: Double; Z: Double): WordBool; dispid 65709;
    procedure Insert3DSketch; dispid 65710;
    function GetLightSourceName(ID: Integer): WideString; dispid 65715;
    function AddLightSource(const IdName: WideString; LTyp: SYSINT; const UserName: WideString): WordBool; dispid 65720;
    function AddLightSourceExtProperty(ID: Integer; PropertyExtension: OleVariant): Integer; dispid 65721;
    procedure ResetLightSourceExtProperty(ID: Integer); dispid 65722;
    procedure DeleteLightSource(ID: Integer); dispid 65723;
    function GetLightSourceExtProperty(ID: Integer; PropertyId: Integer): OleVariant; dispid 65724;
    function AddLightToScene(const LpszNewValue: WideString): Integer; dispid 65725;
    function AddSceneExtProperty(PropertyExtension: OleVariant): Integer; dispid 65726;
    procedure ResetSceneExtProperty; dispid 65727;
    function GetSceneExtProperty(PropertyId: Integer): OleVariant; dispid 65728;
    procedure FileSummaryInfo; dispid 65729;
    function GetGridSettings: OleVariant; dispid 65730;
    procedure ToolsSketchTranslate; dispid 65731;
    procedure ToolsDistance; dispid 65732;
    procedure SkToolsAutoConstr; dispid 65733;
    procedure ToolsSketchScale; dispid 65734;
    procedure Paste; dispid 65735;
    procedure ToolsConfiguration; dispid 65736;
    procedure EntityProperties; dispid 65737;
    function GetArcCentersDisplayed: WordBool; dispid 65738;
    procedure SetArcCentersDisplayed(Setting: WordBool); dispid 65739;
    procedure AutoSolveToggle; dispid 65740;
    procedure Dummy7; dispid 65741;
    function IGetLines: Double; dispid 65742;
    function GetLineCount: Integer; dispid 65743;
    procedure ICreateEllipse(var Center: Double; var Major: Double; var Minor: Double); dispid 65744;
    procedure ICreateEllipticalArcByCenter(var Center: Double; var Major: Double; 
                                           var Minor: Double; var Start: Double; var End_: Double); dispid 65745;
    function ILightSourcePropertyValues(ID: Integer): Double; dispid 65746;
    procedure InsertCutSwept(Propagate: WordBool; Alignment: WordBool; KeepNormalConstant: WordBool); dispid 65747;
    procedure InsertCutBlend(Closed: WordBool); dispid 65748;
    procedure InsertHelix(Reversed: WordBool; Clockwised: WordBool; Tapered: WordBool; 
                          Outward: WordBool; Helixdef: Integer; Height: Double; Pitch: Double; 
                          Revolution: Double; TaperAngle: Double; Startangle: Double); dispid 65749;
    procedure ICreateLine(var P1: Double; var P2: Double); dispid 65750;
    procedure ICreateCenterLine(var P1: Double; var P2: Double); dispid 65751;
    procedure ICreateArc(var P1: Double; var P2: Double; var P3: Double; Dir: Smallint); dispid 65752;
    procedure ICreateCircleByRadius(var P1: Double; Radius: Double); dispid 65753;
    procedure GraphicsRedraw; dispid 65754;
    function GetVisibilityOfConstructPlanes: WordBool; dispid 65755;
    function GetDisplayWhenAdded: WordBool; dispid 65756;
    procedure SetDisplayWhenAdded(Setting: WordBool); dispid 65757;
    function GetAddToDB: WordBool; dispid 65758;
    procedure SetAddToDB(Setting: WordBool); dispid 65759;
    function DeSelectByID(const SelID: WideString; const SelParams: WideString; X: Double; 
                          Y: Double; Z: Double): WordBool; dispid 65760;
    property Visible: WordBool dispid 65761;
    procedure PrintDirect; dispid 65762;
    procedure PrintPreview; dispid 65763;
    procedure Quit; dispid 65764;
    procedure CreatePlaneThru3Points; dispid 65765;
    procedure ViewRotXPlusNinety; dispid 65766;
    function GetUnits: OleVariant; dispid 65767;
    procedure SetAngularUnits(UType: Smallint; FractBase: Smallint; FractDenom: Smallint; 
                              SigDigits: Smallint); dispid 65768;
    function GetAngularUnits: OleVariant; dispid 65769;
    function IGetUnits: Smallint; dispid 65770;
    procedure ISetAngularUnits(UType: Smallint; FractBase: Smallint; FractDenom: Smallint; 
                               SigDigits: Smallint); dispid 65771;
    function IGetAngularUnits: Smallint; dispid 65772;
    procedure ShowConfiguration(const ConfigurationName: WideString); dispid 65773;
    procedure ResetConfiguration; dispid 65774;
    procedure AddConfiguration(const Name: WideString; const Comment: WideString; 
                               const AlternateName: WideString; SuppressByDefault: WordBool; 
                               HideByDefault: WordBool; MinFeatureManager: WordBool; 
                               InheritProperties: WordBool; Flags: LongWord); dispid 65775;
    procedure DeleteConfiguration(const ConfigurationName: WideString); dispid 65776;
    procedure EditConfiguration(const Name: WideString; const NewName: WideString; 
                                const Comment: WideString; const AlternateName: WideString; 
                                SuppressByDefault: WordBool; HideByDefault: WordBool; 
                                MinFeatureManager: WordBool; InheritProperties: WordBool; 
                                Flags: LongWord); dispid 65777;
    procedure CreatePlanePerCurveAndPassPoint(OrigAtCurve: WordBool); dispid 65778;
    function CreateFeatureMgrView(var Bitmap: Integer): IDispatch; dispid 65779;
    function AddFeatureMgrView(var Bitmap: Integer; var AppView: Integer): WordBool; dispid 65780;
    function GetStandardViewRotation(ViewId: Integer): OleVariant; dispid 65781;
    function IGetStandardViewRotation(ViewId: Integer): Double; dispid 65782;
    procedure FeatureExtruRefSurface(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                     T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                     Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; 
                                     Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                                     OffsetReverse2: WordBool); dispid 65783;
    function IGet3rdPartyStorage(const StringIn: WideString; IsStoring: WordBool): IUnknown; dispid 65784;
    procedure DeleteFeatureMgrView(var AppView: Integer); dispid 65785;
    function GetMassProperties: OleVariant; dispid 65786;
    function IGetMassProperties(var MPropsData: Double): WordBool; dispid 65787;
    function GetLightSourceCount: Integer; dispid 65788;
    function GetLightSourceIdFromName(const LightName: WideString): Integer; dispid 65789;
    procedure SetNextSelectionGroupId(ID: Integer); dispid 65790;
    procedure ISetNextSelectionGroupId(ID: Integer); dispid 65791;
    function InsertMidSurfaceExt(Placement: Double; KnitFlag: WordBool): IDispatch; dispid 65792;
    function IInsertMidSurfaceExt(Placement: Double; KnitFlag: WordBool): IMidSurface2; dispid 65793;
    procedure ICreatePlaneFixed(var P1: Double; var P2: Double; var P3: Double; UseGlobal: WordBool); dispid 65794;
    function SelectByMark(const SelID: WideString; const SelParams: WideString; X: Double; 
                          Y: Double; Z: Double; Mark: Integer): WordBool; dispid 65795;
    function AndSelectByMark(const SelID: WideString; const SelParams: WideString; X: Double; 
                             Y: Double; Z: Double; Mark: Integer): WordBool; dispid 65796;
    function GetDependencies(Traverseflag: Integer; Searchflag: Integer): OleVariant; dispid 65797;
    function IGetDependencies(Traverseflag: Integer; Searchflag: Integer): WideString; dispid 65798;
    function GetNumDependencies(Traverseflag: Integer; Searchflag: Integer): Integer; dispid 65799;
    function IGetNumDependencies(Traverseflag: Integer; Searchflag: Integer): Integer; dispid 65800;
    function FirstFeature: IDispatch; dispid 65801;
    function IFirstFeature: IFeature; dispid 65802;
    procedure UnderiveSketch; dispid 65803;
    procedure DeriveSketch; dispid 65804;
    function IsExploded: WordBool; dispid 65805;
    function DeleteSelection(ConfirmFlag: WordBool): WordBool; dispid 65806;
    function DeleteNamedView(const ViewName: WideString): WordBool; dispid 65807;
    function SetLightSourceName(ID: Integer; const NewName: WideString): WordBool; dispid 65808;
    procedure Insert3DSplineCurve(CurveClosed: WordBool); dispid 65809;
    function SetLightSourcePropertyValuesVB(const IdName: WideString; LType: SYSINT; Diff: Double; 
                                            RgbColor: Integer; Dist: Double; DirX: Double; 
                                            DirY: Double; DirZ: Double; SpotDirX: Double; 
                                            SpotDirY: Double; SpotDirZ: Double; SpotAngle: Double; 
                                            FallOff0: Double; FallOff1: Double; FallOff2: Double; 
                                            Ambient: Double; Specular: Double; 
                                            SpotExponent: Double; BDisable: WordBool): WordBool; dispid 65810;
    function ICreateFeatureMgrView(var Bitmap: Integer): IFeatMgrView; dispid 65811;
    function SelectedEdgeProperties(const EdgeName: WideString): WordBool; dispid 65812;
    function SelectedFaceProperties(RgbColor: Integer; Ambient: Double; Diffuse: Double; 
                                    Specular: Double; Shininess: Double; Transparency: Double; 
                                    Emission: Double; UsePartProps: WordBool; 
                                    const FaceName: WideString): WordBool; dispid 65813;
    function SelectedFeatureProperties(RgbColor: Integer; Ambient: Double; Diffuse: Double; 
                                       Specular: Double; Shininess: Double; Transparency: Double; 
                                       Emission: Double; UsePartProps: WordBool; 
                                       Suppressed: WordBool; const FeatureName: WideString): WordBool; dispid 65814;
    procedure InsertSplitLineSil; dispid 65815;
    procedure InsertSplitLineProject(IsDirectional: WordBool; FlipDir: WordBool); dispid 65816;
    procedure InsertRib(Is2Sided: WordBool; ReverseThicknessDir: WordBool; Thickness: Double; 
                        ReferenceEdgeIndex: Integer; ReverseMaterialDir: WordBool; 
                        IsDrafted: WordBool; DraftOutward: WordBool; DraftAngle: Double); dispid 65817;
    function AddRadialDimension(X: Double; Y: Double; Z: Double): WordBool; dispid 65818;
    function AddDiameterDimension(X: Double; Y: Double; Z: Double): WordBool; dispid 65819;
    function GetModelViewNames: OleVariant; dispid 65820;
    function IGetModelViewNames: WideString; dispid 65821;
    function GetModelViewCount: SYSINT; dispid 65822;
    function GetUserPreferenceDoubleValue(UserPreferenceValue: Integer): Double; dispid 65823;
    function SetUserPreferenceDoubleValue(UserPreferenceValue: Integer; Value: Double): WordBool; dispid 65824;
    procedure ViewDisplayCurvature; dispid 65825;
    procedure Scale; dispid 65826;
    procedure AddIns; dispid 65827;
    function InsertCurveFile(const FileName: WideString): WordBool; dispid 65828;
    procedure InsertCurveFileBegin; dispid 65829;
    function InsertCurveFilePoint(X: Double; Y: Double; Z: Double): WordBool; dispid 65830;
    function InsertCurveFileEnd: WordBool; dispid 65831;
    function ChangeSketchPlane: WordBool; dispid 65832;
    procedure ViewOrientationUndo; dispid 65833;
    procedure PrintOut(FromPage: Integer; ToPage: Integer; NumCopies: Integer; Collate: WordBool; 
                       const Printer: WideString; Scale: Double; PrintToFile: WordBool); dispid 65834;
    procedure SketchOffsetEntities(Offset: Double; Flip: WordBool); dispid 65835;
    procedure InsertLibraryFeature(const LibFeatPartNameIn: WideString); dispid 65836;
    procedure SketchModifyTranslate(StartX: Double; StartY: Double; EndX: Double; EndY: Double); dispid 65837;
    procedure SketchModifyRotate(CenterX: Double; CenterY: Double; Angle: Double); dispid 65838;
    procedure SketchModifyFlip(AxisFlag: SYSINT); dispid 65839;
    function SketchModifyScale(ScaleFactor: Double): WordBool; dispid 65840;
    function GetActiveConfiguration: IDispatch; dispid 65841;
    function IGetActiveConfiguration: IConfiguration; dispid 65842;
    function GetUserPreferenceToggle(UserPreferenceToggle: Integer): WordBool; dispid 65843;
    function SetUserPreferenceToggle(UserPreferenceValue: Integer; OnFlag: WordBool): WordBool; dispid 65844;
    procedure InsertSweepRefSurface(Propagate: WordBool; TwistCtrlOption: Smallint; 
                                    KeepTangency: WordBool; ForceNonRational: WordBool); dispid 65845;
    procedure InsertLoftRefSurface(Closed: WordBool; KeepTangency: WordBool; 
                                   ForceNonRational: WordBool); dispid 65846;
    procedure InsertProtrusionSwept2(Propagate: WordBool; Alignment: WordBool; 
                                     TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool); dispid 65847;
    procedure InsertProtrusionBlend2(Closed: WordBool; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool); dispid 65848;
    procedure InsertCutSwept2(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                              KeepTangency: WordBool; ForceNonRational: WordBool); dispid 65849;
    procedure InsertCutBlend2(Closed: WordBool; KeepTangency: WordBool; ForceNonRational: WordBool); dispid 65850;
    function IsEditingSelf: WordBool; dispid 65851;
    procedure ShowNamedView2(const VName: WideString; ViewId: Integer); dispid 65852;
    procedure InsertDome(Height: Double; ReverseDir: WordBool; DoEllipticSurface: WordBool); dispid 65853;
    property MaterialUserName: WideString dispid 65854;
    property MaterialIdName: WideString dispid 65855;
    property MaterialPropertyValues: OleVariant dispid 65856;
    function IMaterialPropertyValues: Double; dispid 65857;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 65858;
    function GetPropertyExtension(ID: Integer): OleVariant; dispid 65859;
    procedure ResetPropertyExtension; dispid 65860;
    function GetUpdateStamp: Integer; dispid 65861;
    procedure ViewZoomTo2(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double); dispid 65862;
    procedure ScreenRotate; dispid 65863;
    property PrintSetup[SetupType: Integer]: Smallint dispid 65864;
    procedure GraphicsRedraw2; dispid 65865;
    procedure InsertCosmeticThread(Type_: Smallint; Depth: Double; Length: Double; 
                                   const Note: WideString); dispid 65866;
    procedure HideCosmeticThread; dispid 65867;
    procedure ShowCosmeticThread; dispid 65868;
    procedure SimpleHole2(Dia: Double; Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                          T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool); dispid 65869;
    procedure IRelease3rdPartyStorage(const StringIn: WideString); dispid 65870;
    function FeatureRevolve2(Angle: Double; ReverseDir: WordBool; Angle2: Double; RevType: Integer; 
                             Options: Integer): Integer; dispid 65871;
    function FeatureRevolveCut2(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                RevType: Integer; Options: Integer): Integer; dispid 65872;
    procedure SetSaveFlag; dispid 65873;
    function GetExternalReferenceName: WideString; dispid 65874;
    function SelectByRay(DoubleInfoIn: OleVariant; TypeWanted: Integer): WordBool; dispid 65875;
    function ISelectByRay(var PointIn: Double; var VectorIn: Double; RadiusIn: Double; 
                          TypeWanted: Integer): WordBool; dispid 65876;
    procedure SetSceneBkgDIB(L_dib: Integer); dispid 65877;
    property SceneBkgImageFileName: WideString dispid 65878;
    procedure InsertBkgImage(const NewName: WideString); dispid 65879;
    procedure DeleteBkgImage; dispid 65880;
    procedure InsertSplinePoint(X: Double; Y: Double; Z: Double); dispid 65881;
    procedure InsertLoftRefSurface2(Closed: WordBool; KeepTangency: WordBool; 
                                    ForceNonRational: WordBool; TessToleranceFactor: Double; 
                                    StartMatchingType: Smallint; EndMatchingType: Smallint); dispid 65882;
    procedure InsertProtrusionBlend3(Closed: WordBool; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; TessToleranceFactor: Double; 
                                     StartMatchingType: Smallint; EndMatchingType: Smallint); dispid 65883;
    procedure InsertCutBlend3(Closed: WordBool; KeepTangency: WordBool; ForceNonRational: WordBool; 
                              TessToleranceFactor: Double; StartMatchingType: Smallint; 
                              EndMatchingType: Smallint); dispid 65884;
    procedure AlignDimensions; dispid 65885;
    procedure BreakDimensionAlignment; dispid 65886;
    procedure SketchFillet1(Rad: Double); dispid 65887;
    procedure FeatureChamferType(ChamferType: Smallint; Width: Double; Angle: Double; 
                                 Flip: WordBool; OtherDist: Double; VertexChamDist1: Double; 
                                 VertexChamDist2: Double; VertexChamDist3: Double); dispid 65888;
    procedure FeatureCutThin(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                             D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                             Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                             OffsetReverse1: WordBool; OffsetReverse2: WordBool; Thk1: Double; 
                             Thk2: Double; EndThk: Double; RevThinDir: Integer; CapEnds: Integer; 
                             AddBends: WordBool; BendRad: Double); dispid 65889;
    procedure FeatureBossThin(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                              T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                              Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                              Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                              Thk1: Double; Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                              CapEnds: Integer; AddBends: WordBool; BendRad: Double); dispid 65890;
    function InsertDatumTargetSymbol(const Datum1: WideString; const Datum2: WideString; 
                                     const Datum3: WideString; AreaStyle: Smallint; 
                                     AreaOutside: WordBool; Value1: Double; Value2: Double; 
                                     const ValueStr1: WideString; const ValueStr2: WideString; 
                                     ArrowsSmart: WordBool; ArrowStyle: Smallint; 
                                     LeaderLineStyle: Smallint; LeaderBent: WordBool; 
                                     ShowArea: WordBool; ShowSymbol: WordBool): WordBool; dispid 65891;
    function EditDatumTargetSymbol(const Datum1: WideString; const Datum2: WideString; 
                                   const Datum3: WideString; AreaStyle: Smallint; 
                                   AreaOutside: WordBool; Value1: Double; Value2: Double; 
                                   const ValueStr1: WideString; const ValueStr2: WideString; 
                                   ArrowsSmart: WordBool; ArrowStyle: Smallint; 
                                   LeaderLineStyle: Smallint; LeaderBent: WordBool; 
                                   ShowArea: WordBool; ShowSymbol: WordBool): WordBool; dispid 65892;
    procedure InsertBOMBalloon; dispid 65893;
    function FeatureReferenceCurve(NumOfCurves: Integer; BaseCurves: OleVariant; Merge: WordBool; 
                                   const FromFileName: WideString; out ErrorCode: Integer): IDispatch; dispid 65894;
    function IFeatureReferenceCurve(NumOfCurves: Integer; var BaseCurves: ICurve; Merge: WordBool; 
                                    const FromFileName: WideString; out ErrorCode: Integer): IReferenceCurve; dispid 65895;
    procedure FontBold(Bold: WordBool); dispid 65896;
    procedure FontItalic(Italic: WordBool); dispid 65897;
    procedure FontUnderline(Underline: WordBool); dispid 65898;
    procedure FontFace(const Face: WideString); dispid 65899;
    procedure FontPoints(Points: Smallint); dispid 65900;
    procedure FontUnits(Units: Double); dispid 65901;
    function SketchSplineByEqnParams(ParamsIn: OleVariant): WordBool; dispid 65902;
    procedure AlignParallelDimensions; dispid 65903;
    procedure SetBlockingState(StateIn: Integer); dispid 65904;
    procedure ResetBlockingState; dispid 65905;
    function GetSceneBkgDIB: Integer; dispid 65906;
    procedure InsertHatchedFace; dispid 65907;
    function GetColorTable: IDispatch; dispid 65908;
    function IGetColorTable: IColorTable; dispid 65909;
    procedure InsertSweepRefSurface2(Propagate: WordBool; TwistCtrlOption: Smallint; 
                                     KeepTangency: WordBool; ForceNonRational: WordBool; 
                                     StartMatchingType: Smallint; EndMatchingType: Smallint); dispid 65910;
    procedure InsertProtrusionSwept3(Propagate: WordBool; Alignment: WordBool; 
                                     TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; StartMatchingType: Smallint; 
                                     EndMatchingType: Smallint); dispid 65911;
    procedure InsertCutSwept3(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                              KeepTangency: WordBool; ForceNonRational: WordBool; 
                              StartMatchingType: Smallint; EndMatchingType: Smallint); dispid 65912;
    function IsOpenedViewOnly: WordBool; dispid 65913;
    function IsOpenedReadOnly: WordBool; dispid 65914;
    procedure ViewZoomToSelection; dispid 65915;
    procedure FeatureBossThicken(Thickness: Double; Direction: Integer; FaceIndex: Integer); dispid 65916;
    procedure FeatureCutThicken(Thickness: Double; Direction: Integer; FaceIndex: Integer); dispid 65917;
    function InsertAxis: WordBool; dispid 65918;
    procedure EditUndo(NSteps: LongWord); dispid 65919;
    procedure SelectMidpoint; dispid 65920;
    function ISketchSplineByEqnParams(var PropArray: SYSINT; var KnotsArray: Double; 
                                      var CntrlPntCoordArray: Double): Integer; dispid 65921;
    function VersionHistory: OleVariant; dispid 65922;
    function IVersionHistory: WideString; dispid 65923;
    function IGetVersionHistoryCount: SYSINT; dispid 65924;
    procedure Rebuild(Options: Integer); dispid 65925;
    procedure InsertFeatureShellAddThickness(Thickness: Double); dispid 65926;
    procedure InsertOffsetSurface(Thickness: Double; Reverse: WordBool); dispid 65927;
    procedure SimplifySpline(ToleranceIn: Double); dispid 65928;
    property SummaryInfo[FieldId: Integer]: WideString dispid 65929;
    property CustomInfo[const FieldName: WideString]: WideString dispid 65930;
    function GetCustomInfoCount: Integer; dispid 65931;
    function GetCustomInfoType(const FieldName: WideString): WideString; dispid 65932;
    function GetCustomInfoNames: OleVariant; dispid 65933;
    function IGetCustomInfoNames: WideString; dispid 65934;
    function AddCustomInfo(const FieldName: WideString; const FieldType: WideString; 
                           const FieldValue: WideString): WordBool; dispid 65935;
    function DeleteCustomInfo(const FieldName: WideString): WordBool; dispid 65936;
    procedure PrintOut2(FromPage: Integer; ToPage: Integer; NumCopies: Integer; Collate: WordBool; 
                        const Printer: WideString; Scale: Double; PrintToFile: WordBool; 
                        const PtfName: WideString); dispid 65937;
    function SetReadOnlyState(SetReadOnly: WordBool): WordBool; dispid 65938;
    function InsertFamilyTableOpen(const FileName: WideString): WordBool; dispid 65939;
    function MultiSelectByRay(DoubleInfoIn: OleVariant; TypeWanted: Integer; Append: WordBool): WordBool; dispid 65940;
    function IMultiSelectByRay(var PointIn: Double; var VectorIn: Double; RadiusIn: Double; 
                               TypeWanted: Integer; Append: WordBool): WordBool; dispid 65941;
    procedure InsertNewNote3(const UpperText: WideString; NoLeader: WordBool; BentLeader: WordBool; 
                             ArrowStyle: Smallint; LeaderSide: Smallint; Angle: Double; 
                             BalloonStyle: Smallint; BalloonFit: Smallint; SmartArrow: WordBool); dispid 65942;
    procedure InsertWeldSymbol2(const Dim1: WideString; const Symbol: WideString; 
                                const Dim2: WideString; Symmetric: WordBool; FieldWeld: WordBool; 
                                ShowOtherSide: WordBool; DashOnTop: WordBool; Peripheral: WordBool; 
                                HasProcess: WordBool; const ProcessValue: WideString); dispid 65943;
    function InsertSurfaceFinishSymbol2(SymType: Integer; LeaderType: Integer; LocX: Double; 
                                        LocY: Double; LocZ: Double; LaySymbol: Integer; 
                                        ArrowType: Integer; const MachAllowance: WideString; 
                                        const OtherVals: WideString; const ProdMethod: WideString; 
                                        const SampleLen: WideString; 
                                        const MaxRoughness: WideString; 
                                        const MinRoughness: WideString; 
                                        const RoughnessSpacing: WideString): WordBool; dispid 65944;
    function SaveSilent: Integer; dispid 65945;
    function SaveAsSilent(const NewName: WideString; SaveAsCopy: WordBool): Integer; dispid 65946;
    function AddCustomInfo2(const FieldName: WideString; FieldType: Integer; 
                            const FieldValue: WideString): WordBool; dispid 65947;
    function GetCustomInfoType2(const FieldName: WideString): Integer; dispid 65948;
    function InsertRefPoint: WordBool; dispid 65949;
    function FeatureFillet2(R1: Double; Propagate: WordBool; Ftyp: WordBool; VarRadTyp: WordBool; 
                            OverflowType: Integer; NRadii: SYSINT; Radii: OleVariant): Integer; dispid 65950;
    function IFeatureFillet2(R1: Double; Propagate: WordBool; Ftyp: WordBool; VarRadTyp: WordBool; 
                             OverflowType: Integer; NRadii: SYSINT; var Radii: Double): Integer; dispid 65951;
    function GetFirstAnnotation: IDispatch; dispid 65952;
    function IGetFirstAnnotation: IAnnotation; dispid 65953;
    function InsertCoordinateSystem(XFlippedIn: WordBool; YFlippedIn: WordBool; ZFlippedIn: WordBool): WordBool; dispid 65954;
    function GetToolbarVisibility(Toolbar: Integer): WordBool; dispid 65955;
    procedure SetToolbarVisibility(Toolbar: Integer; Visibility: WordBool); dispid 65956;
    procedure ViewDispCoordinateSystems; dispid 65957;
    procedure ViewDispTempRefaxes; dispid 65958;
    procedure ViewDispRefPoints; dispid 65959;
    procedure ViewDispOrigins; dispid 65960;
    function GetCoordinateSystemXformByName(const NameIn: WideString): OleVariant; dispid 65961;
    function IGetCoordinateSystemXformByName(const NameIn: WideString): Double; dispid 65962;
    function GetCurrentCoordinateSystemName: WideString; dispid 65963;
    function EnumModelViews: IEnumModelViews; dispid 65964;
    function InsertCompositeCurve: WordBool; dispid 65965;
    procedure SketchParabola(Val1: Double; Val2: Double; Z1: Double; Val3: Double; Val4: Double; 
                             Z2: Double; Val5: Double; Val6: Double; Z3: Double; Val7: Double; 
                             Val8: Double; Z4: Double); dispid 65966;
    procedure InsertRadiateSurface(Distance: Double; FlipDir: WordBool; TangentPropagate: WordBool); dispid 65967;
    procedure InsertSewRefSurface; dispid 65968;
    function InsertShape(PressureOn: Integer; TangentsOn: Integer; PressureGain: Double; 
                         TangentGain: Double; CurveSpringGain: Double; Alpha: Double; Beta: Double; 
                         Gamma: Double; Delta: Double; Degree: Integer; Split: Integer; 
                         Tuning: Integer): Integer; dispid 65969;
    procedure InsertMfDraft2(Angle: Double; FlipDir: WordBool; IsEdgeDraft: WordBool; 
                             PropType: Integer; StepDraft: WordBool); dispid 65970;
    function GetConfigurationCount: Integer; dispid 65971;
    function GetConfigurationNames: OleVariant; dispid 65972;
    function IGetConfigurationNames(var Count: Integer): WideString; dispid 65973;
    procedure FeatureCut2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          KeepPieceIndex: Integer); dispid 65974;
    procedure InsertCutSurface(Flip: WordBool; KeepPieceIndex: Integer); dispid 65975;
    function GetDetailingDefaults: IDispatch; dispid 65976;
    function IGetDetailingDefaults: IDetailingDefaults; dispid 65977;
    function ListExternalFileReferencesCount(UseSearchRules: WordBool): Integer; dispid 65978;
    function ListExternalFileReferences(UseSearchRules: WordBool): OleVariant; dispid 65979;
    function IListExternalFileReferences(UseSearchRules: WordBool; NumRefs: Integer): WideString; dispid 65980;
    function SketchSplineByEqnParams2(ParamsIn: OleVariant): WordBool; dispid 65981;
    function GetFirstModelView: IDispatch; dispid 65982;
    function IGetFirstModelView: IModelView; dispid 65983;
    function InsertPlanarRefSurface: WordBool; dispid 65984;
    function GetNext: IDispatch; dispid 65985;
    function GetSaveFlag: WordBool; dispid 65986;
    function AddCustomInfo3(const Configuration: WideString; const FieldName: WideString; 
                            FieldType: Integer; const FieldValue: WideString): WordBool; dispid 65987;
    property CustomInfo2[const Configuration: WideString; const FieldName: WideString]: WideString dispid 65988;
    function DeleteCustomInfo2(const Configuration: WideString; const FieldName: WideString): WordBool; dispid 65989;
    function GetCustomInfoCount2(const Configuration: WideString): Integer; dispid 65990;
    function GetCustomInfoNames2(const Configuration: WideString): OleVariant; dispid 65991;
    function IGetCustomInfoNames2(const Configuration: WideString): WideString; dispid 65992;
    function GetCustomInfoType3(const Configuration: WideString; const FieldName: WideString): Integer; dispid 65993;
    function GetConsiderLeadersAsLines: WordBool; dispid 65994;
    function SetConsiderLeadersAsLines(LeadersAsLines: WordBool): WordBool; dispid 65995;
    procedure InsertRevolvedRefSurface(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                       RevType: SYSINT); dispid 65996;
    function GetBendState: Integer; dispid 65997;
    function SetBendState(BendState: Integer): Integer; dispid 65998;
    property ShowFeatureErrorDialog: WordBool dispid 65999;
    procedure ClearUndoList; dispid 66000;
    function GetFeatureManagerWidth: Integer; dispid 66001;
    function SetFeatureManagerWidth(Width: Integer): Integer; dispid 66002;
    function InsertProjectedSketch2(Reverse: Integer): IDispatch; dispid 66003;
    function IInsertProjectedSketch2(Reverse: Integer): IFeature; dispid 66004;
    function GetFeatureCount: Integer; dispid 66005;
    function FeatureByPositionReverse(Num: Integer): IDispatch; dispid 66006;
    function IFeatureByPositionReverse(Num: Integer): IFeature; dispid 66007;
    function RayIntersections(BodiesIn: OleVariant; BasePointsIn: OleVariant; 
                              VectorsIn: OleVariant; Options: Integer; HitRadius: Double; 
                              Offset: Double): Integer; dispid 66008;
    function IRayIntersections(var BodiesIn: IBody2; NumBodies: Integer; var BasePointsIn: Double; 
                               var VectorsIn: Double; NumRays: Integer; Options: Integer; 
                               HitRadius: Double; Offset: Double): Integer; dispid 66009;
    function GetRayIntersectionsPoints: OleVariant; dispid 66010;
    function IGetRayIntersectionsPoints: Double; dispid 66011;
    function GetRayIntersectionsTopology: OleVariant; dispid 66012;
    function IGetRayIntersectionsTopology: IUnknown; dispid 66013;
    procedure EditSeedFeat; dispid 66014;
    function EditSuppress: WordBool; dispid 66015;
    function EditUnsuppress: WordBool; dispid 66016;
    function EditUnsuppressDependent: WordBool; dispid 66017;
    function EditRollback: WordBool; dispid 66018;
    function Save2(Silent: WordBool): Integer; dispid 66019;
    function SaveAs2(const NewName: WideString; SaveAsVersion: Integer; SaveAsCopy: WordBool; 
                     Silent: WordBool): Integer; dispid 66020;
    procedure SetPopupMenuMode(ModeIn: SYSINT); dispid 66021;
    function GetPopupMenuMode: SYSINT; dispid 66022;
    procedure CloseFamilyTable; dispid 66023;
    procedure CreatePlaneAtSurface(InterIndex: SYSINT; ProjOpt: WordBool; ReverseDir: WordBool; 
                                   NormalPlane: WordBool; Angle: Double); dispid 66024;
    procedure SketchOffset(Offset: Double; ContourMode: WordBool); dispid 66025;
    function CreateLinearSketchStepAndRepeat(NumX: Integer; NumY: Integer; SpacingX: Double; 
                                             SpacingY: Double; AngleX: Double; AngleY: Double; 
                                             const DeleteInstances: WideString): WordBool; dispid 66026;
    function SetAmbientLightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                       Specular: Double; Colour: Integer; Enabled: WordBool; 
                                       Fixed: WordBool): WordBool; dispid 66027;
    function GetAmbientLightProperties(const Name: WideString; var Ambient: Double; 
                                       var Diffuse: Double; var Specular: Double; 
                                       var Colour: Integer; var Enabled: WordBool; 
                                       var Fixed: WordBool): WordBool; dispid 66028;
    function SetPointLightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                     Specular: Double; Colour: Integer; Enabled: WordBool; 
                                     Fixed: WordBool; X: Double; Y: Double; Z: Double): WordBool; dispid 66029;
    function GetPointLightProperties(const Name: WideString; var Ambient: Double; 
                                     var Diffuse: Double; var Specular: Double; 
                                     var Colour: Integer; var Enabled: WordBool; 
                                     var Fixed: WordBool; var X: Double; var Y: Double; 
                                     var Z: Double): WordBool; dispid 66030;
    function SetDirectionLightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                         Specular: Double; Colour: Integer; Enabled: WordBool; 
                                         Fixed: WordBool; X: Double; Y: Double; Z: Double): WordBool; dispid 66031;
    function GetDirectionLightProperties(const Name: WideString; var Ambient: Double; 
                                         var Diffuse: Double; var Specular: Double; 
                                         var Colour: Integer; var Enabled: WordBool; 
                                         var Fixed: WordBool; var X: Double; var Y: Double; 
                                         var Z: Double): WordBool; dispid 66032;
    function SetSpotlightProperties(const Name: WideString; Ambient: Double; Diffuse: Double; 
                                    Specular: Double; Colour: Integer; Enabled: WordBool; 
                                    Fixed: WordBool; Posx: Double; Posy: Double; Posz: Double; 
                                    Targetx: Double; Targety: Double; Targetz: Double; 
                                    ConeAngle: Double): WordBool; dispid 66033;
    function GetSpotlightProperties(const Name: WideString; var Ambient: Double; 
                                    var Diffuse: Double; var Specular: Double; var Colour: Integer; 
                                    var Enabled: WordBool; var Fixed: WordBool; var X: Double; 
                                    var Y: Double; var Z: Double; var Targetx: Double; 
                                    var Targety: Double; var Targetz: Double; var ConeAngle: Double): WordBool; dispid 66034;
    procedure SplitOpenSegment(X: Double; Y: Double; Z: Double); dispid 66035;
    procedure AutoInferToggle; dispid 66036;
    procedure SketchRectangleAtAnyAngle(Val1: Double; Val2: Double; Z1: Double; Val3: Double; 
                                        Val4: Double; Z2: Double; Val3x: Double; Val3y: Double; 
                                        Z3: Double; Val5: WordBool); dispid 66037;
    function CreateCircularSketchStepAndRepeat(ArcRadius: Double; ArcAngle: Double; 
                                               PatternNum: Integer; PatternSpacing: Double; 
                                               PatternRotate: WordBool; 
                                               const DeleteInstances: WideString): WordBool; dispid 66038;
    procedure SplitClosedSegment(X0: Double; Y0: Double; Z0: Double; X1: Double; Y1: Double; 
                                 Z1: Double); dispid 66039;
    function IsLightLockedToModel(LightId: Integer): WordBool; dispid 66040;
    function LockLightToModel(LightId: Integer; Fix: WordBool): WordBool; dispid 66041;
    function FeatureFillet3(R1: Double; Propagate: WordBool; Ftyp: SYSINT; VarRadTyp: WordBool; 
                            OverflowType: Integer; NRadii: SYSINT; Radii: OleVariant; 
                            UseHelpPoint: WordBool; UseTangentHoldLine: WordBool): Integer; dispid 66042;
    function IFeatureFillet3(R1: Double; Propagate: WordBool; Ftyp: SYSINT; VarRadTyp: WordBool; 
                             OverflowType: Integer; NRadii: SYSINT; var Radii: Double; 
                             UseHelpPoint: WordBool; UseTangentHoldLine: WordBool): Integer; dispid 66043;
    procedure InsertConnectionPoint; dispid 66044;
    procedure InsertRoutePoint; dispid 66045;
    procedure FeatureBossThicken2(Thickness: Double; Direction: Integer; FaceIndex: Integer; 
                                  FillVolume: WordBool); dispid 66046;
    procedure FeatureCutThicken2(Thickness: Double; Direction: Integer; FaceIndex: Integer; 
                                 FillVolume: WordBool); dispid 66047;
    function GetConfigurationByName(const Name: WideString): IDispatch; dispid 66048;
    function IGetConfigurationByName(const Name: WideString): IConfiguration; dispid 66049;
    function CreatePoint2(PointX: Double; PointY: Double; PointZ: Double): IDispatch; dispid 66050;
    function ICreatePoint2(PointX: Double; PointY: Double; PointZ: Double): ISketchPoint; dispid 66051;
    function CreateLine2(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                         P2z: Double): IDispatch; dispid 66052;
    function ICreateLine2(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                          P2z: Double): ISketchSegment; dispid 66053;
    function GetActiveSketch2: IDispatch; dispid 66054;
    function IGetActiveSketch2: ISketch; dispid 66055;
    procedure DrawLightIcons; dispid 66056;
    function GetLayerManager: IDispatch; dispid 66057;
    function IGetLayerManager: ILayerMgr; dispid 66058;
    function CreateCircle2(XC: Double; YC: Double; Zc: Double; Xp: Double; Yp: Double; Zp: Double): IDispatch; dispid 66059;
    function ICreateCircle2(XC: Double; YC: Double; Zc: Double; Xp: Double; Yp: Double; Zp: Double): ISketchSegment; dispid 66060;
    function CreateCircleByRadius2(XC: Double; YC: Double; Zc: Double; Radius: Double): IDispatch; dispid 66061;
    function ICreateCircleByRadius2(XC: Double; YC: Double; Zc: Double; Radius: Double): ISketchSegment; dispid 66062;
    function CreateArc2(XC: Double; YC: Double; Zc: Double; Xp1: Double; Yp1: Double; Zp1: Double; 
                        Xp2: Double; Yp2: Double; Zp2: Double; Direction: Smallint): IDispatch; dispid 66063;
    function ICreateArc2(XC: Double; YC: Double; Zc: Double; Xp1: Double; Yp1: Double; Zp1: Double; 
                         Xp2: Double; Yp2: Double; Zp2: Double; Direction: Smallint): ISketchSegment; dispid 66064;
    function CreateEllipse2(CenterX: Double; CenterY: Double; CenterZ: Double; MajorX: Double; 
                            MajorY: Double; MajorZ: Double; MinorX: Double; MinorY: Double; 
                            MinorZ: Double): IDispatch; dispid 66065;
    function ICreateEllipse2(CenterX: Double; CenterY: Double; CenterZ: Double; MajorX: Double; 
                             MajorY: Double; MajorZ: Double; MinorX: Double; MinorY: Double; 
                             MinorZ: Double): ISketchSegment; dispid 66066;
    function CreateEllipticalArc2(CenterX: Double; CenterY: Double; CenterZ: Double; 
                                  MajorX: Double; MajorY: Double; MajorZ: Double; MinorX: Double; 
                                  MinorY: Double; MinorZ: Double; StartX: Double; StartY: Double; 
                                  StartZ: Double; EndX: Double; EndY: Double; EndZ: Double): IDispatch; dispid 66067;
    function ICreateEllipticalArc2(CenterX: Double; CenterY: Double; CenterZ: Double; 
                                   MajorX: Double; MajorY: Double; MajorZ: Double; MinorX: Double; 
                                   MinorY: Double; MinorZ: Double; StartX: Double; StartY: Double; 
                                   StartZ: Double; EndX: Double; EndY: Double; EndZ: Double): ISketchSegment; dispid 66068;
    function CreateSpline(PointData: OleVariant): IDispatch; dispid 66069;
    function ICreateSpline(PointCount: Integer; var PointData: Double): ISketchSegment; dispid 66070;
    procedure ViewZoomtofit2; dispid 66071;
    procedure SetInferenceMode(InferenceMode: WordBool); dispid 66072;
    function GetInferenceMode: WordBool; dispid 66073;
    function SetTitle2(const NewTitle: WideString): WordBool; dispid 66074;
    function SketchFillet2(Rad: Double; ConstrainedCorners: Smallint): WordBool; dispid 66075;
    function IsTessellationValid: WordBool; dispid 66076;
    procedure EditRoute; dispid 66077;
    procedure FileReload; dispid 66078;
    function GetDesignTable: IDispatch; dispid 66079;
    function IGetDesignTable: IDesignTable; dispid 66080;
    function GetEntityName(const Entity: IDispatch): WideString; dispid 66081;
    function IGetEntityName(const Entity: IEntity): WideString; dispid 66082;
    function IGetNext: IModelDoc2; dispid 66083;
    function ShowConfiguration2(const ConfigurationName: WideString): WordBool; dispid 66084;
    function AddConfiguration2(const Name: WideString; const Comment: WideString; 
                               const AlternateName: WideString; SuppressByDefault: WordBool; 
                               HideByDefault: WordBool; MinFeatureManager: WordBool; 
                               InheritProperties: WordBool; Flags: LongWord): WordBool; dispid 66085;
    function DeleteConfiguration2(const ConfigurationName: WideString): WordBool; dispid 66086;
    function EditConfiguration2(const Name: WideString; const NewName: WideString; 
                                const Comment: WideString; const AlternateName: WideString; 
                                SuppressByDefault: WordBool; HideByDefault: WordBool; 
                                MinFeatureManager: WordBool; InheritProperties: WordBool; 
                                Flags: LongWord): WordBool; dispid 66087;
    function CreateSplineByEqnParams(ParamsIn: OleVariant): IDispatch; dispid 66088;
    function ICreateSplineByEqnParams(var PropArray: SYSINT; var KnotsArray: Double; 
                                      var CntrlPntCoordArray: Double): ISketchSegment; dispid 66089;
    function CreateFeatureMgrView2(var Bitmap: Integer; const ToolTip: WideString): IDispatch; dispid 66090;
    function ICreateFeatureMgrView2(var Bitmap: Integer; const ToolTip: WideString): IFeatMgrView; dispid 66091;
    function AddFeatureMgrView2(var Bitmap: Integer; var AppView: Integer; const ToolTip: WideString): WordBool; dispid 66092;
    procedure FeatureCut3(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          KeepPieceIndex: Integer); dispid 66093;
    function GetFirstAnnotation2: IDispatch; dispid 66094;
    function IGetFirstAnnotation2: IAnnotation; dispid 66095;
    procedure InsertExtendSurface(ExtendLinear: WordBool; EndCondition: Integer; Distance: Double); dispid 66096;
    procedure InsertTangencySurface(OneSide: WordBool; IsFlip: WordBool); dispid 66097;
    function CreateSplinesByEqnParams(ParamsIn: OleVariant): OleVariant; dispid 66098;
    function ICreateSplinesByEqnParams(var PropArray: SYSINT; var KnotsArray: Double; 
                                       var CntrlPntCoordArray: Double): IEnumSketchSegments; dispid 66099;
    function CreateClippedSplines(ParamsIn: OleVariant; X1: Double; Y1: Double; X2: Double; 
                                  Y2: Double): OleVariant; dispid 66100;
    function ICreateClippedSplines(var PropArray: SYSINT; var KnotsArray: Double; 
                                   var CntrlPntCoordArray: Double; X1: Double; Y1: Double; 
                                   X2: Double; Y2: Double): IEnumSketchSegments; dispid 66101;
    function EditSuppress2: WordBool; dispid 66102;
    function EditUnsuppress2: WordBool; dispid 66103;
    function EditUnsuppressDependent2: WordBool; dispid 66104;
    function EditRollback2: WordBool; dispid 66105;
    procedure HideDimension; dispid 66106;
    procedure ShowFeatureDimensions; dispid 66107;
    procedure HideFeatureDimensions; dispid 66108;
    procedure Sketch3DIntersections; dispid 66109;
    function FeatureFillet4(R1: Double; Propagate: WordBool; UniformRadius: WordBool; Ftyp: SYSINT; 
                            VarRadTyp: WordBool; OverflowType: Integer; NRadii: SYSINT; 
                            Radii: OleVariant; UseHelpPoint: WordBool; 
                            UseTangentHoldLine: WordBool; CornerType: WordBool; 
                            SetbackDistCount: SYSINT; SetBackDistances: OleVariant): Integer; dispid 66110;
    function IFeatureFillet4(R1: Double; Propagate: WordBool; UniformRadius: WordBool; 
                             Ftyp: SYSINT; VarRadTyp: WordBool; OverflowType: Integer; 
                             NRadii: SYSINT; var Radii: Double; UseHelpPoint: WordBool; 
                             UseTangentHoldLine: WordBool; CornerType: WordBool; 
                             SetbackDistCount: SYSINT; var SetBackDistances: Double): Integer; dispid 66111;
    procedure InsertDeleteFace; dispid 66112;
    function GetDependencies2(Traverseflag: WordBool; Searchflag: WordBool; 
                              AddReadOnlyInfo: WordBool): OleVariant; dispid 66113;
    function IGetDependencies2(Traverseflag: WordBool; Searchflag: WordBool; 
                               AddReadOnlyInfo: WordBool): WideString; dispid 66114;
    function IGetNumDependencies2(Traverseflag: WordBool; Searchflag: WordBool; 
                                  AddReadOnlyInfo: WordBool): Integer; dispid 66115;
    procedure InsertScale(ScaleFactor_x: Double; ScaleFactor_y: Double; ScaleFactor_z: Double; 
                          IsUniform: WordBool; ScaleType: SYSINT); dispid 66116;
    procedure LockAllExternalReferences; dispid 66117;
    procedure UnlockAllExternalReferences; dispid 66118;
    procedure BreakAllExternalReferences; dispid 66119;
    function EditDimensionProperties(TolType: Integer; TolMax: Double; TolMin: Double; 
                                     const TolMaxFit: WideString; const TolMinFit: WideString; 
                                     UseDocPrec: WordBool; Precision: Integer; ArrowsIn: Integer; 
                                     UseDocArrows: WordBool; Arrow1: Integer; Arrow2: Integer): WordBool; dispid 66120;
    function SketchPolygon(XCenter: Double; YCenter: Double; XEdge: Double; YEdge: Double; 
                           NSides: SYSINT; BInscribed: WordBool): WordBool; dispid 66121;
    function GetBlockingState: Integer; dispid 66122;
    function CreateFeatureMgrView3(var Bitmap: Integer; const ToolTip: WideString; 
                                   WhichPane: Integer): IDispatch; dispid 66123;
    function ICreateFeatureMgrView3(var Bitmap: Integer; const ToolTip: WideString; 
                                    WhichPane: Integer): IFeatMgrView; dispid 66124;
    function AddFeatureMgrView3(var Bitmap: Integer; var AppView: Integer; 
                                const ToolTip: WideString; WhichPane: Integer): WordBool; dispid 66125;
    function CreatePlaneAtOffset2(Val: Double; FlipDir: WordBool): IDispatch; dispid 66126;
    function ICreatePlaneAtOffset2(Val: Double; FlipDir: WordBool): IRefPlane; dispid 66127;
    function CreatePlaneAtAngle2(Val: Double; FlipDir: WordBool): IDispatch; dispid 66128;
    function ICreatePlaneAtAngle2(Val: Double; FlipDir: WordBool): IRefPlane; dispid 66129;
    function CreatePlaneThru3Points2: IDispatch; dispid 66130;
    function ICreatePlaneThru3Points2: IRefPlane; dispid 66131;
    function CreatePlanePerCurveAndPassPoint2(OrigAtCurve: WordBool): IDispatch; dispid 66132;
    function ICreatePlanePerCurveAndPassPoint2(OrigAtCurve: WordBool): IRefPlane; dispid 66133;
    function CreatePlaneAtSurface2(InterIndex: SYSINT; ProjOpt: WordBool; ReverseDir: WordBool; 
                                   NormalPlane: WordBool; Angle: Double): IDispatch; dispid 66134;
    function ICreatePlaneAtSurface2(InterIndex: SYSINT; ProjOpt: WordBool; ReverseDir: WordBool; 
                                    NormalPlane: WordBool; Angle: Double): IRefPlane; dispid 66135;
    function GetUserPreferenceIntegerValue(UserPreferenceValue: Integer): Integer; dispid 66136;
    function SetUserPreferenceIntegerValue(UserPreferenceValue: Integer; Value: Integer): WordBool; dispid 66137;
    function GetUserPreferenceTextFormat(UserPreferenceValue: Integer): IDispatch; dispid 66138;
    function IGetUserPreferenceTextFormat(UserPreferenceValue: Integer): ITextFormat; dispid 66139;
    function SetUserPreferenceTextFormat(UserPreferenceValue: Integer; const Value: IDispatch): WordBool; dispid 66140;
    function ISetUserPreferenceTextFormat(UserPreferenceValue: Integer; const Value: ITextFormat): WordBool; dispid 66141;
    procedure InsertRib2(Is2Sided: WordBool; ReverseThicknessDir: WordBool; Thickness: Double; 
                         ReferenceEdgeIndex: Integer; ReverseMaterialDir: WordBool; 
                         IsDrafted: WordBool; DraftOutward: WordBool; DraftAngle: Double; 
                         IsNormToSketch: WordBool); dispid 66142;
    function InsertObjectFromFile(const FilePath: WideString; CreateLink: WordBool; Xx: Double; 
                                  Yy: Double; Zz: Double): WordBool; dispid 66143;
    procedure InspectCurvature; dispid 66144;
    procedure RemoveInspectCurvature; dispid 66145;
    function InsertDatumTag2: IDispatch; dispid 66146;
    function IInsertDatumTag2: IDatumTag; dispid 66147;
    function ActivateFeatureMgrView(var AppView: Integer): Integer; dispid 66148;
    procedure FeatureSketchDrivenPattern(UseCentroid: WordBool); dispid 66149;
    procedure HideShowBodies; dispid 66150;
    procedure HideSolidBody; dispid 66151;
    procedure ShowSolidBody; dispid 66152;
    procedure InsertFramePoint(Xx: Double; Yy: Double; Zz: Double); dispid 66153;
    procedure LockFramePoint; dispid 66154;
    procedure UnlockFramePoint; dispid 66155;
    function InsertGtol: IDispatch; dispid 66156;
    function IInsertGtol: IGtol; dispid 66157;
    function DeActivateFeatureMgrView(var AppView: Integer): WordBool; dispid 66158;
    function InsertNote(const Text: WideString): IDispatch; dispid 66159;
    function IInsertNote(const Text: WideString): INote; dispid 66160;
    procedure SetSaveAsFileName(const FileName: WideString); dispid 66161;
    procedure ClosePrintPreview; dispid 66162;
    procedure HideComponent2; dispid 66163;
    procedure ShowComponent2; dispid 66164;
    function SaveBMP(const FileNameIn: WideString; WidthIn: Integer; HeightIn: Integer): WordBool; dispid 66165;
    procedure InsertSketch2(UpdateEditRebuild: WordBool); dispid 66166;
    procedure Insert3DSketch2(UpdateEditRebuild: WordBool); dispid 66167;
    procedure InsertDeleteHole; dispid 66168;
    procedure PreTrimSurface(BMutualTrimIn: WordBool); dispid 66169;
    procedure PostTrimSurface(BSewSurfaceIn: WordBool); dispid 66170;
    procedure SketchConvertIsoCurves(PercentRatio: Double; VORuDir: WordBool; 
                                     DoConstrain: WordBool; SkipHoles: WordBool); dispid 66171;
    procedure SelectLoop; dispid 66172;
    procedure InsertSheetMetalBaseFlange(Thickness: Double; ThickenDir: WordBool; Radius: Double; 
                                         ExtrudeDist1: Double; ExtrudeDist2: Double; 
                                         FlipExtruDir: WordBool; EndCondition1: Integer; 
                                         EndCondition2: Integer; DirToUse: Integer); dispid 66173;
    procedure InsertSheetMetalFold; dispid 66174;
    procedure InsertSheetMetalUnfold; dispid 66175;
    procedure InsertSheetMetalMiterFlange(UseReliefRatio: WordBool; UseDefaultGap: WordBool; 
                                          UseAutoRelief: WordBool; GlobalRadius: Double; 
                                          RipGap: Double; AutoReliefRatio: Double; 
                                          AutoReliefWidth: Double; AutoReliefDepth: Double; 
                                          ReliefType: Integer; RipLocation: Integer; 
                                          TrimSideBends: WordBool); dispid 66176;
    procedure CreateGroup; dispid 66177;
    procedure RemoveItemsFromGroup; dispid 66178;
    procedure RemoveGroups; dispid 66179;
    function InsertBOMBalloon2(Style: Integer; Size: Integer; UpperTextStyle: Integer; 
                               const UpperText: WideString; LowerTextStyle: Integer; 
                               const LowerText: WideString): IDispatch; dispid 66180;
    function IInsertBOMBalloon2(Style: Integer; Size: Integer; UpperTextStyle: Integer; 
                                const UpperText: WideString; LowerTextStyle: Integer; 
                                const LowerText: WideString): INote; dispid 66181;
    procedure EditRedo(NSteps: LongWord); dispid 66182;
    procedure InsertProtrusionBlend4(Closed: WordBool; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; TessToleranceFactor: Double; 
                                     StartMatchingType: Smallint; EndMatchingType: Smallint; 
                                     IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                                     ThinType: Smallint); dispid 66183;
    procedure InsertCutBlend4(Closed: WordBool; KeepTangency: WordBool; ForceNonRational: WordBool; 
                              TessToleranceFactor: Double; StartMatchingType: Smallint; 
                              EndMatchingType: Smallint; IsThinBody: WordBool; Thickness1: Double; 
                              Thickness2: Double; ThinType: Smallint); dispid 66184;
    procedure InsertProtrusionSwept4(Propagate: WordBool; Alignment: WordBool; 
                                     TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                     ForceNonRational: WordBool; StartMatchingType: Smallint; 
                                     EndMatchingType: Smallint; IsThinBody: WordBool; 
                                     Thickness1: Double; Thickness2: Double; ThinType: Smallint); dispid 66185;
    procedure InsertCutSwept4(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                              KeepTangency: WordBool; ForceNonRational: WordBool; 
                              StartMatchingType: Smallint; EndMatchingType: Smallint; 
                              IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                              ThinType: Smallint); dispid 66186;
    procedure SelectTangency; dispid 66187;
    function InsertBendTableOpen(const FileName: WideString): WordBool; dispid 66188;
    function InsertBendTableNew(const FileName: WideString; const Units: WideString; 
                                const Type_: WideString): WordBool; dispid 66189;
    procedure InsertBendTableEdit; dispid 66190;
    procedure DeleteBendTable; dispid 66191;
    procedure InsertSheetMetal3dBend(Angle: Double; Radius: Double; FlipDir: WordBool; 
                                     BendPos: Smallint); dispid 66192;
    function CreateTangentArc2(P1x: Double; P1y: Double; P1z: Double; P2x: Double; P2y: Double; 
                               P2z: Double; ArcTypeIn: Integer): WordBool; dispid 66193;
    function GetMassProperties2(var Status: Integer): OleVariant; dispid 66194;
    function IGetMassProperties2(var Status: Integer): Double; dispid 66195;
    procedure SketchChamfer(AngleORdist: Double; Dist1: Double; Options: Integer); dispid 66196;
    procedure FeatureCut4(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          KeepPieceIndex: Integer; NormalCut: WordBool); dispid 66197;
    function GetPropertyManagerPage(DialogId: Integer; const Title: WideString; 
                                    const Handler: IUnknown): IPropertyManagerPage; dispid 66198;
    procedure AlignOrdinate; dispid 66199;
    procedure EditOrdinate; dispid 66200;
    function ReattachOrdinate: WordBool; dispid 66201;
    function EditBalloonProperties(Style: Integer; Size: Integer; UpperTextStyle: Integer; 
                                   const UpperText: WideString; LowerTextStyle: Integer; 
                                   const LowerText: WideString): IDispatch; dispid 66202;
    function EditDimensionProperties2(TolType: Integer; TolMax: Double; TolMin: Double; 
                                      const TolMaxFit: WideString; const TolMinFit: WideString; 
                                      UseDocPrec: WordBool; Precision: Integer; ArrowsIn: Integer; 
                                      UseDocArrows: WordBool; Arrow1: Integer; Arrow2: Integer; 
                                      const PrefixText: WideString; const SuffixText: WideString; 
                                      ShowValue: WordBool; const CalloutText1: WideString; 
                                      const CalloutText2: WideString; CenterText: WordBool): WordBool; dispid 66203;
    procedure InsertSheetMetalClosedCorner; dispid 66204;
    function SketchUseEdge2(Chain: WordBool): WordBool; dispid 66205;
    function SketchOffsetEntities2(Offset: Double; BothDirections: WordBool; Chain: WordBool): WordBool; dispid 66206;
    function SketchOffset2(Offset: Double; BothDirections: WordBool; Chain: WordBool): WordBool; dispid 66207;
    function AddDimension2(X: Double; Y: Double; Z: Double): IDispatch; dispid 66208;
    function IAddDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; dispid 66209;
    function AddHorizontalDimension2(X: Double; Y: Double; Z: Double): IDispatch; dispid 66210;
    function IAddHorizontalDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; dispid 66211;
    function AddVerticalDimension2(X: Double; Y: Double; Z: Double): IDispatch; dispid 66212;
    function IAddVerticalDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; dispid 66213;
    function AddRadialDimension2(X: Double; Y: Double; Z: Double): IDispatch; dispid 66214;
    function IAddRadialDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; dispid 66215;
    function AddDiameterDimension2(X: Double; Y: Double; Z: Double): IDispatch; dispid 66216;
    function IAddDiameterDimension2(X: Double; Y: Double; Z: Double): IDisplayDimension; dispid 66217;
    function GetUserUnit(UnitType: Integer): IDispatch; dispid 66218;
    function IGetUserUnit(UnitType: Integer): IUserUnit; dispid 66219;
    function InsertWeldSymbol3: IDispatch; dispid 66220;
    function IInsertWeldSymbol3: IWeldSymbol; dispid 66221;
    function SaveAs3(const NewName: WideString; SaveAsVersion: Integer; Options: Integer): Integer; dispid 66222;
    function GetUserPreferenceStringValue(UserPreference: Integer): WideString; dispid 66223;
    function SetUserPreferenceStringValue(UserPreference: Integer; const Value: WideString): WordBool; dispid 66224;
    procedure DeleteDesignTable; dispid 66225;
    function EditRebuild3: WordBool; dispid 66226;
    function ForceRebuild3(TopOnly: WordBool): WordBool; dispid 66227;
    function FeatureFillet5(Options: Integer; R1: Double; Ftyp: Integer; OverflowType: Integer; 
                            Radii: OleVariant; SetBackDistances: OleVariant; 
                            PointRadiusArray: OleVariant): Integer; dispid 66228;
    function IFeatureFillet5(Options: Integer; R1: Double; Ftyp: Integer; OverflowType: Integer; 
                             NRadii: Integer; var Radii: Double; SetbackDistCount: Integer; 
                             var SetBackDistances: Double; PointCount: Integer; 
                             var PointRadiusArray: Double): Integer; dispid 66229;
    procedure InsertSheetMetalBreakCorner(Type_: Integer; Distance: Double); dispid 66230;
    procedure InsertSheetMetalHem(Type_: Integer; Position: Integer; Reverse: WordBool; 
                                  DLength: Double; DGap: Double; DAngle: Double; DRad: Double; 
                                  DMiterGap: Double); dispid 66231;
    function CreatePlaneAtOffset3(Val: Double; FlipDir: WordBool; AutoSize: WordBool): IDispatch; dispid 66232;
    function ICreatePlaneAtOffset3(Val: Double; FlipDir: WordBool; AutoSize: WordBool): IRefPlane; dispid 66233;
    function CreatePlaneAtAngle3(Val: Double; FlipDir: WordBool; AutoSize: WordBool): IDispatch; dispid 66234;
    function ICreatePlaneAtAngle3(Val: Double; FlipDir: WordBool; AutoSize: WordBool): IRefPlane; dispid 66235;
    function CreatePlaneThru3Points3(AutoSize: WordBool): IDispatch; dispid 66236;
    function ICreatePlaneThru3Points3(AutoSize: WordBool): IRefPlane; dispid 66237;
    function CreatePlaneThruPtParallelToPlane(AutoSize: WordBool): IDispatch; dispid 66238;
    function ICreatePlaneThruPtParallelToPlane(AutoSize: WordBool): IRefPlane; dispid 66239;
    function CreatePlaneThruLineAndPt(AutoSize: WordBool): IDispatch; dispid 66240;
    function ICreatePlaneThruLineAndPt(AutoSize: WordBool): IRefPlane; dispid 66241;
    function CreatePlanePerCurveAndPassPoint3(OrigAtCurve: WordBool; AutoSize: WordBool): IDispatch; dispid 66242;
    function ICreatePlanePerCurveAndPassPoint3(OrigAtCurve: WordBool; AutoSize: WordBool): IRefPlane; dispid 66243;
    function CreatePlaneAtSurface3(InterIndex: Smallint; ProjOpt: WordBool; ReverseDir: WordBool; 
                                   NormalPlane: WordBool; Angle: Double; AutoSize: WordBool): IDispatch; dispid 66244;
    function ICreatePlaneAtSurface3(InterIndex: Smallint; ProjOpt: WordBool; ReverseDir: WordBool; 
                                    NormalPlane: WordBool; Angle: Double; AutoSize: WordBool): IRefPlane; dispid 66245;
    function InsertAxis2(AutoSize: WordBool): WordBool; dispid 66246;
    function InsertSketchPicture(const FileName: WideString): WordBool; dispid 66247;
    procedure GetZebraStripeData(var Size: Double; var Ratio: Double; var Color1: Integer; 
                                 var Color2: Integer); dispid 66248;
    procedure SetZebraStripeData(Size: Double; Ratio: Double; Color1: Integer; Color2: Integer); dispid 66249;
    procedure InsertSketchPictureData(Width: Smallint; Height: Smallint; PDataIn: Integer); dispid 66250;
    procedure FeatureCurvePattern(Num1: Integer; Spacing1: Double; Num2: Integer; Spacing2: Double; 
                                  FlipDir1: WordBool; FlipDir2: WordBool; EqualSpacing1: WordBool; 
                                  EqualSpacing2: WordBool; UseCentroid: WordBool; 
                                  AlignToSeed: WordBool; OffsetCurve: WordBool; 
                                  PatternSeedOnly: WordBool); dispid 66251;
    procedure InsertFeatureReplaceFace; dispid 66252;
    procedure InsertRip(Gap: Double); dispid 66253;
    function InsertSheetMetalEdgeFlange(const FlangeEdge: IDispatch; const SketchFeat: IDispatch; 
                                        BooleanOptions: Integer; DAngle: Double; DRadius: Double; 
                                        BendPosition: Integer; DOffsetDist: Double; 
                                        ReliefType: Integer; DReliefRatio: Double; 
                                        DReliefWidth: Double; DReliefDepth: Double): IDispatch; dispid 66254;
    function IInsertSheetMetalEdgeFlange(const FlangeEdge: IEdge; const SketchFeat: IFeature; 
                                         BooleanOptions: Integer; DAngle: Double; DRadius: Double; 
                                         BendPosition: Integer; DOffsetDist: Double; 
                                         ReliefType: Integer; DReliefRatio: Double; 
                                         DReliefWidth: Double; DReliefDepth: Double): IFeature; dispid 66255;
    function InsertSketchText(Ptx: Double; Pty: Double; Ptz: Double; const Text: WideString; 
                              Alignment: Integer; FlipDirection: Integer; 
                              HorizontalMirror: Integer; WidthFactor: Integer; 
                              SpaceBetweenChars: Integer): IDispatch; dispid 66256;
    function IInsertSketchText(Ptx: Double; Pty: Double; Ptz: Double; const Text: WideString; 
                               Alignment: Integer; FlipDirection: Integer; 
                               HorizontalMirror: Integer; WidthFactor: Integer; 
                               SpaceBetweenChars: Integer): ISketchText; dispid 66257;
    procedure DissolveSketchText; dispid 66258;
    procedure MoldDraftAnalysis(Angle: Double; Options: Integer; Colors: OleVariant; Shows: Integer); dispid 66259;
    procedure InsertSheetMetalJog(Angle: Double; Radius: Double; OffsetDist: Double; 
                                  FlipDir: WordBool; FixProjLen: WordBool; DimPos: Smallint; 
                                  BendPos: Smallint); dispid 66260;
    function InsertSketchForEdgeFlange(const FlangeEdge: IDispatch; DAngle: Double; 
                                       FlipDir: WordBool): IDispatch; dispid 66261;
    function IInsertSketchForEdgeFlange(const FlangeEdge: IEdge; DAngle: Double; FlipDir: WordBool): IFeature; dispid 66262;
    procedure ClearSelection2(All: WordBool); dispid 66263;
    procedure ListExternalFileReferences2(out ModelPathName: OleVariant; 
                                          out ComponentPathName: OleVariant; 
                                          out Feature: OleVariant; out DataType: OleVariant; 
                                          out Status: OleVariant; out RefEntity: OleVariant; 
                                          out FeatCom: OleVariant); dispid 66264;
    function ListExternalFileReferencesCount2: Integer; dispid 66265;
    procedure IListExternalFileReferences2(NumRefs: Integer; out ModelPathName: WideString; 
                                           out CompPathName: WideString; out Feature: WideString; 
                                           out DataType: WideString; out Status: Integer; 
                                           out RefEntity: WideString; out FeatComp: WideString); dispid 66266;
    function InsertDeleteFace2(Refill: Integer): WordBool; dispid 66267;
    procedure AddLoftSection; dispid 66268;
    function InsertMacroFeature(const CmdFile: WideString; const CmdModule: WideString; 
                                const CmdProcedure: WideString; ParamNames: OleVariant; 
                                ParamTypes: OleVariant; ParamValues: OleVariant; 
                                const PmFile: WideString; const PmModule: WideString; 
                                const PmProcedure: WideString): IDispatch; dispid 66269;
    function IInsertMacroFeature(const CmdFile: WideString; const CmdModule: WideString; 
                                 const CmdProcedure: WideString; ParamCount: Integer; 
                                 var ParamNames: WideString; var ParamTypes: Integer; 
                                 var ParamValues: WideString; const PmFile: WideString; 
                                 const PmModule: WideString; const PmProcedure: WideString): IFeature; dispid 66270;
    procedure ListAuxiliaryExternalFileReferences(out Feature: OleVariant; 
                                                  out ExternalFileName: OleVariant); dispid 66271;
    function ListAuxiliaryExternalFileReferencesCount: Integer; dispid 66272;
    procedure IListAuxiliaryExternalFileReferences(NumRefs: Integer; out Feature: WideString; 
                                                   out ExternalFileName: WideString); dispid 66273;
    procedure FeatureCut5(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                          D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          TranslateSurface1: WordBool; TranslateSurface2: WordBool; 
                          KeepPieceIndex: Integer; NormalCut: WordBool); dispid 66274;
    procedure FeatureBoss2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                           D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                           Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                           OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                           TranslateSurface1: WordBool; TranslateSurface2: WordBool); dispid 66275;
    function DissolveLibraryFeature: WordBool; dispid 66276;
    procedure FeatureExtruRefSurface2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                      T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                      Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; 
                                      Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                                      OffsetReverse2: WordBool; TranslateSurface1: WordBool; 
                                      TranslateSurface2: WordBool); dispid 66277;
    procedure FeatureCutThin2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                              T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                              Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                              Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                              TranslateSurface1: WordBool; TranslateSurface2: WordBool; 
                              Thk1: Double; Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                              CapEnds: Integer; AddBends: WordBool; BendRad: Double); dispid 66278;
    procedure FeatureBossThin2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                               T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                               Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                               Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                               TranslateSurface1: WordBool; TranslateSurface2: WordBool; 
                               Thk1: Double; Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                               CapEnds: Integer; AddBends: WordBool; BendRad: Double); dispid 66279;
    procedure SimpleHole3(Dia: Double; Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                          T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                          Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                          OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                          TranslateSurface1: WordBool; TranslateSurface2: WordBool); dispid 66280;
    procedure EditUndo2(Steps: Integer); dispid 66281;
    procedure EditRedo2(Steps: Integer); dispid 66282;
    function AddConfiguration3(const Name: WideString; const Comment: WideString; 
                               const AlternateName: WideString; Options: Integer): IDispatch; dispid 66283;
    function IAddConfiguration3(const Name: WideString; const Comment: WideString; 
                                const AlternateName: WideString; Options: Integer): IConfiguration; dispid 66284;
    function EditConfiguration3(const Name: WideString; const NewName: WideString; 
                                const Comment: WideString; const AlternateName: WideString; 
                                Options: Integer): WordBool; dispid 66285;
    function GetEquationMgr: IEquationMgr; dispid 66286;
    function ClosestDistance(const Object1: IDispatch; const Object2: IDispatch; 
                             out Point1: OleVariant; out Point2: OleVariant): Double; dispid 66287;
    function IClosestDistance(const Object1: IDispatch; const Object2: IDispatch; 
                              out Point1: Double; out Point2: Double): Double; dispid 66288;
    function ReloadOrReplace(ReadOnly: WordBool; const ReplaceFileName: WideString; 
                             DiscardChanges: WordBool): Integer; dispid 66289;
    property FeatureManagerSplitterPosition: Double dispid 66290;
    function GetCustomInfoValue(const Configuration: WideString; const FieldName: WideString): WideString; dispid 66291;
    property Printer: WideString dispid 66292;
    property PageSetup: IDispatch readonly dispid 66293;
    property IPageSetup: IPageSetup readonly dispid 66294;
    function InsertStackedBalloon(Style: Integer; Size: Integer; UpperTextStyle: Integer; 
                                  const UpperText: WideString; LowerTextStyle: Integer; 
                                  const LowerText: WideString): INote; dispid 66295;
    function SaveAs4(const Name: WideString; Version: Integer; Options: Integer; 
                     var Errors: Integer; var Warnings: Integer): WordBool; dispid 66296;
    function Save3(Options: Integer; var Errors: Integer; var Warnings: Integer): WordBool; dispid 66297;
    function CreatePlaneFixed2(P1: OleVariant; P2: OleVariant; P3: OleVariant; UseGlobal: WordBool): IDispatch; dispid 66298;
    function ICreatePlaneFixed2(var P1: Double; var P2: Double; var P3: Double; UseGlobal: WordBool): IRefPlane; dispid 66299;
    property LargeAssemblyMode: WordBool dispid 66300;
    function AddOrEditConfiguration(const ConfigName: WideString; Params: OleVariant; 
                                    Values: OleVariant): Integer; dispid 66301;
    function IAddOrEditConfiguration(const ConfigName: WideString; ParamCount: Integer; 
                                     var ParamNames: WideString; var ParamValues: WideString): Integer; dispid 66302;
    function ForceReleaseLocks: Integer; dispid 66303;
    property FeatureManager: IFeatureManager readonly dispid 66304;
    property ModelViewManager: IModelViewManager readonly dispid 66305;
    property Extension: IModelDocExtension readonly dispid 66306;
    property ConfigurationManager: IConfigurationManager readonly dispid 66307;
    property SketchManager: ISketchManager readonly dispid 66308;
    function EditDimensionProperties3(TolType: Integer; TolMax: Double; TolMin: Double; 
                                      const TolMaxFit: WideString; const TolMinFit: WideString; 
                                      UseDocPrec: WordBool; Precision: Integer; ArrowsIn: Integer; 
                                      UseDocArrows: WordBool; Arrow1: Integer; Arrow2: Integer; 
                                      const PrefixText: WideString; const SuffixText: WideString; 
                                      ShowValue: WordBool; const CalloutText1: WideString; 
                                      const CalloutText2: WideString; CenterText: WordBool; 
                                      ConfigOption: Integer; ConfigNames: OleVariant): WordBool; dispid 66309;
    function IEditDimensionProperties3(TolType: Integer; TolMax: Double; TolMin: Double; 
                                       const TolMaxFit: WideString; const TolMinFit: WideString; 
                                       UseDocPrec: WordBool; Precision: Integer; ArrowsIn: Integer; 
                                       UseDocArrows: WordBool; Arrow1: Integer; Arrow2: Integer; 
                                       const PrefixText: WideString; const SuffixText: WideString; 
                                       ShowValue: WordBool; const CalloutText1: WideString; 
                                       const CalloutText2: WideString; CenterText: WordBool; 
                                       ConfigOption: Integer; Count: Integer; 
                                       var ConfigNames: WideString): WordBool; dispid 66310;
  end;

// *********************************************************************//
// Interface: IModelView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D4C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IModelView = interface(IDispatch)
    ['{83A33D4C-27C5-11CE-BFD4-00400513BB57}']
    function Get_Xform: OleVariant; safecall;
    procedure Set_Xform(Retval: OleVariant); safecall;
    function Get_Orientation: OleVariant; safecall;
    procedure Set_Orientation(Retval: OleVariant); safecall;
    function Get_Translation: OleVariant; safecall;
    procedure Set_Translation(Retval: OleVariant); safecall;
    function Get_Scale: Double; safecall;
    procedure Set_Scale(Retval: Double); safecall;
    function Get_IXform: Double; safecall;
    procedure Set_IXform(var Retval: Double); safecall;
    function Get_IOrientation: Double; safecall;
    procedure Set_IOrientation(var Retval: Double); safecall;
    function Get_ITranslation: Double; safecall;
    procedure Set_ITranslation(var Retval: Double); safecall;
    function GetViewHWnd: Integer; safecall;
    procedure StartDynamics; safecall;
    procedure StopDynamics; safecall;
    procedure AddPerspective; safecall;
    procedure RemovePerspective; safecall;
    function HasPerspective: WordBool; safecall;
    function GetEyePoint: OleVariant; safecall;
    procedure IGetEyePoint(var Eyept: Double); safecall;
    function GetViewPlaneDistance: Double; safecall;
    procedure InitializeShading; safecall;
    function Get_Orientation2: OleVariant; safecall;
    procedure Set_Orientation2(Retval: OleVariant); safecall;
    function Get_Translation2: OleVariant; safecall;
    procedure Set_Translation2(Retval: OleVariant); safecall;
    function Get_IOrientation2: Double; safecall;
    procedure Set_IOrientation2(var Retval: Double); safecall;
    function Get_ITranslation2: Double; safecall;
    procedure Set_ITranslation2(var Retval: Double); safecall;
    function GetDisplayState(DisplayType: Integer): WordBool; safecall;
    function GetViewDIB: Integer; safecall;
    procedure ZoomByFactor(Factor: Double); safecall;
    procedure TranslateBy(X: Double; Y: Double); safecall;
    procedure RotateAboutCenter(XAngle: Double; YAngle: Double); safecall;
    procedure RotateAboutPoint(XAngle: Double; YAngle: Double; Ptx: Double; Pty: Double; Ptz: Double); safecall;
    procedure RotateAboutAxis(Angle: Double; Ptx: Double; Pty: Double; Ptz: Double; 
                              AxisVecX: Double; AxisVecY: Double; AxisVecZ: Double); safecall;
    function SetEyePoint(Eyept: OleVariant): WordBool; safecall;
    function ISetEyePoint(var Eyept: Double): WordBool; safecall;
    function SetStereoSeparation(DfSeparation: OleVariant): WordBool; safecall;
    function ISetStereoSeparation(var DfSeparation: Double): WordBool; safecall;
    function GetStereoSeparation: OleVariant; safecall;
    function IGetStereoSeparation: Double; safecall;
    procedure GetDIBHeader(Ldib: Integer); safecall;
    procedure GetStripsOfDIB(Ldib: Integer; NScanLinesPerStrip: Integer; StripIndex: Integer); safecall;
    procedure Set_FrameLeft(Left: SYSINT); safecall;
    procedure Set_FrameTop(Top: SYSINT); safecall;
    procedure Set_FrameWidth(Width: SYSINT); safecall;
    procedure Set_FrameHeight(Height: SYSINT); safecall;
    procedure Set_FrameState(State: SYSINT); safecall;
    function Get_ObjectSizesAway: Double; safecall;
    procedure Set_ObjectSizesAway(Retval: Double); safecall;
    function Get_DynamicMode: Integer; safecall;
    procedure DrawHighlightedItems; safecall;
    function GetNext: IDispatch; safecall;
    function IGetNext: IModelView; safecall;
    function Get_Scale2: Double; safecall;
    procedure Set_Scale2(Retval: Double); safecall;
    function Get_HlrQuality: Integer; safecall;
    procedure Set_HlrQuality(Retval: Integer); safecall;
    function Get_XorHighlight: WordBool; safecall;
    procedure Set_XorHighlight(Retval: WordBool); safecall;
    function Get_DisplayZebraStripes: WordBool; safecall;
    procedure Set_DisplayZebraStripes(Retval: WordBool); safecall;
    function Get_Transform: IMathTransform; safecall;
    procedure Set_Transform(const Xform: IMathTransform); safecall;
    function Get_Orientation3: IMathTransform; safecall;
    procedure Set_Orientation3(const Xform: IMathTransform); safecall;
    function Get_Translation3: IMathVector; safecall;
    procedure Set_Translation3(const VectorObj: IMathVector); safecall;
    procedure ProjectModelPoint(X: Double; Y: Double; Z: Double; out XOut: Double; 
                                out YOut: Double; out ZOut: Double); safecall;
    procedure UnprojectModelPoint(X: Double; Y: Double; Z: Double; out XOut: Double; 
                                  out YOut: Double; out ZOut: Double); safecall;
    function Get_SuppressWaitCursorDuringRedraw: WordBool; safecall;
    procedure Set_SuppressWaitCursorDuringRedraw(Suppress: WordBool); safecall;
    function Get_FrameLeft: SYSINT; safecall;
    function Get_FrameTop: SYSINT; safecall;
    function Get_FrameWidth: SYSINT; safecall;
    function Get_FrameHeight: SYSINT; safecall;
    function Get_FrameState: SYSINT; safecall;
    procedure DrawTransparentFeatureTree; safecall;
    function Get_DisplayMode: Integer; safecall;
    procedure Set_DisplayMode(State: Integer); safecall;
    function Get_EnableGraphicsUpdate: WordBool; safecall;
    procedure Set_EnableGraphicsUpdate(State: WordBool); safecall;
    function Get_Camera: ICamera; safecall;
    procedure Set_Camera(const Retval: ICamera); safecall;
    function SetCameraByName(const Name: WideString): WordBool; safecall;
    function GetIsoPlaneDistance: Double; safecall;
    function Get_Linked: WordBool; safecall;
    function GetViewDIBx64: Int64; safecall;
    procedure GetDIBHeaderx64(Ldib: Int64); safecall;
    procedure GetStripsOfDIBx64(Ldib: Int64; NScanLinesPerStrip: Integer; StripIndex: Integer); safecall;
    function GetViewHWndx64: Int64; safecall;
    function GetMouse: IMouse; safecall;
    procedure SectionAnnotationViewAttr(BarrayIn: WordBool; DistIn: Double; 
                                        const LabelIn: WideString); safecall;
    procedure RollBy(Angle: Double); safecall;
    procedure TurnBy(XAngle: Double; YAngle: Double); safecall;
    procedure GraphicsRedraw(Rect: OleVariant); safecall;
    procedure IGraphicsRedraw(var Rect: Integer); safecall;
    function Get_VisibilityViewTools: WordBool; safecall;
    procedure Set_VisibilityViewTools(Retval: WordBool); safecall;
    procedure Activate; safecall;
    function GetVisibleBox: OleVariant; safecall;
    function IGetVisibleBox: Integer; safecall;
    function Get_UpdateAllGraphicsLayers: WordBool; safecall;
    procedure Set_UpdateAllGraphicsLayers(State: WordBool); safecall;
    property Xform: OleVariant read Get_Xform write Set_Xform;
    property Orientation: OleVariant read Get_Orientation write Set_Orientation;
    property Translation: OleVariant read Get_Translation write Set_Translation;
    property Scale: Double read Get_Scale write Set_Scale;
    property Orientation2: OleVariant read Get_Orientation2 write Set_Orientation2;
    property Translation2: OleVariant read Get_Translation2 write Set_Translation2;
    property FrameLeft: SYSINT read Get_FrameLeft write Set_FrameLeft;
    property FrameTop: SYSINT read Get_FrameTop write Set_FrameTop;
    property FrameWidth: SYSINT read Get_FrameWidth write Set_FrameWidth;
    property FrameHeight: SYSINT read Get_FrameHeight write Set_FrameHeight;
    property FrameState: SYSINT read Get_FrameState write Set_FrameState;
    property ObjectSizesAway: Double read Get_ObjectSizesAway write Set_ObjectSizesAway;
    property DynamicMode: Integer read Get_DynamicMode;
    property Scale2: Double read Get_Scale2 write Set_Scale2;
    property HlrQuality: Integer read Get_HlrQuality write Set_HlrQuality;
    property XorHighlight: WordBool read Get_XorHighlight write Set_XorHighlight;
    property DisplayZebraStripes: WordBool read Get_DisplayZebraStripes write Set_DisplayZebraStripes;
    property Transform: IMathTransform read Get_Transform write Set_Transform;
    property Orientation3: IMathTransform read Get_Orientation3 write Set_Orientation3;
    property Translation3: IMathVector read Get_Translation3 write Set_Translation3;
    property SuppressWaitCursorDuringRedraw: WordBool read Get_SuppressWaitCursorDuringRedraw write Set_SuppressWaitCursorDuringRedraw;
    property DisplayMode: Integer read Get_DisplayMode write Set_DisplayMode;
    property EnableGraphicsUpdate: WordBool read Get_EnableGraphicsUpdate write Set_EnableGraphicsUpdate;
    property Camera: ICamera read Get_Camera write Set_Camera;
    property Linked: WordBool read Get_Linked;
    property VisibilityViewTools: WordBool read Get_VisibilityViewTools write Set_VisibilityViewTools;
    property UpdateAllGraphicsLayers: WordBool read Get_UpdateAllGraphicsLayers write Set_UpdateAllGraphicsLayers;
  end;

// *********************************************************************//
// DispIntf:  IModelViewDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D4C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IModelViewDisp = dispinterface
    ['{83A33D4C-27C5-11CE-BFD4-00400513BB57}']
    property Xform: OleVariant dispid 1;
    property Orientation: OleVariant dispid 3;
    property Translation: OleVariant dispid 4;
    property Scale: Double dispid 5;
    function IXform: Double; dispid 6;
    function IOrientation: Double; dispid 7;
    function ITranslation: Double; dispid 8;
    function GetViewHWnd: Integer; dispid 2;
    procedure StartDynamics; dispid 9;
    procedure StopDynamics; dispid 10;
    procedure AddPerspective; dispid 11;
    procedure RemovePerspective; dispid 12;
    function HasPerspective: WordBool; dispid 13;
    function GetEyePoint: OleVariant; dispid 14;
    procedure IGetEyePoint(var Eyept: Double); dispid 15;
    function GetViewPlaneDistance: Double; dispid 16;
    procedure InitializeShading; dispid 17;
    property Orientation2: OleVariant dispid 18;
    property Translation2: OleVariant dispid 19;
    function IOrientation2: Double; dispid 20;
    function ITranslation2: Double; dispid 21;
    function GetDisplayState(DisplayType: Integer): WordBool; dispid 22;
    function GetViewDIB: Integer; dispid 23;
    procedure ZoomByFactor(Factor: Double); dispid 24;
    procedure TranslateBy(X: Double; Y: Double); dispid 25;
    procedure RotateAboutCenter(XAngle: Double; YAngle: Double); dispid 26;
    procedure RotateAboutPoint(XAngle: Double; YAngle: Double; Ptx: Double; Pty: Double; Ptz: Double); dispid 27;
    procedure RotateAboutAxis(Angle: Double; Ptx: Double; Pty: Double; Ptz: Double; 
                              AxisVecX: Double; AxisVecY: Double; AxisVecZ: Double); dispid 28;
    function SetEyePoint(Eyept: OleVariant): WordBool; dispid 29;
    function ISetEyePoint(var Eyept: Double): WordBool; dispid 30;
    function SetStereoSeparation(DfSeparation: OleVariant): WordBool; dispid 31;
    function ISetStereoSeparation(var DfSeparation: Double): WordBool; dispid 32;
    function GetStereoSeparation: OleVariant; dispid 33;
    function IGetStereoSeparation: Double; dispid 34;
    procedure GetDIBHeader(Ldib: Integer); dispid 35;
    procedure GetStripsOfDIB(Ldib: Integer; NScanLinesPerStrip: Integer; StripIndex: Integer); dispid 36;
    property FrameLeft: SYSINT dispid 37;
    property FrameTop: SYSINT dispid 38;
    property FrameWidth: SYSINT dispid 39;
    property FrameHeight: SYSINT dispid 40;
    property FrameState: SYSINT dispid 41;
    property ObjectSizesAway: Double dispid 42;
    property DynamicMode: Integer readonly dispid 43;
    procedure DrawHighlightedItems; dispid 44;
    function GetNext: IDispatch; dispid 45;
    function IGetNext: IModelView; dispid 46;
    property Scale2: Double dispid 47;
    property HlrQuality: Integer dispid 48;
    property XorHighlight: WordBool dispid 49;
    property DisplayZebraStripes: WordBool dispid 50;
    property Transform: IMathTransform dispid 51;
    property Orientation3: IMathTransform dispid 52;
    property Translation3: IMathVector dispid 53;
    procedure ProjectModelPoint(X: Double; Y: Double; Z: Double; out XOut: Double; 
                                out YOut: Double; out ZOut: Double); dispid 54;
    procedure UnprojectModelPoint(X: Double; Y: Double; Z: Double; out XOut: Double; 
                                  out YOut: Double; out ZOut: Double); dispid 55;
    property SuppressWaitCursorDuringRedraw: WordBool dispid 56;
    procedure DrawTransparentFeatureTree; dispid 57;
    property DisplayMode: Integer dispid 58;
    property EnableGraphicsUpdate: WordBool dispid 59;
    property Camera: ICamera dispid 60;
    function SetCameraByName(const Name: WideString): WordBool; dispid 61;
    function GetIsoPlaneDistance: Double; dispid 62;
    property Linked: WordBool readonly dispid 63;
    function GetViewDIBx64: {??Int64}OleVariant; dispid 64;
    procedure GetDIBHeaderx64(Ldib: {??Int64}OleVariant); dispid 65;
    procedure GetStripsOfDIBx64(Ldib: {??Int64}OleVariant; NScanLinesPerStrip: Integer; 
                                StripIndex: Integer); dispid 66;
    function GetViewHWndx64: {??Int64}OleVariant; dispid 67;
    function GetMouse: IMouse; dispid 68;
    procedure SectionAnnotationViewAttr(BarrayIn: WordBool; DistIn: Double; 
                                        const LabelIn: WideString); dispid 69;
    procedure RollBy(Angle: Double); dispid 70;
    procedure TurnBy(XAngle: Double; YAngle: Double); dispid 71;
    procedure GraphicsRedraw(Rect: OleVariant); dispid 72;
    procedure IGraphicsRedraw(var Rect: Integer); dispid 73;
    property VisibilityViewTools: WordBool dispid 74;
    procedure Activate; dispid 75;
    function GetVisibleBox: OleVariant; dispid 76;
    function IGetVisibleBox: Integer; dispid 77;
    property UpdateAllGraphicsLayers: WordBool dispid 78;
  end;

// *********************************************************************//
// Interface: IMathTransform
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F82-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathTransform = interface(IDispatch)
    ['{F7D97F82-162E-11D4-AEAB-00C04FA0AC51}']
    function Multiply(const TransformObjIn: IDispatch): IDispatch; safecall;
    function IMultiply(const TransformObjIn: IMathTransform): IMathTransform; safecall;
    function Get_ArrayData: OleVariant; safecall;
    procedure Set_ArrayData(ArrayDataOut: OleVariant); safecall;
    function Get_IArrayData: Double; safecall;
    procedure Set_IArrayData(var ArrayDataOut: Double); safecall;
    procedure GetData(var XAxisObjOut: IDispatch; var YAxisObjOut: IDispatch; 
                      var ZAxisObjOut: IDispatch; var TransformObjOut: IDispatch; 
                      var ScaleOut: Double); safecall;
    procedure IGetData(var XAxisObjOut: IMathVector; var YAxisObjOut: IMathVector; 
                       var ZAxisObjOut: IMathVector; var TransformObjOut: IMathVector; 
                       var ScaleOut: Double); safecall;
    procedure SetData(const XAxisObjIn: IDispatch; const YAxisObjIn: IDispatch; 
                      const ZAxisObjIn: IDispatch; const TransformObjIn: IDispatch; 
                      ScaleValIn: Double); safecall;
    procedure ISetData(const XAxisObjIn: IMathVector; const YAxisObjIn: IMathVector; 
                       const ZAxisObjIn: IMathVector; const TransformObjIn: IMathVector; 
                       ScaleValIn: Double); safecall;
    function Inverse: IDispatch; safecall;
    function IInverse: IMathTransform; safecall;
    procedure GetData2(var XAxisObjOut: IDispatch; var YAxisObjOut: IDispatch; 
                       var ZAxisObjOut: IDispatch; var TransformObjOut: IDispatch; 
                       var ScaleOut: Double); safecall;
    procedure IGetData2(var XAxisObjOut: IMathVector; var YAxisObjOut: IMathVector; 
                        var ZAxisObjOut: IMathVector; var TransformObjOut: IMathVector; 
                        var ScaleOut: Double); safecall;
    property ArrayData: OleVariant read Get_ArrayData write Set_ArrayData;
  end;

// *********************************************************************//
// DispIntf:  IMathTransformDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F82-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathTransformDisp = dispinterface
    ['{F7D97F82-162E-11D4-AEAB-00C04FA0AC51}']
    function Multiply(const TransformObjIn: IDispatch): IDispatch; dispid 1;
    function IMultiply(const TransformObjIn: IMathTransform): IMathTransform; dispid 2;
    property ArrayData: OleVariant dispid 3;
    function IArrayData: Double; dispid 4;
    procedure GetData(var XAxisObjOut: IDispatch; var YAxisObjOut: IDispatch; 
                      var ZAxisObjOut: IDispatch; var TransformObjOut: IDispatch; 
                      var ScaleOut: Double); dispid 5;
    procedure IGetData(var XAxisObjOut: IMathVector; var YAxisObjOut: IMathVector; 
                       var ZAxisObjOut: IMathVector; var TransformObjOut: IMathVector; 
                       var ScaleOut: Double); dispid 6;
    procedure SetData(const XAxisObjIn: IDispatch; const YAxisObjIn: IDispatch; 
                      const ZAxisObjIn: IDispatch; const TransformObjIn: IDispatch; 
                      ScaleValIn: Double); dispid 7;
    procedure ISetData(const XAxisObjIn: IMathVector; const YAxisObjIn: IMathVector; 
                       const ZAxisObjIn: IMathVector; const TransformObjIn: IMathVector; 
                       ScaleValIn: Double); dispid 8;
    function Inverse: IDispatch; dispid 9;
    function IInverse: IMathTransform; dispid 10;
    procedure GetData2(var XAxisObjOut: IDispatch; var YAxisObjOut: IDispatch; 
                       var ZAxisObjOut: IDispatch; var TransformObjOut: IDispatch; 
                       var ScaleOut: Double); dispid 11;
    procedure IGetData2(var XAxisObjOut: IMathVector; var YAxisObjOut: IMathVector; 
                        var ZAxisObjOut: IMathVector; var TransformObjOut: IMathVector; 
                        var ScaleOut: Double); dispid 12;
  end;

// *********************************************************************//
// Interface: IMathVector
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F86-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathVector = interface(IDispatch)
    ['{F7D97F86-162E-11D4-AEAB-00C04FA0AC51}']
    function MultiplyTransform(const TransformObjIn: IDispatch): IDispatch; safecall;
    function IMultiplyTransform(const TransformObjIn: IMathTransform): IMathVector; safecall;
    function Get_ArrayData: OleVariant; safecall;
    procedure Set_ArrayData(ArrayDataOut: OleVariant); safecall;
    function Get_IArrayData: Double; safecall;
    procedure Set_IArrayData(var ArrayDataOut: Double); safecall;
    function Add(const VectorObjIn: IDispatch): IDispatch; safecall;
    function IAdd(const VectorObjIn: IMathVector): IMathVector; safecall;
    function Subtract(const VectorObjIn: IDispatch): IDispatch; safecall;
    function ISubtract(const VectorObjIn: IMathVector): IMathVector; safecall;
    function Scale(ValueIn: Double): IDispatch; safecall;
    function IScale(ValueIn: Double): IMathVector; safecall;
    function GetLength: Double; safecall;
    function Dot(const VectorObjIn: IDispatch): Double; safecall;
    function IDot(const VectorObjIn: IMathVector): Double; safecall;
    function Cross(const VectorObjIn: IDispatch): IDispatch; safecall;
    function ICross(const VectorObjIn: IMathVector): IMathVector; safecall;
    function ConvertToPoint: IDispatch; safecall;
    function IConvertToPoint: IMathPoint; safecall;
    function Normalise: IMathVector; safecall;
    property ArrayData: OleVariant read Get_ArrayData write Set_ArrayData;
  end;

// *********************************************************************//
// DispIntf:  IMathVectorDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F86-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathVectorDisp = dispinterface
    ['{F7D97F86-162E-11D4-AEAB-00C04FA0AC51}']
    function MultiplyTransform(const TransformObjIn: IDispatch): IDispatch; dispid 1;
    function IMultiplyTransform(const TransformObjIn: IMathTransform): IMathVector; dispid 2;
    property ArrayData: OleVariant dispid 3;
    function IArrayData: Double; dispid 4;
    function Add(const VectorObjIn: IDispatch): IDispatch; dispid 5;
    function IAdd(const VectorObjIn: IMathVector): IMathVector; dispid 6;
    function Subtract(const VectorObjIn: IDispatch): IDispatch; dispid 7;
    function ISubtract(const VectorObjIn: IMathVector): IMathVector; dispid 8;
    function Scale(ValueIn: Double): IDispatch; dispid 9;
    function IScale(ValueIn: Double): IMathVector; dispid 10;
    function GetLength: Double; dispid 11;
    function Dot(const VectorObjIn: IDispatch): Double; dispid 12;
    function IDot(const VectorObjIn: IMathVector): Double; dispid 13;
    function Cross(const VectorObjIn: IDispatch): IDispatch; dispid 14;
    function ICross(const VectorObjIn: IMathVector): IMathVector; dispid 15;
    function ConvertToPoint: IDispatch; dispid 16;
    function IConvertToPoint: IMathPoint; dispid 17;
    function Normalise: IMathVector; dispid 18;
  end;

// *********************************************************************//
// Interface: IMathPoint
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F84-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathPoint = interface(IDispatch)
    ['{F7D97F84-162E-11D4-AEAB-00C04FA0AC51}']
    function MultiplyTransform(const TransformObjIn: IDispatch): IDispatch; safecall;
    function IMultiplyTransform(const TransformObjIn: IMathTransform): IMathPoint; safecall;
    function Get_ArrayData: OleVariant; safecall;
    procedure Set_ArrayData(ArrayDataOut: OleVariant); safecall;
    function Get_IArrayData: Double; safecall;
    procedure Set_IArrayData(var ArrayDataOut: Double); safecall;
    function AddVector(const VectorObjIn: IDispatch): IDispatch; safecall;
    function IAddVector(const VectorObjIn: IMathVector): IMathPoint; safecall;
    function SubtractVector(const VectorObjIn: IDispatch): IDispatch; safecall;
    function ISubtractVector(const VectorObjIn: IMathVector): IMathPoint; safecall;
    function Subtract(const PointObjIn: IDispatch): IDispatch; safecall;
    function ISubtract(const PointObjIn: IMathPoint): IMathVector; safecall;
    function Scale(ValueIn: Double): IDispatch; safecall;
    function IScale(ValueIn: Double): IMathPoint; safecall;
    function ConvertToVector: IDispatch; safecall;
    function IConvertToVector: IMathVector; safecall;
    property ArrayData: OleVariant read Get_ArrayData write Set_ArrayData;
  end;

// *********************************************************************//
// DispIntf:  IMathPointDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F84-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathPointDisp = dispinterface
    ['{F7D97F84-162E-11D4-AEAB-00C04FA0AC51}']
    function MultiplyTransform(const TransformObjIn: IDispatch): IDispatch; dispid 1;
    function IMultiplyTransform(const TransformObjIn: IMathTransform): IMathPoint; dispid 2;
    property ArrayData: OleVariant dispid 3;
    function IArrayData: Double; dispid 4;
    function AddVector(const VectorObjIn: IDispatch): IDispatch; dispid 5;
    function IAddVector(const VectorObjIn: IMathVector): IMathPoint; dispid 6;
    function SubtractVector(const VectorObjIn: IDispatch): IDispatch; dispid 7;
    function ISubtractVector(const VectorObjIn: IMathVector): IMathPoint; dispid 8;
    function Subtract(const PointObjIn: IDispatch): IDispatch; dispid 9;
    function ISubtract(const PointObjIn: IMathPoint): IMathVector; dispid 10;
    function Scale(ValueIn: Double): IDispatch; dispid 11;
    function IScale(ValueIn: Double): IMathPoint; dispid 12;
    function ConvertToVector: IDispatch; dispid 13;
    function IConvertToVector: IMathVector; dispid 14;
  end;

// *********************************************************************//
// Interface: ICamera
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {48BF52EA-4654-4227-8C54-8AF49C3BCEF2}
// *********************************************************************//
  ICamera = interface(IDispatch)
    ['{48BF52EA-4654-4227-8C54-8AF49C3BCEF2}']
    function Get_ID: Integer; safecall;
    function GetPosition: IMathPoint; safecall;
    function GetViewVector: IMathVector; safecall;
    function GetUpVector: IMathVector; safecall;
    function GetFocalDistance: Double; safecall;
    function Get_Perspective: WordBool; safecall;
    procedure Set_Perspective(Retval: WordBool); safecall;
    function Get_FieldOfViewHeight: Double; safecall;
    procedure Set_FieldOfViewHeight(Retval: Double); safecall;
    function Get_FieldOfViewDepth: Double; safecall;
    procedure Set_FieldOfViewDepth(Retval: Double); safecall;
    function Get_FieldOfViewAngle: Double; safecall;
    procedure Set_FieldOfViewAngle(Retval: Double); safecall;
    function Get_DepthOfFieldEnabled: WordBool; safecall;
    procedure Set_DepthOfFieldEnabled(Retval: WordBool); safecall;
    function Get_DepthOfFieldOffset: Double; safecall;
    procedure Set_DepthOfFieldOffset(Retval: Double); safecall;
    function Get_AspectRatio: Double; safecall;
    procedure Set_AspectRatio(Retval: Double); safecall;
    function GetPointOfInterestDistance: Double; safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(Type_: Integer); safecall;
    function Get_LockCameraPosition: WordBool; safecall;
    procedure Set_LockCameraPosition(Retval: WordBool); safecall;
    function Get_TargetPointBySelection: WordBool; safecall;
    procedure Set_TargetPointBySelection(Retval: WordBool); safecall;
    function Get_TargetPointPosition: IMathPoint; safecall;
    procedure Set_TargetPointPosition(const Retval: IMathPoint); safecall;
    function GetTargetPointEntity(out Point: IMathPoint; out PercentTarget: Double): IDispatch; safecall;
    procedure SetTargetPointEntity(const Point: IMathPoint; PercentTarget: Double; 
                                   const TargetPointEntity: IDispatch); safecall;
    function GetPositionEntity(out Point: IMathPoint; out PercentPosition: Double): IDispatch; safecall;
    procedure SetPositionEntity(const Point: IMathPoint; PercentPosition: Double; 
                                const PositionEntity: IDispatch); safecall;
    procedure GetPositionCartesian(out X: Double; out Y: Double; out Z: Double); safecall;
    procedure SetPositionCartesian(X: Double; Y: Double; Z: Double); safecall;
    procedure GetPositionSpherical(out L: Double; out A1: Double; out A2: Double); safecall;
    procedure SetPositionSpherical(L: Double; A1: Double; A2: Double); safecall;
    function Get_PositionType: Integer; safecall;
    procedure Set_PositionType(PositionType: Integer); safecall;
    function Get_RotationRollEntity: IDispatch; safecall;
    procedure Set_RotationRollEntity(const RotationRollEntity: IDispatch); safecall;
    function Get_RotationRollBySelection: WordBool; safecall;
    procedure Set_RotationRollBySelection(Retval: WordBool); safecall;
    function Get_RotationRollAngle: Double; safecall;
    procedure Set_RotationRollAngle(Retval: Double); safecall;
    function Get_RotationRollFlipDirection: WordBool; safecall;
    procedure Set_RotationRollFlipDirection(Retval: WordBool); safecall;
    property ID: Integer read Get_ID;
    property Perspective: WordBool read Get_Perspective write Set_Perspective;
    property FieldOfViewHeight: Double read Get_FieldOfViewHeight write Set_FieldOfViewHeight;
    property FieldOfViewDepth: Double read Get_FieldOfViewDepth write Set_FieldOfViewDepth;
    property FieldOfViewAngle: Double read Get_FieldOfViewAngle write Set_FieldOfViewAngle;
    property DepthOfFieldEnabled: WordBool read Get_DepthOfFieldEnabled write Set_DepthOfFieldEnabled;
    property DepthOfFieldOffset: Double read Get_DepthOfFieldOffset write Set_DepthOfFieldOffset;
    property AspectRatio: Double read Get_AspectRatio write Set_AspectRatio;
    property type_: Integer read Get_type_ write Set_type_;
    property LockCameraPosition: WordBool read Get_LockCameraPosition write Set_LockCameraPosition;
    property TargetPointBySelection: WordBool read Get_TargetPointBySelection write Set_TargetPointBySelection;
    property TargetPointPosition: IMathPoint read Get_TargetPointPosition write Set_TargetPointPosition;
    property PositionType: Integer read Get_PositionType write Set_PositionType;
    property RotationRollEntity: IDispatch read Get_RotationRollEntity write Set_RotationRollEntity;
    property RotationRollBySelection: WordBool read Get_RotationRollBySelection write Set_RotationRollBySelection;
    property RotationRollAngle: Double read Get_RotationRollAngle write Set_RotationRollAngle;
    property RotationRollFlipDirection: WordBool read Get_RotationRollFlipDirection write Set_RotationRollFlipDirection;
  end;

// *********************************************************************//
// DispIntf:  ICameraDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {48BF52EA-4654-4227-8C54-8AF49C3BCEF2}
// *********************************************************************//
  ICameraDisp = dispinterface
    ['{48BF52EA-4654-4227-8C54-8AF49C3BCEF2}']
    property ID: Integer readonly dispid 1;
    function GetPosition: IMathPoint; dispid 2;
    function GetViewVector: IMathVector; dispid 3;
    function GetUpVector: IMathVector; dispid 4;
    function GetFocalDistance: Double; dispid 5;
    property Perspective: WordBool dispid 6;
    property FieldOfViewHeight: Double dispid 7;
    property FieldOfViewDepth: Double dispid 8;
    property FieldOfViewAngle: Double dispid 9;
    property DepthOfFieldEnabled: WordBool dispid 10;
    property DepthOfFieldOffset: Double dispid 11;
    property AspectRatio: Double dispid 12;
    function GetPointOfInterestDistance: Double; dispid 13;
    property type_: Integer dispid 14;
    property LockCameraPosition: WordBool dispid 15;
    property TargetPointBySelection: WordBool dispid 16;
    property TargetPointPosition: IMathPoint dispid 17;
    function GetTargetPointEntity(out Point: IMathPoint; out PercentTarget: Double): IDispatch; dispid 18;
    procedure SetTargetPointEntity(const Point: IMathPoint; PercentTarget: Double; 
                                   const TargetPointEntity: IDispatch); dispid 19;
    function GetPositionEntity(out Point: IMathPoint; out PercentPosition: Double): IDispatch; dispid 20;
    procedure SetPositionEntity(const Point: IMathPoint; PercentPosition: Double; 
                                const PositionEntity: IDispatch); dispid 21;
    procedure GetPositionCartesian(out X: Double; out Y: Double; out Z: Double); dispid 22;
    procedure SetPositionCartesian(X: Double; Y: Double; Z: Double); dispid 23;
    procedure GetPositionSpherical(out L: Double; out A1: Double; out A2: Double); dispid 24;
    procedure SetPositionSpherical(L: Double; A1: Double; A2: Double); dispid 25;
    property PositionType: Integer dispid 26;
    property RotationRollEntity: IDispatch dispid 27;
    property RotationRollBySelection: WordBool dispid 28;
    property RotationRollAngle: Double dispid 29;
    property RotationRollFlipDirection: WordBool dispid 30;
  end;

// *********************************************************************//
// Interface: IMouse
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9ED126F7-935E-4279-9171-4086A235719B}
// *********************************************************************//
  IMouse = interface(IDispatch)
    ['{9ED126F7-935E-4279-9171-4086A235719B}']
    function Move(X: Integer; Y: Integer; Flags: Integer): WordBool; safecall;
    function MoveXYZ(X: Double; Y: Double; Z: Double; Flags: Integer): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IMouseDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9ED126F7-935E-4279-9171-4086A235719B}
// *********************************************************************//
  IMouseDisp = dispinterface
    ['{9ED126F7-935E-4279-9171-4086A235719B}']
    function Move(X: Integer; Y: Integer; Flags: Integer): WordBool; dispid 1;
    function MoveXYZ(X: Double; Y: Double; Z: Double; Flags: Integer): WordBool; dispid 2;
  end;

// *********************************************************************//
// Interface: ISketch
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D51-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketch = interface(IDispatch)
    ['{83A33D51-27C5-11CE-BFD4-00400513BB57}']
    function Get_ModelToSketchXform: OleVariant; safecall;
    procedure Set_ModelToSketchXform(Retval: OleVariant); safecall;
    function GetLines: OleVariant; safecall;
    function IGetLines: Double; safecall;
    function GetLineCount: Integer; safecall;
    function GetArcs: OleVariant; safecall;
    function IGetArcs: Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetPolylines: OleVariant; safecall;
    function IGetPolylines: Double; safecall;
    function GetPolyLineCount(var PointCount: Integer): Integer; safecall;
    function GetSplines: OleVariant; safecall;
    function IGetSplines: Double; safecall;
    function GetSplineCount(var PointCount: Integer): Integer; safecall;
    function GetEllipses: OleVariant; safecall;
    function IGetEllipses: Double; safecall;
    function GetEllipseCount: Integer; safecall;
    function Get_IModelToSketchXform: Double; safecall;
    function GetUserPoints: OleVariant; safecall;
    function IGetUserPoints: Double; safecall;
    function GetUserPointsCount: Integer; safecall;
    function GetSplinesInterpolate: OleVariant; safecall;
    function IGetSplinesInterpolate: Double; safecall;
    function GetSplineInterpolateCount(var PointCount: Integer): Integer; safecall;
    function GetAutomaticSolve: WordBool; safecall;
    function SetAutomaticSolve(SolveFlag: WordBool): WordBool; safecall;
    function ConstrainAll: Integer; safecall;
    function GetSplineParams: OleVariant; safecall;
    function IGetSplineParams: Double; safecall;
    function GetSplineParamsCount(out Size: Integer): Integer; safecall;
    function GetParabolas: OleVariant; safecall;
    function IGetParabolas: Double; safecall;
    function GetParabolaCount: Integer; safecall;
    function GetEllipses2: OleVariant; safecall;
    function IGetEllipses2: Double; safecall;
    function GetSketchPoints: OleVariant; safecall;
    function IEnumSketchPoints: IEnumSketchPoints; safecall;
    function GetSketchSegments: OleVariant; safecall;
    function IEnumSketchSegments: IEnumSketchSegments; safecall;
    function Is3D: WordBool; safecall;
    function GetSketchPointsCount: Integer; safecall;
    function GetSketchHatches: OleVariant; safecall;
    function IEnumSketchHatches: IEnumSketchHatches; safecall;
    function GetSplineParams2: OleVariant; safecall;
    function IGetSplineParams2: Double; safecall;
    function GetSplineParamsCount2(out Size: Integer): Integer; safecall;
    function GetSketchTextSegments: OleVariant; safecall;
    function IEnumSketchTextSegments: IEnumSketchSegments; safecall;
    function GetConstrainedStatus: Integer; safecall;
    function SetEntityCount(EntityType: Integer; EntityCount: Integer): WordBool; safecall;
    function CheckFeatureUse(FeatureType: Integer; var OpenCount: Integer; var ClosedCount: Integer): Integer; safecall;
    function MergePoints(Distance: Double): WordBool; safecall;
    function GetReferenceEntity(var LEntityType: Integer): IDispatch; safecall;
    function GetContourEdgeCount: Integer; safecall;
    function GetContourEdges(Xform: OleVariant): OleVariant; safecall;
    function IGetContourEdges(var Xform: Double; EdgeCount: Integer): IEdge; safecall;
    function Get_ModelToSketchTransform: IMathTransform; safecall;
    procedure Set_ModelToSketchTransform(const Xform: IMathTransform); safecall;
    function AutoDimension(EntitiesToDimension: Integer; HorizontalScheme: Integer; 
                           HorizontalPlacement: Integer; VerticalScheme: Integer; 
                           VerticalPlacement: Integer): Integer; safecall;
    function GetLineCount2(CrossHatchOption: Smallint): Integer; safecall;
    function GetLines2(CrossHatchOption: Smallint): OleVariant; safecall;
    function IGetLines2(CrossHatchOption: Smallint; ArraySize: Integer): Double; safecall;
    function GetArcs2: OleVariant; safecall;
    function IGetArcs2(ArraySize: Integer): Double; safecall;
    function GetUserPoints2: OleVariant; safecall;
    function IGetUserPoints2(ArraySize: Integer): Double; safecall;
    function GetEllipses3: OleVariant; safecall;
    function IGetEllipses3(ArraySize: Integer): Double; safecall;
    function GetParabolas2: OleVariant; safecall;
    function IGetParabolas2(ArraySize: Integer): Double; safecall;
    function IsShared: WordBool; safecall;
    function Get_RelationManager: ISketchRelationManager; safecall;
    function AutoDimension2(EntitiesToDimension: Integer; HorizontalScheme: Integer; 
                            HorizontalPlacement: Integer; VerticalScheme: Integer; 
                            VerticalPlacement: Integer): Integer; safecall;
    function GetDetachSegmentOnDrag: WordBool; safecall;
    function SetDetachSegmentOnDrag(Detach: WordBool): WordBool; safecall;
    procedure AutoTraceSketchPicture; safecall;
    function GetSketchPointsCount2: Integer; safecall;
    function GetSketchPoints2: OleVariant; safecall;
    function IGetSketchPoints2(Count: Integer): ISketchPoint; safecall;
    function GetSketchBlockInstanceCount: Integer; safecall;
    function GetSketchBlockInstances: OleVariant; safecall;
    function IGetSketchBlockInstances(Count: Integer): ISketchBlockInstance; safecall;
    function SetWorkingPlaneOrientation(OriginX: Double; OriginY: Double; OriginZ: Double; 
                                        XAxisX: Double; XAxisY: Double; XAxisZ: Double; 
                                        YAxisX: Double; YAxisY: Double; YAxisZ: Double; 
                                        NormalX: Double; NormalY: Double; NormalZ: Double): WordBool; safecall;
    function GetSketchPaths: OleVariant; safecall;
    function IGetSketchPaths(Count: Integer): ISketchPath; safecall;
    function GetSketchPathCount: Integer; safecall;
    function GetSketchPictureCount: Integer; safecall;
    function GetSketchPictures: OleVariant; safecall;
    function IGetSketchPictures(Count: Integer): ISketchPicture; safecall;
    property ModelToSketchXform: OleVariant read Get_ModelToSketchXform write Set_ModelToSketchXform;
    property IModelToSketchXform: Double read Get_IModelToSketchXform;
    property ModelToSketchTransform: IMathTransform read Get_ModelToSketchTransform write Set_ModelToSketchTransform;
    property RelationManager: ISketchRelationManager read Get_RelationManager;
  end;

// *********************************************************************//
// DispIntf:  ISketchDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D51-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchDisp = dispinterface
    ['{83A33D51-27C5-11CE-BFD4-00400513BB57}']
    property ModelToSketchXform: OleVariant dispid 1;
    function GetLines: OleVariant; dispid 2;
    function IGetLines: Double; dispid 3;
    function GetLineCount: Integer; dispid 4;
    function GetArcs: OleVariant; dispid 5;
    function IGetArcs: Double; dispid 6;
    function GetArcCount: Integer; dispid 7;
    function GetPolylines: OleVariant; dispid 8;
    function IGetPolylines: Double; dispid 9;
    function GetPolyLineCount(var PointCount: Integer): Integer; dispid 10;
    function GetSplines: OleVariant; dispid 11;
    function IGetSplines: Double; dispid 12;
    function GetSplineCount(var PointCount: Integer): Integer; dispid 13;
    function GetEllipses: OleVariant; dispid 14;
    function IGetEllipses: Double; dispid 15;
    function GetEllipseCount: Integer; dispid 16;
    property IModelToSketchXform: Double readonly dispid 17;
    function GetUserPoints: OleVariant; dispid 18;
    function IGetUserPoints: Double; dispid 19;
    function GetUserPointsCount: Integer; dispid 20;
    function GetSplinesInterpolate: OleVariant; dispid 21;
    function IGetSplinesInterpolate: Double; dispid 22;
    function GetSplineInterpolateCount(var PointCount: Integer): Integer; dispid 23;
    function GetAutomaticSolve: WordBool; dispid 24;
    function SetAutomaticSolve(SolveFlag: WordBool): WordBool; dispid 25;
    function ConstrainAll: Integer; dispid 26;
    function GetSplineParams: OleVariant; dispid 27;
    function IGetSplineParams: Double; dispid 28;
    function GetSplineParamsCount(out Size: Integer): Integer; dispid 29;
    function GetParabolas: OleVariant; dispid 30;
    function IGetParabolas: Double; dispid 31;
    function GetParabolaCount: Integer; dispid 32;
    function GetEllipses2: OleVariant; dispid 33;
    function IGetEllipses2: Double; dispid 34;
    function GetSketchPoints: OleVariant; dispid 35;
    function IEnumSketchPoints: IEnumSketchPoints; dispid 36;
    function GetSketchSegments: OleVariant; dispid 37;
    function IEnumSketchSegments: IEnumSketchSegments; dispid 38;
    function Is3D: WordBool; dispid 39;
    function GetSketchPointsCount: Integer; dispid 40;
    function GetSketchHatches: OleVariant; dispid 41;
    function IEnumSketchHatches: IEnumSketchHatches; dispid 42;
    function GetSplineParams2: OleVariant; dispid 43;
    function IGetSplineParams2: Double; dispid 44;
    function GetSplineParamsCount2(out Size: Integer): Integer; dispid 45;
    function GetSketchTextSegments: OleVariant; dispid 46;
    function IEnumSketchTextSegments: IEnumSketchSegments; dispid 47;
    function GetConstrainedStatus: Integer; dispid 48;
    function SetEntityCount(EntityType: Integer; EntityCount: Integer): WordBool; dispid 49;
    function CheckFeatureUse(FeatureType: Integer; var OpenCount: Integer; var ClosedCount: Integer): Integer; dispid 50;
    function MergePoints(Distance: Double): WordBool; dispid 51;
    function GetReferenceEntity(var LEntityType: Integer): IDispatch; dispid 52;
    function GetContourEdgeCount: Integer; dispid 53;
    function GetContourEdges(Xform: OleVariant): OleVariant; dispid 54;
    function IGetContourEdges(var Xform: Double; EdgeCount: Integer): IEdge; dispid 55;
    property ModelToSketchTransform: IMathTransform dispid 56;
    function AutoDimension(EntitiesToDimension: Integer; HorizontalScheme: Integer; 
                           HorizontalPlacement: Integer; VerticalScheme: Integer; 
                           VerticalPlacement: Integer): Integer; dispid 57;
    function GetLineCount2(CrossHatchOption: Smallint): Integer; dispid 58;
    function GetLines2(CrossHatchOption: Smallint): OleVariant; dispid 59;
    function IGetLines2(CrossHatchOption: Smallint; ArraySize: Integer): Double; dispid 60;
    function GetArcs2: OleVariant; dispid 61;
    function IGetArcs2(ArraySize: Integer): Double; dispid 62;
    function GetUserPoints2: OleVariant; dispid 63;
    function IGetUserPoints2(ArraySize: Integer): Double; dispid 64;
    function GetEllipses3: OleVariant; dispid 65;
    function IGetEllipses3(ArraySize: Integer): Double; dispid 66;
    function GetParabolas2: OleVariant; dispid 67;
    function IGetParabolas2(ArraySize: Integer): Double; dispid 68;
    function IsShared: WordBool; dispid 69;
    property RelationManager: ISketchRelationManager readonly dispid 70;
    function AutoDimension2(EntitiesToDimension: Integer; HorizontalScheme: Integer; 
                            HorizontalPlacement: Integer; VerticalScheme: Integer; 
                            VerticalPlacement: Integer): Integer; dispid 71;
    function GetDetachSegmentOnDrag: WordBool; dispid 72;
    function SetDetachSegmentOnDrag(Detach: WordBool): WordBool; dispid 73;
    procedure AutoTraceSketchPicture; dispid 74;
    function GetSketchPointsCount2: Integer; dispid 75;
    function GetSketchPoints2: OleVariant; dispid 76;
    function IGetSketchPoints2(Count: Integer): ISketchPoint; dispid 77;
    function GetSketchBlockInstanceCount: Integer; dispid 78;
    function GetSketchBlockInstances: OleVariant; dispid 79;
    function IGetSketchBlockInstances(Count: Integer): ISketchBlockInstance; dispid 80;
    function SetWorkingPlaneOrientation(OriginX: Double; OriginY: Double; OriginZ: Double; 
                                        XAxisX: Double; XAxisY: Double; XAxisZ: Double; 
                                        YAxisX: Double; YAxisY: Double; YAxisZ: Double; 
                                        NormalX: Double; NormalY: Double; NormalZ: Double): WordBool; dispid 81;
    function GetSketchPaths: OleVariant; dispid 82;
    function IGetSketchPaths(Count: Integer): ISketchPath; dispid 83;
    function GetSketchPathCount: Integer; dispid 84;
    function GetSketchPictureCount: Integer; dispid 85;
    function GetSketchPictures: OleVariant; dispid 86;
    function IGetSketchPictures(Count: Integer): ISketchPicture; dispid 87;
  end;

// *********************************************************************//
// Interface: IEnumSketchPoints
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33DCD-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumSketchPoints = interface(IUnknown)
    ['{83A33DCD-27C5-11CE-BFD4-00400513BB57}']
    function Next(Celt: Integer; out Rgelt: ISketchPoint; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumSketchPoints): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISketchPoint
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DBD-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchPoint = interface(IDispatch)
    ['{83A33DBD-27C5-11CE-BFD4-00400513BB57}']
    function Get_X: Double; safecall;
    function Get_Y: Double; safecall;
    function Get_Z: Double; safecall;
    function GetCoords: Double; safecall;
    function GetID: OleVariant; safecall;
    function IGetID: Integer; safecall;
    function Select(AppendFlag: WordBool): WordBool; safecall;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const Retval: WideString); safecall;
    function Get_LayerOverride: SYSINT; safecall;
    procedure Set_LayerOverride(Retval: SYSINT); safecall;
    function Get_Color: Integer; safecall;
    procedure Set_Color(Retval: Integer); safecall;
    function SetCoords(Xx: Double; Yy: Double; Zz: Double): WordBool; safecall;
    function GetFramePointTangent(out Status: WordBool): OleVariant; safecall;
    function IGetFramePointTangent(out Status: WordBool): Double; safecall;
    function SetFramePointTangent(ToVector: OleVariant): WordBool; safecall;
    function ISetFramePointTangent(var ToVector: Double): WordBool; safecall;
    function GetSketch: ISketch; safecall;
    function Select2(Append: WordBool; Mark: Integer): WordBool; safecall;
    function Select3(Append: WordBool; Mark: Integer; const Callout: ICallout): WordBool; safecall;
    function GetRelations: OleVariant; safecall;
    function GetRelationsCount: Integer; safecall;
    function IGetRelations(Count: Integer): ISketchRelation; safecall;
    function Get_Status: Integer; safecall;
    procedure Set_Status(Status: Integer); safecall;
    function Select4(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(Type_: Integer); safecall;
    procedure Set_X(X: Double); safecall;
    procedure Set_Y(Y: Double); safecall;
    procedure Set_Z(Z: Double); safecall;
    property X: Double read Get_X write Set_X;
    property Y: Double read Get_Y write Set_Y;
    property Z: Double read Get_Z write Set_Z;
    property Layer: WideString read Get_Layer write Set_Layer;
    property LayerOverride: SYSINT read Get_LayerOverride write Set_LayerOverride;
    property Color: Integer read Get_Color write Set_Color;
    property Status: Integer read Get_Status write Set_Status;
    property type_: Integer read Get_type_ write Set_type_;
  end;

// *********************************************************************//
// DispIntf:  ISketchPointDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DBD-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchPointDisp = dispinterface
    ['{83A33DBD-27C5-11CE-BFD4-00400513BB57}']
    property X: Double dispid 1;
    property Y: Double dispid 2;
    property Z: Double dispid 3;
    function GetCoords: Double; dispid 4;
    function GetID: OleVariant; dispid 5;
    function IGetID: Integer; dispid 6;
    function Select(AppendFlag: WordBool): WordBool; dispid 7;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; dispid 8;
    function DeSelect: WordBool; dispid 9;
    property Layer: WideString dispid 10;
    property LayerOverride: SYSINT dispid 11;
    property Color: Integer dispid 12;
    function SetCoords(Xx: Double; Yy: Double; Zz: Double): WordBool; dispid 13;
    function GetFramePointTangent(out Status: WordBool): OleVariant; dispid 14;
    function IGetFramePointTangent(out Status: WordBool): Double; dispid 15;
    function SetFramePointTangent(ToVector: OleVariant): WordBool; dispid 16;
    function ISetFramePointTangent(var ToVector: Double): WordBool; dispid 17;
    function GetSketch: ISketch; dispid 18;
    function Select2(Append: WordBool; Mark: Integer): WordBool; dispid 19;
    function Select3(Append: WordBool; Mark: Integer; const Callout: ICallout): WordBool; dispid 20;
    function GetRelations: OleVariant; dispid 21;
    function GetRelationsCount: Integer; dispid 22;
    function IGetRelations(Count: Integer): ISketchRelation; dispid 23;
    property Status: Integer dispid 24;
    function Select4(Append: WordBool; const Data: ISelectData): WordBool; dispid 25;
    property type_: Integer dispid 26;
  end;

// *********************************************************************//
// Interface: ICallout
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9CAAA1AA-F2FC-11D5-AF66-00C04F603FAF}
// *********************************************************************//
  ICallout = interface(IDispatch)
    ['{9CAAA1AA-F2FC-11D5-AF66-00C04F603FAF}']
    function Get_Label_: WideString; safecall;
    procedure Set_Label_(const Retval: WideString); safecall;
    function Get_TargetStyle: Integer; safecall;
    procedure Set_TargetStyle(Style: Integer); safecall;
    function Get_TextBox: WordBool; safecall;
    procedure Set_TextBox(Box: WordBool); safecall;
    function Get_Label2(RowID: Integer): WideString; safecall;
    procedure Set_Label2(RowID: Integer; const BstrLabel: WideString); safecall;
    function Get_Value(RowID: Integer): WideString; safecall;
    procedure Set_Value(RowID: Integer; const BstrValue: WideString); safecall;
    procedure GetTargetPoint(RowID: Integer; out XPos: Double; out YPos: Double; out ZPos: Double); safecall;
    procedure SetTargetPoint(RowID: Integer; XPos: Double; YPos: Double; ZPos: Double); safecall;
    procedure UpdatePosition(XPos: Double; YPos: Double; ZPos: Double); safecall;
    function Get_ValueInactive(RowID: Integer): WordBool; safecall;
    procedure Set_ValueInactive(RowID: Integer; VbValueInActive: WordBool); safecall;
    function Get_OpaqueColor: Integer; safecall;
    procedure Set_OpaqueColor(OpaqueColor: Integer); safecall;
    function Get_TextColor(RowID: Integer): Integer; safecall;
    procedure Set_TextColor(RowID: Integer; TextColor: Integer); safecall;
    function Get_MultipleLeaders: WordBool; safecall;
    procedure Set_MultipleLeaders(VbMultipleLeaders: WordBool); safecall;
    function Get_Position: IMathPoint; safecall;
    procedure Set_Position(const Retval: IMathPoint); safecall;
    property Label_: WideString read Get_Label_ write Set_Label_;
    property TargetStyle: Integer read Get_TargetStyle write Set_TargetStyle;
    property TextBox: WordBool read Get_TextBox write Set_TextBox;
    property Label2[RowID: Integer]: WideString read Get_Label2 write Set_Label2;
    property Value[RowID: Integer]: WideString read Get_Value write Set_Value;
    property ValueInactive[RowID: Integer]: WordBool read Get_ValueInactive write Set_ValueInactive;
    property OpaqueColor: Integer read Get_OpaqueColor write Set_OpaqueColor;
    property TextColor[RowID: Integer]: Integer read Get_TextColor write Set_TextColor;
    property MultipleLeaders: WordBool read Get_MultipleLeaders write Set_MultipleLeaders;
    property Position: IMathPoint read Get_Position write Set_Position;
  end;

// *********************************************************************//
// DispIntf:  ICalloutDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9CAAA1AA-F2FC-11D5-AF66-00C04F603FAF}
// *********************************************************************//
  ICalloutDisp = dispinterface
    ['{9CAAA1AA-F2FC-11D5-AF66-00C04F603FAF}']
    property Label_: WideString dispid 1;
    property TargetStyle: Integer dispid 2;
    property TextBox: WordBool dispid 3;
    property Label2[RowID: Integer]: WideString dispid 4;
    property Value[RowID: Integer]: WideString dispid 5;
    procedure GetTargetPoint(RowID: Integer; out XPos: Double; out YPos: Double; out ZPos: Double); dispid 6;
    procedure SetTargetPoint(RowID: Integer; XPos: Double; YPos: Double; ZPos: Double); dispid 7;
    procedure UpdatePosition(XPos: Double; YPos: Double; ZPos: Double); dispid 8;
    property ValueInactive[RowID: Integer]: WordBool dispid 9;
    property OpaqueColor: Integer dispid 10;
    property TextColor[RowID: Integer]: Integer dispid 11;
    property MultipleLeaders: WordBool dispid 12;
    property Position: IMathPoint dispid 13;
  end;

// *********************************************************************//
// Interface: ISketchRelation
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7033EA1B-744A-44F3-A2B4-E450D4C99F0E}
// *********************************************************************//
  ISketchRelation = interface(IDispatch)
    ['{7033EA1B-744A-44F3-A2B4-E450D4C99F0E}']
    function GetEntities: OleVariant; safecall;
    function GetEntitiesCount: Integer; safecall;
    function IGetEntities(NumEntities: Integer): IDispatch; safecall;
    function GetRelationType: Integer; safecall;
    function GetEntitiesType: OleVariant; safecall;
    function IGetEntitiesType(NumEntities: Integer): Integer; safecall;
    function GetDefinitionEntities: OleVariant; safecall;
    function IGetDefinitionEntities(NumEntities: Integer): IDispatch; safecall;
    function Get_Suppressed: WordBool; safecall;
    procedure Set_Suppressed(Suppresed: WordBool); safecall;
    function ReplaceEntity(const OldEntity: IDispatch; const NewEntity: IDispatch): WordBool; safecall;
    property Suppressed: WordBool read Get_Suppressed write Set_Suppressed;
  end;

// *********************************************************************//
// DispIntf:  ISketchRelationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7033EA1B-744A-44F3-A2B4-E450D4C99F0E}
// *********************************************************************//
  ISketchRelationDisp = dispinterface
    ['{7033EA1B-744A-44F3-A2B4-E450D4C99F0E}']
    function GetEntities: OleVariant; dispid 1;
    function GetEntitiesCount: Integer; dispid 2;
    function IGetEntities(NumEntities: Integer): IDispatch; dispid 3;
    function GetRelationType: Integer; dispid 4;
    function GetEntitiesType: OleVariant; dispid 5;
    function IGetEntitiesType(NumEntities: Integer): Integer; dispid 6;
    function GetDefinitionEntities: OleVariant; dispid 7;
    function IGetDefinitionEntities(NumEntities: Integer): IDispatch; dispid 8;
    property Suppressed: WordBool dispid 9;
    function ReplaceEntity(const OldEntity: IDispatch; const NewEntity: IDispatch): WordBool; dispid 10;
  end;

// *********************************************************************//
// Interface: ISelectData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4DF2E524-C744-4C8B-92D5-1B96ECA5A0D0}
// *********************************************************************//
  ISelectData = interface(IDispatch)
    ['{4DF2E524-C744-4C8B-92D5-1B96ECA5A0D0}']
    function Get_X: Double; safecall;
    procedure Set_X(X: Double); safecall;
    function Get_Y: Double; safecall;
    procedure Set_Y(Y: Double); safecall;
    function Get_Z: Double; safecall;
    procedure Set_Z(Z: Double); safecall;
    function Get_Mark: Integer; safecall;
    procedure Set_Mark(Mark: Integer); safecall;
    function Get_View: IView; safecall;
    procedure Set_View(const View: IView); safecall;
    function Get_Callout: ICallout; safecall;
    procedure Set_Callout(const Callout: ICallout); safecall;
    procedure GetCellRange(var FirstRow: Integer; var LastRow: Integer; var FirstColumn: Integer; 
                           var LastColumn: Integer); safecall;
    procedure SetCellRange(FirstRow: Integer; LastRow: Integer; FirstColumn: Integer; 
                           LastColumn: Integer); safecall;
    property X: Double read Get_X write Set_X;
    property Y: Double read Get_Y write Set_Y;
    property Z: Double read Get_Z write Set_Z;
    property Mark: Integer read Get_Mark write Set_Mark;
    property View: IView read Get_View write Set_View;
    property Callout: ICallout read Get_Callout write Set_Callout;
  end;

// *********************************************************************//
// DispIntf:  ISelectDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4DF2E524-C744-4C8B-92D5-1B96ECA5A0D0}
// *********************************************************************//
  ISelectDataDisp = dispinterface
    ['{4DF2E524-C744-4C8B-92D5-1B96ECA5A0D0}']
    property X: Double dispid 1;
    property Y: Double dispid 2;
    property Z: Double dispid 3;
    property Mark: Integer dispid 4;
    property View: IView dispid 5;
    property Callout: ICallout dispid 6;
    procedure GetCellRange(var FirstRow: Integer; var LastRow: Integer; var FirstColumn: Integer; 
                           var LastColumn: Integer); dispid 7;
    procedure SetCellRange(FirstRow: Integer; LastRow: Integer; FirstColumn: Integer; 
                           LastColumn: Integer); dispid 8;
  end;

// *********************************************************************//
// Interface: IView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D50-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IView = interface(IDispatch)
    ['{83A33D50-27C5-11CE-BFD4-00400513BB57}']
    function Get_SuppressState: Integer; safecall;
    procedure Set_SuppressState(Retval: Integer); safecall;
    function GetNextView: IDispatch; safecall;
    function IGetNextView: IView; safecall;
    function GetLines: OleVariant; safecall;
    function GetOutline: OleVariant; safecall;
    function GetXform: OleVariant; safecall;
    function GetArcs: OleVariant; safecall;
    function GetUserPoints: OleVariant; safecall;
    function GetPolylines: OleVariant; safecall;
    function GetSplines: OleVariant; safecall;
    function GetDimensionInfo: OleVariant; safecall;
    function GetDimensionString: OleVariant; safecall;
    function GetFirstNote: IDispatch; safecall;
    function IGetFirstNote: INote; safecall;
    function GetFirstGTOL: IDispatch; safecall;
    function IGetFirstGTOL: IGtol; safecall;
    function IGetLines: Double; safecall;
    function IGetOutline: Double; safecall;
    function IGetXform: Double; safecall;
    function IGetArcs: Double; safecall;
    function IGetUserPoints: Double; safecall;
    function IGetPolylines: Double; safecall;
    function IGetSplines: Double; safecall;
    function IGetDimensionInfo: Double; safecall;
    function IGetDimensionString: WideString; safecall;
    function GetLineCount: Integer; safecall;
    function GetArcCount: Integer; safecall;
    function GetUserPointsCount: Integer; safecall;
    function GetPolyLineCount(out PointCount: Integer): Integer; safecall;
    function GetSplineCount(out PointCount: Integer): Integer; safecall;
    function GetDimensionCount: Integer; safecall;
    function GetEllipses: OleVariant; safecall;
    function IGetEllipses: Double; safecall;
    function GetEllipseCount: Integer; safecall;
    function GetDisplayMode: Integer; safecall;
    procedure SetDisplayMode(DisplayIn: Integer); safecall;
    function GetDisplayTangentEdges: WordBool; safecall;
    procedure SetDisplayTangentEdges(DisplayIn: WordBool); safecall;
    function GetCenterMarkCount: Integer; safecall;
    function GetCenterMarkInfo: OleVariant; safecall;
    function IGetCenterMarkInfo: Double; safecall;
    function GetSectionLineCount(out Size: Integer): Integer; safecall;
    function GetSectionLineInfo: OleVariant; safecall;
    function GetSectionLineStrings: OleVariant; safecall;
    function IGetSectionLineInfo: Double; safecall;
    function IGetSectionLineStrings: WideString; safecall;
    procedure UpdateViewDisplayGeometry; safecall;
    function GetDetailCircleCount: Integer; safecall;
    function GetDetailCircleInfo: OleVariant; safecall;
    function IGetDetailCircleInfo: Double; safecall;
    function GetDetailCircleStrings: OleVariant; safecall;
    function IGetDetailCircleStrings: WideString; safecall;
    function GetDimensionIds: OleVariant; safecall;
    function IGetDimensionIds: WideString; safecall;
    function GetDimensionDisplayInfo: OleVariant; safecall;
    function IGetDimensionDisplayInfo: Double; safecall;
    function GetDimensionDisplayString: OleVariant; safecall;
    function IGetDimensionDisplayString: WideString; safecall;
    function GetArcs2: OleVariant; safecall;
    function IGetArcs2: Double; safecall;
    function GetEllipses2: OleVariant; safecall;
    function IGetEllipses2: Double; safecall;
    function GetViewXform: OleVariant; safecall;
    function IGetViewXform: Double; safecall;
    function GetFirstSFSymbol: IDispatch; safecall;
    function IGetFirstSFSymbol: ISFSymbol; safecall;
    function GetFirstDatumTag: IDispatch; safecall;
    function IGetFirstDatumTag: IDatumTag; safecall;
    function GetFirstDatumTargetSym: IDispatch; safecall;
    function IGetFirstDatumTargetSym: IDatumTargetSym; safecall;
    function GetFirstWeldSymbol: IDispatch; safecall;
    function IGetFirstWeldSymbol: IWeldSymbol; safecall;
    function GetDatumPointsCount: Integer; safecall;
    function GetDatumPoints: OleVariant; safecall;
    function IGetDatumPoints: Double; safecall;
    procedure UseDefaultAlignment; safecall;
    procedure RemoveAlignment; safecall;
    procedure AlignVerticalTo(const ViewNameIn: WideString); safecall;
    procedure AlignHorizontalTo(const ViewNameIn: WideString); safecall;
    function GetDisplayData: IDispatch; safecall;
    function IGetDisplayData: IDisplayData; safecall;
    function GetPolyLineCount2(out PointCount: Integer): Integer; safecall;
    function GetPolylines2: OleVariant; safecall;
    function IGetPolylines2: Double; safecall;
    function ShowExploded(ShowIt: WordBool): WordBool; safecall;
    function IsExploded: WordBool; safecall;
    procedure Set_ReferencedConfiguration(const Retval: WideString); safecall;
    function Get_ReferencedConfiguration: WideString; safecall;
    function GetFirstCThread: IDispatch; safecall;
    function IGetFirstCThread: ICThread; safecall;
    function CreateViewArrow(const DrawingViewNameIn: WideString; const ArrowNameIn: WideString): WordBool; safecall;
    procedure ModifyViewArrow(const DrawingViewNameIn: WideString; const ArrowNameIn: WideString); safecall;
    procedure MoveViewArrow(const DrawingViewNameIn: WideString; Dx: Double; Dy: Double; Dz: Double); safecall;
    function GetPolylines3: OleVariant; safecall;
    function IGetPolylines3: Double; safecall;
    function GetPolyLineCount3(out PointCount: Integer): Integer; safecall;
    function GetFirstDisplayDimension: IDispatch; safecall;
    function IGetFirstDisplayDimension: IDisplayDimension; safecall;
    function GetSketch: IDispatch; safecall;
    function IGetSketch: ISketch; safecall;
    function GetLines2: OleVariant; safecall;
    function IGetLines2: Double; safecall;
    function GetSplines2: OleVariant; safecall;
    function IGetSplines2: Double; safecall;
    function GetArcs3: OleVariant; safecall;
    function IGetArcs3: Double; safecall;
    function GetEllipses3: OleVariant; safecall;
    function IGetEllipses3: Double; safecall;
    function GetBomTable: IDispatch; safecall;
    function IGetBomTable: IBomTable; safecall;
    function Get_UseSheetScale: Integer; safecall;
    procedure Set_UseSheetScale(Retval: Integer); safecall;
    function Get_ScaleDecimal: Double; safecall;
    procedure Set_ScaleDecimal(Retval: Double); safecall;
    function Get_ScaleRatio: OleVariant; safecall;
    procedure Set_ScaleRatio(Retval: OleVariant); safecall;
    function Get_IScaleRatio: Double; safecall;
    procedure Set_IScaleRatio(var Retval: Double); safecall;
    function Get_Position: OleVariant; safecall;
    procedure Set_Position(Retval: OleVariant); safecall;
    function Get_IPosition: Double; safecall;
    procedure Set_IPosition(var Retval: Double); safecall;
    function SetXform(Transform: OleVariant): WordBool; safecall;
    function ISetXform(var Transform: Double): WordBool; safecall;
    function GetAlignment: Integer; safecall;
    function GetReferencedModelName: WideString; safecall;
    function GetFirstAnnotation: IDispatch; safecall;
    function IGetFirstAnnotation: IAnnotation; safecall;
    function GetFirstCustomSymbol: IDispatch; safecall;
    function IGetFirstCustomSymbol: ICustomSymbol; safecall;
    function GetDimensionInfo2: OleVariant; safecall;
    function IGetDimensionInfo2: Double; safecall;
    function GetParabolas: OleVariant; safecall;
    function IGetParabolas: Double; safecall;
    function GetParabolaCount: Integer; safecall;
    function GetEllipses4: OleVariant; safecall;
    function IGetEllipses4: Double; safecall;
    function GetLines3: OleVariant; safecall;
    function IGetLines3: Double; safecall;
    function GetArcs4: OleVariant; safecall;
    function IGetArcs4: Double; safecall;
    function GetSplines3: OleVariant; safecall;
    function IGetSplines3: Double; safecall;
    function GetEllipses5: OleVariant; safecall;
    function IGetEllipses5: Double; safecall;
    function GetParabolas2: OleVariant; safecall;
    function IGetParabolas2: Double; safecall;
    function GetUserPoints2: OleVariant; safecall;
    function IGetUserPoints2: Double; safecall;
    function GetDimensionInfo3: OleVariant; safecall;
    function IGetDimensionInfo3: Double; safecall;
    function GetDatumPoints2: OleVariant; safecall;
    function IGetDatumPoints2: Double; safecall;
    function Get_Name: WideString; safecall;
    function Get_type_: Integer; safecall;
    function Get_ProjectedDimensions: WordBool; safecall;
    procedure Set_ProjectedDimensions(Retval: WordBool); safecall;
    function HasDesignTable: WordBool; safecall;
    function GetDesignTableExtent: OleVariant; safecall;
    function IGetDesignTableExtent: Double; safecall;
    function GetDisplayData2: IDispatch; safecall;
    function IGetDisplayData2: IDisplayData; safecall;
    function GetFirstAnnotation2: IDispatch; safecall;
    function IGetFirstAnnotation2: IAnnotation; safecall;
    function GetDimensionCount2: Integer; safecall;
    function GetDimensionInfo4: OleVariant; safecall;
    function IGetDimensionInfo4: Double; safecall;
    function GetDimensionString2: OleVariant; safecall;
    function IGetDimensionString2: WideString; safecall;
    function GetDimensionIds2: OleVariant; safecall;
    function IGetDimensionIds2: WideString; safecall;
    function GetDimensionDisplayInfo2: OleVariant; safecall;
    function IGetDimensionDisplayInfo2: Double; safecall;
    function GetDimensionDisplayString2: OleVariant; safecall;
    function IGetDimensionDisplayString2: WideString; safecall;
    function GetFirstDisplayDimension2: IDispatch; safecall;
    function IGetFirstDisplayDimension2: IDisplayDimension; safecall;
    function GetPolylines4: OleVariant; safecall;
    function IGetPolylines4: Double; safecall;
    function GetPolyLineCount4(out PointCount: Integer): Integer; safecall;
    function IsModelLoaded: WordBool; safecall;
    function LoadModel: Integer; safecall;
    function GetDisplayTangentEdges2: Integer; safecall;
    procedure SetDisplayTangentEdges2(DisplayIn: Integer); safecall;
    function GetSectionLines: OleVariant; safecall;
    function IGetSectionLines: IDrSection; safecall;
    function GetSection: IDispatch; safecall;
    function IGetSection: IDrSection; safecall;
    function GetHiddenComponents: OleVariant; safecall;
    function EnumHiddenComponents: IEnumComponents; safecall;
    function EnumSectionLines: IEnumDrSections; safecall;
    function GetDisplayData3: IDispatch; safecall;
    function IGetDisplayData3: IDisplayData; safecall;
    function GetDimensionCount3: Integer; safecall;
    function GetDimensionInfo5: OleVariant; safecall;
    function IGetDimensionInfo5: Double; safecall;
    function GetDimensionString3: OleVariant; safecall;
    function IGetDimensionString3: WideString; safecall;
    function GetDimensionIds3: OleVariant; safecall;
    function IGetDimensionIds3: WideString; safecall;
    function GetDimensionDisplayInfo3: OleVariant; safecall;
    function IGetDimensionDisplayInfo3: Double; safecall;
    function GetDimensionDisplayString3: OleVariant; safecall;
    function IGetDimensionDisplayString3: WideString; safecall;
    function GetFirstDisplayDimension3: IDispatch; safecall;
    function IGetFirstDisplayDimension3: IDisplayDimension; safecall;
    function IsCropped: WordBool; safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Retval: Double); safecall;
    function GetDetailCircles: OleVariant; safecall;
    function IGetDetailCircles(NumDetailCircles: Integer): IDetailCircle; safecall;
    function GetProjectionArrow: IDispatch; safecall;
    function IGetProjectionArrow: IProjectionArrow; safecall;
    function GetDetail: IDispatch; safecall;
    function IGetDetail: IDetailCircle; safecall;
    function GetBaseView: IDispatch; safecall;
    function IGetBaseView: IView; safecall;
    function EnumHiddenComponents2: IEnumComponents2; safecall;
    function GetFirstMultiJogLeader: IDispatch; safecall;
    function IGetFirstMultiJogLeader: IMultiJogLeader; safecall;
    function GetVisible: WordBool; safecall;
    procedure SetVisible(Visible: WordBool; DependentsToo: WordBool); safecall;
    function GetFirstDowelSymbol: IDispatch; safecall;
    function IGetFirstDowelSymbol: IDowelSymbol; safecall;
    function InsertBomTable(const Template: WideString; Xloc: Double; Yloc: Double; 
                            var Errors: Integer): IDispatch; safecall;
    function IInsertBomTable(const Template: WideString; Xloc: Double; Yloc: Double; 
                             var Errors: Integer): IBomTable; safecall;
    function SelectEntity(const Entity: IDispatch; AppendFlag: WordBool): WordBool; safecall;
    function ISelectEntity(const Entity: IEntity; AppendFlag: WordBool): WordBool; safecall;
    function IsModelOutOfDate: WordBool; safecall;
    function Get_ModelToViewTransform: IMathTransform; safecall;
    procedure Set_ModelToViewTransform(const Xform: IMathTransform); safecall;
    function GetDisplayMode2: Integer; safecall;
    function GetFacettedHlrDisplay: WordBool; safecall;
    function GetDisplayEdgesInShadedMode: WordBool; safecall;
    function SetDisplayMode2(Mode: Integer; Facetted: WordBool; Edges: WordBool): WordBool; safecall;
    function GetPolylines5(CrossHatchOption: Smallint): OleVariant; safecall;
    function IGetPolylines5(CrossHatchOption: Smallint; ArraySize: Integer): Double; safecall;
    function GetPolyLineCount5(CrossHatchOption: Smallint; out PointCount: Integer): Integer; safecall;
    function GetLineCount2(CrossHatchOption: Smallint): Integer; safecall;
    function GetLines4(CrossHatchOption: Smallint): OleVariant; safecall;
    function IGetLines4(CrossHatchOption: Smallint; ArraySize: Integer): Double; safecall;
    function GetFirstBlockInstance: IBlockInstance; safecall;
    function GetSectionLineCount2(out Size: Integer): Integer; safecall;
    function GetSectionLineInfo2: OleVariant; safecall;
    function IGetSectionLineInfo2(ArraySize: Integer): Double; safecall;
    function GetDetailCircleCount2(out Size: Integer): Integer; safecall;
    function GetDetailCircleInfo2: OleVariant; safecall;
    function IGetDetailCircleInfo2(ArraySize: Integer): Double; safecall;
    function IsBroken: WordBool; safecall;
    function GetBreakLineCount(out Size: Integer): Integer; safecall;
    function GetBreakLines: OleVariant; safecall;
    function IGetBreakLines(Count: Integer): IBreakLine; safecall;
    function InsertBreak(Orientation: Integer; Position1: Double; Position2: Double; Style: Integer): IBreakLine; safecall;
    function GetBreakLineInfo: OleVariant; safecall;
    function IGetBreakLineInfo(ArraySize: Integer): Double; safecall;
    function GetFaceHatchCount: Integer; safecall;
    function GetFaceHatches: OleVariant; safecall;
    function IGetFaceHatches(NumFacesHatches: Integer): IFaceHatch; safecall;
    function GetCenterMarkCount2(var Size: Integer): Integer; safecall;
    function GetCenterMarks: OleVariant; safecall;
    function IGetCenterMarks(Count: Integer): ICenterMark; safecall;
    function GetFirstCenterMark: ICenterMark; safecall;
    function GetCenterLineSketch: ISketch; safecall;
    function GetDimensionDisplayInfoSize: Integer; safecall;
    function GetDimensionDisplayInfo4: OleVariant; safecall;
    function IGetDimensionDisplayInfo4(ArraySize: Integer): Double; safecall;
    function GetFirstCenterLine: ICenterLine; safecall;
    function GetFirstDisplayDimension4: IDisplayDimension; safecall;
    function GetFirstTableAnnotation: ITableAnnotation; safecall;
    function Get_RootDrawingComponent: IDrawingComponent; safecall;
    function Get_ReferencedDocument: IModelDoc2; safecall;
    function InsertHoleTable(UseAnchorPoint: WordBool; X: Double; Y: Double; AnchorType: Integer; 
                             const TableTemplate: WideString): IHoleTableAnnotation; safecall;
    function InsertBomTable2(UseAnchorPoint: WordBool; X: Double; Y: Double; AnchorType: Integer; 
                             BomType: Integer; const Configuration: WideString; 
                             const TableTemplate: WideString): IBomTableAnnotation; safecall;
    function GetFirstDatumOrigin: IDatumOrigin; safecall;
    function GetUseParentDisplayMode: WordBool; safecall;
    function SetDisplayMode3(UseParent: WordBool; Mode: Integer; Facetted: WordBool; Edges: WordBool): WordBool; safecall;
    function AlignWithView(AlignType: Integer; const BaseView: IView): WordBool; safecall;
    function Get_UseParentScale: WordBool; safecall;
    procedure Set_UseParentScale(UseParent: WordBool); safecall;
    function Crop: Integer; safecall;
    function IsPerspectiveView: WordBool; safecall;
    function GetAnnotationCount: Integer; safecall;
    function GetAnnotations: OleVariant; safecall;
    function IGetAnnotations(NumAnnotations: Integer): IAnnotation; safecall;
    function GetDimensionCount4: Integer; safecall;
    function GetDimensionDisplayInfoSize2: Integer; safecall;
    function GetDimensionDisplayInfo5: OleVariant; safecall;
    function IGetDimensionDisplayInfo5(ArraySize: Integer): Double; safecall;
    function GetDimensionDisplayString4: OleVariant; safecall;
    function IGetDimensionDisplayString4: WideString; safecall;
    function GetDimensionIds4: OleVariant; safecall;
    function IGetDimensionIds4: WideString; safecall;
    function GetDimensionInfo6: OleVariant; safecall;
    function IGetDimensionInfo6: Double; safecall;
    function GetDimensionString4: OleVariant; safecall;
    function IGetDimensionString4: WideString; safecall;
    function GetFirstDisplayDimension5: IDisplayDimension; safecall;
    function GetFirstAnnotation3: IAnnotation; safecall;
    function IsLightweight: WordBool; safecall;
    procedure SetResolvedToLightweight; safecall;
    procedure SetLightweightToResolved; safecall;
    function GetFirstWeldBead: IWeldBead; safecall;
    function Get_FocusLocked: WordBool; safecall;
    procedure Set_FocusLocked(Retval: WordBool); safecall;
    function GetName2: WideString; safecall;
    function SetName2(const Name: WideString): WordBool; safecall;
    function Get_HiddenEdges: OleVariant; safecall;
    procedure Set_HiddenEdges(EdgeList: OleVariant); safecall;
    function GetHiddenEdgeCount: Integer; safecall;
    function IGetHiddenEdges(HiddenEdgeCount: Integer): IEdge; safecall;
    procedure ISetHiddenEdges(HiddenEdgeCount: Integer; var EdgeList: IEdge); safecall;
    function GetVisibleComponentCount: Integer; safecall;
    function GetVisibleComponents: OleVariant; safecall;
    function IGetVisibleComponents(ViewComponentCount: Integer): IComponent2; safecall;
    function GetVisibleEntityCount(const LpViewComponent: IComponent2; EntityType: Integer): Integer; safecall;
    function GetVisibleEntities(const LpViewComponent: IComponent2; EntityType: Integer): OleVariant; safecall;
    function IGetVisibleEntities(const LpViewComponent: IComponent2; EntityType: Integer; 
                                 ViewEntityCount: Integer): IEntity; safecall;
    function GetPolyLinesAndCurves(CrossHatchOption: Smallint): OleVariant; safecall;
    function IGetPolyLinesAndCurves(CrossHatchOption: Smallint; ArraySize: Integer): Double; safecall;
    function GetPolyLinesAndCurvesCount(CrossHatchOption: Smallint; out PointCount: Integer): Integer; safecall;
    function Get_ShowSheetMetalBendNotes: WordBool; safecall;
    procedure Set_ShowSheetMetalBendNotes(ShowBendNote: WordBool); safecall;
    function Get_Sheet: ISheet; safecall;
    function GetDependentViewCount(AllViews: WordBool; SpecificViewType: Integer): Integer; safecall;
    function GetDependentViews(AllViews: WordBool; SpecificViewType: Integer): OleVariant; safecall;
    function IGetDependentViews(AllViews: WordBool; SpecificViewType: Integer; 
                                DependentViewCount: Integer): IView; safecall;
    function GetKeepLinkedToBOM: WordBool; safecall;
    function GetKeepLinkedToBOMName: WideString; safecall;
    function SetKeepLinkedToBOM(Linked: WordBool; const Name: WideString): WordBool; safecall;
    function GetPolylines6(CrossHatchOption: Smallint; out Polylines: OleVariant): OleVariant; safecall;
    function IGetPolylines6(CrossHatchOption: Smallint; ArraySize: Integer; out Polylines: Double; 
                            EdgeArraySize: Integer): IEdge; safecall;
    function InsertWeldmentTable(UseAnchorPoint: WordBool; X: Double; Y: Double; 
                                 AnchorType: Integer; const Configuration: WideString; 
                                 const TableTemplate: WideString): IWeldmentCutListAnnotation; safecall;
    function Get_BreakLineGap: Double; safecall;
    procedure Set_BreakLineGap(DBreakLineGap: Double); safecall;
    function InsertAlternateView(const ConfigurationName: WideString): IView; safecall;
    function GetTemporaryAxesCount: Integer; safecall;
    function GetTemporaryAxes: OleVariant; safecall;
    function IGetTemporaryAxes(TempAxesCount: Integer): Double; safecall;
    function GetProjectionLineCount: Integer; safecall;
    function GetProjectionLines: OleVariant; safecall;
    function IGetProjectionLines(Count: Integer): IProjectionArrow; safecall;
    function GetOrientationName: WideString; safecall;
    function Get_FlipView: WordBool; safecall;
    procedure Set_FlipView(FlipView: WordBool); safecall;
    function GetPolylines7(CrossHatchOption: Smallint; out Polylines: OleVariant): OleVariant; safecall;
    function IGetPolylines7(CrossHatchOption: Smallint; ArraySize: Integer; out Polylines: Double; 
                            EdgeArraySize: Integer): IUnknown; safecall;
    property SuppressState: Integer read Get_SuppressState write Set_SuppressState;
    property ReferencedConfiguration: WideString read Get_ReferencedConfiguration write Set_ReferencedConfiguration;
    property UseSheetScale: Integer read Get_UseSheetScale write Set_UseSheetScale;
    property ScaleDecimal: Double read Get_ScaleDecimal write Set_ScaleDecimal;
    property ScaleRatio: OleVariant read Get_ScaleRatio write Set_ScaleRatio;
    property Position: OleVariant read Get_Position write Set_Position;
    property Name: WideString read Get_Name;
    property type_: Integer read Get_type_;
    property ProjectedDimensions: WordBool read Get_ProjectedDimensions write Set_ProjectedDimensions;
    property Angle: Double read Get_Angle write Set_Angle;
    property ModelToViewTransform: IMathTransform read Get_ModelToViewTransform write Set_ModelToViewTransform;
    property RootDrawingComponent: IDrawingComponent read Get_RootDrawingComponent;
    property ReferencedDocument: IModelDoc2 read Get_ReferencedDocument;
    property UseParentScale: WordBool read Get_UseParentScale write Set_UseParentScale;
    property FocusLocked: WordBool read Get_FocusLocked write Set_FocusLocked;
    property HiddenEdges: OleVariant read Get_HiddenEdges write Set_HiddenEdges;
    property ShowSheetMetalBendNotes: WordBool read Get_ShowSheetMetalBendNotes write Set_ShowSheetMetalBendNotes;
    property Sheet: ISheet read Get_Sheet;
    property BreakLineGap: Double read Get_BreakLineGap write Set_BreakLineGap;
    property FlipView: WordBool read Get_FlipView write Set_FlipView;
  end;

// *********************************************************************//
// DispIntf:  IViewDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D50-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IViewDisp = dispinterface
    ['{83A33D50-27C5-11CE-BFD4-00400513BB57}']
    property SuppressState: Integer dispid 16;
    function GetNextView: IDispatch; dispid 1;
    function IGetNextView: IView; dispid 13;
    function GetLines: OleVariant; dispid 2;
    function GetOutline: OleVariant; dispid 3;
    function GetXform: OleVariant; dispid 4;
    function GetArcs: OleVariant; dispid 5;
    function GetUserPoints: OleVariant; dispid 6;
    function GetPolylines: OleVariant; dispid 7;
    function GetSplines: OleVariant; dispid 8;
    function GetDimensionInfo: OleVariant; dispid 9;
    function GetDimensionString: OleVariant; dispid 10;
    function GetFirstNote: IDispatch; dispid 11;
    function IGetFirstNote: INote; dispid 14;
    function GetFirstGTOL: IDispatch; dispid 12;
    function IGetFirstGTOL: IGtol; dispid 15;
    function IGetLines: Double; dispid 17;
    function IGetOutline: Double; dispid 18;
    function IGetXform: Double; dispid 19;
    function IGetArcs: Double; dispid 20;
    function IGetUserPoints: Double; dispid 21;
    function IGetPolylines: Double; dispid 22;
    function IGetSplines: Double; dispid 23;
    function IGetDimensionInfo: Double; dispid 24;
    function IGetDimensionString: WideString; dispid 25;
    function GetLineCount: Integer; dispid 26;
    function GetArcCount: Integer; dispid 27;
    function GetUserPointsCount: Integer; dispid 28;
    function GetPolyLineCount(out PointCount: Integer): Integer; dispid 29;
    function GetSplineCount(out PointCount: Integer): Integer; dispid 30;
    function GetDimensionCount: Integer; dispid 31;
    function GetEllipses: OleVariant; dispid 32;
    function IGetEllipses: Double; dispid 33;
    function GetEllipseCount: Integer; dispid 34;
    function GetDisplayMode: Integer; dispid 35;
    procedure SetDisplayMode(DisplayIn: Integer); dispid 36;
    function GetDisplayTangentEdges: WordBool; dispid 37;
    procedure SetDisplayTangentEdges(DisplayIn: WordBool); dispid 38;
    function GetCenterMarkCount: Integer; dispid 39;
    function GetCenterMarkInfo: OleVariant; dispid 40;
    function IGetCenterMarkInfo: Double; dispid 41;
    function GetSectionLineCount(out Size: Integer): Integer; dispid 42;
    function GetSectionLineInfo: OleVariant; dispid 43;
    function GetSectionLineStrings: OleVariant; dispid 44;
    function IGetSectionLineInfo: Double; dispid 45;
    function IGetSectionLineStrings: WideString; dispid 46;
    procedure UpdateViewDisplayGeometry; dispid 47;
    function GetDetailCircleCount: Integer; dispid 48;
    function GetDetailCircleInfo: OleVariant; dispid 49;
    function IGetDetailCircleInfo: Double; dispid 50;
    function GetDetailCircleStrings: OleVariant; dispid 51;
    function IGetDetailCircleStrings: WideString; dispid 52;
    function GetDimensionIds: OleVariant; dispid 53;
    function IGetDimensionIds: WideString; dispid 54;
    function GetDimensionDisplayInfo: OleVariant; dispid 55;
    function IGetDimensionDisplayInfo: Double; dispid 56;
    function GetDimensionDisplayString: OleVariant; dispid 57;
    function IGetDimensionDisplayString: WideString; dispid 58;
    function GetArcs2: OleVariant; dispid 59;
    function IGetArcs2: Double; dispid 60;
    function GetEllipses2: OleVariant; dispid 61;
    function IGetEllipses2: Double; dispid 62;
    function GetViewXform: OleVariant; dispid 63;
    function IGetViewXform: Double; dispid 64;
    function GetFirstSFSymbol: IDispatch; dispid 65;
    function IGetFirstSFSymbol: ISFSymbol; dispid 66;
    function GetFirstDatumTag: IDispatch; dispid 67;
    function IGetFirstDatumTag: IDatumTag; dispid 68;
    function GetFirstDatumTargetSym: IDispatch; dispid 69;
    function IGetFirstDatumTargetSym: IDatumTargetSym; dispid 70;
    function GetFirstWeldSymbol: IDispatch; dispid 71;
    function IGetFirstWeldSymbol: IWeldSymbol; dispid 72;
    function GetDatumPointsCount: Integer; dispid 73;
    function GetDatumPoints: OleVariant; dispid 74;
    function IGetDatumPoints: Double; dispid 75;
    procedure UseDefaultAlignment; dispid 76;
    procedure RemoveAlignment; dispid 77;
    procedure AlignVerticalTo(const ViewNameIn: WideString); dispid 78;
    procedure AlignHorizontalTo(const ViewNameIn: WideString); dispid 79;
    function GetDisplayData: IDispatch; dispid 80;
    function IGetDisplayData: IDisplayData; dispid 81;
    function GetPolyLineCount2(out PointCount: Integer): Integer; dispid 82;
    function GetPolylines2: OleVariant; dispid 83;
    function IGetPolylines2: Double; dispid 84;
    function ShowExploded(ShowIt: WordBool): WordBool; dispid 85;
    function IsExploded: WordBool; dispid 86;
    property ReferencedConfiguration: WideString dispid 87;
    function GetFirstCThread: IDispatch; dispid 88;
    function IGetFirstCThread: ICThread; dispid 89;
    function CreateViewArrow(const DrawingViewNameIn: WideString; const ArrowNameIn: WideString): WordBool; dispid 90;
    procedure ModifyViewArrow(const DrawingViewNameIn: WideString; const ArrowNameIn: WideString); dispid 91;
    procedure MoveViewArrow(const DrawingViewNameIn: WideString; Dx: Double; Dy: Double; Dz: Double); dispid 92;
    function GetPolylines3: OleVariant; dispid 93;
    function IGetPolylines3: Double; dispid 94;
    function GetPolyLineCount3(out PointCount: Integer): Integer; dispid 95;
    function GetFirstDisplayDimension: IDispatch; dispid 96;
    function IGetFirstDisplayDimension: IDisplayDimension; dispid 97;
    function GetSketch: IDispatch; dispid 98;
    function IGetSketch: ISketch; dispid 99;
    function GetLines2: OleVariant; dispid 100;
    function IGetLines2: Double; dispid 101;
    function GetSplines2: OleVariant; dispid 102;
    function IGetSplines2: Double; dispid 103;
    function GetArcs3: OleVariant; dispid 104;
    function IGetArcs3: Double; dispid 105;
    function GetEllipses3: OleVariant; dispid 106;
    function IGetEllipses3: Double; dispid 107;
    function GetBomTable: IDispatch; dispid 108;
    function IGetBomTable: IBomTable; dispid 109;
    property UseSheetScale: Integer dispid 110;
    property ScaleDecimal: Double dispid 111;
    property ScaleRatio: OleVariant dispid 112;
    function IScaleRatio: Double; dispid 113;
    property Position: OleVariant dispid 114;
    function IPosition: Double; dispid 115;
    function SetXform(Transform: OleVariant): WordBool; dispid 116;
    function ISetXform(var Transform: Double): WordBool; dispid 117;
    function GetAlignment: Integer; dispid 118;
    function GetReferencedModelName: WideString; dispid 119;
    function GetFirstAnnotation: IDispatch; dispid 120;
    function IGetFirstAnnotation: IAnnotation; dispid 121;
    function GetFirstCustomSymbol: IDispatch; dispid 122;
    function IGetFirstCustomSymbol: ICustomSymbol; dispid 123;
    function GetDimensionInfo2: OleVariant; dispid 124;
    function IGetDimensionInfo2: Double; dispid 125;
    function GetParabolas: OleVariant; dispid 126;
    function IGetParabolas: Double; dispid 127;
    function GetParabolaCount: Integer; dispid 128;
    function GetEllipses4: OleVariant; dispid 129;
    function IGetEllipses4: Double; dispid 130;
    function GetLines3: OleVariant; dispid 131;
    function IGetLines3: Double; dispid 132;
    function GetArcs4: OleVariant; dispid 133;
    function IGetArcs4: Double; dispid 134;
    function GetSplines3: OleVariant; dispid 135;
    function IGetSplines3: Double; dispid 136;
    function GetEllipses5: OleVariant; dispid 137;
    function IGetEllipses5: Double; dispid 138;
    function GetParabolas2: OleVariant; dispid 139;
    function IGetParabolas2: Double; dispid 140;
    function GetUserPoints2: OleVariant; dispid 141;
    function IGetUserPoints2: Double; dispid 142;
    function GetDimensionInfo3: OleVariant; dispid 143;
    function IGetDimensionInfo3: Double; dispid 144;
    function GetDatumPoints2: OleVariant; dispid 145;
    function IGetDatumPoints2: Double; dispid 146;
    property Name: WideString readonly dispid 147;
    property type_: Integer readonly dispid 148;
    property ProjectedDimensions: WordBool dispid 149;
    function HasDesignTable: WordBool; dispid 150;
    function GetDesignTableExtent: OleVariant; dispid 151;
    function IGetDesignTableExtent: Double; dispid 152;
    function GetDisplayData2: IDispatch; dispid 153;
    function IGetDisplayData2: IDisplayData; dispid 154;
    function GetFirstAnnotation2: IDispatch; dispid 155;
    function IGetFirstAnnotation2: IAnnotation; dispid 156;
    function GetDimensionCount2: Integer; dispid 157;
    function GetDimensionInfo4: OleVariant; dispid 158;
    function IGetDimensionInfo4: Double; dispid 159;
    function GetDimensionString2: OleVariant; dispid 160;
    function IGetDimensionString2: WideString; dispid 161;
    function GetDimensionIds2: OleVariant; dispid 162;
    function IGetDimensionIds2: WideString; dispid 163;
    function GetDimensionDisplayInfo2: OleVariant; dispid 164;
    function IGetDimensionDisplayInfo2: Double; dispid 165;
    function GetDimensionDisplayString2: OleVariant; dispid 166;
    function IGetDimensionDisplayString2: WideString; dispid 167;
    function GetFirstDisplayDimension2: IDispatch; dispid 168;
    function IGetFirstDisplayDimension2: IDisplayDimension; dispid 169;
    function GetPolylines4: OleVariant; dispid 170;
    function IGetPolylines4: Double; dispid 171;
    function GetPolyLineCount4(out PointCount: Integer): Integer; dispid 172;
    function IsModelLoaded: WordBool; dispid 173;
    function LoadModel: Integer; dispid 174;
    function GetDisplayTangentEdges2: Integer; dispid 175;
    procedure SetDisplayTangentEdges2(DisplayIn: Integer); dispid 176;
    function GetSectionLines: OleVariant; dispid 177;
    function IGetSectionLines: IDrSection; dispid 178;
    function GetSection: IDispatch; dispid 179;
    function IGetSection: IDrSection; dispid 180;
    function GetHiddenComponents: OleVariant; dispid 181;
    function EnumHiddenComponents: IEnumComponents; dispid 182;
    function EnumSectionLines: IEnumDrSections; dispid 183;
    function GetDisplayData3: IDispatch; dispid 184;
    function IGetDisplayData3: IDisplayData; dispid 185;
    function GetDimensionCount3: Integer; dispid 186;
    function GetDimensionInfo5: OleVariant; dispid 187;
    function IGetDimensionInfo5: Double; dispid 188;
    function GetDimensionString3: OleVariant; dispid 189;
    function IGetDimensionString3: WideString; dispid 190;
    function GetDimensionIds3: OleVariant; dispid 191;
    function IGetDimensionIds3: WideString; dispid 192;
    function GetDimensionDisplayInfo3: OleVariant; dispid 193;
    function IGetDimensionDisplayInfo3: Double; dispid 194;
    function GetDimensionDisplayString3: OleVariant; dispid 195;
    function IGetDimensionDisplayString3: WideString; dispid 196;
    function GetFirstDisplayDimension3: IDispatch; dispid 197;
    function IGetFirstDisplayDimension3: IDisplayDimension; dispid 198;
    function IsCropped: WordBool; dispid 199;
    property Angle: Double dispid 200;
    function GetDetailCircles: OleVariant; dispid 201;
    function IGetDetailCircles(NumDetailCircles: Integer): IDetailCircle; dispid 202;
    function GetProjectionArrow: IDispatch; dispid 203;
    function IGetProjectionArrow: IProjectionArrow; dispid 204;
    function GetDetail: IDispatch; dispid 205;
    function IGetDetail: IDetailCircle; dispid 206;
    function GetBaseView: IDispatch; dispid 207;
    function IGetBaseView: IView; dispid 208;
    function EnumHiddenComponents2: IEnumComponents2; dispid 209;
    function GetFirstMultiJogLeader: IDispatch; dispid 210;
    function IGetFirstMultiJogLeader: IMultiJogLeader; dispid 211;
    function GetVisible: WordBool; dispid 212;
    procedure SetVisible(Visible: WordBool; DependentsToo: WordBool); dispid 213;
    function GetFirstDowelSymbol: IDispatch; dispid 214;
    function IGetFirstDowelSymbol: IDowelSymbol; dispid 215;
    function InsertBomTable(const Template: WideString; Xloc: Double; Yloc: Double; 
                            var Errors: Integer): IDispatch; dispid 216;
    function IInsertBomTable(const Template: WideString; Xloc: Double; Yloc: Double; 
                             var Errors: Integer): IBomTable; dispid 217;
    function SelectEntity(const Entity: IDispatch; AppendFlag: WordBool): WordBool; dispid 218;
    function ISelectEntity(const Entity: IEntity; AppendFlag: WordBool): WordBool; dispid 219;
    function IsModelOutOfDate: WordBool; dispid 220;
    property ModelToViewTransform: IMathTransform dispid 221;
    function GetDisplayMode2: Integer; dispid 222;
    function GetFacettedHlrDisplay: WordBool; dispid 223;
    function GetDisplayEdgesInShadedMode: WordBool; dispid 224;
    function SetDisplayMode2(Mode: Integer; Facetted: WordBool; Edges: WordBool): WordBool; dispid 225;
    function GetPolylines5(CrossHatchOption: Smallint): OleVariant; dispid 226;
    function IGetPolylines5(CrossHatchOption: Smallint; ArraySize: Integer): Double; dispid 227;
    function GetPolyLineCount5(CrossHatchOption: Smallint; out PointCount: Integer): Integer; dispid 228;
    function GetLineCount2(CrossHatchOption: Smallint): Integer; dispid 229;
    function GetLines4(CrossHatchOption: Smallint): OleVariant; dispid 230;
    function IGetLines4(CrossHatchOption: Smallint; ArraySize: Integer): Double; dispid 231;
    function GetFirstBlockInstance: IBlockInstance; dispid 232;
    function GetSectionLineCount2(out Size: Integer): Integer; dispid 233;
    function GetSectionLineInfo2: OleVariant; dispid 234;
    function IGetSectionLineInfo2(ArraySize: Integer): Double; dispid 235;
    function GetDetailCircleCount2(out Size: Integer): Integer; dispid 236;
    function GetDetailCircleInfo2: OleVariant; dispid 237;
    function IGetDetailCircleInfo2(ArraySize: Integer): Double; dispid 238;
    function IsBroken: WordBool; dispid 239;
    function GetBreakLineCount(out Size: Integer): Integer; dispid 240;
    function GetBreakLines: OleVariant; dispid 241;
    function IGetBreakLines(Count: Integer): IBreakLine; dispid 242;
    function InsertBreak(Orientation: Integer; Position1: Double; Position2: Double; Style: Integer): IBreakLine; dispid 243;
    function GetBreakLineInfo: OleVariant; dispid 244;
    function IGetBreakLineInfo(ArraySize: Integer): Double; dispid 245;
    function GetFaceHatchCount: Integer; dispid 246;
    function GetFaceHatches: OleVariant; dispid 247;
    function IGetFaceHatches(NumFacesHatches: Integer): IFaceHatch; dispid 248;
    function GetCenterMarkCount2(var Size: Integer): Integer; dispid 249;
    function GetCenterMarks: OleVariant; dispid 250;
    function IGetCenterMarks(Count: Integer): ICenterMark; dispid 251;
    function GetFirstCenterMark: ICenterMark; dispid 252;
    function GetCenterLineSketch: ISketch; dispid 253;
    function GetDimensionDisplayInfoSize: Integer; dispid 254;
    function GetDimensionDisplayInfo4: OleVariant; dispid 255;
    function IGetDimensionDisplayInfo4(ArraySize: Integer): Double; dispid 256;
    function GetFirstCenterLine: ICenterLine; dispid 257;
    function GetFirstDisplayDimension4: IDisplayDimension; dispid 258;
    function GetFirstTableAnnotation: ITableAnnotation; dispid 259;
    property RootDrawingComponent: IDrawingComponent readonly dispid 260;
    property ReferencedDocument: IModelDoc2 readonly dispid 261;
    function InsertHoleTable(UseAnchorPoint: WordBool; X: Double; Y: Double; AnchorType: Integer; 
                             const TableTemplate: WideString): IHoleTableAnnotation; dispid 262;
    function InsertBomTable2(UseAnchorPoint: WordBool; X: Double; Y: Double; AnchorType: Integer; 
                             BomType: Integer; const Configuration: WideString; 
                             const TableTemplate: WideString): IBomTableAnnotation; dispid 263;
    function GetFirstDatumOrigin: IDatumOrigin; dispid 264;
    function GetUseParentDisplayMode: WordBool; dispid 265;
    function SetDisplayMode3(UseParent: WordBool; Mode: Integer; Facetted: WordBool; Edges: WordBool): WordBool; dispid 266;
    function AlignWithView(AlignType: Integer; const BaseView: IView): WordBool; dispid 267;
    property UseParentScale: WordBool dispid 268;
    function Crop: Integer; dispid 269;
    function IsPerspectiveView: WordBool; dispid 270;
    function GetAnnotationCount: Integer; dispid 271;
    function GetAnnotations: OleVariant; dispid 272;
    function IGetAnnotations(NumAnnotations: Integer): IAnnotation; dispid 273;
    function GetDimensionCount4: Integer; dispid 274;
    function GetDimensionDisplayInfoSize2: Integer; dispid 275;
    function GetDimensionDisplayInfo5: OleVariant; dispid 276;
    function IGetDimensionDisplayInfo5(ArraySize: Integer): Double; dispid 277;
    function GetDimensionDisplayString4: OleVariant; dispid 278;
    function IGetDimensionDisplayString4: WideString; dispid 279;
    function GetDimensionIds4: OleVariant; dispid 280;
    function IGetDimensionIds4: WideString; dispid 281;
    function GetDimensionInfo6: OleVariant; dispid 282;
    function IGetDimensionInfo6: Double; dispid 283;
    function GetDimensionString4: OleVariant; dispid 284;
    function IGetDimensionString4: WideString; dispid 285;
    function GetFirstDisplayDimension5: IDisplayDimension; dispid 286;
    function GetFirstAnnotation3: IAnnotation; dispid 287;
    function IsLightweight: WordBool; dispid 288;
    procedure SetResolvedToLightweight; dispid 289;
    procedure SetLightweightToResolved; dispid 290;
    function GetFirstWeldBead: IWeldBead; dispid 291;
    property FocusLocked: WordBool dispid 292;
    function GetName2: WideString; dispid 293;
    function SetName2(const Name: WideString): WordBool; dispid 294;
    property HiddenEdges: OleVariant dispid 295;
    function GetHiddenEdgeCount: Integer; dispid 296;
    function IGetHiddenEdges(HiddenEdgeCount: Integer): IEdge; dispid 297;
    procedure ISetHiddenEdges(HiddenEdgeCount: Integer; var EdgeList: IEdge); dispid 298;
    function GetVisibleComponentCount: Integer; dispid 299;
    function GetVisibleComponents: OleVariant; dispid 300;
    function IGetVisibleComponents(ViewComponentCount: Integer): IComponent2; dispid 301;
    function GetVisibleEntityCount(const LpViewComponent: IComponent2; EntityType: Integer): Integer; dispid 302;
    function GetVisibleEntities(const LpViewComponent: IComponent2; EntityType: Integer): OleVariant; dispid 303;
    function IGetVisibleEntities(const LpViewComponent: IComponent2; EntityType: Integer; 
                                 ViewEntityCount: Integer): IEntity; dispid 304;
    function GetPolyLinesAndCurves(CrossHatchOption: Smallint): OleVariant; dispid 305;
    function IGetPolyLinesAndCurves(CrossHatchOption: Smallint; ArraySize: Integer): Double; dispid 306;
    function GetPolyLinesAndCurvesCount(CrossHatchOption: Smallint; out PointCount: Integer): Integer; dispid 307;
    property ShowSheetMetalBendNotes: WordBool dispid 308;
    property Sheet: ISheet readonly dispid 309;
    function GetDependentViewCount(AllViews: WordBool; SpecificViewType: Integer): Integer; dispid 310;
    function GetDependentViews(AllViews: WordBool; SpecificViewType: Integer): OleVariant; dispid 311;
    function IGetDependentViews(AllViews: WordBool; SpecificViewType: Integer; 
                                DependentViewCount: Integer): IView; dispid 312;
    function GetKeepLinkedToBOM: WordBool; dispid 313;
    function GetKeepLinkedToBOMName: WideString; dispid 314;
    function SetKeepLinkedToBOM(Linked: WordBool; const Name: WideString): WordBool; dispid 315;
    function GetPolylines6(CrossHatchOption: Smallint; out Polylines: OleVariant): OleVariant; dispid 316;
    function IGetPolylines6(CrossHatchOption: Smallint; ArraySize: Integer; out Polylines: Double; 
                            EdgeArraySize: Integer): IEdge; dispid 317;
    function InsertWeldmentTable(UseAnchorPoint: WordBool; X: Double; Y: Double; 
                                 AnchorType: Integer; const Configuration: WideString; 
                                 const TableTemplate: WideString): IWeldmentCutListAnnotation; dispid 318;
    property BreakLineGap: Double dispid 319;
    function InsertAlternateView(const ConfigurationName: WideString): IView; dispid 320;
    function GetTemporaryAxesCount: Integer; dispid 321;
    function GetTemporaryAxes: OleVariant; dispid 322;
    function IGetTemporaryAxes(TempAxesCount: Integer): Double; dispid 323;
    function GetProjectionLineCount: Integer; dispid 324;
    function GetProjectionLines: OleVariant; dispid 325;
    function IGetProjectionLines(Count: Integer): IProjectionArrow; dispid 326;
    function GetOrientationName: WideString; dispid 327;
    property FlipView: WordBool dispid 328;
    function GetPolylines7(CrossHatchOption: Smallint; out Polylines: OleVariant): OleVariant; dispid 329;
    function IGetPolylines7(CrossHatchOption: Smallint; ArraySize: Integer; out Polylines: Double; 
                            EdgeArraySize: Integer): IUnknown; dispid 330;
  end;

// *********************************************************************//
// Interface: INote
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D55-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  INote = interface(IDispatch)
    ['{83A33D55-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: INote; safecall;
    function GetText: WideString; safecall;
    function GetHeight: Double; safecall;
    function GetAttachPos: OleVariant; safecall;
    function GetFontInfo: OleVariant; safecall;
    function GetLeaderInfo: OleVariant; safecall;
    function IsAttached: WordBool; safecall;
    function HasExtraLeader: WordBool; safecall;
    function HasBalloon: WordBool; safecall;
    function GetBalloonInfo: OleVariant; safecall;
    function GetTextPoint: OleVariant; safecall;
    function GetArrowHeadInfo: OleVariant; safecall;
    function IGetAttachPos: Double; safecall;
    function IGetFontInfo: Double; safecall;
    function IGetLeaderInfo(out PointCount: Integer): Double; safecall;
    function IGetBalloonInfo: Double; safecall;
    function IGetTextPoint: Double; safecall;
    function IGetArrowHeadInfo: Double; safecall;
    function GetUpperRight: OleVariant; safecall;
    function IGetUpperRight: Double; safecall;
    function GetExtent: OleVariant; safecall;
    function IGetExtent: Double; safecall;
    function IsCompoundNote: WordBool; safecall;
    function AddText(const Txt: WideString; X: Double; Y: Double; Z: Double): WordBool; safecall;
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(Index: Integer): WideString; safecall;
    function GetHeightAtIndex(Index: Integer): Double; safecall;
    function GetTextOffsetAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTextOffsetAtIndex(Index: Integer): Double; safecall;
    procedure BeginSketchEdit; safecall;
    procedure EndSketchEdit; safecall;
    function GetExtentAtIndex(Index: Integer): OleVariant; safecall;
    function IGetExtentAtIndex(Index: Integer): Double; safecall;
    procedure SetTextOffsetAtIndex(Index: Integer; X: Double; Y: Double; Z: Double); safecall;
    function GetSketch: IDispatch; safecall;
    function IGetSketch: ISketch; safecall;
    function SetTextAtIndex(Index: Integer; const Txt: WideString): WordBool; safecall;
    function SetText(const Txt: WideString): WordBool; safecall;
    function SetZeroLengthLeader(Flag: WordBool): WordBool; safecall;
    procedure SetHeight(HeightIn: Double); safecall;
    function GetHeightInPoints: Integer; safecall;
    procedure SetHeightInPoints(HeightIn: Integer); safecall;
    function GetName: WideString; safecall;
    function SetName(const NameIn: WideString): WordBool; safecall;
    function GetTextHeightAtIndex(Index: Integer): Double; safecall;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(Index: Integer): Double; safecall;
    function GetTextAngleAtIndex(Index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(Index: Integer): Integer; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(Index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(Index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(Index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(Index: Integer): Double; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(Index: Integer): Double; safecall;
    function GetTextFontAtIndex(Index: Integer): WideString; safecall;
    procedure SetTextPoint(X: Double; Y: Double; Z: Double); safecall;
    function GetTextLineSpacingAtIndex(Index: Integer): Double; safecall;
    function GetLeaderCount: Integer; safecall;
    function GetLeaderAtIndex(Index: Integer): OleVariant; safecall;
    function IGetLeaderAtIndex(Index: Integer; out PointCount: Integer): Double; safecall;
    function GetTextFormat: IDispatch; safecall;
    function IGetTextFormat: ITextFormat; safecall;
    function SetTextFormat(TextFormatType: Integer; const TextFormat: IDispatch): WordBool; safecall;
    function ISetTextFormat(TextFormatType: Integer; const TextFormat: ITextFormat): WordBool; safecall;
    function GetTextFormatAtIndex(Index: Integer): IDispatch; safecall;
    function IGetTextFormatAtIndex(Index: Integer): ITextFormat; safecall;
    procedure SetTextFormatAtIndex(Index: Integer; const TextFormat: IDispatch); safecall;
    procedure ISetTextFormatAtIndex(Index: Integer; const TextFormat: ITextFormat); safecall;
    function GetTextJustification: Integer; safecall;
    procedure SetTextJustification(Justification: Integer); safecall;
    function GetTextJustificationAtIndex(Index: Integer): Integer; safecall;
    procedure SetTextJustificationAtIndex(Index: Integer; Justification: Integer); safecall;
    function GetUseDocTextFormat: WordBool; safecall;
    function GetHyperlinkText: WideString; safecall;
    function SetHyperlinkText(const Text: WideString): WordBool; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Retval: Double); safecall;
    function GetBalloonStyle: Integer; safecall;
    function GetBalloonSize: Integer; safecall;
    function SetBalloon(Style: Integer; Size: Integer): WordBool; safecall;
    function IGetTextTokenCount: Integer; safecall;
    function GetTextTokens(out Positions: OleVariant; out Widths: OleVariant; 
                           out Heights: OleVariant): OleVariant; safecall;
    function IGetTextTokens(out Positions: Double; out Widths: Double; out Heights: Double): WideString; safecall;
    function IsBomBalloon: WordBool; safecall;
    function GetBomBalloonTextStyle(WhichOne: WordBool): Integer; safecall;
    function GetBomBalloonText(WhichOne: WordBool): WideString; safecall;
    function SetBomBalloonText(UpperTextStyle: Integer; const UpperText: WideString; 
                               LowerTextStyle: Integer; const LowerText: WideString): WordBool; safecall;
    function Get_ReadOnly: WordBool; safecall;
    procedure Set_ReadOnly(ReadOnlyOut: WordBool); safecall;
    function Get_PromptText: WideString; safecall;
    procedure Set_PromptText(const PromptTextOut: WideString); safecall;
    function Get_TagName: WideString; safecall;
    procedure Set_TagName(const TagNameOut: WideString); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(VisibleOut: WordBool); safecall;
    function IsAttribute: WordBool; safecall;
    function IsStackedBalloon: WordBool; safecall;
    function IsStackedBalloonMaster: WordBool; safecall;
    function GetBalloonStack: IBalloonStack; safecall;
    function Get_PropertyLinkedText: WideString; safecall;
    procedure Set_PropertyLinkedText(const Txt: WideString); safecall;
    function GetTextPoint2: OleVariant; safecall;
    function IGetTextPoint2: IMathPoint; safecall;
    function Get_TextRightToLeft: WordBool; safecall;
    procedure Set_TextRightToLeft(VbRightToLeft: WordBool); safecall;
    function Get_IsBendLineNote: WordBool; safecall;
    function GetCompoundTextCount: Integer; safecall;
    function GetCompoundTextAtIndex(Index: Integer): WideString; safecall;
    function Get_HasMultipleFonts: WordBool; safecall;
    function GetBendLineValues(var Up: WordBool; var Angle: Double; var Radius: Double; 
                               var StartPt: IMathPoint; var EndPt: IMathPoint): WordBool; safecall;
    function GetBendLineValues2(var Up: WordBool; var Angle: Double; var Radius: Double; 
                                var Points: OleVariant): WordBool; safecall;
    property Angle: Double read Get_Angle write Set_Angle;
    property ReadOnly: WordBool read Get_ReadOnly write Set_ReadOnly;
    property PromptText: WideString read Get_PromptText write Set_PromptText;
    property TagName: WideString read Get_TagName write Set_TagName;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property PropertyLinkedText: WideString read Get_PropertyLinkedText write Set_PropertyLinkedText;
    property TextRightToLeft: WordBool read Get_TextRightToLeft write Set_TextRightToLeft;
    property IsBendLineNote: WordBool read Get_IsBendLineNote;
    property HasMultipleFonts: WordBool read Get_HasMultipleFonts;
  end;

// *********************************************************************//
// DispIntf:  INoteDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D55-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  INoteDisp = dispinterface
    ['{83A33D55-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: INote; dispid 13;
    function GetText: WideString; dispid 2;
    function GetHeight: Double; dispid 3;
    function GetAttachPos: OleVariant; dispid 4;
    function GetFontInfo: OleVariant; dispid 5;
    function GetLeaderInfo: OleVariant; dispid 6;
    function IsAttached: WordBool; dispid 7;
    function HasExtraLeader: WordBool; dispid 8;
    function HasBalloon: WordBool; dispid 9;
    function GetBalloonInfo: OleVariant; dispid 10;
    function GetTextPoint: OleVariant; dispid 11;
    function GetArrowHeadInfo: OleVariant; dispid 12;
    function IGetAttachPos: Double; dispid 14;
    function IGetFontInfo: Double; dispid 15;
    function IGetLeaderInfo(out PointCount: Integer): Double; dispid 16;
    function IGetBalloonInfo: Double; dispid 17;
    function IGetTextPoint: Double; dispid 18;
    function IGetArrowHeadInfo: Double; dispid 19;
    function GetUpperRight: OleVariant; dispid 20;
    function IGetUpperRight: Double; dispid 21;
    function GetExtent: OleVariant; dispid 22;
    function IGetExtent: Double; dispid 23;
    function IsCompoundNote: WordBool; dispid 24;
    function AddText(const Txt: WideString; X: Double; Y: Double; Z: Double): WordBool; dispid 25;
    function GetTextCount: Integer; dispid 26;
    function GetTextAtIndex(Index: Integer): WideString; dispid 27;
    function GetHeightAtIndex(Index: Integer): Double; dispid 28;
    function GetTextOffsetAtIndex(Index: Integer): OleVariant; dispid 29;
    function IGetTextOffsetAtIndex(Index: Integer): Double; dispid 30;
    procedure BeginSketchEdit; dispid 31;
    procedure EndSketchEdit; dispid 32;
    function GetExtentAtIndex(Index: Integer): OleVariant; dispid 33;
    function IGetExtentAtIndex(Index: Integer): Double; dispid 34;
    procedure SetTextOffsetAtIndex(Index: Integer; X: Double; Y: Double; Z: Double); dispid 35;
    function GetSketch: IDispatch; dispid 36;
    function IGetSketch: ISketch; dispid 37;
    function SetTextAtIndex(Index: Integer; const Txt: WideString): WordBool; dispid 38;
    function SetText(const Txt: WideString): WordBool; dispid 39;
    function SetZeroLengthLeader(Flag: WordBool): WordBool; dispid 40;
    procedure SetHeight(HeightIn: Double); dispid 41;
    function GetHeightInPoints: Integer; dispid 42;
    procedure SetHeightInPoints(HeightIn: Integer); dispid 43;
    function GetName: WideString; dispid 44;
    function SetName(const NameIn: WideString): WordBool; dispid 45;
    function GetTextHeightAtIndex(Index: Integer): Double; dispid 46;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; dispid 47;
    function IGetTextPositionAtIndex(Index: Integer): Double; dispid 48;
    function GetTextAngleAtIndex(Index: Integer): Double; dispid 49;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; dispid 50;
    function GetTextInvertAtIndex(Index: Integer): Integer; dispid 51;
    function GetLineCount: Integer; dispid 52;
    function GetLineAtIndex(Index: Integer): OleVariant; dispid 53;
    function IGetLineAtIndex(Index: Integer): Double; dispid 54;
    function GetArcCount: Integer; dispid 55;
    function GetArcAtIndex(Index: Integer): OleVariant; dispid 56;
    function IGetArcAtIndex(Index: Integer): Double; dispid 57;
    function GetArrowHeadCount: Integer; dispid 58;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; dispid 59;
    function IGetArrowHeadAtIndex(Index: Integer): Double; dispid 60;
    function GetTriangleCount: Integer; dispid 61;
    function GetTriangleAtIndex(Index: Integer): OleVariant; dispid 62;
    function IGetTriangleAtIndex(Index: Integer): Double; dispid 63;
    function GetTextFontAtIndex(Index: Integer): WideString; dispid 64;
    procedure SetTextPoint(X: Double; Y: Double; Z: Double); dispid 65;
    function GetTextLineSpacingAtIndex(Index: Integer): Double; dispid 66;
    function GetLeaderCount: Integer; dispid 67;
    function GetLeaderAtIndex(Index: Integer): OleVariant; dispid 68;
    function IGetLeaderAtIndex(Index: Integer; out PointCount: Integer): Double; dispid 69;
    function GetTextFormat: IDispatch; dispid 70;
    function IGetTextFormat: ITextFormat; dispid 71;
    function SetTextFormat(TextFormatType: Integer; const TextFormat: IDispatch): WordBool; dispid 72;
    function ISetTextFormat(TextFormatType: Integer; const TextFormat: ITextFormat): WordBool; dispid 73;
    function GetTextFormatAtIndex(Index: Integer): IDispatch; dispid 74;
    function IGetTextFormatAtIndex(Index: Integer): ITextFormat; dispid 75;
    procedure SetTextFormatAtIndex(Index: Integer; const TextFormat: IDispatch); dispid 76;
    procedure ISetTextFormatAtIndex(Index: Integer; const TextFormat: ITextFormat); dispid 77;
    function GetTextJustification: Integer; dispid 78;
    procedure SetTextJustification(Justification: Integer); dispid 79;
    function GetTextJustificationAtIndex(Index: Integer): Integer; dispid 80;
    procedure SetTextJustificationAtIndex(Index: Integer; Justification: Integer); dispid 81;
    function GetUseDocTextFormat: WordBool; dispid 82;
    function GetHyperlinkText: WideString; dispid 83;
    function SetHyperlinkText(const Text: WideString): WordBool; dispid 84;
    function GetAnnotation: IDispatch; dispid 85;
    function IGetAnnotation: IAnnotation; dispid 86;
    property Angle: Double dispid 87;
    function GetBalloonStyle: Integer; dispid 88;
    function GetBalloonSize: Integer; dispid 89;
    function SetBalloon(Style: Integer; Size: Integer): WordBool; dispid 90;
    function IGetTextTokenCount: Integer; dispid 91;
    function GetTextTokens(out Positions: OleVariant; out Widths: OleVariant; 
                           out Heights: OleVariant): OleVariant; dispid 92;
    function IGetTextTokens(out Positions: Double; out Widths: Double; out Heights: Double): WideString; dispid 93;
    function IsBomBalloon: WordBool; dispid 94;
    function GetBomBalloonTextStyle(WhichOne: WordBool): Integer; dispid 95;
    function GetBomBalloonText(WhichOne: WordBool): WideString; dispid 96;
    function SetBomBalloonText(UpperTextStyle: Integer; const UpperText: WideString; 
                               LowerTextStyle: Integer; const LowerText: WideString): WordBool; dispid 97;
    property ReadOnly: WordBool dispid 98;
    property PromptText: WideString dispid 99;
    property TagName: WideString dispid 100;
    property Visible: WordBool dispid 101;
    function IsAttribute: WordBool; dispid 102;
    function IsStackedBalloon: WordBool; dispid 103;
    function IsStackedBalloonMaster: WordBool; dispid 104;
    function GetBalloonStack: IBalloonStack; dispid 105;
    property PropertyLinkedText: WideString dispid 106;
    function GetTextPoint2: OleVariant; dispid 107;
    function IGetTextPoint2: IMathPoint; dispid 108;
    property TextRightToLeft: WordBool dispid 109;
    property IsBendLineNote: WordBool readonly dispid 110;
    function GetCompoundTextCount: Integer; dispid 111;
    function GetCompoundTextAtIndex(Index: Integer): WideString; dispid 112;
    property HasMultipleFonts: WordBool readonly dispid 113;
    function GetBendLineValues(var Up: WordBool; var Angle: Double; var Radius: Double; 
                               var StartPt: IMathPoint; var EndPt: IMathPoint): WordBool; dispid 114;
    function GetBendLineValues2(var Up: WordBool; var Angle: Double; var Radius: Double; 
                                var Points: OleVariant): WordBool; dispid 115;
  end;

// *********************************************************************//
// Interface: ITextFormat
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DB9-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ITextFormat = interface(IDispatch)
    ['{83A33DB9-27C5-11CE-BFD4-00400513BB57}']
    function GetAllValues: OleVariant; safecall;
    function IGetAllValues(Count: Integer): Double; safecall;
    function Get_Italic: WordBool; safecall;
    procedure Set_Italic(Italic: WordBool); safecall;
    function Get_Underline: WordBool; safecall;
    procedure Set_Underline(Underline: WordBool); safecall;
    function Get_Strikeout: WordBool; safecall;
    procedure Set_Strikeout(Strikeout: WordBool); safecall;
    function Get_Bold: WordBool; safecall;
    procedure Set_Bold(Bold: WordBool); safecall;
    function Get_Escapement: Double; safecall;
    procedure Set_Escapement(Escapement: Double); safecall;
    function Get_LineSpacing: Double; safecall;
    procedure Set_LineSpacing(Spacing: Double); safecall;
    function Get_CharHeight: Double; safecall;
    procedure Set_CharHeight(Height: Double); safecall;
    function Get_CharHeightInPts: SYSINT; safecall;
    procedure Set_CharHeightInPts(Height: SYSINT); safecall;
    function IsHeightSpecifiedInPts: WordBool; safecall;
    function Get_TypeFaceName: WideString; safecall;
    procedure Set_TypeFaceName(const Name: WideString); safecall;
    function Get_WidthFactor: Double; safecall;
    procedure Set_WidthFactor(Spacing: Double); safecall;
    function Get_ObliqueAngle: Double; safecall;
    procedure Set_ObliqueAngle(ObliqueAngle: Double); safecall;
    function Get_LineLength: Double; safecall;
    procedure Set_LineLength(LineLength: Double); safecall;
    function Get_Vertical: WordBool; safecall;
    procedure Set_Vertical(Vertical: WordBool); safecall;
    function Get_BackWards: WordBool; safecall;
    procedure Set_BackWards(BackWards: WordBool); safecall;
    function Get_UpsideDown: WordBool; safecall;
    procedure Set_UpsideDown(UpsideDown: WordBool); safecall;
    function Get_CharSpacingFactor: Double; safecall;
    procedure Set_CharSpacingFactor(Factor: Double); safecall;
    property Italic: WordBool read Get_Italic write Set_Italic;
    property Underline: WordBool read Get_Underline write Set_Underline;
    property Strikeout: WordBool read Get_Strikeout write Set_Strikeout;
    property Bold: WordBool read Get_Bold write Set_Bold;
    property Escapement: Double read Get_Escapement write Set_Escapement;
    property LineSpacing: Double read Get_LineSpacing write Set_LineSpacing;
    property CharHeight: Double read Get_CharHeight write Set_CharHeight;
    property CharHeightInPts: SYSINT read Get_CharHeightInPts write Set_CharHeightInPts;
    property TypeFaceName: WideString read Get_TypeFaceName write Set_TypeFaceName;
    property WidthFactor: Double read Get_WidthFactor write Set_WidthFactor;
    property ObliqueAngle: Double read Get_ObliqueAngle write Set_ObliqueAngle;
    property LineLength: Double read Get_LineLength write Set_LineLength;
    property Vertical: WordBool read Get_Vertical write Set_Vertical;
    property BackWards: WordBool read Get_BackWards write Set_BackWards;
    property UpsideDown: WordBool read Get_UpsideDown write Set_UpsideDown;
    property CharSpacingFactor: Double read Get_CharSpacingFactor write Set_CharSpacingFactor;
  end;

// *********************************************************************//
// DispIntf:  ITextFormatDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DB9-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ITextFormatDisp = dispinterface
    ['{83A33DB9-27C5-11CE-BFD4-00400513BB57}']
    function GetAllValues: OleVariant; dispid 1;
    function IGetAllValues(Count: Integer): Double; dispid 2;
    property Italic: WordBool dispid 3;
    property Underline: WordBool dispid 4;
    property Strikeout: WordBool dispid 5;
    property Bold: WordBool dispid 6;
    property Escapement: Double dispid 7;
    property LineSpacing: Double dispid 8;
    property CharHeight: Double dispid 9;
    property CharHeightInPts: SYSINT dispid 10;
    function IsHeightSpecifiedInPts: WordBool; dispid 11;
    property TypeFaceName: WideString dispid 12;
    property WidthFactor: Double dispid 13;
    property ObliqueAngle: Double dispid 14;
    property LineLength: Double dispid 15;
    property Vertical: WordBool dispid 16;
    property BackWards: WordBool dispid 17;
    property UpsideDown: WordBool dispid 18;
    property CharSpacingFactor: Double dispid 19;
  end;

// *********************************************************************//
// Interface: IAnnotation
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA9-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAnnotation = interface(IDispatch)
    ['{83A33DA9-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: IAnnotation; safecall;
    function GetDisplayData: IDispatch; safecall;
    function IGetDisplayData: IDisplayData; safecall;
    function GetType: Integer; safecall;
    function GetSpecificAnnotation: IDispatch; safecall;
    function IGetSpecificAnnotation: IUnknown; safecall;
    function GetPosition: OleVariant; safecall;
    function IGetPosition: Double; safecall;
    function SetPosition(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function GetLeaderCount: Integer; safecall;
    function GetLeaderPointsAtIndex(Index: Integer): OleVariant; safecall;
    function IGetLeaderPointsAtIndex(Index: Integer; PointCount: Integer): Double; safecall;
    function GetArrowHeadStyleAtIndex(Index: Integer): Integer; safecall;
    function SetArrowHeadStyleAtIndex(Index: Integer; ArrowHeadStyle: Integer): Integer; safecall;
    function GetLeader: WordBool; safecall;
    function GetBentLeader: WordBool; safecall;
    function GetLeaderSide: Integer; safecall;
    function GetSmartArrowHeadStyle: WordBool; safecall;
    function SetLeader(Leader: WordBool; LeaderSide: Integer; SmartArrowHeadStyle: WordBool; 
                       BentLeader: WordBool): Integer; safecall;
    function GetName: WideString; safecall;
    function SetName(const NameIn: WideString): WordBool; safecall;
    function GetVisualProperties: OleVariant; safecall;
    function IGetVisualProperties: Integer; safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const Retval: WideString); safecall;
    function Get_LayerOverride: SYSINT; safecall;
    procedure Set_LayerOverride(Retval: SYSINT); safecall;
    function Get_Color: Integer; safecall;
    procedure Set_Color(Retval: Integer); safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Retval: Integer); safecall;
    function Get_Width: Integer; safecall;
    procedure Set_Width(Retval: Integer); safecall;
    function IGetAttachedEntityCount: Integer; safecall;
    function GetAttachedEntities: OleVariant; safecall;
    function IGetAttachedEntities: IUnknown; safecall;
    function GetAttachedEntityTypes: OleVariant; safecall;
    function IGetAttachedEntityTypes: Integer; safecall;
    function GetNext2: IDispatch; safecall;
    function IGetNext2: IAnnotation; safecall;
    function Get_Visible: Integer; safecall;
    procedure Set_Visible(Retval: Integer); safecall;
    function GetTextFormatCount: Integer; safecall;
    function GetUseDocTextFormat(Index: Integer): WordBool; safecall;
    function GetTextFormat(Index: Integer): IDispatch; safecall;
    function IGetTextFormat(Index: Integer): ITextFormat; safecall;
    function SetTextFormat(Index: Integer; UseDoc: WordBool; const TextFormat: IDispatch): WordBool; safecall;
    function ISetTextFormat(Index: Integer; UseDoc: WordBool; const TextFormat: ITextFormat): WordBool; safecall;
    function GetLeaderPerpendicular: WordBool; safecall;
    function GetLeaderAllAround: WordBool; safecall;
    function SetLeader2(Leader: WordBool; LeaderSide: Integer; SmartArrowHeadStyle: WordBool; 
                        BentLeader: WordBool; Perpendicular: WordBool; AllAround: WordBool): Integer; safecall;
    function Select(AppendFlag: WordBool): WordBool; safecall;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function Select2(Append: WordBool; Mark: Integer): WordBool; safecall;
    function Select3(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    function GetAttachedEntityCount2: Integer; safecall;
    function GetAttachedEntities2: OleVariant; safecall;
    function Get_Owner: IDispatch; safecall;
    procedure Set_Owner(const LpOwnerDisp: IDispatch); safecall;
    function Get_OwnerType: Integer; safecall;
    procedure Set_OwnerType(NOwnerType: Integer); safecall;
    function GetNext3: IAnnotation; safecall;
    function GetDashedLeader: WordBool; safecall;
    function GetLeaderStyle: Integer; safecall;
    function SetLeader3(LeaderStyle: Integer; LeaderSide: Integer; SmartArrowHeadStyle: WordBool; 
                        Perpendicular: WordBool; AllAround: WordBool; Dashed: WordBool): Integer; safecall;
    function SetAttachedEntities(AttachedEnts: OleVariant): WordBool; safecall;
    function ISetAttachedEntities(Count: Integer; var LpArr: IDispatch): WordBool; safecall;
    function CheckSpelling(Options: Integer; const Dictionary: WideString): OleVariant; safecall;
    function ConvertToMultiJog(LeaderNumber: Integer; NumberOfPoints: Integer; 
                               PointsData: OleVariant): WordBool; safecall;
    function Get_AnnotationView: IAnnotationView; safecall;
    function GetAttachedEntityCount3: Integer; safecall;
    function GetAttachedEntities3: OleVariant; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadSizeAtIndex(Index: Integer; var UseDoc: WordBool; var Length: Double; 
                                     var Width: Double; var Height: Double): WordBool; safecall;
    function SetArrowHeadSizeAtIndex(Index: Integer; UseDoc: WordBool; Length: Double; 
                                     Width: Double; Height: Double): WordBool; safecall;
    function GetMultiJogLeaderCount: Integer; safecall;
    function GetMultiJogLeaders: OleVariant; safecall;
    function IGetMultiJogLeaders(Count: Integer): IMultiJogLeader; safecall;
    property Layer: WideString read Get_Layer write Set_Layer;
    property LayerOverride: SYSINT read Get_LayerOverride write Set_LayerOverride;
    property Color: Integer read Get_Color write Set_Color;
    property Style: Integer read Get_Style write Set_Style;
    property Width: Integer read Get_Width write Set_Width;
    property Visible: Integer read Get_Visible write Set_Visible;
    property Owner: IDispatch read Get_Owner write Set_Owner;
    property OwnerType: Integer read Get_OwnerType write Set_OwnerType;
    property AnnotationView: IAnnotationView read Get_AnnotationView;
  end;

// *********************************************************************//
// DispIntf:  IAnnotationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA9-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAnnotationDisp = dispinterface
    ['{83A33DA9-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: IAnnotation; dispid 2;
    function GetDisplayData: IDispatch; dispid 3;
    function IGetDisplayData: IDisplayData; dispid 4;
    function GetType: Integer; dispid 5;
    function GetSpecificAnnotation: IDispatch; dispid 6;
    function IGetSpecificAnnotation: IUnknown; dispid 7;
    function GetPosition: OleVariant; dispid 8;
    function IGetPosition: Double; dispid 9;
    function SetPosition(X: Double; Y: Double; Z: Double): WordBool; dispid 10;
    function GetLeaderCount: Integer; dispid 11;
    function GetLeaderPointsAtIndex(Index: Integer): OleVariant; dispid 12;
    function IGetLeaderPointsAtIndex(Index: Integer; PointCount: Integer): Double; dispid 13;
    function GetArrowHeadStyleAtIndex(Index: Integer): Integer; dispid 14;
    function SetArrowHeadStyleAtIndex(Index: Integer; ArrowHeadStyle: Integer): Integer; dispid 15;
    function GetLeader: WordBool; dispid 16;
    function GetBentLeader: WordBool; dispid 17;
    function GetLeaderSide: Integer; dispid 18;
    function GetSmartArrowHeadStyle: WordBool; dispid 19;
    function SetLeader(Leader: WordBool; LeaderSide: Integer; SmartArrowHeadStyle: WordBool; 
                       BentLeader: WordBool): Integer; dispid 20;
    function GetName: WideString; dispid 21;
    function SetName(const NameIn: WideString): WordBool; dispid 22;
    function GetVisualProperties: OleVariant; dispid 23;
    function IGetVisualProperties: Integer; dispid 24;
    property Layer: WideString dispid 25;
    property LayerOverride: SYSINT dispid 26;
    property Color: Integer dispid 27;
    property Style: Integer dispid 28;
    property Width: Integer dispid 29;
    function IGetAttachedEntityCount: Integer; dispid 30;
    function GetAttachedEntities: OleVariant; dispid 31;
    function IGetAttachedEntities: IUnknown; dispid 32;
    function GetAttachedEntityTypes: OleVariant; dispid 33;
    function IGetAttachedEntityTypes: Integer; dispid 34;
    function GetNext2: IDispatch; dispid 35;
    function IGetNext2: IAnnotation; dispid 36;
    property Visible: Integer dispid 37;
    function GetTextFormatCount: Integer; dispid 38;
    function GetUseDocTextFormat(Index: Integer): WordBool; dispid 39;
    function GetTextFormat(Index: Integer): IDispatch; dispid 40;
    function IGetTextFormat(Index: Integer): ITextFormat; dispid 41;
    function SetTextFormat(Index: Integer; UseDoc: WordBool; const TextFormat: IDispatch): WordBool; dispid 42;
    function ISetTextFormat(Index: Integer; UseDoc: WordBool; const TextFormat: ITextFormat): WordBool; dispid 43;
    function GetLeaderPerpendicular: WordBool; dispid 44;
    function GetLeaderAllAround: WordBool; dispid 45;
    function SetLeader2(Leader: WordBool; LeaderSide: Integer; SmartArrowHeadStyle: WordBool; 
                        BentLeader: WordBool; Perpendicular: WordBool; AllAround: WordBool): Integer; dispid 46;
    function Select(AppendFlag: WordBool): WordBool; dispid 47;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; dispid 48;
    function DeSelect: WordBool; dispid 49;
    function Select2(Append: WordBool; Mark: Integer): WordBool; dispid 50;
    function Select3(Append: WordBool; const Data: ISelectData): WordBool; dispid 51;
    function GetAttachedEntityCount2: Integer; dispid 52;
    function GetAttachedEntities2: OleVariant; dispid 53;
    property Owner: IDispatch dispid 54;
    property OwnerType: Integer dispid 55;
    function GetNext3: IAnnotation; dispid 56;
    function GetDashedLeader: WordBool; dispid 57;
    function GetLeaderStyle: Integer; dispid 58;
    function SetLeader3(LeaderStyle: Integer; LeaderSide: Integer; SmartArrowHeadStyle: WordBool; 
                        Perpendicular: WordBool; AllAround: WordBool; Dashed: WordBool): Integer; dispid 59;
    function SetAttachedEntities(AttachedEnts: OleVariant): WordBool; dispid 60;
    function ISetAttachedEntities(Count: Integer; var LpArr: IDispatch): WordBool; dispid 61;
    function CheckSpelling(Options: Integer; const Dictionary: WideString): OleVariant; dispid 62;
    function ConvertToMultiJog(LeaderNumber: Integer; NumberOfPoints: Integer; 
                               PointsData: OleVariant): WordBool; dispid 63;
    property AnnotationView: IAnnotationView readonly dispid 64;
    function GetAttachedEntityCount3: Integer; dispid 65;
    function GetAttachedEntities3: OleVariant; dispid 66;
    function GetArrowHeadCount: Integer; dispid 67;
    function GetArrowHeadSizeAtIndex(Index: Integer; var UseDoc: WordBool; var Length: Double; 
                                     var Width: Double; var Height: Double): WordBool; dispid 68;
    function SetArrowHeadSizeAtIndex(Index: Integer; UseDoc: WordBool; Length: Double; 
                                     Width: Double; Height: Double): WordBool; dispid 69;
    function GetMultiJogLeaderCount: Integer; dispid 70;
    function GetMultiJogLeaders: OleVariant; dispid 71;
    function IGetMultiJogLeaders(Count: Integer): IMultiJogLeader; dispid 72;
  end;

// *********************************************************************//
// Interface: IDisplayData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D9C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDisplayData = interface(IDispatch)
    ['{83A33D9C-27C5-11CE-BFD4-00400513BB57}']
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(Index: Integer): WideString; safecall;
    function GetTextHeightAtIndex(Index: Integer): Double; safecall;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(Index: Integer): Double; safecall;
    function GetTextAngleAtIndex(Index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(Index: Integer): Integer; safecall;
    function GetTextFontAtIndex(Index: Integer): WideString; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(Index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(Index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(Index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(Index: Integer): Double; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(Index: Integer): Double; safecall;
    function GetPolyLineCount: Integer; safecall;
    function GetPolylineSizeAtIndex(Index: Integer): Integer; safecall;
    function GetPolylineAtIndex(Index: Integer): OleVariant; safecall;
    function IGetPolylineAtIndex(Index: Integer): Double; safecall;
    function GetEllipseCount: Integer; safecall;
    function GetEllipseAtIndex(Index: Integer): OleVariant; safecall;
    function IGetEllipseAtIndex(Index: Integer): Double; safecall;
    function GetTextLineSpacingAtIndex(Index: Integer): Double; safecall;
    function GetLineAtIndex2(Index: Integer): OleVariant; safecall;
    function IGetLineAtIndex2(Index: Integer): Double; safecall;
    function GetArcAtIndex2(Index: Integer): OleVariant; safecall;
    function IGetArcAtIndex2(Index: Integer): Double; safecall;
    function GetPolylineSizeAtIndex2(Index: Integer): Integer; safecall;
    function GetPolylineAtIndex2(Index: Integer): OleVariant; safecall;
    function IGetPolylineAtIndex2(Index: Integer): Double; safecall;
    function GetEllipseAtIndex2(Index: Integer): OleVariant; safecall;
    function IGetEllipseAtIndex2(Index: Integer): Double; safecall;
    procedure Dummy1; safecall;
    procedure Dummy2; safecall;
    procedure Dummy3; safecall;
    procedure Dummy4; safecall;
    function GetParabolaCount: Integer; safecall;
    function GetParabolaAtIndex(Index: Integer): OleVariant; safecall;
    function IGetParabolaAtIndex(Index: Integer): Double; safecall;
    function GetPolygonCount: Integer; safecall;
    function GetPolygonSizeAtIndex(Index: Integer): Integer; safecall;
    function GetPolygonAtIndex(Index: Integer): OleVariant; safecall;
    function IGetPolygonAtIndex(Index: Integer): Double; safecall;
    function GetTextInBoxStyleAtIndex(Index: Integer): Integer; safecall;
    function GetTextInBoxWidthAtIndex(Index: Integer): Double; safecall;
    function GetTextInBoxHeightAtIndex(Index: Integer): Double; safecall;
    function GetLineAtIndex3(Index: Integer): OleVariant; safecall;
    function IGetLineAtIndex3(Index: Integer): Double; safecall;
  end;

// *********************************************************************//
// DispIntf:  IDisplayDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D9C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDisplayDataDisp = dispinterface
    ['{83A33D9C-27C5-11CE-BFD4-00400513BB57}']
    function GetTextCount: Integer; dispid 1;
    function GetTextAtIndex(Index: Integer): WideString; dispid 2;
    function GetTextHeightAtIndex(Index: Integer): Double; dispid 3;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; dispid 4;
    function IGetTextPositionAtIndex(Index: Integer): Double; dispid 5;
    function GetTextAngleAtIndex(Index: Integer): Double; dispid 6;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; dispid 7;
    function GetTextInvertAtIndex(Index: Integer): Integer; dispid 8;
    function GetTextFontAtIndex(Index: Integer): WideString; dispid 9;
    function GetLineCount: Integer; dispid 10;
    function GetLineAtIndex(Index: Integer): OleVariant; dispid 11;
    function IGetLineAtIndex(Index: Integer): Double; dispid 12;
    function GetArcCount: Integer; dispid 13;
    function GetArcAtIndex(Index: Integer): OleVariant; dispid 14;
    function IGetArcAtIndex(Index: Integer): Double; dispid 15;
    function GetArrowHeadCount: Integer; dispid 16;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; dispid 17;
    function IGetArrowHeadAtIndex(Index: Integer): Double; dispid 18;
    function GetTriangleCount: Integer; dispid 19;
    function GetTriangleAtIndex(Index: Integer): OleVariant; dispid 20;
    function IGetTriangleAtIndex(Index: Integer): Double; dispid 21;
    function GetPolyLineCount: Integer; dispid 22;
    function GetPolylineSizeAtIndex(Index: Integer): Integer; dispid 23;
    function GetPolylineAtIndex(Index: Integer): OleVariant; dispid 24;
    function IGetPolylineAtIndex(Index: Integer): Double; dispid 25;
    function GetEllipseCount: Integer; dispid 26;
    function GetEllipseAtIndex(Index: Integer): OleVariant; dispid 27;
    function IGetEllipseAtIndex(Index: Integer): Double; dispid 28;
    function GetTextLineSpacingAtIndex(Index: Integer): Double; dispid 29;
    function GetLineAtIndex2(Index: Integer): OleVariant; dispid 30;
    function IGetLineAtIndex2(Index: Integer): Double; dispid 31;
    function GetArcAtIndex2(Index: Integer): OleVariant; dispid 32;
    function IGetArcAtIndex2(Index: Integer): Double; dispid 33;
    function GetPolylineSizeAtIndex2(Index: Integer): Integer; dispid 34;
    function GetPolylineAtIndex2(Index: Integer): OleVariant; dispid 35;
    function IGetPolylineAtIndex2(Index: Integer): Double; dispid 36;
    function GetEllipseAtIndex2(Index: Integer): OleVariant; dispid 37;
    function IGetEllipseAtIndex2(Index: Integer): Double; dispid 38;
    procedure Dummy1; dispid 39;
    procedure Dummy2; dispid 40;
    procedure Dummy3; dispid 41;
    procedure Dummy4; dispid 42;
    function GetParabolaCount: Integer; dispid 43;
    function GetParabolaAtIndex(Index: Integer): OleVariant; dispid 44;
    function IGetParabolaAtIndex(Index: Integer): Double; dispid 45;
    function GetPolygonCount: Integer; dispid 46;
    function GetPolygonSizeAtIndex(Index: Integer): Integer; dispid 47;
    function GetPolygonAtIndex(Index: Integer): OleVariant; dispid 48;
    function IGetPolygonAtIndex(Index: Integer): Double; dispid 49;
    function GetTextInBoxStyleAtIndex(Index: Integer): Integer; dispid 50;
    function GetTextInBoxWidthAtIndex(Index: Integer): Double; dispid 51;
    function GetTextInBoxHeightAtIndex(Index: Integer): Double; dispid 52;
    function GetLineAtIndex3(Index: Integer): OleVariant; dispid 53;
    function IGetLineAtIndex3(Index: Integer): Double; dispid 54;
  end;

// *********************************************************************//
// Interface: IAnnotationView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {78D7FDA3-83D7-4C01-9E54-73AB4827CC4E}
// *********************************************************************//
  IAnnotationView = interface(IDispatch)
    ['{78D7FDA3-83D7-4C01-9E54-73AB4827CC4E}']
    function Get_AnnotationCount: Integer; safecall;
    function Get_Annotations: OleVariant; safecall;
    function IGetAnnotations(AnnotationCount: Integer): IAnnotation; safecall;
    function Get_AngleMadeWithViewHorizontal: Double; safecall;
    function Activate: WordBool; safecall;
    function ActivateAndReorient: WordBool; safecall;
    function Show: WordBool; safecall;
    function Hide: WordBool; safecall;
    function MoveAnnotations(AnnotationsToMove: OleVariant): WordBool; safecall;
    function Orient: WordBool; safecall;
    function GetViewRotation: OleVariant; safecall;
    function IGetViewRotation: Double; safecall;
    property AnnotationCount: Integer read Get_AnnotationCount;
    property Annotations: OleVariant read Get_Annotations;
    property AngleMadeWithViewHorizontal: Double read Get_AngleMadeWithViewHorizontal;
  end;

// *********************************************************************//
// DispIntf:  IAnnotationViewDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {78D7FDA3-83D7-4C01-9E54-73AB4827CC4E}
// *********************************************************************//
  IAnnotationViewDisp = dispinterface
    ['{78D7FDA3-83D7-4C01-9E54-73AB4827CC4E}']
    property AnnotationCount: Integer readonly dispid 1;
    property Annotations: OleVariant readonly dispid 2;
    function IGetAnnotations(AnnotationCount: Integer): IAnnotation; dispid 3;
    property AngleMadeWithViewHorizontal: Double readonly dispid 4;
    function Activate: WordBool; dispid 5;
    function ActivateAndReorient: WordBool; dispid 6;
    function Show: WordBool; dispid 7;
    function Hide: WordBool; dispid 8;
    function MoveAnnotations(AnnotationsToMove: OleVariant): WordBool; dispid 9;
    function Orient: WordBool; dispid 10;
    function GetViewRotation: OleVariant; dispid 11;
    function IGetViewRotation: Double; dispid 12;
  end;

// *********************************************************************//
// Interface: IMultiJogLeader
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {01EB5266-6CA9-4F59-B0B4-A040DD1CCFB6}
// *********************************************************************//
  IMultiJogLeader = interface(IDispatch)
    ['{01EB5266-6CA9-4F59-B0B4-A040DD1CCFB6}']
    function GetNext: IDispatch; safecall;
    function IGetNext: IMultiJogLeader; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(Index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(Index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(Index: Integer): Double; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function GetDisplayData: IDispatch; safecall;
    function IGetDisplayData: IDisplayData; safecall;
  end;

// *********************************************************************//
// DispIntf:  IMultiJogLeaderDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {01EB5266-6CA9-4F59-B0B4-A040DD1CCFB6}
// *********************************************************************//
  IMultiJogLeaderDisp = dispinterface
    ['{01EB5266-6CA9-4F59-B0B4-A040DD1CCFB6}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: IMultiJogLeader; dispid 2;
    function GetLineCount: Integer; dispid 3;
    function GetLineAtIndex(Index: Integer): OleVariant; dispid 4;
    function IGetLineAtIndex(Index: Integer): Double; dispid 5;
    function GetArrowHeadCount: Integer; dispid 6;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; dispid 7;
    function IGetArrowHeadAtIndex(Index: Integer): Double; dispid 8;
    function GetAnnotation: IDispatch; dispid 9;
    function IGetAnnotation: IAnnotation; dispid 10;
    function GetDisplayData: IDispatch; dispid 11;
    function IGetDisplayData: IDisplayData; dispid 12;
  end;

// *********************************************************************//
// Interface: IBalloonStack
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4944F9E6-BF50-11D5-AF56-00C04F603FAF}
// *********************************************************************//
  IBalloonStack = interface(IDispatch)
    ['{4944F9E6-BF50-11D5-AF56-00C04F603FAF}']
    function Get_Master: INote; safecall;
    function Get_Count: Integer; safecall;
    function Get_Stack: OleVariant; safecall;
    function IGetStack(Count: Integer): INote; safecall;
    function Get_Length: Integer; safecall;
    procedure Set_Length(Length: Integer); safecall;
    function Get_Direction: Integer; safecall;
    procedure Set_Direction(Direction: Integer); safecall;
    function AddTo(UpperTextStyle: Integer; const UpperText: WideString; LowerTextStyle: Integer; 
                   const LowerText: WideString): INote; safecall;
    property Master: INote read Get_Master;
    property Count: Integer read Get_Count;
    property Stack: OleVariant read Get_Stack;
    property Length: Integer read Get_Length write Set_Length;
    property Direction: Integer read Get_Direction write Set_Direction;
  end;

// *********************************************************************//
// DispIntf:  IBalloonStackDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4944F9E6-BF50-11D5-AF56-00C04F603FAF}
// *********************************************************************//
  IBalloonStackDisp = dispinterface
    ['{4944F9E6-BF50-11D5-AF56-00C04F603FAF}']
    property Master: INote readonly dispid 1;
    property Count: Integer readonly dispid 2;
    property Stack: OleVariant readonly dispid 3;
    function IGetStack(Count: Integer): INote; dispid 4;
    property Length: Integer dispid 5;
    property Direction: Integer dispid 6;
    function AddTo(UpperTextStyle: Integer; const UpperText: WideString; LowerTextStyle: Integer; 
                   const LowerText: WideString): INote; dispid 7;
  end;

// *********************************************************************//
// Interface: IGtol
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D4A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IGtol = interface(IDispatch)
    ['{83A33D4A-27C5-11CE-BFD4-00400513BB57}']
    procedure SetFrameValues(FrameNumber: Smallint; const Tol1: WideString; const Tol2: WideString; 
                             const Datum1: WideString; const Datum2: WideString; 
                             const Datum3: WideString); safecall;
    procedure SetFrameSymbols(FrameNumber: Smallint; GCS: Smallint; TolDia1: WordBool; 
                              TolMC1: Smallint; TolDia2: WordBool; TolMC2: Smallint; 
                              DatumMC1: Smallint; DatumMC2: Smallint; DatumMC3: Smallint); safecall;
    procedure SetPTZHeight(const PtzHt: WideString; DisplayIn: WordBool); safecall;
    procedure SetDatumIdentifier(const DatumIdentifier: WideString); safecall;
    function GetNextGTOL: IDispatch; safecall;
    function IGetNextGTOL: IGtol; safecall;
    function GetFrameValues(FrameNumber: Smallint): OleVariant; safecall;
    function GetFrameSymbols(FrameNumber: Smallint): OleVariant; safecall;
    function GetPTZHeight: WideString; safecall;
    function GetDatumIdentifier: WideString; safecall;
    function GetHeight: Double; safecall;
    function GetAttachPos: OleVariant; safecall;
    function GetFontInfo: OleVariant; safecall;
    function GetLeaderInfo: OleVariant; safecall;
    function IsAttached: WordBool; safecall;
    function HasExtraLeader: WordBool; safecall;
    procedure Dummy1; safecall;
    procedure Dummy2; safecall;
    function GetTextPoint: OleVariant; safecall;
    function GetArrowHeadInfo: OleVariant; safecall;
    function IGetAttachPos: Double; safecall;
    function IGetFontInfo: Double; safecall;
    function IGetLeaderInfo(out PointCount: Integer): Double; safecall;
    procedure Dummy3; safecall;
    function IGetTextPoint: Double; safecall;
    function IGetArrowHeadInfo: Double; safecall;
    function GetSymName(SymIdx: Smallint): WideString; safecall;
    function GetSymDesc(SymIdx: Smallint): WideString; safecall;
    function GetSymText(SymIdx: Smallint): OleVariant; safecall;
    function GetSymEdgeCounts(SymIdx: Smallint): OleVariant; safecall;
    function GetSymLines(SymIdx: Smallint): OleVariant; safecall;
    function GetSymArcs(SymIdx: Smallint): OleVariant; safecall;
    function GetSymCircles(SymIdx: Smallint): OleVariant; safecall;
    function GetSymTextPoints(SymIdx: Smallint): OleVariant; safecall;
    function IGetSymEdgeCounts(SymIdx: Smallint): Smallint; safecall;
    function IGetSymLines(SymIdx: Smallint): Double; safecall;
    function IGetSymArcs(SymIdx: Smallint): Double; safecall;
    function IGetSymCircles(SymIdx: Smallint): Double; safecall;
    function IGetSymTextPoints(SymIdx: Smallint): Double; safecall;
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(Index: Integer): WideString; safecall;
    function GetTextHeightAtIndex(Index: Integer): Double; safecall;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(Index: Integer): Double; safecall;
    function GetTextAngleAtIndex(Index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(Index: Integer): Integer; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(Index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(Index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(Index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(Index: Integer): Double; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(Index: Integer): Double; safecall;
    function IGetFrameValues(FrameNumber: Smallint): WideString; safecall;
    function IGetFrameSymbols(FrameNumber: Smallint): Smallint; safecall;
    function IGetSymText(SymIdx: Smallint): WideString; safecall;
    procedure SetFrameSymbols2(FrameNumber: Smallint; const GCS: WideString; TolDia1: WordBool; 
                               const TolMC1: WideString; TolDia2: WordBool; 
                               const TolMC2: WideString; const DatumMC1: WideString; 
                               const DatumMC2: WideString; const DatumMC3: WideString); safecall;
    function GetTextFont: WideString; safecall;
    function GetLeaderCount: Integer; safecall;
    function GetLeaderAtIndex(Index: Integer): OleVariant; safecall;
    function IGetLeaderAtIndex(Index: Integer; out PointCount: Integer): Double; safecall;
    procedure SetPosition(X: Double; Y: Double; Z: Double); safecall;
    function GetUseDocTextFormat: WordBool; safecall;
    function GetTextFormat: IDispatch; safecall;
    function IGetTextFormat: ITextFormat; safecall;
    function SetTextFormat(TextFormatType: Integer; const TextFormat: IDispatch): WordBool; safecall;
    function ISetTextFormat(TextFormatType: Integer; const TextFormat: ITextFormat): WordBool; safecall;
    function GetCompositeFrame: WordBool; safecall;
    procedure SetCompositeFrame(Composite: WordBool); safecall;
    function GetBetweenTwoPoints: WordBool; safecall;
    function GetBetweenTwoPointsText(Index: Integer): WideString; safecall;
    procedure SetBetweenTwoPoints(Between: WordBool; const TextFrom: WideString; 
                                  const TextTo: WideString); safecall;
    function GetAllAround: WordBool; safecall;
    function GetLeaderSide: Integer; safecall;
    procedure SetLeader(Leader: WordBool; LeaderSide: Integer; BentLeader: WordBool; 
                        AllAround: WordBool); safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function GetFrameSymbols2(FrameNumber: Smallint): OleVariant; safecall;
    function IGetFrameSymbols2(FrameNumber: Smallint): WideString; safecall;
    function GetFrameDiameterSymbols(FrameNumber: Smallint): OleVariant; safecall;
    function IGetFrameDiameterSymbols(FrameNumber: Smallint): WordBool; safecall;
    function GetFrameCount: Smallint; safecall;
    function GetLeaderAtIndex2(Index: Integer): OleVariant; safecall;
    function IGetLeaderAtIndex2(Index: Integer; var PointCount: Integer): Double; safecall;
  end;

// *********************************************************************//
// DispIntf:  IGtolDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D4A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IGtolDisp = dispinterface
    ['{83A33D4A-27C5-11CE-BFD4-00400513BB57}']
    procedure SetFrameValues(FrameNumber: Smallint; const Tol1: WideString; const Tol2: WideString; 
                             const Datum1: WideString; const Datum2: WideString; 
                             const Datum3: WideString); dispid 1;
    procedure SetFrameSymbols(FrameNumber: Smallint; GCS: Smallint; TolDia1: WordBool; 
                              TolMC1: Smallint; TolDia2: WordBool; TolMC2: Smallint; 
                              DatumMC1: Smallint; DatumMC2: Smallint; DatumMC3: Smallint); dispid 2;
    procedure SetPTZHeight(const PtzHt: WideString; DisplayIn: WordBool); dispid 3;
    procedure SetDatumIdentifier(const DatumIdentifier: WideString); dispid 4;
    function GetNextGTOL: IDispatch; dispid 5;
    function IGetNextGTOL: IGtol; dispid 6;
    function GetFrameValues(FrameNumber: Smallint): OleVariant; dispid 7;
    function GetFrameSymbols(FrameNumber: Smallint): OleVariant; dispid 8;
    function GetPTZHeight: WideString; dispid 9;
    function GetDatumIdentifier: WideString; dispid 10;
    function GetHeight: Double; dispid 11;
    function GetAttachPos: OleVariant; dispid 12;
    function GetFontInfo: OleVariant; dispid 13;
    function GetLeaderInfo: OleVariant; dispid 14;
    function IsAttached: WordBool; dispid 15;
    function HasExtraLeader: WordBool; dispid 16;
    procedure Dummy1; dispid 17;
    procedure Dummy2; dispid 18;
    function GetTextPoint: OleVariant; dispid 19;
    function GetArrowHeadInfo: OleVariant; dispid 20;
    function IGetAttachPos: Double; dispid 21;
    function IGetFontInfo: Double; dispid 22;
    function IGetLeaderInfo(out PointCount: Integer): Double; dispid 23;
    procedure Dummy3; dispid 24;
    function IGetTextPoint: Double; dispid 25;
    function IGetArrowHeadInfo: Double; dispid 26;
    function GetSymName(SymIdx: Smallint): WideString; dispid 27;
    function GetSymDesc(SymIdx: Smallint): WideString; dispid 28;
    function GetSymText(SymIdx: Smallint): OleVariant; dispid 29;
    function GetSymEdgeCounts(SymIdx: Smallint): OleVariant; dispid 30;
    function GetSymLines(SymIdx: Smallint): OleVariant; dispid 31;
    function GetSymArcs(SymIdx: Smallint): OleVariant; dispid 32;
    function GetSymCircles(SymIdx: Smallint): OleVariant; dispid 33;
    function GetSymTextPoints(SymIdx: Smallint): OleVariant; dispid 34;
    function IGetSymEdgeCounts(SymIdx: Smallint): Smallint; dispid 35;
    function IGetSymLines(SymIdx: Smallint): Double; dispid 36;
    function IGetSymArcs(SymIdx: Smallint): Double; dispid 37;
    function IGetSymCircles(SymIdx: Smallint): Double; dispid 38;
    function IGetSymTextPoints(SymIdx: Smallint): Double; dispid 39;
    function GetTextCount: Integer; dispid 40;
    function GetTextAtIndex(Index: Integer): WideString; dispid 41;
    function GetTextHeightAtIndex(Index: Integer): Double; dispid 42;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; dispid 43;
    function IGetTextPositionAtIndex(Index: Integer): Double; dispid 44;
    function GetTextAngleAtIndex(Index: Integer): Double; dispid 45;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; dispid 46;
    function GetTextInvertAtIndex(Index: Integer): Integer; dispid 47;
    function GetLineCount: Integer; dispid 48;
    function GetLineAtIndex(Index: Integer): OleVariant; dispid 49;
    function IGetLineAtIndex(Index: Integer): Double; dispid 50;
    function GetArcCount: Integer; dispid 51;
    function GetArcAtIndex(Index: Integer): OleVariant; dispid 52;
    function IGetArcAtIndex(Index: Integer): Double; dispid 53;
    function GetArrowHeadCount: Integer; dispid 54;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; dispid 55;
    function IGetArrowHeadAtIndex(Index: Integer): Double; dispid 56;
    function GetTriangleCount: Integer; dispid 57;
    function GetTriangleAtIndex(Index: Integer): OleVariant; dispid 58;
    function IGetTriangleAtIndex(Index: Integer): Double; dispid 59;
    function IGetFrameValues(FrameNumber: Smallint): WideString; dispid 60;
    function IGetFrameSymbols(FrameNumber: Smallint): Smallint; dispid 61;
    function IGetSymText(SymIdx: Smallint): WideString; dispid 62;
    procedure SetFrameSymbols2(FrameNumber: Smallint; const GCS: WideString; TolDia1: WordBool; 
                               const TolMC1: WideString; TolDia2: WordBool; 
                               const TolMC2: WideString; const DatumMC1: WideString; 
                               const DatumMC2: WideString; const DatumMC3: WideString); dispid 63;
    function GetTextFont: WideString; dispid 64;
    function GetLeaderCount: Integer; dispid 65;
    function GetLeaderAtIndex(Index: Integer): OleVariant; dispid 66;
    function IGetLeaderAtIndex(Index: Integer; out PointCount: Integer): Double; dispid 67;
    procedure SetPosition(X: Double; Y: Double; Z: Double); dispid 68;
    function GetUseDocTextFormat: WordBool; dispid 69;
    function GetTextFormat: IDispatch; dispid 70;
    function IGetTextFormat: ITextFormat; dispid 71;
    function SetTextFormat(TextFormatType: Integer; const TextFormat: IDispatch): WordBool; dispid 72;
    function ISetTextFormat(TextFormatType: Integer; const TextFormat: ITextFormat): WordBool; dispid 73;
    function GetCompositeFrame: WordBool; dispid 74;
    procedure SetCompositeFrame(Composite: WordBool); dispid 75;
    function GetBetweenTwoPoints: WordBool; dispid 76;
    function GetBetweenTwoPointsText(Index: Integer): WideString; dispid 77;
    procedure SetBetweenTwoPoints(Between: WordBool; const TextFrom: WideString; 
                                  const TextTo: WideString); dispid 78;
    function GetAllAround: WordBool; dispid 79;
    function GetLeaderSide: Integer; dispid 80;
    procedure SetLeader(Leader: WordBool; LeaderSide: Integer; BentLeader: WordBool; 
                        AllAround: WordBool); dispid 81;
    function GetAnnotation: IDispatch; dispid 82;
    function IGetAnnotation: IAnnotation; dispid 83;
    function GetFrameSymbols2(FrameNumber: Smallint): OleVariant; dispid 84;
    function IGetFrameSymbols2(FrameNumber: Smallint): WideString; dispid 85;
    function GetFrameDiameterSymbols(FrameNumber: Smallint): OleVariant; dispid 86;
    function IGetFrameDiameterSymbols(FrameNumber: Smallint): WordBool; dispid 87;
    function GetFrameCount: Smallint; dispid 88;
    function GetLeaderAtIndex2(Index: Integer): OleVariant; dispid 89;
    function IGetLeaderAtIndex2(Index: Integer; var PointCount: Integer): Double; dispid 90;
  end;

// *********************************************************************//
// Interface: ISFSymbol
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D8E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISFSymbol = interface(IDispatch)
    ['{83A33D8E-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: ISFSymbol; safecall;
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(Index: Integer): WideString; safecall;
    function GetTextHeightAtIndex(Index: Integer): Double; safecall;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(Index: Integer): Double; safecall;
    function GetTextAngleAtIndex(Index: Integer): Double; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(Index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(Index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(Index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(Index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(Index: Integer): Integer; safecall;
    function GetTextFontAtIndex(Index: Integer): WideString; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(Index: Integer): Double; safecall;
    function IsAttached: WordBool; safecall;
    function HasExtraLeader: WordBool; safecall;
    function GetLeaderCount: Integer; safecall;
    function GetLeaderAtIndex(Index: Integer): OleVariant; safecall;
    function IGetLeaderAtIndex(Index: Integer; out PointCount: Integer): Double; safecall;
    function IGetArrowHeadInfo: Double; safecall;
    function GetArrowHeadInfo: OleVariant; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function GetSymbolType: Integer; safecall;
    function SetSymbolType(SymbolType: Integer): WordBool; safecall;
    function GetDirectionOfLay: Integer; safecall;
    function SetDirectionOfLay(Direction: Integer): WordBool; safecall;
    function GetText(WhichOne: Integer): WideString; safecall;
    function SetText(WhichOne: Integer; const Text: WideString): WordBool; safecall;
    function Get_Rotated: WordBool; safecall;
    procedure Set_Rotated(Retval: WordBool); safecall;
    function Get_Grinding: WordBool; safecall;
    procedure Set_Grinding(Retval: WordBool); safecall;
    function GetAngle: Double; safecall;
    function SetAngle(Angle: Double): WordBool; safecall;
    function Get_Orientation: Integer; safecall;
    procedure Set_Orientation(Orientation: Integer); safecall;
    function GetSymbol: Integer; safecall;
    function GetSymbolSurfaceTexture: Integer; safecall;
    function GetSymbolAllAround: WordBool; safecall;
    function SetSymbol(Symbol: Integer; SurfaceTexture: Integer; AllAround: WordBool): WordBool; safecall;
    function Get_GOSTNotation: WordBool; safecall;
    procedure Set_GOSTNotation(Notation: WordBool); safecall;
    function Get_GOSTDefaultSymbol: WordBool; safecall;
    procedure Set_GOSTDefaultSymbol(DefaultSym: WordBool); safecall;
    property Rotated: WordBool read Get_Rotated write Set_Rotated;
    property Grinding: WordBool read Get_Grinding write Set_Grinding;
    property Orientation: Integer read Get_Orientation write Set_Orientation;
    property GOSTNotation: WordBool read Get_GOSTNotation write Set_GOSTNotation;
    property GOSTDefaultSymbol: WordBool read Get_GOSTDefaultSymbol write Set_GOSTDefaultSymbol;
  end;

// *********************************************************************//
// DispIntf:  ISFSymbolDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D8E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISFSymbolDisp = dispinterface
    ['{83A33D8E-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: ISFSymbol; dispid 2;
    function GetTextCount: Integer; dispid 3;
    function GetTextAtIndex(Index: Integer): WideString; dispid 4;
    function GetTextHeightAtIndex(Index: Integer): Double; dispid 5;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; dispid 6;
    function IGetTextPositionAtIndex(Index: Integer): Double; dispid 7;
    function GetTextAngleAtIndex(Index: Integer): Double; dispid 8;
    function GetLineCount: Integer; dispid 9;
    function GetLineAtIndex(Index: Integer): OleVariant; dispid 10;
    function IGetLineAtIndex(Index: Integer): Double; dispid 11;
    function GetArcCount: Integer; dispid 12;
    function GetArcAtIndex(Index: Integer): OleVariant; dispid 13;
    function IGetArcAtIndex(Index: Integer): Double; dispid 14;
    function GetArrowHeadCount: Integer; dispid 15;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; dispid 16;
    function IGetArrowHeadAtIndex(Index: Integer): Double; dispid 17;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; dispid 18;
    function GetTextInvertAtIndex(Index: Integer): Integer; dispid 19;
    function GetTextFontAtIndex(Index: Integer): WideString; dispid 20;
    function GetTriangleCount: Integer; dispid 21;
    function GetTriangleAtIndex(Index: Integer): OleVariant; dispid 22;
    function IGetTriangleAtIndex(Index: Integer): Double; dispid 23;
    function IsAttached: WordBool; dispid 24;
    function HasExtraLeader: WordBool; dispid 25;
    function GetLeaderCount: Integer; dispid 26;
    function GetLeaderAtIndex(Index: Integer): OleVariant; dispid 27;
    function IGetLeaderAtIndex(Index: Integer; out PointCount: Integer): Double; dispid 28;
    function IGetArrowHeadInfo: Double; dispid 29;
    function GetArrowHeadInfo: OleVariant; dispid 30;
    function GetAnnotation: IDispatch; dispid 31;
    function IGetAnnotation: IAnnotation; dispid 32;
    function GetSymbolType: Integer; dispid 33;
    function SetSymbolType(SymbolType: Integer): WordBool; dispid 34;
    function GetDirectionOfLay: Integer; dispid 35;
    function SetDirectionOfLay(Direction: Integer): WordBool; dispid 36;
    function GetText(WhichOne: Integer): WideString; dispid 37;
    function SetText(WhichOne: Integer; const Text: WideString): WordBool; dispid 38;
    property Rotated: WordBool dispid 39;
    property Grinding: WordBool dispid 40;
    function GetAngle: Double; dispid 41;
    function SetAngle(Angle: Double): WordBool; dispid 42;
    property Orientation: Integer dispid 43;
    function GetSymbol: Integer; dispid 44;
    function GetSymbolSurfaceTexture: Integer; dispid 45;
    function GetSymbolAllAround: WordBool; dispid 46;
    function SetSymbol(Symbol: Integer; SurfaceTexture: Integer; AllAround: WordBool): WordBool; dispid 47;
    property GOSTNotation: WordBool dispid 48;
    property GOSTDefaultSymbol: WordBool dispid 49;
  end;

// *********************************************************************//
// Interface: IDatumTag
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D90-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDatumTag = interface(IDispatch)
    ['{83A33D90-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: IDatumTag; safecall;
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(Index: Integer): WideString; safecall;
    function GetTextHeightAtIndex(Index: Integer): Double; safecall;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(Index: Integer): Double; safecall;
    function GetTextAngleAtIndex(Index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(Index: Integer): Integer; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(Index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(Index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(Index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(Index: Integer): Double; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(Index: Integer): Double; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function GetLabel: WideString; safecall;
    function SetLabel(const Label_: WideString): WordBool; safecall;
    function Get_FilledTriangle: WordBool; safecall;
    procedure Set_FilledTriangle(Retval: WordBool); safecall;
    function Get_Shoulder: WordBool; safecall;
    procedure Set_Shoulder(Retval: WordBool); safecall;
    function Get_ForcedShoulder: WordBool; safecall;
    function Get_LeaderOrientation: Integer; safecall;
    procedure Set_LeaderOrientation(Orient: Integer); safecall;
    function GetUseDocDisplayStyle: WordBool; safecall;
    function GetDisplayStyle: Integer; safecall;
    function SetDisplayStyle(UseDoc: WordBool; Style: Integer): WordBool; safecall;
    property FilledTriangle: WordBool read Get_FilledTriangle write Set_FilledTriangle;
    property Shoulder: WordBool read Get_Shoulder write Set_Shoulder;
    property ForcedShoulder: WordBool read Get_ForcedShoulder;
    property LeaderOrientation: Integer read Get_LeaderOrientation write Set_LeaderOrientation;
  end;

// *********************************************************************//
// DispIntf:  IDatumTagDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D90-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDatumTagDisp = dispinterface
    ['{83A33D90-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: IDatumTag; dispid 2;
    function GetTextCount: Integer; dispid 3;
    function GetTextAtIndex(Index: Integer): WideString; dispid 4;
    function GetTextHeightAtIndex(Index: Integer): Double; dispid 5;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; dispid 6;
    function IGetTextPositionAtIndex(Index: Integer): Double; dispid 7;
    function GetTextAngleAtIndex(Index: Integer): Double; dispid 8;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; dispid 9;
    function GetTextInvertAtIndex(Index: Integer): Integer; dispid 10;
    function GetLineCount: Integer; dispid 11;
    function GetLineAtIndex(Index: Integer): OleVariant; dispid 12;
    function IGetLineAtIndex(Index: Integer): Double; dispid 13;
    function GetArcCount: Integer; dispid 14;
    function GetArcAtIndex(Index: Integer): OleVariant; dispid 15;
    function IGetArcAtIndex(Index: Integer): Double; dispid 16;
    function GetArrowHeadCount: Integer; dispid 17;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; dispid 18;
    function IGetArrowHeadAtIndex(Index: Integer): Double; dispid 19;
    function GetTriangleCount: Integer; dispid 20;
    function GetTriangleAtIndex(Index: Integer): OleVariant; dispid 21;
    function IGetTriangleAtIndex(Index: Integer): Double; dispid 22;
    function GetAnnotation: IDispatch; dispid 23;
    function IGetAnnotation: IAnnotation; dispid 24;
    function GetLabel: WideString; dispid 25;
    function SetLabel(const Label_: WideString): WordBool; dispid 26;
    property FilledTriangle: WordBool dispid 27;
    property Shoulder: WordBool dispid 28;
    property ForcedShoulder: WordBool readonly dispid 29;
    property LeaderOrientation: Integer dispid 30;
    function GetUseDocDisplayStyle: WordBool; dispid 31;
    function GetDisplayStyle: Integer; dispid 32;
    function SetDisplayStyle(UseDoc: WordBool; Style: Integer): WordBool; dispid 33;
  end;

// *********************************************************************//
// Interface: IDatumTargetSym
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D92-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDatumTargetSym = interface(IDispatch)
    ['{83A33D92-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: IDatumTargetSym; safecall;
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(Index: Integer): WideString; safecall;
    function GetTextHeightAtIndex(Index: Integer): Double; safecall;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(Index: Integer): Double; safecall;
    function GetTextAngleAtIndex(Index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(Index: Integer): Integer; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(Index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(Index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(Index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(Index: Integer): Double; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(Index: Integer): Double; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function GetTargetShape: Integer; safecall;
    function GetTargetAreaSize(WhichOne: Integer): WideString; safecall;
    function SetTargetArea(Shape: Integer; const Size1: WideString; const Size2: WideString): WordBool; safecall;
    function GetDisplaySymbol: WordBool; safecall;
    function GetDisplayTargetArea: WordBool; safecall;
    function GetDisplaySizeOutside: WordBool; safecall;
    function SetDisplay(Symbol: WordBool; TargetArea: WordBool; SizeOutside: WordBool): WordBool; safecall;
    function GetDatumReferenceLabel(WhichOne: Integer): WideString; safecall;
    function SetDatumReferenceLabel(WhichOne: Integer; const Text: WideString): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IDatumTargetSymDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D92-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDatumTargetSymDisp = dispinterface
    ['{83A33D92-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: IDatumTargetSym; dispid 2;
    function GetTextCount: Integer; dispid 3;
    function GetTextAtIndex(Index: Integer): WideString; dispid 4;
    function GetTextHeightAtIndex(Index: Integer): Double; dispid 5;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; dispid 6;
    function IGetTextPositionAtIndex(Index: Integer): Double; dispid 7;
    function GetTextAngleAtIndex(Index: Integer): Double; dispid 8;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; dispid 9;
    function GetTextInvertAtIndex(Index: Integer): Integer; dispid 10;
    function GetLineCount: Integer; dispid 11;
    function GetLineAtIndex(Index: Integer): OleVariant; dispid 12;
    function IGetLineAtIndex(Index: Integer): Double; dispid 13;
    function GetArcCount: Integer; dispid 14;
    function GetArcAtIndex(Index: Integer): OleVariant; dispid 15;
    function IGetArcAtIndex(Index: Integer): Double; dispid 16;
    function GetArrowHeadCount: Integer; dispid 17;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; dispid 18;
    function IGetArrowHeadAtIndex(Index: Integer): Double; dispid 19;
    function GetTriangleCount: Integer; dispid 20;
    function GetTriangleAtIndex(Index: Integer): OleVariant; dispid 21;
    function IGetTriangleAtIndex(Index: Integer): Double; dispid 22;
    function GetAnnotation: IDispatch; dispid 23;
    function IGetAnnotation: IAnnotation; dispid 24;
    function GetTargetShape: Integer; dispid 25;
    function GetTargetAreaSize(WhichOne: Integer): WideString; dispid 26;
    function SetTargetArea(Shape: Integer; const Size1: WideString; const Size2: WideString): WordBool; dispid 27;
    function GetDisplaySymbol: WordBool; dispid 28;
    function GetDisplayTargetArea: WordBool; dispid 29;
    function GetDisplaySizeOutside: WordBool; dispid 30;
    function SetDisplay(Symbol: WordBool; TargetArea: WordBool; SizeOutside: WordBool): WordBool; dispid 31;
    function GetDatumReferenceLabel(WhichOne: Integer): WideString; dispid 32;
    function SetDatumReferenceLabel(WhichOne: Integer; const Text: WideString): WordBool; dispid 33;
  end;

// *********************************************************************//
// Interface: IWeldSymbol
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D94-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IWeldSymbol = interface(IDispatch)
    ['{83A33D94-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: IWeldSymbol; safecall;
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(Index: Integer): WideString; safecall;
    function GetTextHeightAtIndex(Index: Integer): Double; safecall;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(Index: Integer): Double; safecall;
    function GetTextAngleAtIndex(Index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(Index: Integer): Integer; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(Index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(Index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(Index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(Index: Integer): Double; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(Index: Integer): Double; safecall;
    function IsAttached: WordBool; safecall;
    function HasExtraLeader: WordBool; safecall;
    function GetLeaderCount: Integer; safecall;
    function GetLeaderAtIndex(Index: Integer): OleVariant; safecall;
    function IGetLeaderAtIndex(Index: Integer; out PointCount: Integer): Double; safecall;
    function IGetArrowHeadInfo: Double; safecall;
    function GetArrowHeadInfo: OleVariant; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function GetText(WhichText: Integer): WideString; safecall;
    function GetContour(Top: WordBool): Integer; safecall;
    function GetSymmetric: Integer; safecall;
    function GetPeripheral: WordBool; safecall;
    function GetFieldWeld: Integer; safecall;
    function GetProcess: WordBool; safecall;
    function GetProcessReference: WordBool; safecall;
    function GetStagger: WordBool; safecall;
    function SetText(Top: WordBool; const Left: WideString; const Symbol: WideString; 
                     const Right: WideString; const Stagger: WideString; Contour: Integer): WordBool; safecall;
    function SetSymmetric(Symmetric: Integer): WordBool; safecall;
    function SetPeripheral(Peripheral: WordBool): WordBool; safecall;
    function SetFieldWeld(FieldWeld: Integer): WordBool; safecall;
    function SetProcess(Process: WordBool; const Text: WideString; Reference: WordBool): WordBool; safecall;
    function SetStagger(Stagger: WordBool): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IWeldSymbolDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D94-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IWeldSymbolDisp = dispinterface
    ['{83A33D94-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: IWeldSymbol; dispid 2;
    function GetTextCount: Integer; dispid 3;
    function GetTextAtIndex(Index: Integer): WideString; dispid 4;
    function GetTextHeightAtIndex(Index: Integer): Double; dispid 5;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; dispid 6;
    function IGetTextPositionAtIndex(Index: Integer): Double; dispid 7;
    function GetTextAngleAtIndex(Index: Integer): Double; dispid 8;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; dispid 9;
    function GetTextInvertAtIndex(Index: Integer): Integer; dispid 10;
    function GetLineCount: Integer; dispid 11;
    function GetLineAtIndex(Index: Integer): OleVariant; dispid 12;
    function IGetLineAtIndex(Index: Integer): Double; dispid 13;
    function GetArcCount: Integer; dispid 14;
    function GetArcAtIndex(Index: Integer): OleVariant; dispid 15;
    function IGetArcAtIndex(Index: Integer): Double; dispid 16;
    function GetArrowHeadCount: Integer; dispid 17;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; dispid 18;
    function IGetArrowHeadAtIndex(Index: Integer): Double; dispid 19;
    function GetTriangleCount: Integer; dispid 20;
    function GetTriangleAtIndex(Index: Integer): OleVariant; dispid 21;
    function IGetTriangleAtIndex(Index: Integer): Double; dispid 22;
    function IsAttached: WordBool; dispid 23;
    function HasExtraLeader: WordBool; dispid 24;
    function GetLeaderCount: Integer; dispid 25;
    function GetLeaderAtIndex(Index: Integer): OleVariant; dispid 26;
    function IGetLeaderAtIndex(Index: Integer; out PointCount: Integer): Double; dispid 27;
    function IGetArrowHeadInfo: Double; dispid 28;
    function GetArrowHeadInfo: OleVariant; dispid 29;
    function GetAnnotation: IDispatch; dispid 30;
    function IGetAnnotation: IAnnotation; dispid 31;
    function GetText(WhichText: Integer): WideString; dispid 32;
    function GetContour(Top: WordBool): Integer; dispid 33;
    function GetSymmetric: Integer; dispid 34;
    function GetPeripheral: WordBool; dispid 35;
    function GetFieldWeld: Integer; dispid 36;
    function GetProcess: WordBool; dispid 37;
    function GetProcessReference: WordBool; dispid 38;
    function GetStagger: WordBool; dispid 39;
    function SetText(Top: WordBool; const Left: WideString; const Symbol: WideString; 
                     const Right: WideString; const Stagger: WideString; Contour: Integer): WordBool; dispid 40;
    function SetSymmetric(Symmetric: Integer): WordBool; dispid 41;
    function SetPeripheral(Peripheral: WordBool): WordBool; dispid 42;
    function SetFieldWeld(FieldWeld: Integer): WordBool; dispid 43;
    function SetProcess(Process: WordBool; const Text: WideString; Reference: WordBool): WordBool; dispid 44;
    function SetStagger(Stagger: WordBool): WordBool; dispid 45;
  end;

// *********************************************************************//
// Interface: ICThread
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D9E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICThread = interface(IDispatch)
    ['{83A33D9E-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: ICThread; safecall;
    function GetDisplayData: IDispatch; safecall;
    function IGetDisplayData: IDisplayData; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function Get_ThreadCallout: INote; safecall;
    function Get_PatternedTransforms: OleVariant; safecall;
    function GetPatternedTransformsCount: Integer; safecall;
    function IGetPatternedTransforms(Count: Integer): IMathTransform; safecall;
    property ThreadCallout: INote read Get_ThreadCallout;
    property PatternedTransforms: OleVariant read Get_PatternedTransforms;
  end;

// *********************************************************************//
// DispIntf:  ICThreadDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D9E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICThreadDisp = dispinterface
    ['{83A33D9E-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: ICThread; dispid 2;
    function GetDisplayData: IDispatch; dispid 3;
    function IGetDisplayData: IDisplayData; dispid 4;
    function GetAnnotation: IDispatch; dispid 5;
    function IGetAnnotation: IAnnotation; dispid 6;
    property ThreadCallout: INote readonly dispid 7;
    property PatternedTransforms: OleVariant readonly dispid 8;
    function GetPatternedTransformsCount: Integer; dispid 9;
    function IGetPatternedTransforms(Count: Integer): IMathTransform; dispid 10;
  end;

// *********************************************************************//
// Interface: IDisplayDimension
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA1-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDisplayDimension = interface(IDispatch)
    ['{83A33DA1-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: IDisplayDimension; safecall;
    function GetDisplayData: IDispatch; safecall;
    function IGetDisplayData: IDisplayData; safecall;
    function Get_WitnessVisibility: Integer; safecall;
    procedure Set_WitnessVisibility(Retval: Integer); safecall;
    function Get_LeaderVisibility: Integer; safecall;
    procedure Set_LeaderVisibility(Retval: Integer); safecall;
    function Get_BrokenLeader: WordBool; safecall;
    procedure Set_BrokenLeader(Retval: WordBool); safecall;
    function Get_SmartWitness: WordBool; safecall;
    procedure Set_SmartWitness(Retval: WordBool); safecall;
    function Get_ShowParenthesis: WordBool; safecall;
    procedure Set_ShowParenthesis(Retval: WordBool); safecall;
    function Get_ArrowSide: Integer; safecall;
    procedure Set_ArrowSide(Retval: Integer); safecall;
    function Get_ShowDimensionValue: WordBool; safecall;
    procedure Set_ShowDimensionValue(Retval: WordBool); safecall;
    function GetText(WhichText: Integer): WideString; safecall;
    procedure SetText(WhichText: Integer; const Text: WideString); safecall;
    function GetDimension: IDispatch; safecall;
    function IGetDimension: IDimension; safecall;
    function GetUseDocTextFormat: WordBool; safecall;
    function GetTextFormat: IDispatch; safecall;
    function IGetTextFormat: ITextFormat; safecall;
    function SetTextFormat(TextFormatType: Integer; const TextFormat: IDispatch): WordBool; safecall;
    function ISetTextFormat(TextFormatType: Integer; const TextFormat: ITextFormat): WordBool; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function Get_SolidLeader: WordBool; safecall;
    procedure Set_SolidLeader(Retval: WordBool); safecall;
    function Get_Diametric: WordBool; safecall;
    procedure Set_Diametric(Retval: WordBool); safecall;
    function Get_DisplayAsLinear: WordBool; safecall;
    procedure Set_DisplayAsLinear(Retval: WordBool); safecall;
    function GetUseDocSecondArrow: WordBool; safecall;
    function GetSecondArrow: WordBool; safecall;
    procedure SetSecondArrow(UseDoc: WordBool; SecondArrow: WordBool); safecall;
    function Get_ShortenedRadius: WordBool; safecall;
    procedure Set_ShortenedRadius(Retval: WordBool); safecall;
    function Get_DimensionToInside: WordBool; safecall;
    procedure Set_DimensionToInside(Retval: WordBool); safecall;
    function GetUseDocDual: WordBool; safecall;
    procedure SetDual(UseDoc: WordBool); safecall;
    function GetUseDocArrowHeadStyle: WordBool; safecall;
    function GetArrowHeadStyle: Integer; safecall;
    procedure SetArrowHeadStyle(UseDoc: WordBool; ArrowHeadStyle: Integer); safecall;
    function Get_CenterText: WordBool; safecall;
    procedure Set_CenterText(Retval: WordBool); safecall;
    function Get_Inspection: WordBool; safecall;
    procedure Set_Inspection(Inspection: WordBool); safecall;
    function GetUseDocPrecision: WordBool; safecall;
    function GetPrimaryPrecision: Integer; safecall;
    function GetAlternatePrecision: Integer; safecall;
    function GetPrimaryTolPrecision: Integer; safecall;
    function GetAlternateTolPrecision: Integer; safecall;
    function SetPrecision(UseDoc: WordBool; Primary: Integer; Alternate: Integer; 
                          PrimaryTol: Integer; AlternateTol: Integer): Integer; safecall;
    function GetAutoArcLengthLeader: WordBool; safecall;
    function GetArcLengthLeader: Integer; safecall;
    function SetArcLengthLeader(AutoLeader: WordBool; LeaderType: Integer): Integer; safecall;
    function GetUseDocUnits: WordBool; safecall;
    function GetUnits: Integer; safecall;
    function GetFractionBase: Integer; safecall;
    function GetFractionValue: Integer; safecall;
    function GetRoundToFraction: WordBool; safecall;
    function SetUnits(UseDoc: WordBool; UType: Integer; FractBase: Integer; FractDenom: Integer; 
                      RoundToFraction: WordBool): Integer; safecall;
    function GetUseDocBrokenLeader: WordBool; safecall;
    function GetBrokenLeader2: Integer; safecall;
    function SetBrokenLeader2(UseDoc: WordBool; Broken: Integer): Integer; safecall;
    function GetNext2: IDispatch; safecall;
    function IGetNext2: IDisplayDimension; safecall;
    function GetType: Integer; safecall;
    function Get_Scale2: Double; safecall;
    procedure Set_Scale2(Retval: Double); safecall;
    function Get_DisplayAsChain: WordBool; safecall;
    procedure Set_DisplayAsChain(Retval: WordBool); safecall;
    function GetNext3: IDispatch; safecall;
    function IGetNext3: IDisplayDimension; safecall;
    function AddDisplayEnt(Type_: SYSINT; Data: OleVariant): WordBool; safecall;
    function IAddDisplayEnt(Type_: SYSINT; var Data: Double): WordBool; safecall;
    function AddDisplayText(const Text: WideString; Position: OleVariant; const Format: IDispatch; 
                            Attachment: SYSINT; WidthFactor: Double): WordBool; safecall;
    function IAddDisplayText(const Text: WideString; var Position: Double; 
                             const Format: ITextFormat; Attachment: SYSINT; WidthFactor: Double): WordBool; safecall;
    function Get_Jogged: WordBool; safecall;
    procedure Set_Jogged(Retval: WordBool); safecall;
    function AutoJogOrdinate: WordBool; safecall;
    function Get_IsLinked: WordBool; safecall;
    function GetNext4: IDisplayDimension; safecall;
    function Get_HorizontalJustification: Integer; safecall;
    procedure Set_HorizontalJustification(HorzJustify: Integer); safecall;
    function Get_VerticalJustification: Integer; safecall;
    procedure Set_VerticalJustification(VertJustify: Integer); safecall;
    function GetLinkedText: WideString; safecall;
    function SetLinkedText(const BstrLinkedText: WideString): Integer; safecall;
    function Unlink: Integer; safecall;
    function Get_MarkedForDrawing: WordBool; safecall;
    procedure Set_MarkedForDrawing(Marked: WordBool); safecall;
    function GetPrimaryPrecision2: Integer; safecall;
    function GetAlternatePrecision2: Integer; safecall;
    function GetPrimaryTolPrecision2: Integer; safecall;
    function GetAlternateTolPrecision2: Integer; safecall;
    function SetPrecision2(Primary: Integer; Dual: Integer; PrimaryTol: Integer; DualTol: Integer): Integer; safecall;
    function Get_Type2: Integer; safecall;
    function GetUseDocBentLeaderLength: WordBool; safecall;
    function GetBentLeaderLength: Double; safecall;
    function SetBentLeaderLength(UseDoc: WordBool; Length: Double): WordBool; safecall;
    function Get_ShowTolParenthesis: WordBool; safecall;
    procedure Set_ShowTolParenthesis(Retval: WordBool); safecall;
    function GetDefinitionTransform: IMathTransform; safecall;
    function Get_OffsetText: WordBool; safecall;
    procedure Set_OffsetText(Offset: WordBool); safecall;
    function GetNext5: IDisplayDimension; safecall;
    function Get_MaxWitnessLineLength: Double; safecall;
    procedure Set_MaxWitnessLineLength(MaxWitLen: Double); safecall;
    function Get_GridBubble: WordBool; safecall;
    procedure Set_GridBubble(IsAGridBubble: WordBool); safecall;
    function Get_Elevation: WordBool; safecall;
    procedure Set_Elevation(IsAElevation: WordBool); safecall;
    function Get_EndSymbol: Integer; safecall;
    procedure Set_EndSymbol(EndSymbolToUse: Integer); safecall;
    function GetOverride: WordBool; safecall;
    function GetOverrideValue: Double; safecall;
    function SetOverride(Override: WordBool; Value: Double): WordBool; safecall;
    function IsHoleCallout: WordBool; safecall;
    function GetArrowHeadStyle2(var Style1: Integer; var Style2: Integer): WordBool; safecall;
    function SetArrowHeadStyle2(UseDoc: WordBool; Style1: Integer; Style2: Integer): WordBool; safecall;
    function GetDimension2(Index: Integer): IDimension; safecall;
    function Get_ChamferTextStyle: Integer; safecall;
    procedure Set_ChamferTextStyle(Style: Integer); safecall;
    property WitnessVisibility: Integer read Get_WitnessVisibility write Set_WitnessVisibility;
    property LeaderVisibility: Integer read Get_LeaderVisibility write Set_LeaderVisibility;
    property BrokenLeader: WordBool read Get_BrokenLeader write Set_BrokenLeader;
    property SmartWitness: WordBool read Get_SmartWitness write Set_SmartWitness;
    property ShowParenthesis: WordBool read Get_ShowParenthesis write Set_ShowParenthesis;
    property ArrowSide: Integer read Get_ArrowSide write Set_ArrowSide;
    property ShowDimensionValue: WordBool read Get_ShowDimensionValue write Set_ShowDimensionValue;
    property SolidLeader: WordBool read Get_SolidLeader write Set_SolidLeader;
    property Diametric: WordBool read Get_Diametric write Set_Diametric;
    property DisplayAsLinear: WordBool read Get_DisplayAsLinear write Set_DisplayAsLinear;
    property ShortenedRadius: WordBool read Get_ShortenedRadius write Set_ShortenedRadius;
    property DimensionToInside: WordBool read Get_DimensionToInside write Set_DimensionToInside;
    property CenterText: WordBool read Get_CenterText write Set_CenterText;
    property Inspection: WordBool read Get_Inspection write Set_Inspection;
    property Scale2: Double read Get_Scale2 write Set_Scale2;
    property DisplayAsChain: WordBool read Get_DisplayAsChain write Set_DisplayAsChain;
    property Jogged: WordBool read Get_Jogged write Set_Jogged;
    property IsLinked: WordBool read Get_IsLinked;
    property HorizontalJustification: Integer read Get_HorizontalJustification write Set_HorizontalJustification;
    property VerticalJustification: Integer read Get_VerticalJustification write Set_VerticalJustification;
    property MarkedForDrawing: WordBool read Get_MarkedForDrawing write Set_MarkedForDrawing;
    property Type2: Integer read Get_Type2;
    property ShowTolParenthesis: WordBool read Get_ShowTolParenthesis write Set_ShowTolParenthesis;
    property OffsetText: WordBool read Get_OffsetText write Set_OffsetText;
    property MaxWitnessLineLength: Double read Get_MaxWitnessLineLength write Set_MaxWitnessLineLength;
    property GridBubble: WordBool read Get_GridBubble write Set_GridBubble;
    property Elevation: WordBool read Get_Elevation write Set_Elevation;
    property EndSymbol: Integer read Get_EndSymbol write Set_EndSymbol;
    property ChamferTextStyle: Integer read Get_ChamferTextStyle write Set_ChamferTextStyle;
  end;

// *********************************************************************//
// DispIntf:  IDisplayDimensionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA1-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDisplayDimensionDisp = dispinterface
    ['{83A33DA1-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: IDisplayDimension; dispid 2;
    function GetDisplayData: IDispatch; dispid 3;
    function IGetDisplayData: IDisplayData; dispid 4;
    property WitnessVisibility: Integer dispid 5;
    property LeaderVisibility: Integer dispid 6;
    property BrokenLeader: WordBool dispid 7;
    property SmartWitness: WordBool dispid 8;
    property ShowParenthesis: WordBool dispid 9;
    property ArrowSide: Integer dispid 10;
    property ShowDimensionValue: WordBool dispid 11;
    function GetText(WhichText: Integer): WideString; dispid 12;
    procedure SetText(WhichText: Integer; const Text: WideString); dispid 13;
    function GetDimension: IDispatch; dispid 14;
    function IGetDimension: IDimension; dispid 15;
    function GetUseDocTextFormat: WordBool; dispid 16;
    function GetTextFormat: IDispatch; dispid 17;
    function IGetTextFormat: ITextFormat; dispid 18;
    function SetTextFormat(TextFormatType: Integer; const TextFormat: IDispatch): WordBool; dispid 19;
    function ISetTextFormat(TextFormatType: Integer; const TextFormat: ITextFormat): WordBool; dispid 20;
    function GetAnnotation: IDispatch; dispid 21;
    function IGetAnnotation: IAnnotation; dispid 22;
    property SolidLeader: WordBool dispid 23;
    property Diametric: WordBool dispid 24;
    property DisplayAsLinear: WordBool dispid 25;
    function GetUseDocSecondArrow: WordBool; dispid 26;
    function GetSecondArrow: WordBool; dispid 27;
    procedure SetSecondArrow(UseDoc: WordBool; SecondArrow: WordBool); dispid 28;
    property ShortenedRadius: WordBool dispid 29;
    property DimensionToInside: WordBool dispid 30;
    function GetUseDocDual: WordBool; dispid 31;
    procedure SetDual(UseDoc: WordBool); dispid 32;
    function GetUseDocArrowHeadStyle: WordBool; dispid 33;
    function GetArrowHeadStyle: Integer; dispid 34;
    procedure SetArrowHeadStyle(UseDoc: WordBool; ArrowHeadStyle: Integer); dispid 35;
    property CenterText: WordBool dispid 36;
    property Inspection: WordBool dispid 37;
    function GetUseDocPrecision: WordBool; dispid 38;
    function GetPrimaryPrecision: Integer; dispid 39;
    function GetAlternatePrecision: Integer; dispid 40;
    function GetPrimaryTolPrecision: Integer; dispid 41;
    function GetAlternateTolPrecision: Integer; dispid 42;
    function SetPrecision(UseDoc: WordBool; Primary: Integer; Alternate: Integer; 
                          PrimaryTol: Integer; AlternateTol: Integer): Integer; dispid 43;
    function GetAutoArcLengthLeader: WordBool; dispid 44;
    function GetArcLengthLeader: Integer; dispid 45;
    function SetArcLengthLeader(AutoLeader: WordBool; LeaderType: Integer): Integer; dispid 46;
    function GetUseDocUnits: WordBool; dispid 47;
    function GetUnits: Integer; dispid 48;
    function GetFractionBase: Integer; dispid 49;
    function GetFractionValue: Integer; dispid 50;
    function GetRoundToFraction: WordBool; dispid 51;
    function SetUnits(UseDoc: WordBool; UType: Integer; FractBase: Integer; FractDenom: Integer; 
                      RoundToFraction: WordBool): Integer; dispid 52;
    function GetUseDocBrokenLeader: WordBool; dispid 53;
    function GetBrokenLeader2: Integer; dispid 54;
    function SetBrokenLeader2(UseDoc: WordBool; Broken: Integer): Integer; dispid 55;
    function GetNext2: IDispatch; dispid 56;
    function IGetNext2: IDisplayDimension; dispid 57;
    function GetType: Integer; dispid 58;
    property Scale2: Double dispid 59;
    property DisplayAsChain: WordBool dispid 60;
    function GetNext3: IDispatch; dispid 61;
    function IGetNext3: IDisplayDimension; dispid 62;
    function AddDisplayEnt(Type_: SYSINT; Data: OleVariant): WordBool; dispid 63;
    function IAddDisplayEnt(Type_: SYSINT; var Data: Double): WordBool; dispid 64;
    function AddDisplayText(const Text: WideString; Position: OleVariant; const Format: IDispatch; 
                            Attachment: SYSINT; WidthFactor: Double): WordBool; dispid 65;
    function IAddDisplayText(const Text: WideString; var Position: Double; 
                             const Format: ITextFormat; Attachment: SYSINT; WidthFactor: Double): WordBool; dispid 66;
    property Jogged: WordBool dispid 67;
    function AutoJogOrdinate: WordBool; dispid 68;
    property IsLinked: WordBool readonly dispid 69;
    function GetNext4: IDisplayDimension; dispid 70;
    property HorizontalJustification: Integer dispid 71;
    property VerticalJustification: Integer dispid 72;
    function GetLinkedText: WideString; dispid 73;
    function SetLinkedText(const BstrLinkedText: WideString): Integer; dispid 74;
    function Unlink: Integer; dispid 75;
    property MarkedForDrawing: WordBool dispid 76;
    function GetPrimaryPrecision2: Integer; dispid 77;
    function GetAlternatePrecision2: Integer; dispid 78;
    function GetPrimaryTolPrecision2: Integer; dispid 79;
    function GetAlternateTolPrecision2: Integer; dispid 80;
    function SetPrecision2(Primary: Integer; Dual: Integer; PrimaryTol: Integer; DualTol: Integer): Integer; dispid 81;
    property Type2: Integer readonly dispid 82;
    function GetUseDocBentLeaderLength: WordBool; dispid 83;
    function GetBentLeaderLength: Double; dispid 84;
    function SetBentLeaderLength(UseDoc: WordBool; Length: Double): WordBool; dispid 85;
    property ShowTolParenthesis: WordBool dispid 86;
    function GetDefinitionTransform: IMathTransform; dispid 87;
    property OffsetText: WordBool dispid 88;
    function GetNext5: IDisplayDimension; dispid 89;
    property MaxWitnessLineLength: Double dispid 90;
    property GridBubble: WordBool dispid 91;
    property Elevation: WordBool dispid 92;
    property EndSymbol: Integer dispid 93;
    function GetOverride: WordBool; dispid 94;
    function GetOverrideValue: Double; dispid 95;
    function SetOverride(Override: WordBool; Value: Double): WordBool; dispid 96;
    function IsHoleCallout: WordBool; dispid 97;
    function GetArrowHeadStyle2(var Style1: Integer; var Style2: Integer): WordBool; dispid 98;
    function SetArrowHeadStyle2(UseDoc: WordBool; Style1: Integer; Style2: Integer): WordBool; dispid 99;
    function GetDimension2(Index: Integer): IDimension; dispid 100;
    property ChamferTextStyle: Integer dispid 101;
  end;

// *********************************************************************//
// Interface: IDimension
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D3A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDimension = interface(IDispatch)
    ['{83A33D3A-27C5-11CE-BFD4-00400513BB57}']
    function Get_Value: Double; safecall;
    procedure Set_Value(Retval: Double); safecall;
    function Get_SystemValue: Double; safecall;
    procedure Set_SystemValue(Retval: Double); safecall;
    function GetUserValueIn(const Doc: IDispatch): Double; safecall;
    function IGetUserValueIn(const Doc: IModelDoc): Double; safecall;
    procedure SetUserValueIn(const Doc: IDispatch; NewValue: Double); safecall;
    procedure ISetUserValueIn(const Doc: IModelDoc; NewValue: Double); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Retval: WideString); safecall;
    function GetToleranceType: Integer; safecall;
    function SetToleranceType(NewType: Integer): WordBool; safecall;
    function GetToleranceValues: OleVariant; safecall;
    function IGetToleranceValues: Double; safecall;
    function SetToleranceValues(TolMin: Double; TolMax: Double): WordBool; safecall;
    function GetToleranceFontInfo: OleVariant; safecall;
    function IGetToleranceFontInfo: Double; safecall;
    function SetToleranceFontInfo(UseFontScale: Integer; TolScale: Double; TolHeight: Double): WordBool; safecall;
    function GetToleranceFitValues: WideString; safecall;
    function SetToleranceFitValues(const NewLValue: WideString; const NewUValue: WideString): WordBool; safecall;
    function Get_ReadOnly: WordBool; safecall;
    procedure Set_ReadOnly(Retval: WordBool); safecall;
    function Get_FullName: WideString; safecall;
    function Get_DrivenState: Integer; safecall;
    procedure Set_DrivenState(Retval: Integer); safecall;
    function IsReference: WordBool; safecall;
    function IsAppliedToAllConfigurations: WordBool; safecall;
    function SetSystemValue2(NewValue: Double; WhichConfigurations: Integer): Integer; safecall;
    function SetValue2(NewValue: Double; WhichConfigurations: Integer): Integer; safecall;
    function SetUserValueIn2(const Doc: IDispatch; NewValue: Double; WhichConfigurations: Integer): Integer; safecall;
    function ISetUserValueIn2(const Doc: IModelDoc; NewValue: Double; WhichConfigurations: Integer): Integer; safecall;
    function GetArcEndCondition(Index: Integer): Integer; safecall;
    function SetArcEndCondition(Index: Integer; Condition: Integer): Integer; safecall;
    function GetValue2(const ConfigName: WideString): Double; safecall;
    function GetSystemValue2(const ConfigName: WideString): Double; safecall;
    function IGetUserValueIn2(const Doc: IModelDoc2): Double; safecall;
    function ISetUserValueIn3(const Doc: IModelDoc2; NewValue: Double; WhichConfigurations: Integer): Integer; safecall;
    function GetType: Integer; safecall;
    function ISetValue3(NewValue: Double; WhichConfigurations: Integer; Config_count: Integer; 
                        var Config_names: WideString): Integer; safecall;
    function SetValue3(NewValue: Double; WhichConfigurations: Integer; Config_names: OleVariant): Integer; safecall;
    function IGetValue3(WhichConfigurations: Integer; Config_count: Integer; 
                        var Config_names: WideString): Double; safecall;
    function GetValue3(WhichConfigurations: Integer; Config_names: OleVariant): OleVariant; safecall;
    function Get_DimensionLineDirection: IMathVector; safecall;
    procedure Set_DimensionLineDirection(const DimDir: IMathVector); safecall;
    function Get_ExtensionLineDirection: IMathVector; safecall;
    procedure Set_ExtensionLineDirection(const DimDir: IMathVector); safecall;
    function Get_ReferencePoints: OleVariant; safecall;
    procedure Set_ReferencePoints(Points: OleVariant); safecall;
    function GetReferencePointsCount: Integer; safecall;
    function IGetReferencePoints(PointsCount: Integer): IMathPoint; safecall;
    procedure ISetReferencePoints(PointsCount: Integer; var RefPoints: IMathPoint); safecall;
    function SetSystemValue3(NewValue: Double; WhichConfigurations: Integer; 
                             Config_names: OleVariant): Integer; safecall;
    function ISetSystemValue3(NewValue: Double; WhichConfigurations: Integer; 
                              Config_count: Integer; var Config_names: WideString): Integer; safecall;
    function GetSystemValue3(WhichConfigurations: Integer; Config_names: OleVariant): OleVariant; safecall;
    function IGetSystemValue3(WhichConfigurations: Integer; Config_count: Integer; 
                              var Config_names: WideString): Double; safecall;
    function GetFeatureOwner: IFeature; safecall;
    function Get_Tolerance: IDimensionTolerance; safecall;
    function GetSystemChamferValues(var Length: Double; var Angle: Double): WordBool; safecall;
    function IsDesignTableDimension: WordBool; safecall;
    property Value: Double read Get_Value write Set_Value;
    property SystemValue: Double read Get_SystemValue write Set_SystemValue;
    property Name: WideString read Get_Name write Set_Name;
    property ReadOnly: WordBool read Get_ReadOnly write Set_ReadOnly;
    property FullName: WideString read Get_FullName;
    property DrivenState: Integer read Get_DrivenState write Set_DrivenState;
    property DimensionLineDirection: IMathVector read Get_DimensionLineDirection write Set_DimensionLineDirection;
    property ExtensionLineDirection: IMathVector read Get_ExtensionLineDirection write Set_ExtensionLineDirection;
    property ReferencePoints: OleVariant read Get_ReferencePoints write Set_ReferencePoints;
    property Tolerance: IDimensionTolerance read Get_Tolerance;
  end;

// *********************************************************************//
// DispIntf:  IDimensionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D3A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDimensionDisp = dispinterface
    ['{83A33D3A-27C5-11CE-BFD4-00400513BB57}']
    property Value: Double dispid 1;
    property SystemValue: Double dispid 2;
    function GetUserValueIn(const Doc: IDispatch): Double; dispid 3;
    function IGetUserValueIn(const Doc: IModelDoc): Double; dispid 4;
    procedure SetUserValueIn(const Doc: IDispatch; NewValue: Double); dispid 5;
    procedure ISetUserValueIn(const Doc: IModelDoc; NewValue: Double); dispid 6;
    property Name: WideString dispid 7;
    function GetToleranceType: Integer; dispid 8;
    function SetToleranceType(NewType: Integer): WordBool; dispid 9;
    function GetToleranceValues: OleVariant; dispid 10;
    function IGetToleranceValues: Double; dispid 11;
    function SetToleranceValues(TolMin: Double; TolMax: Double): WordBool; dispid 12;
    function GetToleranceFontInfo: OleVariant; dispid 13;
    function IGetToleranceFontInfo: Double; dispid 14;
    function SetToleranceFontInfo(UseFontScale: Integer; TolScale: Double; TolHeight: Double): WordBool; dispid 15;
    function GetToleranceFitValues: WideString; dispid 16;
    function SetToleranceFitValues(const NewLValue: WideString; const NewUValue: WideString): WordBool; dispid 17;
    property ReadOnly: WordBool dispid 18;
    property FullName: WideString readonly dispid 19;
    property DrivenState: Integer dispid 20;
    function IsReference: WordBool; dispid 21;
    function IsAppliedToAllConfigurations: WordBool; dispid 22;
    function SetSystemValue2(NewValue: Double; WhichConfigurations: Integer): Integer; dispid 23;
    function SetValue2(NewValue: Double; WhichConfigurations: Integer): Integer; dispid 24;
    function SetUserValueIn2(const Doc: IDispatch; NewValue: Double; WhichConfigurations: Integer): Integer; dispid 25;
    function ISetUserValueIn2(const Doc: IModelDoc; NewValue: Double; WhichConfigurations: Integer): Integer; dispid 26;
    function GetArcEndCondition(Index: Integer): Integer; dispid 27;
    function SetArcEndCondition(Index: Integer; Condition: Integer): Integer; dispid 28;
    function GetValue2(const ConfigName: WideString): Double; dispid 29;
    function GetSystemValue2(const ConfigName: WideString): Double; dispid 30;
    function IGetUserValueIn2(const Doc: IModelDoc2): Double; dispid 31;
    function ISetUserValueIn3(const Doc: IModelDoc2; NewValue: Double; WhichConfigurations: Integer): Integer; dispid 32;
    function GetType: Integer; dispid 33;
    function ISetValue3(NewValue: Double; WhichConfigurations: Integer; Config_count: Integer; 
                        var Config_names: WideString): Integer; dispid 34;
    function SetValue3(NewValue: Double; WhichConfigurations: Integer; Config_names: OleVariant): Integer; dispid 35;
    function IGetValue3(WhichConfigurations: Integer; Config_count: Integer; 
                        var Config_names: WideString): Double; dispid 36;
    function GetValue3(WhichConfigurations: Integer; Config_names: OleVariant): OleVariant; dispid 37;
    property DimensionLineDirection: IMathVector dispid 38;
    property ExtensionLineDirection: IMathVector dispid 39;
    property ReferencePoints: OleVariant dispid 40;
    function GetReferencePointsCount: Integer; dispid 41;
    function IGetReferencePoints(PointsCount: Integer): IMathPoint; dispid 42;
    procedure ISetReferencePoints(PointsCount: Integer; var RefPoints: IMathPoint); dispid 43;
    function SetSystemValue3(NewValue: Double; WhichConfigurations: Integer; 
                             Config_names: OleVariant): Integer; dispid 44;
    function ISetSystemValue3(NewValue: Double; WhichConfigurations: Integer; 
                              Config_count: Integer; var Config_names: WideString): Integer; dispid 45;
    function GetSystemValue3(WhichConfigurations: Integer; Config_names: OleVariant): OleVariant; dispid 46;
    function IGetSystemValue3(WhichConfigurations: Integer; Config_count: Integer; 
                              var Config_names: WideString): Double; dispid 47;
    function GetFeatureOwner: IFeature; dispid 48;
    property Tolerance: IDimensionTolerance readonly dispid 49;
    function GetSystemChamferValues(var Length: Double; var Angle: Double): WordBool; dispid 50;
    function IsDesignTableDimension: WordBool; dispid 51;
  end;

// *********************************************************************//
// Interface: IFeature
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D38-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFeature = interface(IDispatch)
    ['{83A33D38-27C5-11CE-BFD4-00400513BB57}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Retval: WideString); safecall;
    function Parameter(const Name: WideString): IDispatch; safecall;
    function IParameter(const Name: WideString): IDimension; safecall;
    function GetNextFeature: IDispatch; safecall;
    function IGetNextFeature: IFeature; safecall;
    function GetTypeName: WideString; safecall;
    function GetSpecificFeature: IDispatch; safecall;
    function IGetSpecificFeature: IUnknown; safecall;
    function GetUIState(StateType: Integer): WordBool; safecall;
    procedure SetUIState(StateType: Integer; Flag: WordBool); safecall;
    function GetMaterialUserName: WideString; safecall;
    function SetMaterialUserName(const Name: WideString): WordBool; safecall;
    function GetMaterialIdName: WideString; safecall;
    function SetMaterialIdName(const Name: WideString): WordBool; safecall;
    function GetMaterialPropertyValues: OleVariant; safecall;
    function SetMaterialPropertyValues(MaterialPropertyValues: OleVariant): WordBool; safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(ID: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetFirstSubFeature: IDispatch; safecall;
    function IGetFirstSubFeature: IFeature; safecall;
    function GetNextSubFeature: IDispatch; safecall;
    function IGetNextSubFeature: IFeature; safecall;
    function IGetMaterialPropertyValues: Double; safecall;
    function ISetMaterialPropertyValues(var MaterialPropertyValues: Double): WordBool; safecall;
    function IsSuppressed: WordBool; safecall;
    function GetUpdateStamp: Integer; safecall;
    function SetBody(const BodyIn: IDispatch): WordBool; safecall;
    function ISetBody(const BodyIn: IBody): WordBool; safecall;
    function GetBody: IDispatch; safecall;
    function IGetBody: IBody; safecall;
    function EnumDisplayDimensions: IEnumDisplayDimensions; safecall;
    function GetDefinition: IDispatch; safecall;
    function IGetDefinition: IUnknown; safecall;
    function ModifyDefinition(const Data: IDispatch; const TopDoc: IDispatch; 
                              const Component: IDispatch): WordBool; safecall;
    function IModifyDefinition(const Data: IUnknown; const TopDoc: IModelDoc; 
                               const Component: IComponent): WordBool; safecall;
    function GetFaceCount: Integer; safecall;
    function GetFaces: OleVariant; safecall;
    function IGetFaces(var FaceCount: Integer): IFace; safecall;
    function GetFirstDisplayDimension: IDispatch; safecall;
    function GetNextDisplayDimension(const DispIn: IDispatch): IDispatch; safecall;
    function GetErrorCode: Integer; safecall;
    function IGetChildCount: Integer; safecall;
    function GetChildren: OleVariant; safecall;
    function IGetChildren: IFeature; safecall;
    function IGetParentCount: Integer; safecall;
    function GetParents: OleVariant; safecall;
    function IGetParents: IFeature; safecall;
    function SetBody2(const BodyIn: IDispatch; ApplyUserIds: WordBool): WordBool; safecall;
    function ISetBody2(const BodyIn: IBody; ApplyUserIds: WordBool): WordBool; safecall;
    function GetImportedFileName: WideString; safecall;
    function SetImportedFileName(const ImpName: WideString): WordBool; safecall;
    function SetSuppression(SuppressState: Integer): WordBool; safecall;
    function RemoveMaterialProperty: WordBool; safecall;
    function Select(AppendFlag: WordBool): WordBool; safecall;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function GetBox(var BBox: OleVariant): WordBool; safecall;
    function IGetBox(var BBox: Double): WordBool; safecall;
    function IModifyDefinition2(const Data: IUnknown; const TopDoc: IModelDoc2; 
                                const Component: IComponent2): WordBool; safecall;
    function IGetFaces2(var FaceCount: Integer): IFace2; safecall;
    function IGetBody2: IBody2; safecall;
    function ISetBody3(const BodyIn: IBody2; ApplyUserIds: WordBool): WordBool; safecall;
    procedure ListExternalFileReferences(out ModelPathName: OleVariant; 
                                         out ComponentPathName: OleVariant; 
                                         out Feature: OleVariant; out DataType: OleVariant; 
                                         out Status: OleVariant; out RefEntity: OleVariant; 
                                         out FeatCom: OleVariant); safecall;
    function ListExternalFileReferencesCount: Integer; safecall;
    procedure IListExternalFileReferences(NumRefs: Integer; out ModelPathName: WideString; 
                                          out CompPathName: WideString; out Feature: WideString; 
                                          out DataType: WideString; out Status: Integer; 
                                          out RefEntity: WideString; out FeatComp: WideString); safecall;
    function Select2(Append: WordBool; Mark: Integer): WordBool; safecall;
    function IsRolledBack: WordBool; safecall;
    function IsBase: WordBool; safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Description: WideString); safecall;
    function MakeSubFeature(const SubFeature: IFeature): WordBool; safecall;
    function Get_CreatedBy: WideString; safecall;
    function Get_DateCreated: WideString; safecall;
    function Get_DateModified: WideString; safecall;
    function IsBase2: WordBool; safecall;
    function GetSpecificFeature2: IDispatch; safecall;
    procedure SetMaterialPropertyValues2(Material_values: OleVariant; Config_opt: Integer; 
                                         Config_names: OleVariant); safecall;
    procedure ISetMaterialPropertyValues2(var Material_values: Double; Config_opt: Integer; 
                                          Config_count: Integer; var Config_names: WideString); safecall;
    function GetMaterialPropertyValues2(Config_opt: Integer; Config_names: OleVariant): OleVariant; safecall;
    function IGetMaterialPropertyValues2(Config_opt: Integer; Config_count: Integer; 
                                         var Config_names: WideString): Double; safecall;
    function SetSuppression2(SuppressionState: Integer; Config_opt: Integer; 
                             Config_names: OleVariant): WordBool; safecall;
    function ISetSuppression2(SuppressionState: Integer; Config_opt: Integer; 
                              Config_count: Integer; var Config_names: WideString): WordBool; safecall;
    function IsSuppressed2(Config_opt: Integer; Config_names: OleVariant): OleVariant; safecall;
    function IIsSuppressed2(Config_opt: Integer; Config_count: Integer; var Config_names: WideString): WordBool; safecall;
    function Get_CustomPropertyManager: ICustomPropertyManager; safecall;
    function RemoveMaterialProperty2(Config_opt: Integer; Config_names: OleVariant): WordBool; safecall;
    function IRemoveMaterialProperty2(Config_opt: Integer; Config_count: Integer; 
                                      var Config_names: WideString): WordBool; safecall;
    procedure ListExternalFileReferences2(out ModelPathName: OleVariant; 
                                          out ComponentPathName: OleVariant; 
                                          out Feature: OleVariant; out DataType: OleVariant; 
                                          out Status: OleVariant; out RefEntity: OleVariant; 
                                          out FeatCom: OleVariant; out ConfigOption: Integer; 
                                          out ConfigName: WideString); safecall;
    procedure IListExternalFileReferences2(NumRefs: Integer; out ModelPathName: WideString; 
                                           out CompPathName: WideString; out Feature: WideString; 
                                           out DataType: WideString; out Status: Integer; 
                                           out RefEntity: WideString; out FeatComp: WideString; 
                                           out ConfigOption: Integer; out ConfigName: WideString); safecall;
    procedure UpdateExternalFileReferences(ConfigOption: Integer; const ConfigName: WideString; 
                                           UpdateStatus: Integer); safecall;
    function Get_Visible: Integer; safecall;
    function GetTexture(const Config_name: WideString): ITexture; safecall;
    function SetTexture(BAllConfig: WordBool; const Config_name: WideString; 
                        const TextureIn: ITexture): WordBool; safecall;
    function RemoveTexture(BAllConfig: WordBool; const Config_name: WideString): WordBool; safecall;
    function GetAffectedFaceCount: Integer; safecall;
    function GetAffectedFaces: OleVariant; safecall;
    function IGetAffectedFaces(var NCount: Integer): IFace2; safecall;
    function GetCreatedVersion: Integer; safecall;
    function GetModifiedVersion: Integer; safecall;
    function AddComment(const Text: WideString): IComment; safecall;
    function GetOwnerFeature: IFeature; safecall;
    procedure SetBodiesToKeep(AllBodies: WordBool; BodiesToKeep: OleVariant; ConfigOption: Integer; 
                              ConfigNames: OleVariant); safecall;
    function GetTypeName2: WideString; safecall;
    function GetErrorCode2(out IsWarning: WordBool): Integer; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Description: WideString read Get_Description write Set_Description;
    property CreatedBy: WideString read Get_CreatedBy;
    property DateCreated: WideString read Get_DateCreated;
    property DateModified: WideString read Get_DateModified;
    property CustomPropertyManager: ICustomPropertyManager read Get_CustomPropertyManager;
    property Visible: Integer read Get_Visible;
  end;

// *********************************************************************//
// DispIntf:  IFeatureDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D38-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFeatureDisp = dispinterface
    ['{83A33D38-27C5-11CE-BFD4-00400513BB57}']
    property Name: WideString dispid 1;
    function Parameter(const Name: WideString): IDispatch; dispid 2;
    function IParameter(const Name: WideString): IDimension; dispid 4;
    function GetNextFeature: IDispatch; dispid 3;
    function IGetNextFeature: IFeature; dispid 5;
    function GetTypeName: WideString; dispid 6;
    function GetSpecificFeature: IDispatch; dispid 7;
    function IGetSpecificFeature: IUnknown; dispid 8;
    function GetUIState(StateType: Integer): WordBool; dispid 9;
    procedure SetUIState(StateType: Integer; Flag: WordBool); dispid 10;
    function GetMaterialUserName: WideString; dispid 11;
    function SetMaterialUserName(const Name: WideString): WordBool; dispid 12;
    function GetMaterialIdName: WideString; dispid 13;
    function SetMaterialIdName(const Name: WideString): WordBool; dispid 14;
    function GetMaterialPropertyValues: OleVariant; dispid 15;
    function SetMaterialPropertyValues(MaterialPropertyValues: OleVariant): WordBool; dispid 16;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 17;
    function GetPropertyExtension(ID: Integer): OleVariant; dispid 18;
    procedure ResetPropertyExtension; dispid 19;
    function GetFirstSubFeature: IDispatch; dispid 20;
    function IGetFirstSubFeature: IFeature; dispid 21;
    function GetNextSubFeature: IDispatch; dispid 22;
    function IGetNextSubFeature: IFeature; dispid 23;
    function IGetMaterialPropertyValues: Double; dispid 24;
    function ISetMaterialPropertyValues(var MaterialPropertyValues: Double): WordBool; dispid 25;
    function IsSuppressed: WordBool; dispid 26;
    function GetUpdateStamp: Integer; dispid 27;
    function SetBody(const BodyIn: IDispatch): WordBool; dispid 28;
    function ISetBody(const BodyIn: IBody): WordBool; dispid 29;
    function GetBody: IDispatch; dispid 30;
    function IGetBody: IBody; dispid 31;
    function EnumDisplayDimensions: IEnumDisplayDimensions; dispid 32;
    function GetDefinition: IDispatch; dispid 33;
    function IGetDefinition: IUnknown; dispid 34;
    function ModifyDefinition(const Data: IDispatch; const TopDoc: IDispatch; 
                              const Component: IDispatch): WordBool; dispid 35;
    function IModifyDefinition(const Data: IUnknown; const TopDoc: IModelDoc; 
                               const Component: IComponent): WordBool; dispid 36;
    function GetFaceCount: Integer; dispid 37;
    function GetFaces: OleVariant; dispid 38;
    function IGetFaces(var FaceCount: Integer): IFace; dispid 39;
    function GetFirstDisplayDimension: IDispatch; dispid 40;
    function GetNextDisplayDimension(const DispIn: IDispatch): IDispatch; dispid 41;
    function GetErrorCode: Integer; dispid 42;
    function IGetChildCount: Integer; dispid 43;
    function GetChildren: OleVariant; dispid 44;
    function IGetChildren: IFeature; dispid 45;
    function IGetParentCount: Integer; dispid 46;
    function GetParents: OleVariant; dispid 47;
    function IGetParents: IFeature; dispid 48;
    function SetBody2(const BodyIn: IDispatch; ApplyUserIds: WordBool): WordBool; dispid 49;
    function ISetBody2(const BodyIn: IBody; ApplyUserIds: WordBool): WordBool; dispid 50;
    function GetImportedFileName: WideString; dispid 51;
    function SetImportedFileName(const ImpName: WideString): WordBool; dispid 52;
    function SetSuppression(SuppressState: Integer): WordBool; dispid 53;
    function RemoveMaterialProperty: WordBool; dispid 54;
    function Select(AppendFlag: WordBool): WordBool; dispid 55;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; dispid 56;
    function DeSelect: WordBool; dispid 57;
    function GetBox(var BBox: OleVariant): WordBool; dispid 58;
    function IGetBox(var BBox: Double): WordBool; dispid 59;
    function IModifyDefinition2(const Data: IUnknown; const TopDoc: IModelDoc2; 
                                const Component: IComponent2): WordBool; dispid 60;
    function IGetFaces2(var FaceCount: Integer): IFace2; dispid 61;
    function IGetBody2: IBody2; dispid 62;
    function ISetBody3(const BodyIn: IBody2; ApplyUserIds: WordBool): WordBool; dispid 63;
    procedure ListExternalFileReferences(out ModelPathName: OleVariant; 
                                         out ComponentPathName: OleVariant; 
                                         out Feature: OleVariant; out DataType: OleVariant; 
                                         out Status: OleVariant; out RefEntity: OleVariant; 
                                         out FeatCom: OleVariant); dispid 64;
    function ListExternalFileReferencesCount: Integer; dispid 65;
    procedure IListExternalFileReferences(NumRefs: Integer; out ModelPathName: WideString; 
                                          out CompPathName: WideString; out Feature: WideString; 
                                          out DataType: WideString; out Status: Integer; 
                                          out RefEntity: WideString; out FeatComp: WideString); dispid 66;
    function Select2(Append: WordBool; Mark: Integer): WordBool; dispid 67;
    function IsRolledBack: WordBool; dispid 68;
    function IsBase: WordBool; dispid 69;
    property Description: WideString dispid 70;
    function MakeSubFeature(const SubFeature: IFeature): WordBool; dispid 71;
    property CreatedBy: WideString readonly dispid 72;
    property DateCreated: WideString readonly dispid 73;
    property DateModified: WideString readonly dispid 74;
    function IsBase2: WordBool; dispid 75;
    function GetSpecificFeature2: IDispatch; dispid 76;
    procedure SetMaterialPropertyValues2(Material_values: OleVariant; Config_opt: Integer; 
                                         Config_names: OleVariant); dispid 77;
    procedure ISetMaterialPropertyValues2(var Material_values: Double; Config_opt: Integer; 
                                          Config_count: Integer; var Config_names: WideString); dispid 78;
    function GetMaterialPropertyValues2(Config_opt: Integer; Config_names: OleVariant): OleVariant; dispid 79;
    function IGetMaterialPropertyValues2(Config_opt: Integer; Config_count: Integer; 
                                         var Config_names: WideString): Double; dispid 80;
    function SetSuppression2(SuppressionState: Integer; Config_opt: Integer; 
                             Config_names: OleVariant): WordBool; dispid 81;
    function ISetSuppression2(SuppressionState: Integer; Config_opt: Integer; 
                              Config_count: Integer; var Config_names: WideString): WordBool; dispid 82;
    function IsSuppressed2(Config_opt: Integer; Config_names: OleVariant): OleVariant; dispid 83;
    function IIsSuppressed2(Config_opt: Integer; Config_count: Integer; var Config_names: WideString): WordBool; dispid 84;
    property CustomPropertyManager: ICustomPropertyManager readonly dispid 85;
    function RemoveMaterialProperty2(Config_opt: Integer; Config_names: OleVariant): WordBool; dispid 86;
    function IRemoveMaterialProperty2(Config_opt: Integer; Config_count: Integer; 
                                      var Config_names: WideString): WordBool; dispid 87;
    procedure ListExternalFileReferences2(out ModelPathName: OleVariant; 
                                          out ComponentPathName: OleVariant; 
                                          out Feature: OleVariant; out DataType: OleVariant; 
                                          out Status: OleVariant; out RefEntity: OleVariant; 
                                          out FeatCom: OleVariant; out ConfigOption: Integer; 
                                          out ConfigName: WideString); dispid 88;
    procedure IListExternalFileReferences2(NumRefs: Integer; out ModelPathName: WideString; 
                                           out CompPathName: WideString; out Feature: WideString; 
                                           out DataType: WideString; out Status: Integer; 
                                           out RefEntity: WideString; out FeatComp: WideString; 
                                           out ConfigOption: Integer; out ConfigName: WideString); dispid 89;
    procedure UpdateExternalFileReferences(ConfigOption: Integer; const ConfigName: WideString; 
                                           UpdateStatus: Integer); dispid 90;
    property Visible: Integer readonly dispid 91;
    function GetTexture(const Config_name: WideString): ITexture; dispid 92;
    function SetTexture(BAllConfig: WordBool; const Config_name: WideString; 
                        const TextureIn: ITexture): WordBool; dispid 93;
    function RemoveTexture(BAllConfig: WordBool; const Config_name: WideString): WordBool; dispid 94;
    function GetAffectedFaceCount: Integer; dispid 95;
    function GetAffectedFaces: OleVariant; dispid 96;
    function IGetAffectedFaces(var NCount: Integer): IFace2; dispid 97;
    function GetCreatedVersion: Integer; dispid 98;
    function GetModifiedVersion: Integer; dispid 99;
    function AddComment(const Text: WideString): IComment; dispid 100;
    function GetOwnerFeature: IFeature; dispid 101;
    procedure SetBodiesToKeep(AllBodies: WordBool; BodiesToKeep: OleVariant; ConfigOption: Integer; 
                              ConfigNames: OleVariant); dispid 102;
    function GetTypeName2: WideString; dispid 103;
    function GetErrorCode2(out IsWarning: WordBool): Integer; dispid 104;
  end;

// *********************************************************************//
// Interface: IEnumDisplayDimensions
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33DAB-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumDisplayDimensions = interface(IUnknown)
    ['{83A33DAB-27C5-11CE-BFD4-00400513BB57}']
    function Next(Celt: Integer; out Rgelt: IDisplayDimension; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumDisplayDimensions): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IComponent2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {655D6F2A-5441-45D1-8CBA-D35FB26988E4}
// *********************************************************************//
  IComponent2 = interface(IDispatch)
    ['{655D6F2A-5441-45D1-8CBA-D35FB26988E4}']
    function GetChildren: OleVariant; safecall;
    function IGetChildren: IComponent2; safecall;
    function IGetChildrenCount: SYSINT; safecall;
    function GetXform: OleVariant; safecall;
    function IGetXform: Double; safecall;
    function GetBody: IDispatch; safecall;
    function IGetBody: IBody2; safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(Retval: OleVariant); safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var Retval: Double); safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(ID: Integer): OleVariant; safecall;
    procedure ResetPropertyExtension; safecall;
    function GetMaterialIdName: WideString; safecall;
    function SetMaterialIdName(const Name: WideString): WordBool; safecall;
    function GetMaterialUserName: WideString; safecall;
    function SetMaterialUserName(const Name: WideString): WordBool; safecall;
    function GetSectionedBodies(const ViewIn: IDispatch): OleVariant; safecall;
    function GetBox(IncludeRefPlanes: WordBool; IncludeSketches: WordBool): OleVariant; safecall;
    function IGetBox(IncludeRefPlanes: WordBool; IncludeSketches: WordBool): Double; safecall;
    function SetXform(XformIn: OleVariant): WordBool; safecall;
    function ISetXform(var XformIn: Double): WordBool; safecall;
    function GetModelDoc: IDispatch; safecall;
    function IGetModelDoc: IModelDoc2; safecall;
    function IsFixed: WordBool; safecall;
    function EnumRelatedBodies: IEnumBodies2; safecall;
    function IsSuppressed: WordBool; safecall;
    function EnumSectionedBodies(const ViewIn: IModelView): IEnumBodies2; safecall;
    function IsHidden(ConsiderSuppressed: WordBool): WordBool; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_ReferencedConfiguration(const Retval: WideString); safecall;
    function Get_ReferencedConfiguration: WideString; safecall;
    function GetSuppression: Integer; safecall;
    function SetSuppression(State: Integer): Integer; safecall;
    function Get_Visible: Integer; safecall;
    procedure Set_Visible(Retval: Integer); safecall;
    function GetPathName: WideString; safecall;
    function SetXformAndSolve(XformIn: OleVariant): WordBool; safecall;
    function ISetXformAndSolve(var XformIn: Double): WordBool; safecall;
    function GetTessTriangles(NoConversion: WordBool): OleVariant; safecall;
    function IGetTessTriangles(NoConversion: WordBool): Single; safecall;
    function IGetTessTriangleCount: Integer; safecall;
    function GetTessNorms: OleVariant; safecall;
    function IGetTessNorms: Single; safecall;
    function GetTessTriStrips(NoConversion: WordBool): OleVariant; safecall;
    function IGetTessTriStrips(NoConversion: WordBool): Single; safecall;
    function IGetTessTriStripSize: Integer; safecall;
    function GetTessTriStripNorms: OleVariant; safecall;
    function IGetTessTriStripNorms: Single; safecall;
    function GetTessTriStripEdges: OleVariant; safecall;
    function IGetTessTriStripEdges: Integer; safecall;
    function IGetTessTriStripEdgeSize: Integer; safecall;
    function IsDisplayDataOutOfDate: Integer; safecall;
    function GetConstrainedStatus: Integer; safecall;
    function RemoveMaterialProperty: WordBool; safecall;
    function IGetTemporaryBodyID: Integer; safecall;
    function FindAttribute(const AttributeDef: IDispatch; WhichOne: Integer): IDispatch; safecall;
    function IFindAttribute(const AttributeDef: IAttributeDef; WhichOne: Integer): IAttribute; safecall;
    function Select(AppendFlag: WordBool): WordBool; safecall;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function Get_Name2: WideString; safecall;
    procedure Set_Name2(const NewName: WideString); safecall;
    function Get_Solving: Integer; safecall;
    procedure ListExternalFileReferences(out ModelPathName: OleVariant; 
                                         out ComponentPathName: OleVariant; 
                                         out Feature: OleVariant; out DataType: OleVariant; 
                                         out Status: OleVariant; out RefEntity: OleVariant; 
                                         out FeatCom: OleVariant); safecall;
    function ListExternalFileReferencesCount: Integer; safecall;
    procedure IListExternalFileReferences(NumRefs: Integer; out ModelPathName: WideString; 
                                          out CompPathName: WideString; out Feature: WideString; 
                                          out DataType: WideString; out Status: Integer; 
                                          out RefEntity: WideString; out FeatComp: WideString); safecall;
    function ReplaceReference(const FileName: WideString): Integer; safecall;
    function Select2(Append: WordBool; Mark: Integer): WordBool; safecall;
    function GetCorrespondingEntity(const Entity: IDispatch): IDispatch; safecall;
    function IGetCorrespondingEntity(const PEntity: IEntity): IEntity; safecall;
    function IsEnvelope: WordBool; safecall;
    function Get_Transform: IMathTransform; safecall;
    procedure Set_Transform(const Xform: IMathTransform); safecall;
    function SetTransformAndSolve(const XformIn: IMathTransform): WordBool; safecall;
    function GetParent: IComponent2; safecall;
    function FirstFeature: IFeature; safecall;
    function Get_PresentationTransform: IMathTransform; safecall;
    procedure Set_PresentationTransform(const Xform: IMathTransform); safecall;
    procedure RemovePresentationTransform; safecall;
    function EnumBodies(BodyType: Integer): IEnumBodies2; safecall;
    function GetBodies(BodyType: Integer): OleVariant; safecall;
    function GetTotalTransform(IncludePresentationXform: WordBool): IMathTransform; safecall;
    function Get_Transform2: IMathTransform; safecall;
    procedure Set_Transform2(const Xform: IMathTransform); safecall;
    function SetTransformAndSolve2(const XformIn: IMathTransform): WordBool; safecall;
    function IGetMaterialPropertyValuesForFace(const FaceIn: IDispatch): Double; safecall;
    function GetDrawingComponent(const ViewIn: IView): IDrawingComponent; safecall;
    procedure SetMaterialPropertyValues2(Material_values: OleVariant; Config_opt: Integer; 
                                         Config_names: OleVariant); safecall;
    procedure ISetMaterialPropertyValues2(var Material_values: Double; Config_opt: Integer; 
                                          Config_count: Integer; var Config_names: WideString); safecall;
    function GetMaterialPropertyValues2(Config_opt: Integer; Config_names: OleVariant): OleVariant; safecall;
    function IGetMaterialPropertyValues2(Config_opt: Integer; Config_count: Integer; 
                                         var Config_names: WideString): Double; safecall;
    procedure SetVisibility(State: Integer; Config_opt: Integer; Config_names: OleVariant); safecall;
    procedure ISetVisibility(State: Integer; Config_opt: Integer; Config_count: Integer; 
                             var Config_names: WideString); safecall;
    function GetVisibility(Config_opt: Integer; Config_names: OleVariant): OleVariant; safecall;
    function IGetVisibility(Config_opt: Integer; Config_count: Integer; var Config_names: WideString): Integer; safecall;
    function FeatureByName(const Name: WideString): IFeature; safecall;
    function RemoveMaterialProperty2(Config_opt: Integer; Config_names: OleVariant): WordBool; safecall;
    function IRemoveMaterialProperty2(Config_opt: Integer; Config_count: Integer; 
                                      var Config_names: WideString): WordBool; safecall;
    procedure ListExternalFileReferences2(out ModelPathName: OleVariant; 
                                          out ComponentPathName: OleVariant; 
                                          out Feature: OleVariant; out DataType: OleVariant; 
                                          out Status: OleVariant; out RefEntity: OleVariant; 
                                          out FeatCom: OleVariant; out ConfigOption: Integer; 
                                          out ConfigName: WideString); safecall;
    procedure IListExternalFileReferences2(NumRefs: Integer; out ModelPathName: WideString; 
                                           out CompPathName: WideString; out Feature: WideString; 
                                           out DataType: WideString; out Status: Integer; 
                                           out RefEntity: WideString; out FeatComp: WideString; 
                                           out ConfigOption: Integer; out ConfigName: WideString); safecall;
    procedure UpdateExternalFileReferences(ConfigOption: Integer; const ConfigName: WideString; 
                                           UpdateStatus: Integer); safecall;
    function SetSuppression2(State: Integer): Integer; safecall;
    function GetTexture(const Config_name: WideString): ITexture; safecall;
    function SetTexture(const Config_name: WideString; const TextureIn: ITexture): WordBool; safecall;
    function RemoveTexture(const Config_name: WideString): WordBool; safecall;
    function Get_ExcludeFromBOM: WordBool; safecall;
    procedure Set_ExcludeFromBOM(BExclude: WordBool); safecall;
    function Get_UseNamedConfiguration: WordBool; safecall;
    function GetCorresponding(const InputObject: IDispatch): IDispatch; safecall;
    function Select3(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    function EnumBodies2(BodyType: Integer): IEnumBodies2; safecall;
    function GetBodies2(BodyType: Integer): OleVariant; safecall;
    function GetRemainingDOFs(out Rpoint1_status: Integer; out Rpoint1: IMathPoint; 
                              out Rdirection1_status: Integer; out Rdirection1: IMathVector; 
                              out Rpoint2_status: Integer; out Rpoint2: IMathPoint; 
                              out Rdirection2_status: Integer; out Rdirection2: IMathVector; 
                              out Tdirection1_status: Integer; out Tdirection1: IMathVector; 
                              out Tdirection2_status: Integer; out Tdirection2: IMathVector): Integer; safecall;
    function IsPatternInstance: WordBool; safecall;
    function GetDecalsCount: Integer; safecall;
    function GetDecals: OleVariant; safecall;
    function IGetDecals(Count: Integer): IDecal; safecall;
    function GetRenderMaterialsCount: Integer; safecall;
    function GetRenderMaterials: OleVariant; safecall;
    function IGetRenderMaterials(Count: Integer): IRenderMaterial; safecall;
    function IsMirrored: WordBool; safecall;
    function Get_IsVirtual: WordBool; safecall;
    procedure Set_IsVirtual(Retval: WordBool); safecall;
    function HasUnloadedComponents: WordBool; safecall;
    function GetUnloadedComponentNames(out UnloadedComponentPathNames: OleVariant; 
                                       out UnloadedComponentReferencedConfigurationNames: OleVariant; 
                                       out ReasonForUnloadingComponents: OleVariant; 
                                       out DocTypes: OleVariant): OleVariant; safecall;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
    property Name: WideString read Get_Name;
    property ReferencedConfiguration: WideString read Get_ReferencedConfiguration write Set_ReferencedConfiguration;
    property Visible: Integer read Get_Visible write Set_Visible;
    property Name2: WideString read Get_Name2 write Set_Name2;
    property Solving: Integer read Get_Solving;
    property Transform: IMathTransform read Get_Transform write Set_Transform;
    property PresentationTransform: IMathTransform read Get_PresentationTransform write Set_PresentationTransform;
    property Transform2: IMathTransform read Get_Transform2 write Set_Transform2;
    property ExcludeFromBOM: WordBool read Get_ExcludeFromBOM write Set_ExcludeFromBOM;
    property UseNamedConfiguration: WordBool read Get_UseNamedConfiguration;
    property IsVirtual: WordBool read Get_IsVirtual write Set_IsVirtual;
  end;

// *********************************************************************//
// DispIntf:  IComponent2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {655D6F2A-5441-45D1-8CBA-D35FB26988E4}
// *********************************************************************//
  IComponent2Disp = dispinterface
    ['{655D6F2A-5441-45D1-8CBA-D35FB26988E4}']
    function GetChildren: OleVariant; dispid 1;
    function IGetChildren: IComponent2; dispid 2;
    function IGetChildrenCount: SYSINT; dispid 3;
    function GetXform: OleVariant; dispid 4;
    function IGetXform: Double; dispid 5;
    function GetBody: IDispatch; dispid 6;
    function IGetBody: IBody2; dispid 7;
    property MaterialPropertyValues: OleVariant dispid 8;
    function IMaterialPropertyValues: Double; dispid 9;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 10;
    function GetPropertyExtension(ID: Integer): OleVariant; dispid 11;
    procedure ResetPropertyExtension; dispid 12;
    function GetMaterialIdName: WideString; dispid 13;
    function SetMaterialIdName(const Name: WideString): WordBool; dispid 14;
    function GetMaterialUserName: WideString; dispid 15;
    function SetMaterialUserName(const Name: WideString): WordBool; dispid 16;
    function GetSectionedBodies(const ViewIn: IDispatch): OleVariant; dispid 17;
    function GetBox(IncludeRefPlanes: WordBool; IncludeSketches: WordBool): OleVariant; dispid 18;
    function IGetBox(IncludeRefPlanes: WordBool; IncludeSketches: WordBool): Double; dispid 19;
    function SetXform(XformIn: OleVariant): WordBool; dispid 20;
    function ISetXform(var XformIn: Double): WordBool; dispid 21;
    function GetModelDoc: IDispatch; dispid 22;
    function IGetModelDoc: IModelDoc2; dispid 23;
    function IsFixed: WordBool; dispid 24;
    function EnumRelatedBodies: IEnumBodies2; dispid 25;
    function IsSuppressed: WordBool; dispid 26;
    function EnumSectionedBodies(const ViewIn: IModelView): IEnumBodies2; dispid 27;
    function IsHidden(ConsiderSuppressed: WordBool): WordBool; dispid 28;
    property Name: WideString readonly dispid 29;
    property ReferencedConfiguration: WideString dispid 30;
    function GetSuppression: Integer; dispid 31;
    function SetSuppression(State: Integer): Integer; dispid 32;
    property Visible: Integer dispid 33;
    function GetPathName: WideString; dispid 34;
    function SetXformAndSolve(XformIn: OleVariant): WordBool; dispid 35;
    function ISetXformAndSolve(var XformIn: Double): WordBool; dispid 36;
    function GetTessTriangles(NoConversion: WordBool): OleVariant; dispid 37;
    function IGetTessTriangles(NoConversion: WordBool): Single; dispid 38;
    function IGetTessTriangleCount: Integer; dispid 39;
    function GetTessNorms: OleVariant; dispid 40;
    function IGetTessNorms: Single; dispid 41;
    function GetTessTriStrips(NoConversion: WordBool): OleVariant; dispid 42;
    function IGetTessTriStrips(NoConversion: WordBool): Single; dispid 43;
    function IGetTessTriStripSize: Integer; dispid 44;
    function GetTessTriStripNorms: OleVariant; dispid 45;
    function IGetTessTriStripNorms: Single; dispid 46;
    function GetTessTriStripEdges: OleVariant; dispid 47;
    function IGetTessTriStripEdges: Integer; dispid 48;
    function IGetTessTriStripEdgeSize: Integer; dispid 49;
    function IsDisplayDataOutOfDate: Integer; dispid 50;
    function GetConstrainedStatus: Integer; dispid 51;
    function RemoveMaterialProperty: WordBool; dispid 52;
    function IGetTemporaryBodyID: Integer; dispid 53;
    function FindAttribute(const AttributeDef: IDispatch; WhichOne: Integer): IDispatch; dispid 54;
    function IFindAttribute(const AttributeDef: IAttributeDef; WhichOne: Integer): IAttribute; dispid 55;
    function Select(AppendFlag: WordBool): WordBool; dispid 56;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; dispid 57;
    function DeSelect: WordBool; dispid 58;
    property Name2: WideString dispid 59;
    property Solving: Integer readonly dispid 60;
    procedure ListExternalFileReferences(out ModelPathName: OleVariant; 
                                         out ComponentPathName: OleVariant; 
                                         out Feature: OleVariant; out DataType: OleVariant; 
                                         out Status: OleVariant; out RefEntity: OleVariant; 
                                         out FeatCom: OleVariant); dispid 61;
    function ListExternalFileReferencesCount: Integer; dispid 62;
    procedure IListExternalFileReferences(NumRefs: Integer; out ModelPathName: WideString; 
                                          out CompPathName: WideString; out Feature: WideString; 
                                          out DataType: WideString; out Status: Integer; 
                                          out RefEntity: WideString; out FeatComp: WideString); dispid 63;
    function ReplaceReference(const FileName: WideString): Integer; dispid 64;
    function Select2(Append: WordBool; Mark: Integer): WordBool; dispid 65;
    function GetCorrespondingEntity(const Entity: IDispatch): IDispatch; dispid 66;
    function IGetCorrespondingEntity(const PEntity: IEntity): IEntity; dispid 67;
    function IsEnvelope: WordBool; dispid 68;
    property Transform: IMathTransform dispid 69;
    function SetTransformAndSolve(const XformIn: IMathTransform): WordBool; dispid 70;
    function GetParent: IComponent2; dispid 71;
    function FirstFeature: IFeature; dispid 72;
    property PresentationTransform: IMathTransform dispid 73;
    procedure RemovePresentationTransform; dispid 74;
    function EnumBodies(BodyType: Integer): IEnumBodies2; dispid 75;
    function GetBodies(BodyType: Integer): OleVariant; dispid 76;
    function GetTotalTransform(IncludePresentationXform: WordBool): IMathTransform; dispid 77;
    property Transform2: IMathTransform dispid 78;
    function SetTransformAndSolve2(const XformIn: IMathTransform): WordBool; dispid 79;
    function IGetMaterialPropertyValuesForFace(const FaceIn: IDispatch): Double; dispid 80;
    function GetDrawingComponent(const ViewIn: IView): IDrawingComponent; dispid 81;
    procedure SetMaterialPropertyValues2(Material_values: OleVariant; Config_opt: Integer; 
                                         Config_names: OleVariant); dispid 82;
    procedure ISetMaterialPropertyValues2(var Material_values: Double; Config_opt: Integer; 
                                          Config_count: Integer; var Config_names: WideString); dispid 83;
    function GetMaterialPropertyValues2(Config_opt: Integer; Config_names: OleVariant): OleVariant; dispid 84;
    function IGetMaterialPropertyValues2(Config_opt: Integer; Config_count: Integer; 
                                         var Config_names: WideString): Double; dispid 85;
    procedure SetVisibility(State: Integer; Config_opt: Integer; Config_names: OleVariant); dispid 86;
    procedure ISetVisibility(State: Integer; Config_opt: Integer; Config_count: Integer; 
                             var Config_names: WideString); dispid 87;
    function GetVisibility(Config_opt: Integer; Config_names: OleVariant): OleVariant; dispid 88;
    function IGetVisibility(Config_opt: Integer; Config_count: Integer; var Config_names: WideString): Integer; dispid 89;
    function FeatureByName(const Name: WideString): IFeature; dispid 90;
    function RemoveMaterialProperty2(Config_opt: Integer; Config_names: OleVariant): WordBool; dispid 91;
    function IRemoveMaterialProperty2(Config_opt: Integer; Config_count: Integer; 
                                      var Config_names: WideString): WordBool; dispid 92;
    procedure ListExternalFileReferences2(out ModelPathName: OleVariant; 
                                          out ComponentPathName: OleVariant; 
                                          out Feature: OleVariant; out DataType: OleVariant; 
                                          out Status: OleVariant; out RefEntity: OleVariant; 
                                          out FeatCom: OleVariant; out ConfigOption: Integer; 
                                          out ConfigName: WideString); dispid 93;
    procedure IListExternalFileReferences2(NumRefs: Integer; out ModelPathName: WideString; 
                                           out CompPathName: WideString; out Feature: WideString; 
                                           out DataType: WideString; out Status: Integer; 
                                           out RefEntity: WideString; out FeatComp: WideString; 
                                           out ConfigOption: Integer; out ConfigName: WideString); dispid 94;
    procedure UpdateExternalFileReferences(ConfigOption: Integer; const ConfigName: WideString; 
                                           UpdateStatus: Integer); dispid 95;
    function SetSuppression2(State: Integer): Integer; dispid 96;
    function GetTexture(const Config_name: WideString): ITexture; dispid 97;
    function SetTexture(const Config_name: WideString; const TextureIn: ITexture): WordBool; dispid 98;
    function RemoveTexture(const Config_name: WideString): WordBool; dispid 99;
    property ExcludeFromBOM: WordBool dispid 100;
    property UseNamedConfiguration: WordBool readonly dispid 101;
    function GetCorresponding(const InputObject: IDispatch): IDispatch; dispid 102;
    function Select3(Append: WordBool; const Data: ISelectData): WordBool; dispid 103;
    function EnumBodies2(BodyType: Integer): IEnumBodies2; dispid 104;
    function GetBodies2(BodyType: Integer): OleVariant; dispid 105;
    function GetRemainingDOFs(out Rpoint1_status: Integer; out Rpoint1: IMathPoint; 
                              out Rdirection1_status: Integer; out Rdirection1: IMathVector; 
                              out Rpoint2_status: Integer; out Rpoint2: IMathPoint; 
                              out Rdirection2_status: Integer; out Rdirection2: IMathVector; 
                              out Tdirection1_status: Integer; out Tdirection1: IMathVector; 
                              out Tdirection2_status: Integer; out Tdirection2: IMathVector): Integer; dispid 106;
    function IsPatternInstance: WordBool; dispid 107;
    function GetDecalsCount: Integer; dispid 108;
    function GetDecals: OleVariant; dispid 109;
    function IGetDecals(Count: Integer): IDecal; dispid 110;
    function GetRenderMaterialsCount: Integer; dispid 111;
    function GetRenderMaterials: OleVariant; dispid 112;
    function IGetRenderMaterials(Count: Integer): IRenderMaterial; dispid 113;
    function IsMirrored: WordBool; dispid 114;
    property IsVirtual: WordBool dispid 115;
    function HasUnloadedComponents: WordBool; dispid 116;
    function GetUnloadedComponentNames(out UnloadedComponentPathNames: OleVariant; 
                                       out UnloadedComponentReferencedConfigurationNames: OleVariant; 
                                       out ReasonForUnloadingComponents: OleVariant; 
                                       out DocTypes: OleVariant): OleVariant; dispid 117;
  end;

// *********************************************************************//
// Interface: IEnumBodies2
// Flags:     (272) Hidden OleAutomation
// GUID:      {97A9BEFA-6814-4FA6-ACB4-8CC84F76FB99}
// *********************************************************************//
  IEnumBodies2 = interface(IUnknown)
    ['{97A9BEFA-6814-4FA6-ACB4-8CC84F76FB99}']
    function Next(Celt: Integer; out Rgelt: IBody2; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumBodies2): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IAttributeDef
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D67-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAttributeDef = interface(IDispatch)
    ['{83A33D67-27C5-11CE-BFD4-00400513BB57}']
    function CreateInstance(const OwnerDoc: IDispatch; const OwnerEntity: IDispatch; 
                            const NameIn: WideString): IDispatch; safecall;
    function ICreateInstance(const OwnerDoc: IModelDoc; const OwnerEntity: IEntity; 
                             const NameIn: WideString): IAttribute; safecall;
    function AddParameter(const NameIn: WideString; Type_: Integer; DefaultValue: Double; 
                          Options: Integer): WordBool; safecall;
    function SetOption(WhichOption: Integer; OptionValue: Integer): WordBool; safecall;
    function GetOption(WhichOption: Integer): Integer; safecall;
    function AddCallback(WhichCallback: Integer; const CallbackFcnAndModule: WideString; 
                         WhichOption: Integer): WordBool; safecall;
    function Register: WordBool; safecall;
    function CreateInstance2(const OwnerDoc: IDispatch; const OwnerEntity: IDispatch; 
                             const NameIn: WideString; Options: Integer): IDispatch; safecall;
    function ICreateInstance2(const OwnerDoc: IModelDoc; const OwnerEntity: IEntity; 
                              const NameIn: WideString; Options: Integer): IAttribute; safecall;
    function CreateInstance3(const OwnerDoc: IDispatch; const OwnerComp: IDispatch; 
                             const OwnerEntity: IDispatch; const NameIn: WideString; 
                             Options: Integer; ConfigurationOption: Integer): IDispatch; safecall;
    function ICreateInstance3(const OwnerDoc: IModelDoc; const OwnerComp: IComponent; 
                              const OwnerEntity: IEntity; const NameIn: WideString; 
                              Options: Integer; ConfigurationOption: Integer): IAttribute; safecall;
    function ICreateInstance4(const OwnerDoc: IModelDoc2; const OwnerComp: IComponent2; 
                              const OwnerEntity: IEntity; const NameIn: WideString; 
                              Options: Integer; ConfigurationOption: Integer): IAttribute; safecall;
    function CreateInstance4(const OwnerDoc: IModelDoc2; const OwnerObj: IDispatch; 
                             const NameIn: WideString; Options: Integer; 
                             ConfigurationOption: Integer): IAttribute; safecall;
    function CreateInstance5(const OwnerDoc: IModelDoc2; const OwnerObj: IDispatch; 
                             const NameIn: WideString; Options: Integer; 
                             ConfigurationOption: Integer): IAttribute; safecall;
  end;

// *********************************************************************//
// DispIntf:  IAttributeDefDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D67-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAttributeDefDisp = dispinterface
    ['{83A33D67-27C5-11CE-BFD4-00400513BB57}']
    function CreateInstance(const OwnerDoc: IDispatch; const OwnerEntity: IDispatch; 
                            const NameIn: WideString): IDispatch; dispid 1;
    function ICreateInstance(const OwnerDoc: IModelDoc; const OwnerEntity: IEntity; 
                             const NameIn: WideString): IAttribute; dispid 2;
    function AddParameter(const NameIn: WideString; Type_: Integer; DefaultValue: Double; 
                          Options: Integer): WordBool; dispid 3;
    function SetOption(WhichOption: Integer; OptionValue: Integer): WordBool; dispid 4;
    function GetOption(WhichOption: Integer): Integer; dispid 5;
    function AddCallback(WhichCallback: Integer; const CallbackFcnAndModule: WideString; 
                         WhichOption: Integer): WordBool; dispid 6;
    function Register: WordBool; dispid 7;
    function CreateInstance2(const OwnerDoc: IDispatch; const OwnerEntity: IDispatch; 
                             const NameIn: WideString; Options: Integer): IDispatch; dispid 8;
    function ICreateInstance2(const OwnerDoc: IModelDoc; const OwnerEntity: IEntity; 
                              const NameIn: WideString; Options: Integer): IAttribute; dispid 9;
    function CreateInstance3(const OwnerDoc: IDispatch; const OwnerComp: IDispatch; 
                             const OwnerEntity: IDispatch; const NameIn: WideString; 
                             Options: Integer; ConfigurationOption: Integer): IDispatch; dispid 10;
    function ICreateInstance3(const OwnerDoc: IModelDoc; const OwnerComp: IComponent; 
                              const OwnerEntity: IEntity; const NameIn: WideString; 
                              Options: Integer; ConfigurationOption: Integer): IAttribute; dispid 11;
    function ICreateInstance4(const OwnerDoc: IModelDoc2; const OwnerComp: IComponent2; 
                              const OwnerEntity: IEntity; const NameIn: WideString; 
                              Options: Integer; ConfigurationOption: Integer): IAttribute; dispid 12;
    function CreateInstance4(const OwnerDoc: IModelDoc2; const OwnerObj: IDispatch; 
                             const NameIn: WideString; Options: Integer; 
                             ConfigurationOption: Integer): IAttribute; dispid 13;
    function CreateInstance5(const OwnerDoc: IModelDoc2; const OwnerObj: IDispatch; 
                             const NameIn: WideString; Options: Integer; 
                             ConfigurationOption: Integer): IAttribute; dispid 14;
  end;

// *********************************************************************//
// Interface: IEntity
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D65-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEntity = interface(IDispatch)
    ['{83A33D65-27C5-11CE-BFD4-00400513BB57}']
    function CreateStringAttributeDefinition(const IdentifierString: WideString): Integer; safecall;
    function CreateStringAttribute(DefinitionTag: Integer; const StringValue: WideString): WordBool; safecall;
    function FindStringAttribute(DefinitionTag: Integer): WideString; safecall;
    function RemoveStringAttribute(DefinitionTag: Integer): WordBool; safecall;
    function FindAttribute(const AttributeDef: IDispatch; WhichOne: Integer): IDispatch; safecall;
    function IFindAttribute(const AttributeDef: IAttributeDef; WhichOne: Integer): IAttribute; safecall;
    function Select(AppendFlag: WordBool): WordBool; safecall;
    function GetType: Integer; safecall;
    function GetComponent: IDispatch; safecall;
    function IGetComponent: IComponent; safecall;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; safecall;
    function Get_ModelName: WideString; safecall;
    procedure Set_ModelName(const Retval: WideString); safecall;
    procedure DeleteModelName; safecall;
    function DeSelect: WordBool; safecall;
    function IGetComponent2: IComponent2; safecall;
    function Select2(Append: WordBool; Mark: Integer): WordBool; safecall;
    function Select3(Append: WordBool; Mark: Integer; const Callout: ICallout): WordBool; safecall;
    function Get_IsSafe: WordBool; safecall;
    function GetSafeEntity: IEntity; safecall;
    function Select4(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    function GetDrawingComponent(const View: IView): IDrawingComponent; safecall;
    property ModelName: WideString read Get_ModelName write Set_ModelName;
    property IsSafe: WordBool read Get_IsSafe;
  end;

// *********************************************************************//
// DispIntf:  IEntityDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D65-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEntityDisp = dispinterface
    ['{83A33D65-27C5-11CE-BFD4-00400513BB57}']
    function CreateStringAttributeDefinition(const IdentifierString: WideString): Integer; dispid 65537;
    function CreateStringAttribute(DefinitionTag: Integer; const StringValue: WideString): WordBool; dispid 65538;
    function FindStringAttribute(DefinitionTag: Integer): WideString; dispid 65539;
    function RemoveStringAttribute(DefinitionTag: Integer): WordBool; dispid 65540;
    function FindAttribute(const AttributeDef: IDispatch; WhichOne: Integer): IDispatch; dispid 65541;
    function IFindAttribute(const AttributeDef: IAttributeDef; WhichOne: Integer): IAttribute; dispid 65542;
    function Select(AppendFlag: WordBool): WordBool; dispid 65543;
    function GetType: Integer; dispid 65544;
    function GetComponent: IDispatch; dispid 65545;
    function IGetComponent: IComponent; dispid 65546;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; dispid 65547;
    property ModelName: WideString dispid 65548;
    procedure DeleteModelName; dispid 65549;
    function DeSelect: WordBool; dispid 65550;
    function IGetComponent2: IComponent2; dispid 65551;
    function Select2(Append: WordBool; Mark: Integer): WordBool; dispid 65552;
    function Select3(Append: WordBool; Mark: Integer; const Callout: ICallout): WordBool; dispid 65553;
    property IsSafe: WordBool readonly dispid 65554;
    function GetSafeEntity: IEntity; dispid 65555;
    function Select4(Append: WordBool; const Data: ISelectData): WordBool; dispid 65556;
    function GetDrawingComponent(const View: IView): IDrawingComponent; dispid 65557;
  end;

// *********************************************************************//
// Interface: IAttribute
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D71-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAttribute = interface(IDispatch)
    ['{83A33D71-27C5-11CE-BFD4-00400513BB57}']
    function GetParameter(const NameIn: WideString): IDispatch; safecall;
    function IGetParameter(const NameIn: WideString): IParameter; safecall;
    function GetEntity: IDispatch; safecall;
    function IGetEntity: IEntity; safecall;
    function GetDefinition: IDispatch; safecall;
    function IGetDefinition: IAttributeDef; safecall;
    function GetName: WideString; safecall;
    function GetEntityState(WhichState: Integer): WordBool; safecall;
    function GetComponent: IDispatch; safecall;
    function IGetComponent: IComponent; safecall;
    function IGetComponent2: IComponent2; safecall;
    function GetEntity2: IDispatch; safecall;
    function IGetEntity2: IEntity; safecall;
    function GetBody: IBody2; safecall;
    function Delete(BuildTree: WordBool): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IAttributeDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D71-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAttributeDisp = dispinterface
    ['{83A33D71-27C5-11CE-BFD4-00400513BB57}']
    function GetParameter(const NameIn: WideString): IDispatch; dispid 1;
    function IGetParameter(const NameIn: WideString): IParameter; dispid 2;
    function GetEntity: IDispatch; dispid 3;
    function IGetEntity: IEntity; dispid 4;
    function GetDefinition: IDispatch; dispid 5;
    function IGetDefinition: IAttributeDef; dispid 6;
    function GetName: WideString; dispid 7;
    function GetEntityState(WhichState: Integer): WordBool; dispid 8;
    function GetComponent: IDispatch; dispid 9;
    function IGetComponent: IComponent; dispid 10;
    function IGetComponent2: IComponent2; dispid 11;
    function GetEntity2: IDispatch; dispid 12;
    function IGetEntity2: IEntity; dispid 13;
    function GetBody: IBody2; dispid 14;
    function Delete(BuildTree: WordBool): WordBool; dispid 15;
  end;

// *********************************************************************//
// Interface: IParameter
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D69-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IParameter = interface(IDispatch)
    ['{83A33D69-27C5-11CE-BFD4-00400513BB57}']
    function GetDoubleValue: Double; safecall;
    function SetDoubleValue(Value: Double): WordBool; safecall;
    function GetType: Integer; safecall;
    function GetName: WideString; safecall;
    function GetOption(WhichOption: Integer): Integer; safecall;
    function SetOption(WhichOption: Integer; OptionValue: Integer): WordBool; safecall;
    function GetStringValue: WideString; safecall;
    function SetStringValue(const StringValue: WideString): WordBool; safecall;
    procedure GetVector(out X: Double; out Y: Double; out Z: Double); safecall;
    function SetVector(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function GetVectorVB: OleVariant; safecall;
    function SetDoubleValue2(Value: Double; ConfigurationOption: Integer; 
                             const ConfigurationName: WideString): WordBool; safecall;
    function SetStringValue2(const StringValue: WideString; ConfigurationOption: Integer; 
                             const ConfigurationName: WideString): WordBool; safecall;
    function SetVector2(X: Double; Y: Double; Z: Double; ConfigurationOption: Integer; 
                        const ConfigurationName: WideString): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IParameterDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D69-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IParameterDisp = dispinterface
    ['{83A33D69-27C5-11CE-BFD4-00400513BB57}']
    function GetDoubleValue: Double; dispid 1;
    function SetDoubleValue(Value: Double): WordBool; dispid 2;
    function GetType: Integer; dispid 3;
    function GetName: WideString; dispid 4;
    function GetOption(WhichOption: Integer): Integer; dispid 5;
    function SetOption(WhichOption: Integer; OptionValue: Integer): WordBool; dispid 6;
    function GetStringValue: WideString; dispid 7;
    function SetStringValue(const StringValue: WideString): WordBool; dispid 8;
    procedure GetVector(out X: Double; out Y: Double; out Z: Double); dispid 9;
    function SetVector(X: Double; Y: Double; Z: Double): WordBool; dispid 10;
    function GetVectorVB: OleVariant; dispid 11;
    function SetDoubleValue2(Value: Double; ConfigurationOption: Integer; 
                             const ConfigurationName: WideString): WordBool; dispid 12;
    function SetStringValue2(const StringValue: WideString; ConfigurationOption: Integer; 
                             const ConfigurationName: WideString): WordBool; dispid 13;
    function SetVector2(X: Double; Y: Double; Z: Double; ConfigurationOption: Integer; 
                        const ConfigurationName: WideString): WordBool; dispid 14;
  end;

// *********************************************************************//
// Interface: IDrawingComponent
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F25E6093-1A6F-46D3-9866-860934DF611D}
// *********************************************************************//
  IDrawingComponent = interface(IDispatch)
    ['{F25E6093-1A6F-46D3-9866-860934DF611D}']
    function Get_View: IView; safecall;
    function IsRoot: WordBool; safecall;
    function Get_Component: IComponent2; safecall;
    function GetChildrenCount: Integer; safecall;
    function GetChildren: OleVariant; safecall;
    function IGetChildren(Count: Integer): IDrawingComponent; safecall;
    procedure Set_Layer(const Retval: WideString); safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_LayerOverride(Retval: Integer); safecall;
    function Get_LayerOverride: Integer; safecall;
    procedure Set_Visible(Retval: WordBool); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Style(Retval: Integer); safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Width(Retval: Integer); safecall;
    function Get_Width: Integer; safecall;
    function Select(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function Get_Name: WideString; safecall;
    property View: IView read Get_View;
    property Component: IComponent2 read Get_Component;
    property Layer: WideString read Get_Layer write Set_Layer;
    property LayerOverride: Integer read Get_LayerOverride write Set_LayerOverride;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Style: Integer read Get_Style write Set_Style;
    property Width: Integer read Get_Width write Set_Width;
    property Name: WideString read Get_Name;
  end;

// *********************************************************************//
// DispIntf:  IDrawingComponentDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F25E6093-1A6F-46D3-9866-860934DF611D}
// *********************************************************************//
  IDrawingComponentDisp = dispinterface
    ['{F25E6093-1A6F-46D3-9866-860934DF611D}']
    property View: IView readonly dispid 1;
    function IsRoot: WordBool; dispid 2;
    property Component: IComponent2 readonly dispid 3;
    function GetChildrenCount: Integer; dispid 4;
    function GetChildren: OleVariant; dispid 5;
    function IGetChildren(Count: Integer): IDrawingComponent; dispid 6;
    property Layer: WideString dispid 7;
    property LayerOverride: Integer dispid 8;
    property Visible: WordBool dispid 9;
    property Style: Integer dispid 10;
    property Width: Integer dispid 11;
    function Select(Append: WordBool; const Data: ISelectData): WordBool; dispid 12;
    function DeSelect: WordBool; dispid 13;
    property Name: WideString readonly dispid 14;
  end;

// *********************************************************************//
// Interface: ITexture
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B81F43F1-8F16-4482-BF05-8BEE973B6CE8}
// *********************************************************************//
  ITexture = interface(IDispatch)
    ['{B81F43F1-8F16-4482-BF05-8BEE973B6CE8}']
    function Get_MaterialName: WideString; safecall;
    procedure Set_MaterialName(const MatName: WideString); safecall;
    function Get_ScaleFactor: Double; safecall;
    procedure Set_ScaleFactor(Val: Double); safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Val: Double); safecall;
    function Get_BlendColor: WordBool; safecall;
    procedure Set_BlendColor(BVal: WordBool); safecall;
    function GetSystemTextureName(const FileNameIn: WideString; out Res: WordBool): WideString; safecall;
    property MaterialName: WideString read Get_MaterialName write Set_MaterialName;
    property ScaleFactor: Double read Get_ScaleFactor write Set_ScaleFactor;
    property Angle: Double read Get_Angle write Set_Angle;
    property BlendColor: WordBool read Get_BlendColor write Set_BlendColor;
  end;

// *********************************************************************//
// DispIntf:  ITextureDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B81F43F1-8F16-4482-BF05-8BEE973B6CE8}
// *********************************************************************//
  ITextureDisp = dispinterface
    ['{B81F43F1-8F16-4482-BF05-8BEE973B6CE8}']
    property MaterialName: WideString dispid 1;
    property ScaleFactor: Double dispid 2;
    property Angle: Double dispid 3;
    property BlendColor: WordBool dispid 4;
    function GetSystemTextureName(const FileNameIn: WideString; out Res: WordBool): WideString; dispid 5;
  end;

// *********************************************************************//
// Interface: IDecal
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {263F0FF6-4C7E-477A-B0AE-49EE41E43351}
// *********************************************************************//
  IDecal = interface(IDispatch)
    ['{263F0FF6-4C7E-477A-B0AE-49EE41E43351}']
    function Get_DecalID: Integer; safecall;
    function Get_Hidden: WordBool; safecall;
    procedure Set_Hidden(HiddenState: WordBool); safecall;
    function Get_MaskType: Integer; safecall;
    procedure Set_MaskType(MaskType: Integer); safecall;
    function Get_MaskFilename: WideString; safecall;
    procedure Set_MaskFilename(const MaskFilename: WideString); safecall;
    function Get_MaskInvert: WordBool; safecall;
    procedure Set_MaskInvert(MaskInvert: WordBool); safecall;
    function GetMaskExcludedColorsCount: Integer; safecall;
    function IGetMaskExcludedColors(Count: Integer): Integer; safecall;
    procedure ISetMaskExcludedColors(Count: Integer; var MaskColors: Integer); safecall;
    property DecalID: Integer read Get_DecalID;
    property Hidden: WordBool read Get_Hidden write Set_Hidden;
    property MaskType: Integer read Get_MaskType write Set_MaskType;
    property MaskFilename: WideString read Get_MaskFilename write Set_MaskFilename;
    property MaskInvert: WordBool read Get_MaskInvert write Set_MaskInvert;
  end;

// *********************************************************************//
// DispIntf:  IDecalDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {263F0FF6-4C7E-477A-B0AE-49EE41E43351}
// *********************************************************************//
  IDecalDisp = dispinterface
    ['{263F0FF6-4C7E-477A-B0AE-49EE41E43351}']
    property DecalID: Integer readonly dispid 1;
    property Hidden: WordBool dispid 2;
    property MaskType: Integer dispid 3;
    property MaskFilename: WideString dispid 4;
    property MaskInvert: WordBool dispid 5;
    function GetMaskExcludedColorsCount: Integer; dispid 6;
    function IGetMaskExcludedColors(Count: Integer): Integer; dispid 7;
    procedure ISetMaskExcludedColors(Count: Integer; var MaskColors: Integer); dispid 8;
  end;

// *********************************************************************//
// Interface: IRenderMaterial
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D3BD935B-DFB4-4EDA-B03A-DA4EB2024F3F}
// *********************************************************************//
  IRenderMaterial = interface(IDispatch)
    ['{D3BD935B-DFB4-4EDA-B03A-DA4EB2024F3F}']
    function Get_Ambient: Double; safecall;
    procedure Set_Ambient(Ambient: Double); safecall;
    function Get_XPosition: Double; safecall;
    procedure Set_XPosition(X: Double); safecall;
    function Get_YPosition: Double; safecall;
    procedure Set_YPosition(Y: Double); safecall;
    function Get_RotationAngle: Double; safecall;
    procedure Set_RotationAngle(Ang: Double); safecall;
    function Get_Direction1RotationAngle: Double; safecall;
    procedure Set_Direction1RotationAngle(Direction1RotAngle: Double); safecall;
    function Get_Direction2RotationAngle: Double; safecall;
    procedure Set_Direction2RotationAngle(Direction2RotAngle: Double); safecall;
    function Get_Width: Double; safecall;
    procedure Set_Width(Width: Double); safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_WidthMirror: WordBool; safecall;
    procedure Set_WidthMirror(WidthMirror: WordBool); safecall;
    function Get_HeightMirror: WordBool; safecall;
    procedure Set_HeightMirror(HeightMirror: WordBool); safecall;
    function Get_FixedAspectRatio: WordBool; safecall;
    procedure Set_FixedAspectRatio(FixedAspect: WordBool); safecall;
    function Get_FitWidth: WordBool; safecall;
    procedure Set_FitWidth(FitWidth: WordBool); safecall;
    function Get_FitHeight: WordBool; safecall;
    procedure Set_FitHeight(FitHeight: WordBool); safecall;
    function Get_FileName: WideString; safecall;
    procedure Set_FileName(const DecalFilename: WideString); safecall;
    function Get_TextureFilename: WideString; safecall;
    procedure Set_TextureFilename(const TextureFilename: WideString); safecall;
    function Get_Diffuse: Double; safecall;
    procedure Set_Diffuse(Diffuse: Double); safecall;
    function Get_Specular: Double; safecall;
    procedure Set_Specular(Specular: Double); safecall;
    function Get_Transparency: Double; safecall;
    procedure Set_Transparency(Transparency: Double); safecall;
    function Get_Emission: Double; safecall;
    procedure Set_Emission(Emission: Double); safecall;
    function Get_MappingType: Integer; safecall;
    procedure Set_MappingType(MappingType: Integer); safecall;
    function Get_ProjectionReference: Integer; safecall;
    procedure Set_ProjectionReference(ProjectionReference: Integer); safecall;
    procedure GetUDirection(out UDir: Double); safecall;
    procedure SetUDirection(var UDir: Double); safecall;
    procedure GetVDirection(out VDir: Double); safecall;
    procedure SetVDirection(var VDir: Double); safecall;
    procedure GetCenterPoint(out CenterPt: Double); safecall;
    procedure SetCenterPoint(var CenterPt: Double); safecall;
    function Get_MaterialID: Integer; safecall;
    function GetEntitiesCount: Integer; safecall;
    function GetEntities: OleVariant; safecall;
    function IGetEntities(Count: Integer): IDispatch; safecall;
    function Get_IlluminationShaderType: Integer; safecall;
    procedure Set_IlluminationShaderType(IllumType: Integer); safecall;
    function Get_SpecularColor: Integer; safecall;
    procedure Set_SpecularColor(SpecularColor: Integer); safecall;
    function Get_Glossy: Double; safecall;
    procedure Set_Glossy(Glossy: Double); safecall;
    function Get_Roughness: Double; safecall;
    procedure Set_Roughness(Roughness: Double); safecall;
    function Get_Reflectivity: Double; safecall;
    procedure Set_Reflectivity(Reflectivity: Double); safecall;
    function Get_IndexOfRefraction: Double; safecall;
    procedure Set_IndexOfRefraction(IndexOfRefraction: Double); safecall;
    function Get_Translucency: Double; safecall;
    procedure Set_Translucency(Translucency: Double); safecall;
    function Get_AnisotropicFloorHeight: Double; safecall;
    procedure Set_AnisotropicFloorHeight(AnisotropicFloorHeight: Double); safecall;
    function Get_AnisotropicCylinderDistance: Double; safecall;
    procedure Set_AnisotropicCylinderDistance(AnisotropicCylinderDistance: Double); safecall;
    function Get_AnisotropicBias: Double; safecall;
    procedure Set_AnisotropicBias(AnisotropicBias: Double); safecall;
    function Get_MetallicMix: Double; safecall;
    procedure Set_MetallicMix(MetallicMix: Double); safecall;
    function Get_MetallicRoughness: Double; safecall;
    procedure Set_MetallicRoughness(MetallicRoughness: Double); safecall;
    function Get_MetallicScale: Double; safecall;
    procedure Set_MetallicScale(MetallicScale: Double); safecall;
    function Get_MetallicAmplitude: Double; safecall;
    procedure Set_MetallicAmplitude(MetallicAmplitude: Double); safecall;
    function Get_MetallicFlakeMaterial: Integer; safecall;
    procedure Set_MetallicFlakeMaterial(MetallicFlakeMaterial: Integer); safecall;
    function Get_AccurateReflections: WordBool; safecall;
    procedure Set_AccurateReflections(AccurateReflections: WordBool); safecall;
    function Get_BumpBlend: Double; safecall;
    procedure Set_BumpBlend(BumpBlend: Double); safecall;
    function Get_BumpMap: Integer; safecall;
    procedure Set_BumpMap(BumpMap: Integer); safecall;
    function Get_BumpScale: Double; safecall;
    procedure Set_BumpScale(BumpScale: Double); safecall;
    function Get_BumpRadius: Double; safecall;
    procedure Set_BumpRadius(BumpRadius: Double); safecall;
    function Get_BumpAmplitude: Double; safecall;
    procedure Set_BumpAmplitude(BumpAmplitude: Double); safecall;
    function Get_BumpDetail: Integer; safecall;
    procedure Set_BumpDetail(BumpDetail: Integer); safecall;
    function Get_BumpSharpness: Double; safecall;
    procedure Set_BumpSharpness(BumpSharpness: Double); safecall;
    function Get_BumpRoughLow: Double; safecall;
    procedure Set_BumpRoughLow(BumpRoughLow: Double); safecall;
    function Get_BumpRoughHigh: Double; safecall;
    procedure Set_BumpRoughHigh(BumpRoughHigh: Double); safecall;
    function Get_BumpTextureFilename: WideString; safecall;
    procedure Set_BumpTextureFilename(const BumpTextureFilename: WideString); safecall;
    function Get_PatternScale: Double; safecall;
    procedure Set_PatternScale(PatternScale: Double); safecall;
    function Get_PrimaryColor: Integer; safecall;
    procedure Set_PrimaryColor(PrimaryColor: Integer); safecall;
    function Get_SecondaryColor: Integer; safecall;
    procedure Set_SecondaryColor(SecondaryColor: Integer); safecall;
    function Get_TertiaryColor: Integer; safecall;
    procedure Set_TertiaryColor(TertiaryColor: Integer); safecall;
    function Get_ColorForm: Integer; safecall;
    procedure Set_ColorForm(ColorForm: Integer); safecall;
    function AddEntity(const Entity: IDispatch): WordBool; safecall;
    function Get_LinkToFile: WordBool; safecall;
    procedure Set_LinkToFile(AccurateReflections: WordBool); safecall;
    function Get_CausticsCast: WordBool; safecall;
    procedure Set_CausticsCast(CausticsCast: WordBool); safecall;
    function Get_CausticsReceive: WordBool; safecall;
    procedure Set_CausticsReceive(CausticsReceive: WordBool); safecall;
    function Get_GlobalIlluminationCast: WordBool; safecall;
    procedure Set_GlobalIlluminationCast(GlobalIlluminationCast: WordBool); safecall;
    function Get_GlobalIlluminationReceive: WordBool; safecall;
    procedure Set_GlobalIlluminationReceive(GlobalIlluminationReceive: WordBool); safecall;
    function Get_BumpUseMappingScale: WordBool; safecall;
    procedure Set_BumpUseMappingScale(BumpUseMappingScale: WordBool); safecall;
    function Get_IgnoreMissingFile: WordBool; safecall;
    procedure Set_IgnoreMissingFile(IgnoreMissingFile: WordBool); safecall;
    function Get_DensityOfHoles: Double; safecall;
    procedure Set_DensityOfHoles(DensityOfHoles: Double); safecall;
    function Get_TransparencyMappingShaderType: Integer; safecall;
    procedure Set_TransparencyMappingShaderType(ShaderType: Integer); safecall;
    procedure RemoveAllEntities; safecall;
    function Get_Brightness: Double; safecall;
    procedure Set_Brightness(Brightness: Double); safecall;
    function Get_ObjectAreaLight: Integer; safecall;
    procedure Set_ObjectAreaLight(ObjectAreaLight: Integer); safecall;
    function Get_NSamples: Double; safecall;
    procedure Set_NSamples(NSamples: Double); safecall;
    property Ambient: Double read Get_Ambient write Set_Ambient;
    property XPosition: Double read Get_XPosition write Set_XPosition;
    property YPosition: Double read Get_YPosition write Set_YPosition;
    property RotationAngle: Double read Get_RotationAngle write Set_RotationAngle;
    property Direction1RotationAngle: Double read Get_Direction1RotationAngle write Set_Direction1RotationAngle;
    property Direction2RotationAngle: Double read Get_Direction2RotationAngle write Set_Direction2RotationAngle;
    property Width: Double read Get_Width write Set_Width;
    property Height: Double read Get_Height write Set_Height;
    property WidthMirror: WordBool read Get_WidthMirror write Set_WidthMirror;
    property HeightMirror: WordBool read Get_HeightMirror write Set_HeightMirror;
    property FixedAspectRatio: WordBool read Get_FixedAspectRatio write Set_FixedAspectRatio;
    property FitWidth: WordBool read Get_FitWidth write Set_FitWidth;
    property FitHeight: WordBool read Get_FitHeight write Set_FitHeight;
    property FileName: WideString read Get_FileName write Set_FileName;
    property TextureFilename: WideString read Get_TextureFilename write Set_TextureFilename;
    property Diffuse: Double read Get_Diffuse write Set_Diffuse;
    property Specular: Double read Get_Specular write Set_Specular;
    property Transparency: Double read Get_Transparency write Set_Transparency;
    property Emission: Double read Get_Emission write Set_Emission;
    property MappingType: Integer read Get_MappingType write Set_MappingType;
    property ProjectionReference: Integer read Get_ProjectionReference write Set_ProjectionReference;
    property MaterialID: Integer read Get_MaterialID;
    property IlluminationShaderType: Integer read Get_IlluminationShaderType write Set_IlluminationShaderType;
    property SpecularColor: Integer read Get_SpecularColor write Set_SpecularColor;
    property Glossy: Double read Get_Glossy write Set_Glossy;
    property Roughness: Double read Get_Roughness write Set_Roughness;
    property Reflectivity: Double read Get_Reflectivity write Set_Reflectivity;
    property IndexOfRefraction: Double read Get_IndexOfRefraction write Set_IndexOfRefraction;
    property Translucency: Double read Get_Translucency write Set_Translucency;
    property AnisotropicFloorHeight: Double read Get_AnisotropicFloorHeight write Set_AnisotropicFloorHeight;
    property AnisotropicCylinderDistance: Double read Get_AnisotropicCylinderDistance write Set_AnisotropicCylinderDistance;
    property AnisotropicBias: Double read Get_AnisotropicBias write Set_AnisotropicBias;
    property MetallicMix: Double read Get_MetallicMix write Set_MetallicMix;
    property MetallicRoughness: Double read Get_MetallicRoughness write Set_MetallicRoughness;
    property MetallicScale: Double read Get_MetallicScale write Set_MetallicScale;
    property MetallicAmplitude: Double read Get_MetallicAmplitude write Set_MetallicAmplitude;
    property MetallicFlakeMaterial: Integer read Get_MetallicFlakeMaterial write Set_MetallicFlakeMaterial;
    property AccurateReflections: WordBool read Get_AccurateReflections write Set_AccurateReflections;
    property BumpBlend: Double read Get_BumpBlend write Set_BumpBlend;
    property BumpMap: Integer read Get_BumpMap write Set_BumpMap;
    property BumpScale: Double read Get_BumpScale write Set_BumpScale;
    property BumpRadius: Double read Get_BumpRadius write Set_BumpRadius;
    property BumpAmplitude: Double read Get_BumpAmplitude write Set_BumpAmplitude;
    property BumpDetail: Integer read Get_BumpDetail write Set_BumpDetail;
    property BumpSharpness: Double read Get_BumpSharpness write Set_BumpSharpness;
    property BumpRoughLow: Double read Get_BumpRoughLow write Set_BumpRoughLow;
    property BumpRoughHigh: Double read Get_BumpRoughHigh write Set_BumpRoughHigh;
    property BumpTextureFilename: WideString read Get_BumpTextureFilename write Set_BumpTextureFilename;
    property PatternScale: Double read Get_PatternScale write Set_PatternScale;
    property PrimaryColor: Integer read Get_PrimaryColor write Set_PrimaryColor;
    property SecondaryColor: Integer read Get_SecondaryColor write Set_SecondaryColor;
    property TertiaryColor: Integer read Get_TertiaryColor write Set_TertiaryColor;
    property ColorForm: Integer read Get_ColorForm write Set_ColorForm;
    property LinkToFile: WordBool read Get_LinkToFile write Set_LinkToFile;
    property CausticsCast: WordBool read Get_CausticsCast write Set_CausticsCast;
    property CausticsReceive: WordBool read Get_CausticsReceive write Set_CausticsReceive;
    property GlobalIlluminationCast: WordBool read Get_GlobalIlluminationCast write Set_GlobalIlluminationCast;
    property GlobalIlluminationReceive: WordBool read Get_GlobalIlluminationReceive write Set_GlobalIlluminationReceive;
    property BumpUseMappingScale: WordBool read Get_BumpUseMappingScale write Set_BumpUseMappingScale;
    property IgnoreMissingFile: WordBool read Get_IgnoreMissingFile write Set_IgnoreMissingFile;
    property DensityOfHoles: Double read Get_DensityOfHoles write Set_DensityOfHoles;
    property TransparencyMappingShaderType: Integer read Get_TransparencyMappingShaderType write Set_TransparencyMappingShaderType;
    property Brightness: Double read Get_Brightness write Set_Brightness;
    property ObjectAreaLight: Integer read Get_ObjectAreaLight write Set_ObjectAreaLight;
    property NSamples: Double read Get_NSamples write Set_NSamples;
  end;

// *********************************************************************//
// DispIntf:  IRenderMaterialDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D3BD935B-DFB4-4EDA-B03A-DA4EB2024F3F}
// *********************************************************************//
  IRenderMaterialDisp = dispinterface
    ['{D3BD935B-DFB4-4EDA-B03A-DA4EB2024F3F}']
    property Ambient: Double dispid 1;
    property XPosition: Double dispid 2;
    property YPosition: Double dispid 3;
    property RotationAngle: Double dispid 4;
    property Direction1RotationAngle: Double dispid 5;
    property Direction2RotationAngle: Double dispid 6;
    property Width: Double dispid 7;
    property Height: Double dispid 8;
    property WidthMirror: WordBool dispid 9;
    property HeightMirror: WordBool dispid 10;
    property FixedAspectRatio: WordBool dispid 11;
    property FitWidth: WordBool dispid 12;
    property FitHeight: WordBool dispid 13;
    property FileName: WideString dispid 14;
    property TextureFilename: WideString dispid 15;
    property Diffuse: Double dispid 16;
    property Specular: Double dispid 17;
    property Transparency: Double dispid 18;
    property Emission: Double dispid 19;
    property MappingType: Integer dispid 20;
    property ProjectionReference: Integer dispid 21;
    procedure GetUDirection(out UDir: Double); dispid 22;
    procedure SetUDirection(var UDir: Double); dispid 23;
    procedure GetVDirection(out VDir: Double); dispid 24;
    procedure SetVDirection(var VDir: Double); dispid 25;
    procedure GetCenterPoint(out CenterPt: Double); dispid 26;
    procedure SetCenterPoint(var CenterPt: Double); dispid 27;
    property MaterialID: Integer readonly dispid 28;
    function GetEntitiesCount: Integer; dispid 29;
    function GetEntities: OleVariant; dispid 30;
    function IGetEntities(Count: Integer): IDispatch; dispid 31;
    property IlluminationShaderType: Integer dispid 32;
    property SpecularColor: Integer dispid 33;
    property Glossy: Double dispid 34;
    property Roughness: Double dispid 35;
    property Reflectivity: Double dispid 36;
    property IndexOfRefraction: Double dispid 37;
    property Translucency: Double dispid 38;
    property AnisotropicFloorHeight: Double dispid 39;
    property AnisotropicCylinderDistance: Double dispid 40;
    property AnisotropicBias: Double dispid 41;
    property MetallicMix: Double dispid 42;
    property MetallicRoughness: Double dispid 43;
    property MetallicScale: Double dispid 44;
    property MetallicAmplitude: Double dispid 45;
    property MetallicFlakeMaterial: Integer dispid 46;
    property AccurateReflections: WordBool dispid 47;
    property BumpBlend: Double dispid 48;
    property BumpMap: Integer dispid 49;
    property BumpScale: Double dispid 50;
    property BumpRadius: Double dispid 51;
    property BumpAmplitude: Double dispid 52;
    property BumpDetail: Integer dispid 53;
    property BumpSharpness: Double dispid 54;
    property BumpRoughLow: Double dispid 55;
    property BumpRoughHigh: Double dispid 56;
    property BumpTextureFilename: WideString dispid 57;
    property PatternScale: Double dispid 58;
    property PrimaryColor: Integer dispid 59;
    property SecondaryColor: Integer dispid 60;
    property TertiaryColor: Integer dispid 61;
    property ColorForm: Integer dispid 62;
    function AddEntity(const Entity: IDispatch): WordBool; dispid 63;
    property LinkToFile: WordBool dispid 64;
    property CausticsCast: WordBool dispid 65;
    property CausticsReceive: WordBool dispid 66;
    property GlobalIlluminationCast: WordBool dispid 67;
    property GlobalIlluminationReceive: WordBool dispid 68;
    property BumpUseMappingScale: WordBool dispid 69;
    property IgnoreMissingFile: WordBool dispid 70;
    property DensityOfHoles: Double dispid 71;
    property TransparencyMappingShaderType: Integer dispid 72;
    procedure RemoveAllEntities; dispid 73;
    property Brightness: Double dispid 74;
    property ObjectAreaLight: Integer dispid 75;
    property NSamples: Double dispid 76;
  end;

// *********************************************************************//
// Interface: ICustomPropertyManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F1938D94-0D1F-4E88-9874-164B1E6568F1}
// *********************************************************************//
  ICustomPropertyManager = interface(IDispatch)
    ['{F1938D94-0D1F-4E88-9874-164B1E6568F1}']
    function Get_Owner: IDispatch; safecall;
    function Get_Count: Integer; safecall;
    function GetNames: OleVariant; safecall;
    function IGetNames(Count: Integer): WideString; safecall;
    function GetType(const FieldName: WideString): WideString; safecall;
    function Get(const FieldName: WideString): WideString; safecall;
    function Set_(const FieldName: WideString; const FieldValue: WideString): Integer; safecall;
    function Add(const FieldName: WideString; const FieldType: WideString; 
                 const FieldValue: WideString): Integer; safecall;
    function Delete(const FieldName: WideString): Integer; safecall;
    procedure Get2(const FieldName: WideString; out ValOut: WideString; 
                   out ReesolvedValOut: WideString); safecall;
    function GetType2(const FieldName: WideString): Integer; safecall;
    function Add2(const FieldName: WideString; FieldType: Integer; const FieldValue: WideString): Integer; safecall;
    function GetAll(var PropNames: OleVariant; var PropTypes: OleVariant; var PropValues: OleVariant): Integer; safecall;
    procedure IGetAll(Count: Integer; var PropNames: WideString; var PropTypes: Integer; 
                      var PropValues: WideString); safecall;
    function Get3(const FieldName: WideString; UseCached: WordBool; out ValOut: WideString; 
                  out ResolvedValOut: WideString): WordBool; safecall;
    property Owner: IDispatch read Get_Owner;
    property Count: Integer read Get_Count;
  end;

// *********************************************************************//
// DispIntf:  ICustomPropertyManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F1938D94-0D1F-4E88-9874-164B1E6568F1}
// *********************************************************************//
  ICustomPropertyManagerDisp = dispinterface
    ['{F1938D94-0D1F-4E88-9874-164B1E6568F1}']
    property Owner: IDispatch readonly dispid 1;
    property Count: Integer readonly dispid 2;
    function GetNames: OleVariant; dispid 3;
    function IGetNames(Count: Integer): WideString; dispid 4;
    function GetType(const FieldName: WideString): WideString; dispid 5;
    function Get(const FieldName: WideString): WideString; dispid 6;
    function Set_(const FieldName: WideString; const FieldValue: WideString): Integer; dispid 7;
    function Add(const FieldName: WideString; const FieldType: WideString; 
                 const FieldValue: WideString): Integer; dispid 8;
    function Delete(const FieldName: WideString): Integer; dispid 9;
    procedure Get2(const FieldName: WideString; out ValOut: WideString; 
                   out ReesolvedValOut: WideString); dispid 10;
    function GetType2(const FieldName: WideString): Integer; dispid 11;
    function Add2(const FieldName: WideString; FieldType: Integer; const FieldValue: WideString): Integer; dispid 12;
    function GetAll(var PropNames: OleVariant; var PropTypes: OleVariant; var PropValues: OleVariant): Integer; dispid 13;
    procedure IGetAll(Count: Integer; var PropNames: WideString; var PropTypes: Integer; 
                      var PropValues: WideString); dispid 14;
    function Get3(const FieldName: WideString; UseCached: WordBool; out ValOut: WideString; 
                  out ResolvedValOut: WideString): WordBool; dispid 15;
  end;

// *********************************************************************//
// Interface: IComment
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4E23A946-7D96-40A2-BDA0-FDF9767C438D}
// *********************************************************************//
  IComment = interface(IDispatch)
    ['{4E23A946-7D96-40A2-BDA0-FDF9767C438D}']
    function Get_Text: WideString; safecall;
    procedure Set_Text(const Text: WideString); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Name: WideString); safecall;
    function Delete: WordBool; safecall;
    function Get_FeatureOwner: IFeature; safecall;
    property Text: WideString read Get_Text write Set_Text;
    property Name: WideString read Get_Name write Set_Name;
    property FeatureOwner: IFeature read Get_FeatureOwner;
  end;

// *********************************************************************//
// DispIntf:  ICommentDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4E23A946-7D96-40A2-BDA0-FDF9767C438D}
// *********************************************************************//
  ICommentDisp = dispinterface
    ['{4E23A946-7D96-40A2-BDA0-FDF9767C438D}']
    property Text: WideString dispid 1;
    property Name: WideString dispid 2;
    function Delete: WordBool; dispid 3;
    property FeatureOwner: IFeature readonly dispid 4;
  end;

// *********************************************************************//
// Interface: IDimensionTolerance
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F43444A8-1D72-4178-95C8-7108CF29E016}
// *********************************************************************//
  IDimensionTolerance = interface(IDispatch)
    ['{F43444A8-1D72-4178-95C8-7108CF29E016}']
    function Get_type_: Integer; safecall;
    procedure Set_type_(TolType: Integer); safecall;
    function GetMinValue: Double; safecall;
    function GetMaxValue: Double; safecall;
    function SetValues(MinValue: Double; MaxValue: Double): WordBool; safecall;
    function GetFontUseDimension: WordBool; safecall;
    function GetFontUseScale: WordBool; safecall;
    function GetFontScale: Double; safecall;
    function GetFontHeight: Double; safecall;
    function SetFont(UseDimension: WordBool; UseScale: WordBool; Value: Double): WordBool; safecall;
    function Get_ShowParenthesis: WordBool; safecall;
    procedure Set_ShowParenthesis(Show: WordBool); safecall;
    function GetHoleFitValue: WideString; safecall;
    function GetShaftFitValue: WideString; safecall;
    function SetFitValues(const HoleFit: WideString; const ShaftFit: WideString): WordBool; safecall;
    function GetFitFontUseDimension: WordBool; safecall;
    function GetFitFontUseScale: WordBool; safecall;
    function GetFitFontScale: Double; safecall;
    function GetFitFontHeight: Double; safecall;
    function SetFitFont(UseDimension: WordBool; UseScale: WordBool; Value: Double): WordBool; safecall;
    function Get_FitDisplayStyle: Integer; safecall;
    procedure Set_FitDisplayStyle(Style: Integer); safecall;
    property type_: Integer read Get_type_ write Set_type_;
    property ShowParenthesis: WordBool read Get_ShowParenthesis write Set_ShowParenthesis;
    property FitDisplayStyle: Integer read Get_FitDisplayStyle write Set_FitDisplayStyle;
  end;

// *********************************************************************//
// DispIntf:  IDimensionToleranceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F43444A8-1D72-4178-95C8-7108CF29E016}
// *********************************************************************//
  IDimensionToleranceDisp = dispinterface
    ['{F43444A8-1D72-4178-95C8-7108CF29E016}']
    property type_: Integer dispid 1;
    function GetMinValue: Double; dispid 2;
    function GetMaxValue: Double; dispid 3;
    function SetValues(MinValue: Double; MaxValue: Double): WordBool; dispid 4;
    function GetFontUseDimension: WordBool; dispid 5;
    function GetFontUseScale: WordBool; dispid 6;
    function GetFontScale: Double; dispid 7;
    function GetFontHeight: Double; dispid 8;
    function SetFont(UseDimension: WordBool; UseScale: WordBool; Value: Double): WordBool; dispid 9;
    property ShowParenthesis: WordBool dispid 10;
    function GetHoleFitValue: WideString; dispid 11;
    function GetShaftFitValue: WideString; dispid 12;
    function SetFitValues(const HoleFit: WideString; const ShaftFit: WideString): WordBool; dispid 13;
    function GetFitFontUseDimension: WordBool; dispid 14;
    function GetFitFontUseScale: WordBool; dispid 15;
    function GetFitFontScale: Double; dispid 16;
    function GetFitFontHeight: Double; dispid 17;
    function SetFitFont(UseDimension: WordBool; UseScale: WordBool; Value: Double): WordBool; dispid 18;
    property FitDisplayStyle: Integer dispid 19;
  end;

// *********************************************************************//
// Interface: IBomTable
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D82-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IBomTable = interface(IDispatch)
    ['{83A33D82-27C5-11CE-BFD4-00400513BB57}']
    function GetExtent: OleVariant; safecall;
    function IGetExtent: Double; safecall;
    function GetRowCount: Integer; safecall;
    function GetColumnCount: Integer; safecall;
    function GetHeaderText(Col: Integer): WideString; safecall;
    function GetEntryText(Row: Integer; Col: Integer): WideString; safecall;
    procedure Attach; safecall;
    procedure Detach; safecall;
    function GetColumnWidth(Col: Integer): Double; safecall;
    function GetRowHeight(Row: Integer): Double; safecall;
    function GetEntryValue(Row: Integer; Col: Integer): OleVariant; safecall;
    function Attach2: WordBool; safecall;
    function GetDisplayData: IDispatch; safecall;
    function IGetDisplayData: IDisplayData; safecall;
    function IsVisible: WordBool; safecall;
    function Attach3: WordBool; safecall;
    function GetTotalRowCount: Integer; safecall;
    function GetTotalColumnCount: Integer; safecall;
    function Select(Append: WordBool; Mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IBomTableDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D82-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IBomTableDisp = dispinterface
    ['{83A33D82-27C5-11CE-BFD4-00400513BB57}']
    function GetExtent: OleVariant; dispid 1;
    function IGetExtent: Double; dispid 2;
    function GetRowCount: Integer; dispid 3;
    function GetColumnCount: Integer; dispid 4;
    function GetHeaderText(Col: Integer): WideString; dispid 5;
    function GetEntryText(Row: Integer; Col: Integer): WideString; dispid 6;
    procedure Attach; dispid 7;
    procedure Detach; dispid 8;
    function GetColumnWidth(Col: Integer): Double; dispid 9;
    function GetRowHeight(Row: Integer): Double; dispid 10;
    function GetEntryValue(Row: Integer; Col: Integer): OleVariant; dispid 11;
    function Attach2: WordBool; dispid 12;
    function GetDisplayData: IDispatch; dispid 13;
    function IGetDisplayData: IDisplayData; dispid 14;
    function IsVisible: WordBool; dispid 15;
    function Attach3: WordBool; dispid 16;
    function GetTotalRowCount: Integer; dispid 17;
    function GetTotalColumnCount: Integer; dispid 18;
    function Select(Append: WordBool; Mark: Integer): WordBool; dispid 19;
    function DeSelect: WordBool; dispid 20;
  end;

// *********************************************************************//
// Interface: ICustomSymbol
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DB5-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICustomSymbol = interface(IDispatch)
    ['{83A33DB5-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; safecall;
    function IGetNext: ICustomSymbol; safecall;
    function GetTextCount: Integer; safecall;
    function GetTextAtIndex(Index: Integer): WideString; safecall;
    function GetTextHeightAtIndex(Index: Integer): Double; safecall;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTextPositionAtIndex(Index: Integer): Double; safecall;
    function GetTextAngleAtIndex(Index: Integer): Double; safecall;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; safecall;
    function GetTextInvertAtIndex(Index: Integer): Integer; safecall;
    function GetLineCount: Integer; safecall;
    function GetLineAtIndex(Index: Integer): OleVariant; safecall;
    function IGetLineAtIndex(Index: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArcAtIndex(Index: Integer): Double; safecall;
    function GetArrowHeadCount: Integer; safecall;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; safecall;
    function IGetArrowHeadAtIndex(Index: Integer): Double; safecall;
    function GetTriangleCount: Integer; safecall;
    function GetTriangleAtIndex(Index: Integer): OleVariant; safecall;
    function IGetTriangleAtIndex(Index: Integer): Double; safecall;
    function GetSketch: IDispatch; safecall;
    function IGetSketch: ISketch; safecall;
    function GetSketchPosition: OleVariant; safecall;
    function IGetSketchPosition: Double; safecall;
    function IsAttached: WordBool; safecall;
    function HasExtraLeader: WordBool; safecall;
    function GetLeaderCount: Integer; safecall;
    function GetLeaderAtIndex(Index: Integer): OleVariant; safecall;
    function IGetLeaderAtIndex(Index: Integer; out PointCount: Integer): Double; safecall;
    function IGetArrowHeadInfo: Double; safecall;
    function GetArrowHeadInfo: OleVariant; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Retval: Double); safecall;
    function Get_Scale2: Double; safecall;
    procedure Set_Scale2(Retval: Double); safecall;
    function GetText(Index: Integer): WideString; safecall;
    function SetText(Index: Integer; const Text: WideString): WordBool; safecall;
    function GetTextJustificationAtIndex(Index: Integer): Integer; safecall;
    procedure SetTextJustificationAtIndex(Index: Integer; Justification: Integer); safecall;
    function GetTextLineSpacingAtIndex(Index: Integer): Double; safecall;
    function Get_TextVisible: WordBool; safecall;
    procedure Set_TextVisible(Retval: WordBool); safecall;
    function GetNoteCount: Integer; safecall;
    function GetNotes: OleVariant; safecall;
    function IGetNotes(Count: Integer): INote; safecall;
    property Angle: Double read Get_Angle write Set_Angle;
    property Scale2: Double read Get_Scale2 write Set_Scale2;
    property TextVisible: WordBool read Get_TextVisible write Set_TextVisible;
  end;

// *********************************************************************//
// DispIntf:  ICustomSymbolDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DB5-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ICustomSymbolDisp = dispinterface
    ['{83A33DB5-27C5-11CE-BFD4-00400513BB57}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: ICustomSymbol; dispid 2;
    function GetTextCount: Integer; dispid 3;
    function GetTextAtIndex(Index: Integer): WideString; dispid 4;
    function GetTextHeightAtIndex(Index: Integer): Double; dispid 5;
    function GetTextPositionAtIndex(Index: Integer): OleVariant; dispid 6;
    function IGetTextPositionAtIndex(Index: Integer): Double; dispid 7;
    function GetTextAngleAtIndex(Index: Integer): Double; dispid 8;
    function GetTextRefPositionAtIndex(Index: Integer): Integer; dispid 9;
    function GetTextInvertAtIndex(Index: Integer): Integer; dispid 10;
    function GetLineCount: Integer; dispid 11;
    function GetLineAtIndex(Index: Integer): OleVariant; dispid 12;
    function IGetLineAtIndex(Index: Integer): Double; dispid 13;
    function GetArcCount: Integer; dispid 14;
    function GetArcAtIndex(Index: Integer): OleVariant; dispid 15;
    function IGetArcAtIndex(Index: Integer): Double; dispid 16;
    function GetArrowHeadCount: Integer; dispid 17;
    function GetArrowHeadAtIndex(Index: Integer): OleVariant; dispid 18;
    function IGetArrowHeadAtIndex(Index: Integer): Double; dispid 19;
    function GetTriangleCount: Integer; dispid 20;
    function GetTriangleAtIndex(Index: Integer): OleVariant; dispid 21;
    function IGetTriangleAtIndex(Index: Integer): Double; dispid 22;
    function GetSketch: IDispatch; dispid 23;
    function IGetSketch: ISketch; dispid 24;
    function GetSketchPosition: OleVariant; dispid 25;
    function IGetSketchPosition: Double; dispid 26;
    function IsAttached: WordBool; dispid 27;
    function HasExtraLeader: WordBool; dispid 28;
    function GetLeaderCount: Integer; dispid 29;
    function GetLeaderAtIndex(Index: Integer): OleVariant; dispid 30;
    function IGetLeaderAtIndex(Index: Integer; out PointCount: Integer): Double; dispid 31;
    function IGetArrowHeadInfo: Double; dispid 32;
    function GetArrowHeadInfo: OleVariant; dispid 33;
    function GetAnnotation: IDispatch; dispid 34;
    function IGetAnnotation: IAnnotation; dispid 35;
    property Angle: Double dispid 36;
    property Scale2: Double dispid 37;
    function GetText(Index: Integer): WideString; dispid 38;
    function SetText(Index: Integer; const Text: WideString): WordBool; dispid 39;
    function GetTextJustificationAtIndex(Index: Integer): Integer; dispid 40;
    procedure SetTextJustificationAtIndex(Index: Integer; Justification: Integer); dispid 41;
    function GetTextLineSpacingAtIndex(Index: Integer): Double; dispid 42;
    property TextVisible: WordBool dispid 43;
    function GetNoteCount: Integer; dispid 44;
    function GetNotes: OleVariant; dispid 45;
    function IGetNotes(Count: Integer): INote; dispid 46;
  end;

// *********************************************************************//
// Interface: IDrSection
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F183A33F-D4DB-11D3-AEB2-00C04F603FAF}
// *********************************************************************//
  IDrSection = interface(IDispatch)
    ['{F183A33F-D4DB-11D3-AEB2-00C04F603FAF}']
    function GetView: IDispatch; safecall;
    function IGetView: IView; safecall;
    function GetSectionView: IDispatch; safecall;
    function IGetSectionView: IView; safecall;
    function GetLabel: WideString; safecall;
    function SetLabel(const Label_: WideString): WordBool; safecall;
    function GetUseDocTextFormat: WordBool; safecall;
    function GetTextFormat: IDispatch; safecall;
    function IGetTextFormat: ITextFormat; safecall;
    function SetTextFormat(UseDoc: WordBool; const TextFormat: IDispatch): WordBool; safecall;
    function ISetTextFormat(UseDoc: WordBool; const TextFormat: ITextFormat): WordBool; safecall;
    function GetReversedCutDirection: WordBool; safecall;
    procedure SetReversedCutDirection(Reversed: WordBool); safecall;
    function GetScaleWithModelChanges: WordBool; safecall;
    procedure SetScaleWithModelChanges(ScaleWithChanges: WordBool); safecall;
    function GetPartialSection: WordBool; safecall;
    procedure SetPartialSection(Partial: WordBool); safecall;
    function GetDisplayOnlySurfaceCut: WordBool; safecall;
    procedure SetDisplayOnlySurfaceCut(Display: WordBool); safecall;
    function IsAligned: WordBool; safecall;
    function GetName: WideString; safecall;
    function GetTextInfo: OleVariant; safecall;
    function IGetTextInfo: Double; safecall;
    function GetArrowInfo: OleVariant; safecall;
    function IGetArrowInfo: Double; safecall;
    function GetExcludedComponents: OleVariant; safecall;
    function EnumExcludedComponents: IEnumComponents; safecall;
    function GetAutoHatch: WordBool; safecall;
    procedure SetAutoHatch(AutoHatch: WordBool); safecall;
    function IGetLineSegmentCount: Integer; safecall;
    function GetLineInfo: OleVariant; safecall;
    function IGetLineInfo: Double; safecall;
    function EnumExcludedComponents2: IEnumComponents2; safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const Name: WideString); safecall;
    function SetLabel2(const Label_: WideString): Integer; safecall;
    function SetExcludedComponents(VComponents: OleVariant): WordBool; safecall;
    function ISetExcludedComponents(Number: Integer; var LpComps: IComponent): WordBool; safecall;
    function GetDontCutAllInstances(const LpComp: IComponent): WordBool; safecall;
    function SetDontCutAllInstances(const LpComp: IComponent; VbCut: WordBool): WordBool; safecall;
    function SetLineInfo(VLineInfo: OleVariant): WordBool; safecall;
    function ISetLineInfo(Count: Integer; var PLineInfo: Double): WordBool; safecall;
    function Get_ExcludeFasteners: WordBool; safecall;
    procedure Set_ExcludeFasteners(VbExcludeFasteners: WordBool); safecall;
    property Layer: WideString read Get_Layer write Set_Layer;
    property ExcludeFasteners: WordBool read Get_ExcludeFasteners write Set_ExcludeFasteners;
  end;

// *********************************************************************//
// DispIntf:  IDrSectionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F183A33F-D4DB-11D3-AEB2-00C04F603FAF}
// *********************************************************************//
  IDrSectionDisp = dispinterface
    ['{F183A33F-D4DB-11D3-AEB2-00C04F603FAF}']
    function GetView: IDispatch; dispid 1;
    function IGetView: IView; dispid 2;
    function GetSectionView: IDispatch; dispid 3;
    function IGetSectionView: IView; dispid 4;
    function GetLabel: WideString; dispid 5;
    function SetLabel(const Label_: WideString): WordBool; dispid 6;
    function GetUseDocTextFormat: WordBool; dispid 7;
    function GetTextFormat: IDispatch; dispid 8;
    function IGetTextFormat: ITextFormat; dispid 9;
    function SetTextFormat(UseDoc: WordBool; const TextFormat: IDispatch): WordBool; dispid 10;
    function ISetTextFormat(UseDoc: WordBool; const TextFormat: ITextFormat): WordBool; dispid 11;
    function GetReversedCutDirection: WordBool; dispid 12;
    procedure SetReversedCutDirection(Reversed: WordBool); dispid 13;
    function GetScaleWithModelChanges: WordBool; dispid 14;
    procedure SetScaleWithModelChanges(ScaleWithChanges: WordBool); dispid 15;
    function GetPartialSection: WordBool; dispid 16;
    procedure SetPartialSection(Partial: WordBool); dispid 17;
    function GetDisplayOnlySurfaceCut: WordBool; dispid 18;
    procedure SetDisplayOnlySurfaceCut(Display: WordBool); dispid 19;
    function IsAligned: WordBool; dispid 20;
    function GetName: WideString; dispid 21;
    function GetTextInfo: OleVariant; dispid 22;
    function IGetTextInfo: Double; dispid 23;
    function GetArrowInfo: OleVariant; dispid 24;
    function IGetArrowInfo: Double; dispid 25;
    function GetExcludedComponents: OleVariant; dispid 26;
    function EnumExcludedComponents: IEnumComponents; dispid 27;
    function GetAutoHatch: WordBool; dispid 28;
    procedure SetAutoHatch(AutoHatch: WordBool); dispid 29;
    function IGetLineSegmentCount: Integer; dispid 30;
    function GetLineInfo: OleVariant; dispid 31;
    function IGetLineInfo: Double; dispid 32;
    function EnumExcludedComponents2: IEnumComponents2; dispid 33;
    property Layer: WideString dispid 34;
    function SetLabel2(const Label_: WideString): Integer; dispid 35;
    function SetExcludedComponents(VComponents: OleVariant): WordBool; dispid 36;
    function ISetExcludedComponents(Number: Integer; var LpComps: IComponent): WordBool; dispid 37;
    function GetDontCutAllInstances(const LpComp: IComponent): WordBool; dispid 38;
    function SetDontCutAllInstances(const LpComp: IComponent; VbCut: WordBool): WordBool; dispid 39;
    function SetLineInfo(VLineInfo: OleVariant): WordBool; dispid 40;
    function ISetLineInfo(Count: Integer; var PLineInfo: Double): WordBool; dispid 41;
    property ExcludeFasteners: WordBool dispid 42;
  end;

// *********************************************************************//
// Interface: IEnumComponents
// Flags:     (272) Hidden OleAutomation
// GUID:      {51EFB944-D449-11D3-AEBE-00C04F683CBA}
// *********************************************************************//
  IEnumComponents = interface(IUnknown)
    ['{51EFB944-D449-11D3-AEBE-00C04F683CBA}']
    function Next(Celt: Integer; out Rgelt: IComponent; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumComponents): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEnumComponents2
// Flags:     (272) Hidden OleAutomation
// GUID:      {F6804D12-B73A-49AF-81C6-05BABB58B812}
// *********************************************************************//
  IEnumComponents2 = interface(IUnknown)
    ['{F6804D12-B73A-49AF-81C6-05BABB58B812}']
    function Next(Celt: Integer; out Rgelt: IComponent2; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumComponents2): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEnumDrSections
// Flags:     (272) Hidden OleAutomation
// GUID:      {585A6A15-E95B-11D3-AEBC-00C04F603FAF}
// *********************************************************************//
  IEnumDrSections = interface(IUnknown)
    ['{585A6A15-E95B-11D3-AEBC-00C04F603FAF}']
    function Next(Celt: Integer; out Rgelt: IDrSection; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumDrSections): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDetailCircle
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4B65A34A-4C44-11D4-AEF6-00C04F683CBA}
// *********************************************************************//
  IDetailCircle = interface(IDispatch)
    ['{4B65A34A-4C44-11D4-AEF6-00C04F683CBA}']
    function GetView: IView; safecall;
    function GetDetailView: IView; safecall;
    function GetLabel: WideString; safecall;
    function GetTextFormat: ITextFormat; safecall;
    function GetName: WideString; safecall;
    function GetArrowInfo: OleVariant; safecall;
    function IGetArrowInfo: Double; safecall;
    function GetStyle: Integer; safecall;
    function GetDisplay: Integer; safecall;
    function GetConnectingLine: OleVariant; safecall;
    function IGetConnectingLine: Double; safecall;
    function HasFullOutline: WordBool; safecall;
    function GetLeaderInfo: OleVariant; safecall;
    function IGetLeaderInfo: Double; safecall;
    function GetUseDocTextFormat: WordBool; safecall;
    function SetTextFormat(UseDoc: WordBool; const TextFormat: ITextFormat): WordBool; safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const Name: WideString); safecall;
    function SetLabel(const Label_: WideString): WordBool; safecall;
    function SetName(const Name: WideString): WordBool; safecall;
    function SetStyle(Style: Integer): WordBool; safecall;
    function SetDisplay(Display: Integer): WordBool; safecall;
    function SetFullOutline(FullOutline: WordBool): WordBool; safecall;
    procedure Set_PinPosition(Retval: WordBool); safecall;
    function Get_PinPosition: WordBool; safecall;
    procedure Set_ScaleHatchPattern(Retval: WordBool); safecall;
    function Get_ScaleHatchPattern: WordBool; safecall;
    function Select(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    function SetParameters(XPosition: Double; YPosition: Double; Radius: Double): WordBool; safecall;
    function GetProfileItemsCount: Integer; safecall;
    function GetProfileItems: OleVariant; safecall;
    function IGetProfileItems(Count: Integer): ISketchSegment; safecall;
    property Layer: WideString read Get_Layer write Set_Layer;
    property PinPosition: WordBool read Get_PinPosition write Set_PinPosition;
    property ScaleHatchPattern: WordBool read Get_ScaleHatchPattern write Set_ScaleHatchPattern;
  end;

// *********************************************************************//
// DispIntf:  IDetailCircleDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4B65A34A-4C44-11D4-AEF6-00C04F683CBA}
// *********************************************************************//
  IDetailCircleDisp = dispinterface
    ['{4B65A34A-4C44-11D4-AEF6-00C04F683CBA}']
    function GetView: IView; dispid 1;
    function GetDetailView: IView; dispid 2;
    function GetLabel: WideString; dispid 3;
    function GetTextFormat: ITextFormat; dispid 4;
    function GetName: WideString; dispid 5;
    function GetArrowInfo: OleVariant; dispid 6;
    function IGetArrowInfo: Double; dispid 7;
    function GetStyle: Integer; dispid 8;
    function GetDisplay: Integer; dispid 9;
    function GetConnectingLine: OleVariant; dispid 10;
    function IGetConnectingLine: Double; dispid 11;
    function HasFullOutline: WordBool; dispid 12;
    function GetLeaderInfo: OleVariant; dispid 13;
    function IGetLeaderInfo: Double; dispid 14;
    function GetUseDocTextFormat: WordBool; dispid 15;
    function SetTextFormat(UseDoc: WordBool; const TextFormat: ITextFormat): WordBool; dispid 16;
    property Layer: WideString dispid 17;
    function SetLabel(const Label_: WideString): WordBool; dispid 18;
    function SetName(const Name: WideString): WordBool; dispid 19;
    function SetStyle(Style: Integer): WordBool; dispid 20;
    function SetDisplay(Display: Integer): WordBool; dispid 21;
    function SetFullOutline(FullOutline: WordBool): WordBool; dispid 22;
    property PinPosition: WordBool dispid 23;
    property ScaleHatchPattern: WordBool dispid 24;
    function Select(Append: WordBool; const Data: ISelectData): WordBool; dispid 25;
    function SetParameters(XPosition: Double; YPosition: Double; Radius: Double): WordBool; dispid 26;
    function GetProfileItemsCount: Integer; dispid 27;
    function GetProfileItems: OleVariant; dispid 28;
    function IGetProfileItems(Count: Integer): ISketchSegment; dispid 29;
  end;

// *********************************************************************//
// Interface: ISketchSegment
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DBF-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchSegment = interface(IDispatch)
    ['{83A33DBF-27C5-11CE-BFD4-00400513BB57}']
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const Retval: WideString); safecall;
    function Get_LayerOverride: SYSINT; safecall;
    procedure Set_LayerOverride(Retval: SYSINT); safecall;
    function Get_Color: Integer; safecall;
    procedure Set_Color(Retval: Integer); safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Retval: Integer); safecall;
    function Get_Width: Integer; safecall;
    procedure Set_Width(Retval: Integer); safecall;
    function GetType: Integer; safecall;
    function GetID: OleVariant; safecall;
    function IGetID: Integer; safecall;
    function Select(AppendFlag: WordBool): WordBool; safecall;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function Get_ConstructionGeometry: WordBool; safecall;
    procedure Set_ConstructionGeometry(Retval: WordBool); safecall;
    function GetCurve: IDispatch; safecall;
    function IGetCurve: ICurve; safecall;
    function GetSketch: ISketch; safecall;
    function GetConstraints: OleVariant; safecall;
    function IGetConstraintsCount: Integer; safecall;
    function IGetConstraints: WideString; safecall;
    function GetLength: Double; safecall;
    function Select2(Append: WordBool; Mark: Integer): WordBool; safecall;
    function Select3(Append: WordBool; Mark: Integer; const Callout: ICallout): WordBool; safecall;
    function GetRelations: OleVariant; safecall;
    function GetRelationsCount: Integer; safecall;
    function IGetRelations(Count: Integer): ISketchRelation; safecall;
    function Get_Status: Integer; safecall;
    procedure Set_Status(Status: Integer); safecall;
    function Select4(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    function CreateWireBody: IBody2; safecall;
    function GetSketchPaths: OleVariant; safecall;
    function IGetSketchPaths(Count: Integer): ISketchPath; safecall;
    function GetSketchPathCount: Integer; safecall;
    property Layer: WideString read Get_Layer write Set_Layer;
    property LayerOverride: SYSINT read Get_LayerOverride write Set_LayerOverride;
    property Color: Integer read Get_Color write Set_Color;
    property Style: Integer read Get_Style write Set_Style;
    property Width: Integer read Get_Width write Set_Width;
    property ConstructionGeometry: WordBool read Get_ConstructionGeometry write Set_ConstructionGeometry;
    property Status: Integer read Get_Status write Set_Status;
  end;

// *********************************************************************//
// DispIntf:  ISketchSegmentDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DBF-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchSegmentDisp = dispinterface
    ['{83A33DBF-27C5-11CE-BFD4-00400513BB57}']
    property Layer: WideString dispid 65538;
    property LayerOverride: SYSINT dispid 65539;
    property Color: Integer dispid 65540;
    property Style: Integer dispid 65541;
    property Width: Integer dispid 65542;
    function GetType: Integer; dispid 65537;
    function GetID: OleVariant; dispid 65543;
    function IGetID: Integer; dispid 65544;
    function Select(AppendFlag: WordBool): WordBool; dispid 65545;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; dispid 65546;
    function DeSelect: WordBool; dispid 65547;
    property ConstructionGeometry: WordBool dispid 65548;
    function GetCurve: IDispatch; dispid 65549;
    function IGetCurve: ICurve; dispid 65550;
    function GetSketch: ISketch; dispid 65551;
    function GetConstraints: OleVariant; dispid 65552;
    function IGetConstraintsCount: Integer; dispid 65553;
    function IGetConstraints: WideString; dispid 65554;
    function GetLength: Double; dispid 65555;
    function Select2(Append: WordBool; Mark: Integer): WordBool; dispid 65556;
    function Select3(Append: WordBool; Mark: Integer; const Callout: ICallout): WordBool; dispid 65557;
    function GetRelations: OleVariant; dispid 65558;
    function GetRelationsCount: Integer; dispid 65559;
    function IGetRelations(Count: Integer): ISketchRelation; dispid 65560;
    property Status: Integer dispid 65561;
    function Select4(Append: WordBool; const Data: ISelectData): WordBool; dispid 65562;
    function CreateWireBody: IBody2; dispid 65563;
    function GetSketchPaths: OleVariant; dispid 65564;
    function IGetSketchPaths(Count: Integer): ISketchPath; dispid 65565;
    function GetSketchPathCount: Integer; dispid 65566;
  end;

// *********************************************************************//
// Interface: ISketchPath
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {41A80156-183C-4B30-A757-8B13AAB4E7C5}
// *********************************************************************//
  ISketchPath = interface(IDispatch)
    ['{41A80156-183C-4B30-A757-8B13AAB4E7C5}']
    function Select(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    function GetSketch: ISketch; safecall;
    function GetConstraints: OleVariant; safecall;
    function GetConstraintsCount: Integer; safecall;
    function IGetConstraints(Count: Integer): WideString; safecall;
    function GetRelations: OleVariant; safecall;
    function GetRelationsCount: Integer; safecall;
    function IGetRelations(Count: Integer): ISketchRelation; safecall;
    function GetLength: Double; safecall;
    function GetSketchSegments: OleVariant; safecall;
    function GetSketchSegmentCount: Integer; safecall;
    function IGetSketchSegments(Count: Integer): ISketchSegment; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISketchPathDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {41A80156-183C-4B30-A757-8B13AAB4E7C5}
// *********************************************************************//
  ISketchPathDisp = dispinterface
    ['{41A80156-183C-4B30-A757-8B13AAB4E7C5}']
    function Select(Append: WordBool; const Data: ISelectData): WordBool; dispid 1;
    function GetSketch: ISketch; dispid 2;
    function GetConstraints: OleVariant; dispid 3;
    function GetConstraintsCount: Integer; dispid 4;
    function IGetConstraints(Count: Integer): WideString; dispid 5;
    function GetRelations: OleVariant; dispid 6;
    function GetRelationsCount: Integer; dispid 7;
    function IGetRelations(Count: Integer): ISketchRelation; dispid 8;
    function GetLength: Double; dispid 9;
    function GetSketchSegments: OleVariant; dispid 10;
    function GetSketchSegmentCount: Integer; dispid 11;
    function IGetSketchSegments(Count: Integer): ISketchSegment; dispid 12;
  end;

// *********************************************************************//
// Interface: IProjectionArrow
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A2227E65-A3A7-11D4-AEFF-00C04F603FAF}
// *********************************************************************//
  IProjectionArrow = interface(IDispatch)
    ['{A2227E65-A3A7-11D4-AEFF-00C04F603FAF}']
    function GetView: IDispatch; safecall;
    function IGetView: IView; safecall;
    function GetProjectedView: IDispatch; safecall;
    function IGetProjectedView: IView; safecall;
    function GetLabel: WideString; safecall;
    function SetLabel(const Label_: WideString): WordBool; safecall;
    function GetUseDocTextFormat: WordBool; safecall;
    function GetTextFormat: IDispatch; safecall;
    function IGetTextFormat: ITextFormat; safecall;
    function GetCoordinates: OleVariant; safecall;
    function IGetCoordinates: Double; safecall;
  end;

// *********************************************************************//
// DispIntf:  IProjectionArrowDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A2227E65-A3A7-11D4-AEFF-00C04F603FAF}
// *********************************************************************//
  IProjectionArrowDisp = dispinterface
    ['{A2227E65-A3A7-11D4-AEFF-00C04F603FAF}']
    function GetView: IDispatch; dispid 1;
    function IGetView: IView; dispid 2;
    function GetProjectedView: IDispatch; dispid 3;
    function IGetProjectedView: IView; dispid 4;
    function GetLabel: WideString; dispid 5;
    function SetLabel(const Label_: WideString): WordBool; dispid 6;
    function GetUseDocTextFormat: WordBool; dispid 7;
    function GetTextFormat: IDispatch; dispid 8;
    function IGetTextFormat: ITextFormat; dispid 9;
    function GetCoordinates: OleVariant; dispid 10;
    function IGetCoordinates: Double; dispid 11;
  end;

// *********************************************************************//
// Interface: IDowelSymbol
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {55AACD8B-97C5-11D5-AF4B-00C04F603FAF}
// *********************************************************************//
  IDowelSymbol = interface(IDispatch)
    ['{55AACD8B-97C5-11D5-AF4B-00C04F603FAF}']
    function GetNext: IDispatch; safecall;
    function IGetNext: IDowelSymbol; safecall;
    function GetAnnotation: IDispatch; safecall;
    function IGetAnnotation: IAnnotation; safecall;
    function Get_Flipped: WordBool; safecall;
    procedure Set_Flipped(Flipped: WordBool); safecall;
    function GetArcPoints: OleVariant; safecall;
    function IGetArcPoints: Double; safecall;
    property Flipped: WordBool read Get_Flipped write Set_Flipped;
  end;

// *********************************************************************//
// DispIntf:  IDowelSymbolDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {55AACD8B-97C5-11D5-AF4B-00C04F603FAF}
// *********************************************************************//
  IDowelSymbolDisp = dispinterface
    ['{55AACD8B-97C5-11D5-AF4B-00C04F603FAF}']
    function GetNext: IDispatch; dispid 1;
    function IGetNext: IDowelSymbol; dispid 2;
    function GetAnnotation: IDispatch; dispid 3;
    function IGetAnnotation: IAnnotation; dispid 4;
    property Flipped: WordBool dispid 5;
    function GetArcPoints: OleVariant; dispid 6;
    function IGetArcPoints: Double; dispid 7;
  end;

// *********************************************************************//
// Interface: IBlockInstance
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {992A14B6-15CF-11D6-AF6E-00C04F603FAF}
// *********************************************************************//
  IBlockInstance = interface(IDispatch)
    ['{992A14B6-15CF-11D6-AF6E-00C04F603FAF}']
    function GetNext: IBlockInstance; safecall;
    function GetAnnotation: IAnnotation; safecall;
    function Get_Definition: IBlockDefinition; safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Angle: Double); safecall;
    function Get_Scale2: Double; safecall;
    procedure Set_Scale2(Scale: Double); safecall;
    function GetAttributeCount: Integer; safecall;
    function GetAttributes: OleVariant; safecall;
    function IGetAttributes(NumAttribs: Integer): INote; safecall;
    function GetAttributeValue(const TagName: WideString): WideString; safecall;
    function SetAttributeValue(const TagName: WideString; const Value: WideString): WordBool; safecall;
    function Get_TextDisplay: Integer; safecall;
    procedure Set_TextDisplay(Propval: Integer); safecall;
    property Definition: IBlockDefinition read Get_Definition;
    property Angle: Double read Get_Angle write Set_Angle;
    property Scale2: Double read Get_Scale2 write Set_Scale2;
    property TextDisplay: Integer read Get_TextDisplay write Set_TextDisplay;
  end;

// *********************************************************************//
// DispIntf:  IBlockInstanceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {992A14B6-15CF-11D6-AF6E-00C04F603FAF}
// *********************************************************************//
  IBlockInstanceDisp = dispinterface
    ['{992A14B6-15CF-11D6-AF6E-00C04F603FAF}']
    function GetNext: IBlockInstance; dispid 1;
    function GetAnnotation: IAnnotation; dispid 2;
    property Definition: IBlockDefinition readonly dispid 3;
    property Angle: Double dispid 4;
    property Scale2: Double dispid 5;
    function GetAttributeCount: Integer; dispid 6;
    function GetAttributes: OleVariant; dispid 7;
    function IGetAttributes(NumAttribs: Integer): INote; dispid 8;
    function GetAttributeValue(const TagName: WideString): WideString; dispid 9;
    function SetAttributeValue(const TagName: WideString; const Value: WideString): WordBool; dispid 10;
    property TextDisplay: Integer dispid 11;
  end;

// *********************************************************************//
// Interface: IBlockDefinition
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8CD8314A-1677-11D6-AF6E-00C04F603FAF}
// *********************************************************************//
  IBlockDefinition = interface(IDispatch)
    ['{8CD8314A-1677-11D6-AF6E-00C04F603FAF}']
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Name: WideString); safecall;
    function GetBlockInstanceCount: Integer; safecall;
    function GetBlockInstances: OleVariant; safecall;
    function IGetBlockInstances(Count: Integer): IBlockInstance; safecall;
    function GetUseExternalFile: WordBool; safecall;
    function SetUseExternalFile(UseFile: WordBool): Integer; safecall;
    function GetExternalFileName: WideString; safecall;
    function SetExternalFileName(const FileName: WideString): Integer; safecall;
    function InsertInstance(X: Double; Y: Double; Angle: Double; Scale: Double): IBlockInstance; safecall;
    function GetBasePoint: OleVariant; safecall;
    function IGetBasePoint: Double; safecall;
    function SetBasePoint(BasePoint: OleVariant): WordBool; safecall;
    function ISetBasePoint(var BasePoint: Double): WordBool; safecall;
    function GetSketch: ISketch; safecall;
    function GetNoteCount: Integer; safecall;
    function GetNotes: OleVariant; safecall;
    function IGetNotes(NumNotes: Integer): INote; safecall;
    function GetDimensionCount: Integer; safecall;
    function GetDimensions: OleVariant; safecall;
    function IGetDimensions(NumDimensions: Integer): IDisplayDimension; safecall;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  IBlockDefinitionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8CD8314A-1677-11D6-AF6E-00C04F603FAF}
// *********************************************************************//
  IBlockDefinitionDisp = dispinterface
    ['{8CD8314A-1677-11D6-AF6E-00C04F603FAF}']
    property Name: WideString dispid 1;
    function GetBlockInstanceCount: Integer; dispid 2;
    function GetBlockInstances: OleVariant; dispid 3;
    function IGetBlockInstances(Count: Integer): IBlockInstance; dispid 4;
    function GetUseExternalFile: WordBool; dispid 5;
    function SetUseExternalFile(UseFile: WordBool): Integer; dispid 6;
    function GetExternalFileName: WideString; dispid 7;
    function SetExternalFileName(const FileName: WideString): Integer; dispid 8;
    function InsertInstance(X: Double; Y: Double; Angle: Double; Scale: Double): IBlockInstance; dispid 9;
    function GetBasePoint: OleVariant; dispid 10;
    function IGetBasePoint: Double; dispid 11;
    function SetBasePoint(BasePoint: OleVariant): WordBool; dispid 12;
    function ISetBasePoint(var BasePoint: Double): WordBool; dispid 13;
    function GetSketch: ISketch; dispid 14;
    function GetNoteCount: Integer; dispid 15;
    function GetNotes: OleVariant; dispid 16;
    function IGetNotes(NumNotes: Integer): INote; dispid 17;
    function GetDimensionCount: Integer; dispid 18;
    function GetDimensions: OleVariant; dispid 19;
    function IGetDimensions(NumDimensions: Integer): IDisplayDimension; dispid 20;
  end;

// *********************************************************************//
// Interface: IBreakLine
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {54E1FFBC-D989-437F-A701-62BDA39FD195}
// *********************************************************************//
  IBreakLine = interface(IDispatch)
    ['{54E1FFBC-D989-437F-A701-62BDA39FD195}']
    function GetView: IView; safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Style: Integer); safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const Name: WideString); safecall;
    function Get_Orientation: Integer; safecall;
    function GetPosition(Index: Integer): Double; safecall;
    function SetPosition(Position1: Double; Position2: Double): WordBool; safecall;
    function Select(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    property Style: Integer read Get_Style write Set_Style;
    property Layer: WideString read Get_Layer write Set_Layer;
    property Orientation: Integer read Get_Orientation;
  end;

// *********************************************************************//
// DispIntf:  IBreakLineDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {54E1FFBC-D989-437F-A701-62BDA39FD195}
// *********************************************************************//
  IBreakLineDisp = dispinterface
    ['{54E1FFBC-D989-437F-A701-62BDA39FD195}']
    function GetView: IView; dispid 1;
    property Style: Integer dispid 2;
    property Layer: WideString dispid 3;
    property Orientation: Integer readonly dispid 4;
    function GetPosition(Index: Integer): Double; dispid 5;
    function SetPosition(Position1: Double; Position2: Double): WordBool; dispid 6;
    function Select(Append: WordBool; const Data: ISelectData): WordBool; dispid 7;
  end;

// *********************************************************************//
// Interface: IFaceHatch
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E0A98A37-8780-4E5F-A28A-C7C6AF25231C}
// *********************************************************************//
  IFaceHatch = interface(IDispatch)
    ['{E0A98A37-8780-4E5F-A28A-C7C6AF25231C}']
    function Get_Pattern: WideString; safecall;
    procedure Set_Pattern(const Retval: WideString); safecall;
    function Get_Scale: Double; safecall;
    procedure Set_Scale(Retval: Double); safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Retval: Double); safecall;
    function Get_Face: IFace2; safecall;
    procedure Set_Face(const Retval: IFace2); safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const Retval: WideString); safecall;
    function Get_Color: Integer; safecall;
    procedure Set_Color(Retval: Integer); safecall;
    function Get_Definition: WideString; safecall;
    procedure Set_Definition(const Retval: WideString); safecall;
    function Get_SolidFill: WordBool; safecall;
    procedure Set_SolidFill(Retval: WordBool); safecall;
    function Get_Scale2: Double; safecall;
    procedure Set_Scale2(Retval: Double); safecall;
    function Get_PatternId: Integer; safecall;
    procedure Set_PatternId(IdOut: Integer); safecall;
    property Pattern: WideString read Get_Pattern write Set_Pattern;
    property Scale: Double read Get_Scale write Set_Scale;
    property Angle: Double read Get_Angle write Set_Angle;
    property Face: IFace2 read Get_Face write Set_Face;
    property Layer: WideString read Get_Layer write Set_Layer;
    property Color: Integer read Get_Color write Set_Color;
    property Definition: WideString read Get_Definition write Set_Definition;
    property SolidFill: WordBool read Get_SolidFill write Set_SolidFill;
    property Scale2: Double read Get_Scale2 write Set_Scale2;
    property PatternId: Integer read Get_PatternId write Set_PatternId;
  end;

// *********************************************************************//
// DispIntf:  IFaceHatchDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E0A98A37-8780-4E5F-A28A-C7C6AF25231C}
// *********************************************************************//
  IFaceHatchDisp = dispinterface
    ['{E0A98A37-8780-4E5F-A28A-C7C6AF25231C}']
    property Pattern: WideString dispid 1;
    property Scale: Double dispid 2;
    property Angle: Double dispid 3;
    property Face: IFace2 dispid 4;
    property Layer: WideString dispid 5;
    property Color: Integer dispid 6;
    property Definition: WideString dispid 7;
    property SolidFill: WordBool dispid 8;
    property Scale2: Double dispid 9;
    property PatternId: Integer dispid 10;
  end;

// *********************************************************************//
// Interface: ICenterMark
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6BEB0423-EDA4-11D5-AF64-00C04F603FAF}
// *********************************************************************//
  ICenterMark = interface(IDispatch)
    ['{6BEB0423-EDA4-11D5-AF64-00C04F603FAF}']
    function Get_RotationAngle: Double; safecall;
    procedure Set_RotationAngle(Angle: Double); safecall;
    function Get_UseDocDisplaySettings: WordBool; safecall;
    procedure Set_UseDocDisplaySettings(UseDoc: WordBool); safecall;
    function Get_ShowLines: WordBool; safecall;
    procedure Set_ShowLines(Show: WordBool); safecall;
    function Get_Size: Double; safecall;
    procedure Set_Size(Size: Double); safecall;
    function GetNext: ICenterMark; safecall;
    function GetAnnotation: IAnnotation; safecall;
    function Get_Style: Integer; safecall;
    function Get_ConnectionLines: Integer; safecall;
    procedure Set_ConnectionLines(Visible: Integer); safecall;
    function Get_CenterLineFont: WordBool; safecall;
    procedure Set_CenterLineFont(CenterLine: WordBool); safecall;
    function Get_IsGrouped: WordBool; safecall;
    function Get_GroupCount: Integer; safecall;
    function GetExtendedLength(GroupID: Integer; HandleID: Integer): Double; safecall;
    function SetExtendedLength(GroupID: Integer; HandleID: Integer; ExtendedLength: Double): WordBool; safecall;
    property RotationAngle: Double read Get_RotationAngle write Set_RotationAngle;
    property UseDocDisplaySettings: WordBool read Get_UseDocDisplaySettings write Set_UseDocDisplaySettings;
    property ShowLines: WordBool read Get_ShowLines write Set_ShowLines;
    property Size: Double read Get_Size write Set_Size;
    property Style: Integer read Get_Style;
    property ConnectionLines: Integer read Get_ConnectionLines write Set_ConnectionLines;
    property CenterLineFont: WordBool read Get_CenterLineFont write Set_CenterLineFont;
    property IsGrouped: WordBool read Get_IsGrouped;
    property GroupCount: Integer read Get_GroupCount;
  end;

// *********************************************************************//
// DispIntf:  ICenterMarkDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6BEB0423-EDA4-11D5-AF64-00C04F603FAF}
// *********************************************************************//
  ICenterMarkDisp = dispinterface
    ['{6BEB0423-EDA4-11D5-AF64-00C04F603FAF}']
    property RotationAngle: Double dispid 1;
    property UseDocDisplaySettings: WordBool dispid 2;
    property ShowLines: WordBool dispid 3;
    property Size: Double dispid 4;
    function GetNext: ICenterMark; dispid 5;
    function GetAnnotation: IAnnotation; dispid 6;
    property Style: Integer readonly dispid 7;
    property ConnectionLines: Integer dispid 8;
    property CenterLineFont: WordBool dispid 9;
    property IsGrouped: WordBool readonly dispid 10;
    property GroupCount: Integer readonly dispid 11;
    function GetExtendedLength(GroupID: Integer; HandleID: Integer): Double; dispid 12;
    function SetExtendedLength(GroupID: Integer; HandleID: Integer; ExtendedLength: Double): WordBool; dispid 13;
  end;

// *********************************************************************//
// Interface: ICenterLine
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {90DE8CD7-CFFC-414B-8380-131C739F9FB5}
// *********************************************************************//
  ICenterLine = interface(IDispatch)
    ['{90DE8CD7-CFFC-414B-8380-131C739F9FB5}']
    function GetNext: ICenterLine; safecall;
    function GetAnnotation: IAnnotation; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICenterLineDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {90DE8CD7-CFFC-414B-8380-131C739F9FB5}
// *********************************************************************//
  ICenterLineDisp = dispinterface
    ['{90DE8CD7-CFFC-414B-8380-131C739F9FB5}']
    function GetNext: ICenterLine; dispid 1;
    function GetAnnotation: IAnnotation; dispid 2;
  end;

// *********************************************************************//
// Interface: ITableAnnotation
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C108723C-AC56-4C08-9591-7980B0A5AAB2}
// *********************************************************************//
  ITableAnnotation = interface(IDispatch)
    ['{C108723C-AC56-4C08-9591-7980B0A5AAB2}']
    function GetNext: ITableAnnotation; safecall;
    function GetAnnotation: IAnnotation; safecall;
    function Get_type_: Integer; safecall;
    function Get_BorderLineWeight: Integer; safecall;
    procedure Set_BorderLineWeight(LineWeight: Integer); safecall;
    function Get_GridLineWeight: Integer; safecall;
    procedure Set_GridLineWeight(LineWeight: Integer); safecall;
    function Get_AnchorType: Integer; safecall;
    procedure Set_AnchorType(Anchor: Integer); safecall;
    function GetUseDocTextFormat: WordBool; safecall;
    function GetTextFormat: ITextFormat; safecall;
    function SetTextFormat(UseDoc: WordBool; const TextFormat: ITextFormat): WordBool; safecall;
    function Get_TextVerticalJustification: Integer; safecall;
    procedure Set_TextVerticalJustification(Justification: Integer); safecall;
    function Get_TextHorizontalJustification: Integer; safecall;
    procedure Set_TextHorizontalJustification(Justification: Integer); safecall;
    function Get_ColumnCount: Integer; safecall;
    function Get_RowCount: Integer; safecall;
    function GetHeaderStyle: Integer; safecall;
    function GetHeaderCount: Integer; safecall;
    function SetHeader(Style: Integer; Count: Integer): WordBool; safecall;
    function GetSplitInformation(var Index: Integer; var Count: Integer; var RangeStart: Integer; 
                                 var RangeEnd: Integer): Integer; safecall;
    function Split(Where: Integer; Index: Integer): ITableAnnotation; safecall;
    function Merge(Where: Integer): WordBool; safecall;
    function InsertColumn(Where: Integer; Index: Integer; const Name: WideString): WordBool; safecall;
    function InsertRow(Where: Integer; Index: Integer): WordBool; safecall;
    function MoveColumn(Source: Integer; Where: Integer; Destination: Integer): WordBool; safecall;
    function MoveRow(Source: Integer; Where: Integer; Destination: Integer): WordBool; safecall;
    function DeleteColumn(Index: Integer): WordBool; safecall;
    function DeleteRow(Index: Integer): WordBool; safecall;
    procedure GetCellRange(var FirstRow: Integer; var LastRow: Integer; var FirstColumn: Integer; 
                           var LastColumn: Integer); safecall;
    procedure SetCellRange(FirstRow: Integer; LastRow: Integer; FirstColumn: Integer; 
                           LastColumn: Integer); safecall;
    function GetColumnWidth(Index: Integer): Double; safecall;
    function SetColumnWidth(Index: Integer; Width: Double; Options: Integer): Double; safecall;
    function GetRowHeight(Index: Integer): Double; safecall;
    function SetRowHeight(Index: Integer; Height: Double; Options: Integer): Double; safecall;
    function GetColumnType(Index: Integer): Integer; safecall;
    function SetColumnType(Index: Integer; Type_: Integer): WordBool; safecall;
    function GetColumnTitle(Index: Integer): WideString; safecall;
    function SetColumnTitle(Index: Integer; const Title: WideString): WordBool; safecall;
    function Get_Text(Row: Integer; Column: Integer): WideString; safecall;
    procedure Set_Text(Row: Integer; Column: Integer; const Text: WideString); safecall;
    function GetCellUseDocTextFormat(Row: Integer; Column: Integer): WordBool; safecall;
    function GetCellTextFormat(Row: Integer; Column: Integer): ITextFormat; safecall;
    function SetCellTextFormat(Row: Integer; Column: Integer; UseDoc: WordBool; 
                               const TextFormat: ITextFormat): WordBool; safecall;
    function Get_CellTextHorizontalJustification(Row: Integer; Column: Integer): Integer; safecall;
    procedure Set_CellTextHorizontalJustification(Row: Integer; Column: Integer; 
                                                  Justification: Integer); safecall;
    function Get_CellTextVerticalJustification(Row: Integer; Column: Integer): Integer; safecall;
    procedure Set_CellTextVerticalJustification(Row: Integer; Column: Integer; 
                                                Justification: Integer); safecall;
    function MergeCells(RowStart: Integer; ColumnStart: Integer; RowEnd: Integer; ColumnEnd: Integer): WordBool; safecall;
    function UnmergeCells(Row: Integer; Column: Integer): WordBool; safecall;
    function IsCellMerged(Row: Integer; Column: Integer; var WithRow: Integer; 
                          var WithColumn: Integer): WordBool; safecall;
    function IsCellTextEditable(Row: Integer; Column: Integer): WordBool; safecall;
    function Get_Title: WideString; safecall;
    procedure Set_Title(const TableTitle: WideString); safecall;
    function Get_TitleVisible: WordBool; safecall;
    procedure Set_TitleVisible(Visible: WordBool); safecall;
    function SaveAsTemplate(const FileName: WideString): WordBool; safecall;
    function SaveAsText(const FileName: WideString; const Separator: WideString): WordBool; safecall;
    function Get_Anchored: WordBool; safecall;
    procedure Set_Anchored(Attached: WordBool); safecall;
    function Get_GeneralTableFeature: IGeneralTableFeature; safecall;
    function GetRowVerticalGap(Index: Integer): Double; safecall;
    function SetRowVerticalGap(Index: Integer; Gap: Double): WordBool; safecall;
    function Get_DisplayedText(Row: Integer; Column: Integer): WideString; safecall;
    function Get_RowHidden(Index: Integer): WordBool; safecall;
    procedure Set_RowHidden(Index: Integer; Visible: WordBool); safecall;
    property type_: Integer read Get_type_;
    property BorderLineWeight: Integer read Get_BorderLineWeight write Set_BorderLineWeight;
    property GridLineWeight: Integer read Get_GridLineWeight write Set_GridLineWeight;
    property AnchorType: Integer read Get_AnchorType write Set_AnchorType;
    property TextVerticalJustification: Integer read Get_TextVerticalJustification write Set_TextVerticalJustification;
    property TextHorizontalJustification: Integer read Get_TextHorizontalJustification write Set_TextHorizontalJustification;
    property ColumnCount: Integer read Get_ColumnCount;
    property RowCount: Integer read Get_RowCount;
    property Text[Row: Integer; Column: Integer]: WideString read Get_Text write Set_Text;
    property CellTextHorizontalJustification[Row: Integer; Column: Integer]: Integer read Get_CellTextHorizontalJustification write Set_CellTextHorizontalJustification;
    property CellTextVerticalJustification[Row: Integer; Column: Integer]: Integer read Get_CellTextVerticalJustification write Set_CellTextVerticalJustification;
    property Title: WideString read Get_Title write Set_Title;
    property TitleVisible: WordBool read Get_TitleVisible write Set_TitleVisible;
    property Anchored: WordBool read Get_Anchored write Set_Anchored;
    property GeneralTableFeature: IGeneralTableFeature read Get_GeneralTableFeature;
    property DisplayedText[Row: Integer; Column: Integer]: WideString read Get_DisplayedText;
    property RowHidden[Index: Integer]: WordBool read Get_RowHidden write Set_RowHidden;
  end;

// *********************************************************************//
// DispIntf:  ITableAnnotationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C108723C-AC56-4C08-9591-7980B0A5AAB2}
// *********************************************************************//
  ITableAnnotationDisp = dispinterface
    ['{C108723C-AC56-4C08-9591-7980B0A5AAB2}']
    function GetNext: ITableAnnotation; dispid 131073;
    function GetAnnotation: IAnnotation; dispid 131074;
    property type_: Integer readonly dispid 131075;
    property BorderLineWeight: Integer dispid 131076;
    property GridLineWeight: Integer dispid 131077;
    property AnchorType: Integer dispid 131078;
    function GetUseDocTextFormat: WordBool; dispid 131079;
    function GetTextFormat: ITextFormat; dispid 131080;
    function SetTextFormat(UseDoc: WordBool; const TextFormat: ITextFormat): WordBool; dispid 131081;
    property TextVerticalJustification: Integer dispid 131082;
    property TextHorizontalJustification: Integer dispid 131083;
    property ColumnCount: Integer readonly dispid 131084;
    property RowCount: Integer readonly dispid 131085;
    function GetHeaderStyle: Integer; dispid 131086;
    function GetHeaderCount: Integer; dispid 131087;
    function SetHeader(Style: Integer; Count: Integer): WordBool; dispid 131088;
    function GetSplitInformation(var Index: Integer; var Count: Integer; var RangeStart: Integer; 
                                 var RangeEnd: Integer): Integer; dispid 131089;
    function Split(Where: Integer; Index: Integer): ITableAnnotation; dispid 131090;
    function Merge(Where: Integer): WordBool; dispid 131091;
    function InsertColumn(Where: Integer; Index: Integer; const Name: WideString): WordBool; dispid 131092;
    function InsertRow(Where: Integer; Index: Integer): WordBool; dispid 131093;
    function MoveColumn(Source: Integer; Where: Integer; Destination: Integer): WordBool; dispid 131094;
    function MoveRow(Source: Integer; Where: Integer; Destination: Integer): WordBool; dispid 131095;
    function DeleteColumn(Index: Integer): WordBool; dispid 131096;
    function DeleteRow(Index: Integer): WordBool; dispid 131097;
    procedure GetCellRange(var FirstRow: Integer; var LastRow: Integer; var FirstColumn: Integer; 
                           var LastColumn: Integer); dispid 131098;
    procedure SetCellRange(FirstRow: Integer; LastRow: Integer; FirstColumn: Integer; 
                           LastColumn: Integer); dispid 131099;
    function GetColumnWidth(Index: Integer): Double; dispid 131100;
    function SetColumnWidth(Index: Integer; Width: Double; Options: Integer): Double; dispid 131101;
    function GetRowHeight(Index: Integer): Double; dispid 131102;
    function SetRowHeight(Index: Integer; Height: Double; Options: Integer): Double; dispid 131103;
    function GetColumnType(Index: Integer): Integer; dispid 131104;
    function SetColumnType(Index: Integer; Type_: Integer): WordBool; dispid 131105;
    function GetColumnTitle(Index: Integer): WideString; dispid 131106;
    function SetColumnTitle(Index: Integer; const Title: WideString): WordBool; dispid 131107;
    property Text[Row: Integer; Column: Integer]: WideString dispid 131108;
    function GetCellUseDocTextFormat(Row: Integer; Column: Integer): WordBool; dispid 131109;
    function GetCellTextFormat(Row: Integer; Column: Integer): ITextFormat; dispid 131110;
    function SetCellTextFormat(Row: Integer; Column: Integer; UseDoc: WordBool; 
                               const TextFormat: ITextFormat): WordBool; dispid 131111;
    property CellTextHorizontalJustification[Row: Integer; Column: Integer]: Integer dispid 131112;
    property CellTextVerticalJustification[Row: Integer; Column: Integer]: Integer dispid 131113;
    function MergeCells(RowStart: Integer; ColumnStart: Integer; RowEnd: Integer; ColumnEnd: Integer): WordBool; dispid 131114;
    function UnmergeCells(Row: Integer; Column: Integer): WordBool; dispid 131115;
    function IsCellMerged(Row: Integer; Column: Integer; var WithRow: Integer; 
                          var WithColumn: Integer): WordBool; dispid 131116;
    function IsCellTextEditable(Row: Integer; Column: Integer): WordBool; dispid 131117;
    property Title: WideString dispid 131118;
    property TitleVisible: WordBool dispid 131119;
    function SaveAsTemplate(const FileName: WideString): WordBool; dispid 131120;
    function SaveAsText(const FileName: WideString; const Separator: WideString): WordBool; dispid 131121;
    property Anchored: WordBool dispid 131122;
    property GeneralTableFeature: IGeneralTableFeature readonly dispid 131123;
    function GetRowVerticalGap(Index: Integer): Double; dispid 131124;
    function SetRowVerticalGap(Index: Integer; Gap: Double): WordBool; dispid 131125;
    property DisplayedText[Row: Integer; Column: Integer]: WideString readonly dispid 131126;
    property RowHidden[Index: Integer]: WordBool dispid 131127;
  end;

// *********************************************************************//
// Interface: IGeneralTableFeature
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {846C6E0F-7319-4C13-B12E-A6B231DACC89}
// *********************************************************************//
  IGeneralTableFeature = interface(IDispatch)
    ['{846C6E0F-7319-4C13-B12E-A6B231DACC89}']
    function GetFeature: IFeature; safecall;
    function GetTableAnnotationCount: Integer; safecall;
    function GetTableAnnotations: OleVariant; safecall;
    function IGetTableAnnotations(Count: Integer): ITableAnnotation; safecall;
  end;

// *********************************************************************//
// DispIntf:  IGeneralTableFeatureDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {846C6E0F-7319-4C13-B12E-A6B231DACC89}
// *********************************************************************//
  IGeneralTableFeatureDisp = dispinterface
    ['{846C6E0F-7319-4C13-B12E-A6B231DACC89}']
    function GetFeature: IFeature; dispid 1;
    function GetTableAnnotationCount: Integer; dispid 2;
    function GetTableAnnotations: OleVariant; dispid 3;
    function IGetTableAnnotations(Count: Integer): ITableAnnotation; dispid 4;
  end;

// *********************************************************************//
// Interface: IHoleTableAnnotation
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {61E4109E-D5D1-48CB-8593-8283EF0BB79A}
// *********************************************************************//
  IHoleTableAnnotation = interface(IDispatch)
    ['{61E4109E-D5D1-48CB-8593-8283EF0BB79A}']
    function Get_HoleTable: IHoleTable; safecall;
    property HoleTable: IHoleTable read Get_HoleTable;
  end;

// *********************************************************************//
// DispIntf:  IHoleTableAnnotationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {61E4109E-D5D1-48CB-8593-8283EF0BB79A}
// *********************************************************************//
  IHoleTableAnnotationDisp = dispinterface
    ['{61E4109E-D5D1-48CB-8593-8283EF0BB79A}']
    property HoleTable: IHoleTable readonly dispid 196609;
  end;

// *********************************************************************//
// Interface: IHoleTable
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {727DD5DF-15F4-4916-854A-BE9E30614C97}
// *********************************************************************//
  IHoleTable = interface(IDispatch)
    ['{727DD5DF-15F4-4916-854A-BE9E30614C97}']
    function GetFeature: IFeature; safecall;
    function GetTableAnnotationCount: Integer; safecall;
    function GetTableAnnotations: OleVariant; safecall;
    function IGetTableAnnotations(Count: Integer): IHoleTableAnnotation; safecall;
    function Get_DatumOrigin: IDatumOrigin; safecall;
    function AddHole: Integer; safecall;
    function Get_HoleCentersVisible: WordBool; safecall;
    procedure Set_HoleCentersVisible(Visible: WordBool); safecall;
    function Get_CombineTags: WordBool; safecall;
    procedure Set_CombineTags(Combine: WordBool); safecall;
    function Get_CombineSameSize: WordBool; safecall;
    procedure Set_CombineSameSize(Combine: WordBool); safecall;
    function Get_TagStyle: Integer; safecall;
    procedure Set_TagStyle(Style: Integer); safecall;
    function GetHoleLocationUseDocPrecision: WordBool; safecall;
    function GetHoleLocationPrecision: Integer; safecall;
    function SetHoleLocationPrecision(UseDoc: WordBool; Precision: Integer): WordBool; safecall;
    function Get_HoleTagsVisible: WordBool; safecall;
    procedure Set_HoleTagsVisible(Visible: WordBool); safecall;
    property DatumOrigin: IDatumOrigin read Get_DatumOrigin;
    property HoleCentersVisible: WordBool read Get_HoleCentersVisible write Set_HoleCentersVisible;
    property CombineTags: WordBool read Get_CombineTags write Set_CombineTags;
    property CombineSameSize: WordBool read Get_CombineSameSize write Set_CombineSameSize;
    property TagStyle: Integer read Get_TagStyle write Set_TagStyle;
    property HoleTagsVisible: WordBool read Get_HoleTagsVisible write Set_HoleTagsVisible;
  end;

// *********************************************************************//
// DispIntf:  IHoleTableDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {727DD5DF-15F4-4916-854A-BE9E30614C97}
// *********************************************************************//
  IHoleTableDisp = dispinterface
    ['{727DD5DF-15F4-4916-854A-BE9E30614C97}']
    function GetFeature: IFeature; dispid 1;
    function GetTableAnnotationCount: Integer; dispid 2;
    function GetTableAnnotations: OleVariant; dispid 3;
    function IGetTableAnnotations(Count: Integer): IHoleTableAnnotation; dispid 4;
    property DatumOrigin: IDatumOrigin readonly dispid 5;
    function AddHole: Integer; dispid 6;
    property HoleCentersVisible: WordBool dispid 7;
    property CombineTags: WordBool dispid 8;
    property CombineSameSize: WordBool dispid 9;
    property TagStyle: Integer dispid 10;
    function GetHoleLocationUseDocPrecision: WordBool; dispid 11;
    function GetHoleLocationPrecision: Integer; dispid 12;
    function SetHoleLocationPrecision(UseDoc: WordBool; Precision: Integer): WordBool; dispid 13;
    property HoleTagsVisible: WordBool dispid 14;
  end;

// *********************************************************************//
// Interface: IDatumOrigin
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5D9A743B-FA81-4D23-AB0A-2898584F6F1E}
// *********************************************************************//
  IDatumOrigin = interface(IDispatch)
    ['{5D9A743B-FA81-4D23-AB0A-2898584F6F1E}']
    function GetNext: IDatumOrigin; safecall;
    function GetAnnotation: IAnnotation; safecall;
    function Get_XLabel: WideString; safecall;
    procedure Set_XLabel(const Label_: WideString); safecall;
    function Get_YLabel: WideString; safecall;
    procedure Set_YLabel(const Label_: WideString); safecall;
    function Get_Table: IHoleTable; safecall;
    function Reattach: WordBool; safecall;
    function GetAxisPoints: OleVariant; safecall;
    function IGetAxisPoints: Double; safecall;
    function SetAxisPoints(PointData: OleVariant): WordBool; safecall;
    function ISetAxisPoints(var PointData: Double): WordBool; safecall;
    function GetAxisPoints2: OleVariant; safecall;
    function IGetAxisPoints2: Double; safecall;
    property XLabel: WideString read Get_XLabel write Set_XLabel;
    property YLabel: WideString read Get_YLabel write Set_YLabel;
    property Table: IHoleTable read Get_Table;
  end;

// *********************************************************************//
// DispIntf:  IDatumOriginDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5D9A743B-FA81-4D23-AB0A-2898584F6F1E}
// *********************************************************************//
  IDatumOriginDisp = dispinterface
    ['{5D9A743B-FA81-4D23-AB0A-2898584F6F1E}']
    function GetNext: IDatumOrigin; dispid 1;
    function GetAnnotation: IAnnotation; dispid 2;
    property XLabel: WideString dispid 3;
    property YLabel: WideString dispid 4;
    property Table: IHoleTable readonly dispid 5;
    function Reattach: WordBool; dispid 6;
    function GetAxisPoints: OleVariant; dispid 7;
    function IGetAxisPoints: Double; dispid 8;
    function SetAxisPoints(PointData: OleVariant): WordBool; dispid 9;
    function ISetAxisPoints(var PointData: Double): WordBool; dispid 10;
    function GetAxisPoints2: OleVariant; dispid 11;
    function IGetAxisPoints2: Double; dispid 12;
  end;

// *********************************************************************//
// Interface: IBomTableAnnotation
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {98FD64DC-285D-4B48-9BDB-D85C253E2BAF}
// *********************************************************************//
  IBomTableAnnotation = interface(IDispatch)
    ['{98FD64DC-285D-4B48-9BDB-D85C253E2BAF}']
    function Get_BomFeature: IBomFeature; safecall;
    function GetColumnUseTitleAsPartNumber(Index: Integer): WordBool; safecall;
    function SetColumnUseTitleAsPartNumber(Index: Integer; UseTitle: WordBool): WordBool; safecall;
    function GetColumnCustomProperty(Index: Integer): WideString; safecall;
    function SetColumnCustomProperty(Index: Integer; const CustomProp: WideString): WordBool; safecall;
    function GetAllCustomPropertiesCount: Integer; safecall;
    function GetAllCustomProperties: OleVariant; safecall;
    function IGetAllCustomProperties(Count: Integer): WideString; safecall;
    property BomFeature: IBomFeature read Get_BomFeature;
  end;

// *********************************************************************//
// DispIntf:  IBomTableAnnotationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {98FD64DC-285D-4B48-9BDB-D85C253E2BAF}
// *********************************************************************//
  IBomTableAnnotationDisp = dispinterface
    ['{98FD64DC-285D-4B48-9BDB-D85C253E2BAF}']
    property BomFeature: IBomFeature readonly dispid 196609;
    function GetColumnUseTitleAsPartNumber(Index: Integer): WordBool; dispid 196610;
    function SetColumnUseTitleAsPartNumber(Index: Integer; UseTitle: WordBool): WordBool; dispid 196611;
    function GetColumnCustomProperty(Index: Integer): WideString; dispid 196612;
    function SetColumnCustomProperty(Index: Integer; const CustomProp: WideString): WordBool; dispid 196613;
    function GetAllCustomPropertiesCount: Integer; dispid 196614;
    function GetAllCustomProperties: OleVariant; dispid 196615;
    function IGetAllCustomProperties(Count: Integer): WideString; dispid 196616;
  end;

// *********************************************************************//
// Interface: IBomFeature
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3368F34B-85F2-4D61-9325-3353CF110D5A}
// *********************************************************************//
  IBomFeature = interface(IDispatch)
    ['{3368F34B-85F2-4D61-9325-3353CF110D5A}']
    function GetFeature: IFeature; safecall;
    function GetTableAnnotationCount: Integer; safecall;
    function GetTableAnnotations: OleVariant; safecall;
    function IGetTableAnnotations(Count: Integer): IBomTableAnnotation; safecall;
    function Get_TableType: Integer; safecall;
    procedure Set_TableType(Type_: Integer); safecall;
    function Get_Configuration: WideString; safecall;
    procedure Set_Configuration(const Name: WideString); safecall;
    function Get_KeepMissingItems: WordBool; safecall;
    procedure Set_KeepMissingItems(Keep: WordBool); safecall;
    function Get_StrikeoutMissingItems: WordBool; safecall;
    procedure Set_StrikeoutMissingItems(Strike: WordBool); safecall;
    function Get_ZeroQuantityDisplay: Integer; safecall;
    procedure Set_ZeroQuantityDisplay(Display: Integer); safecall;
    function Get_SequenceStartNumber: Integer; safecall;
    procedure Set_SequenceStartNumber(Number: Integer); safecall;
    function GetConfigurationCount(OnlyVisible: WordBool): Integer; safecall;
    function GetConfigurations(OnlyVisible: WordBool; var Visible: OleVariant): OleVariant; safecall;
    function IGetConfigurations(OnlyVisible: WordBool; Count: Integer; var Visible: WordBool): WideString; safecall;
    function SetConfigurations(OnlyVisible: WordBool; Visible: OleVariant; Names: OleVariant): WordBool; safecall;
    function ISetConfigurations(OnlyVisible: WordBool; Count: Integer; var Visible: WordBool; 
                                var Names: WideString): WordBool; safecall;
    function Get_DisplayAsOneItem: WordBool; safecall;
    procedure Set_DisplayAsOneItem(OneItem: WordBool); safecall;
    function Get_KeepCurrentItemNumbers: WordBool; safecall;
    procedure Set_KeepCurrentItemNumbers(Keep: WordBool); safecall;
    function FollowAssemblyOrder: WordBool; safecall;
    function Get_FollowAssemblyOrder2: WordBool; safecall;
    procedure Set_FollowAssemblyOrder2(Follow: WordBool); safecall;
    function GetReferencedModelName: WideString; safecall;
    property TableType: Integer read Get_TableType write Set_TableType;
    property Configuration: WideString read Get_Configuration write Set_Configuration;
    property KeepMissingItems: WordBool read Get_KeepMissingItems write Set_KeepMissingItems;
    property StrikeoutMissingItems: WordBool read Get_StrikeoutMissingItems write Set_StrikeoutMissingItems;
    property ZeroQuantityDisplay: Integer read Get_ZeroQuantityDisplay write Set_ZeroQuantityDisplay;
    property SequenceStartNumber: Integer read Get_SequenceStartNumber write Set_SequenceStartNumber;
    property DisplayAsOneItem: WordBool read Get_DisplayAsOneItem write Set_DisplayAsOneItem;
    property KeepCurrentItemNumbers: WordBool read Get_KeepCurrentItemNumbers write Set_KeepCurrentItemNumbers;
    property FollowAssemblyOrder2: WordBool read Get_FollowAssemblyOrder2 write Set_FollowAssemblyOrder2;
  end;

// *********************************************************************//
// DispIntf:  IBomFeatureDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3368F34B-85F2-4D61-9325-3353CF110D5A}
// *********************************************************************//
  IBomFeatureDisp = dispinterface
    ['{3368F34B-85F2-4D61-9325-3353CF110D5A}']
    function GetFeature: IFeature; dispid 1;
    function GetTableAnnotationCount: Integer; dispid 2;
    function GetTableAnnotations: OleVariant; dispid 3;
    function IGetTableAnnotations(Count: Integer): IBomTableAnnotation; dispid 4;
    property TableType: Integer dispid 5;
    property Configuration: WideString dispid 6;
    property KeepMissingItems: WordBool dispid 7;
    property StrikeoutMissingItems: WordBool dispid 8;
    property ZeroQuantityDisplay: Integer dispid 9;
    property SequenceStartNumber: Integer dispid 10;
    function GetConfigurationCount(OnlyVisible: WordBool): Integer; dispid 11;
    function GetConfigurations(OnlyVisible: WordBool; var Visible: OleVariant): OleVariant; dispid 12;
    function IGetConfigurations(OnlyVisible: WordBool; Count: Integer; var Visible: WordBool): WideString; dispid 13;
    function SetConfigurations(OnlyVisible: WordBool; Visible: OleVariant; Names: OleVariant): WordBool; dispid 14;
    function ISetConfigurations(OnlyVisible: WordBool; Count: Integer; var Visible: WordBool; 
                                var Names: WideString): WordBool; dispid 15;
    property DisplayAsOneItem: WordBool dispid 16;
    property KeepCurrentItemNumbers: WordBool dispid 17;
    function FollowAssemblyOrder: WordBool; dispid 18;
    property FollowAssemblyOrder2: WordBool dispid 19;
    function GetReferencedModelName: WideString; dispid 20;
  end;

// *********************************************************************//
// Interface: IWeldBead
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {66F09B08-8A71-4283-A943-3F905653C859}
// *********************************************************************//
  IWeldBead = interface(IDispatch)
    ['{66F09B08-8A71-4283-A943-3F905653C859}']
    function GetNext: IWeldBead; safecall;
    function GetAnnotation: IAnnotation; safecall;
    function Get_SolidFill: WordBool; safecall;
    procedure Set_SolidFill(SolidFill: WordBool); safecall;
    property SolidFill: WordBool read Get_SolidFill write Set_SolidFill;
  end;

// *********************************************************************//
// DispIntf:  IWeldBeadDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {66F09B08-8A71-4283-A943-3F905653C859}
// *********************************************************************//
  IWeldBeadDisp = dispinterface
    ['{66F09B08-8A71-4283-A943-3F905653C859}']
    function GetNext: IWeldBead; dispid 1;
    function GetAnnotation: IAnnotation; dispid 2;
    property SolidFill: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface: ISheet
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D80-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISheet = interface(IDispatch)
    ['{83A33D80-27C5-11CE-BFD4-00400513BB57}']
    function GetBomTable: IDispatch; safecall;
    function IGetBomTable: IBomTable; safecall;
    function GetName: WideString; safecall;
    procedure SetName(const NameIn: WideString); safecall;
    function GetTemplateName: WideString; safecall;
    procedure SetTemplateName(const NameIn: WideString); safecall;
    function GetProperties: OleVariant; safecall;
    function IGetProperties: Double; safecall;
    procedure SetProperties(PaperSz: Integer; Templ: Integer; Scale1: Double; Scale2: Double; 
                            FirstAngle: WordBool; Width: Double; Height: Double); safecall;
    function GetCustomColorsCount: Integer; safecall;
    function IGetCustomColors: Integer; safecall;
    function GetOLEObjectCount: Integer; safecall;
    function GetOLEObjectSettings(Index: Integer; var ByteCount: Integer; var Aspect: Integer): OleVariant; safecall;
    function IGetOLEObjectSettings(Index: Integer; var ByteCount: Integer; var Aspect: Integer; 
                                   var Position: Double): WordBool; safecall;
    function GetOLEObjectData(Index: Integer): OleVariant; safecall;
    function IGetOLEObjectData(Index: Integer; var Buffer: Byte): WordBool; safecall;
    function CreateOLEObject(Aspect: Integer; Position: OleVariant; Buffer: OleVariant): WordBool; safecall;
    function ICreateOLEObject(Aspect: Integer; var Position: Double; ByteCount: Integer; 
                              var Buffer: Byte): WordBool; safecall;
    function Get_PageSetup: IDispatch; safecall;
    function Get_IPageSetup: IPageSetup; safecall;
    function SetScale(Numerator: Double; Denominator: Double; ScaleAnnoPosition: WordBool; 
                      ScaleAnnoTextHeight: WordBool): WordBool; safecall;
    function Get_CustomPropertyView: WideString; safecall;
    procedure Set_CustomPropertyView(const ViewName: WideString); safecall;
    function InsertRevisionTable(UseAnchorPoint: WordBool; X: Double; Y: Double; 
                                 AnchorType: Integer; const TableTemplate: WideString): IRevisionTableAnnotation; safecall;
    function Get_RevisionTable: IRevisionTableAnnotation; safecall;
    function GetTemplateSketch: ISketch; safecall;
    function Get_SheetFormatVisible: WordBool; safecall;
    procedure Set_SheetFormatVisible(Visible: WordBool); safecall;
    function Get_FocusLocked: WordBool; safecall;
    procedure Set_FocusLocked(Retval: WordBool); safecall;
    function GetSheetFormatName: WideString; safecall;
    function SetSheetFormatName(const Name: WideString): WordBool; safecall;
    function Get_TableAnchor(TableType: Integer): ITableAnchor; safecall;
    function GetSize(var Width: Double; var Height: Double): Integer; safecall;
    function SetSize(Size: Integer; Width: Double; Height: Double): WordBool; safecall;
    function SaveFormat(const FileName: WideString): WordBool; safecall;
    function GetViews: OleVariant; safecall;
    property PageSetup: IDispatch read Get_PageSetup;
    property IPageSetup: IPageSetup read Get_IPageSetup;
    property CustomPropertyView: WideString read Get_CustomPropertyView write Set_CustomPropertyView;
    property RevisionTable: IRevisionTableAnnotation read Get_RevisionTable;
    property SheetFormatVisible: WordBool read Get_SheetFormatVisible write Set_SheetFormatVisible;
    property FocusLocked: WordBool read Get_FocusLocked write Set_FocusLocked;
    property TableAnchor[TableType: Integer]: ITableAnchor read Get_TableAnchor;
  end;

// *********************************************************************//
// DispIntf:  ISheetDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D80-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISheetDisp = dispinterface
    ['{83A33D80-27C5-11CE-BFD4-00400513BB57}']
    function GetBomTable: IDispatch; dispid 1;
    function IGetBomTable: IBomTable; dispid 2;
    function GetName: WideString; dispid 3;
    procedure SetName(const NameIn: WideString); dispid 4;
    function GetTemplateName: WideString; dispid 5;
    procedure SetTemplateName(const NameIn: WideString); dispid 6;
    function GetProperties: OleVariant; dispid 7;
    function IGetProperties: Double; dispid 8;
    procedure SetProperties(PaperSz: Integer; Templ: Integer; Scale1: Double; Scale2: Double; 
                            FirstAngle: WordBool; Width: Double; Height: Double); dispid 9;
    function GetCustomColorsCount: Integer; dispid 10;
    function IGetCustomColors: Integer; dispid 11;
    function GetOLEObjectCount: Integer; dispid 12;
    function GetOLEObjectSettings(Index: Integer; var ByteCount: Integer; var Aspect: Integer): OleVariant; dispid 13;
    function IGetOLEObjectSettings(Index: Integer; var ByteCount: Integer; var Aspect: Integer; 
                                   var Position: Double): WordBool; dispid 14;
    function GetOLEObjectData(Index: Integer): OleVariant; dispid 15;
    function IGetOLEObjectData(Index: Integer; var Buffer: Byte): WordBool; dispid 16;
    function CreateOLEObject(Aspect: Integer; Position: OleVariant; Buffer: OleVariant): WordBool; dispid 17;
    function ICreateOLEObject(Aspect: Integer; var Position: Double; ByteCount: Integer; 
                              var Buffer: Byte): WordBool; dispid 18;
    property PageSetup: IDispatch readonly dispid 19;
    property IPageSetup: IPageSetup readonly dispid 20;
    function SetScale(Numerator: Double; Denominator: Double; ScaleAnnoPosition: WordBool; 
                      ScaleAnnoTextHeight: WordBool): WordBool; dispid 21;
    property CustomPropertyView: WideString dispid 22;
    function InsertRevisionTable(UseAnchorPoint: WordBool; X: Double; Y: Double; 
                                 AnchorType: Integer; const TableTemplate: WideString): IRevisionTableAnnotation; dispid 23;
    property RevisionTable: IRevisionTableAnnotation readonly dispid 24;
    function GetTemplateSketch: ISketch; dispid 25;
    property SheetFormatVisible: WordBool dispid 26;
    property FocusLocked: WordBool dispid 27;
    function GetSheetFormatName: WideString; dispid 28;
    function SetSheetFormatName(const Name: WideString): WordBool; dispid 29;
    property TableAnchor[TableType: Integer]: ITableAnchor readonly dispid 30;
    function GetSize(var Width: Double; var Height: Double): Integer; dispid 31;
    function SetSize(Size: Integer; Width: Double; Height: Double): WordBool; dispid 32;
    function SaveFormat(const FileName: WideString): WordBool; dispid 33;
    function GetViews: OleVariant; dispid 34;
  end;

// *********************************************************************//
// Interface: IPageSetup
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {931374CC-CE0E-11D5-AF59-00C04F603FAF}
// *********************************************************************//
  IPageSetup = interface(IDispatch)
    ['{931374CC-CE0E-11D5-AF59-00C04F603FAF}']
    function Get_ScaleToFit: WordBool; safecall;
    procedure Set_ScaleToFit(Fit: WordBool); safecall;
    function Get_Scale2: Double; safecall;
    procedure Set_Scale2(Scale: Double); safecall;
    function Get_Orientation: Integer; safecall;
    procedure Set_Orientation(Orientation: Integer); safecall;
    function Get_LeftHeader: WideString; safecall;
    procedure Set_LeftHeader(const Header: WideString); safecall;
    function Get_CenterHeader: WideString; safecall;
    procedure Set_CenterHeader(const Header: WideString); safecall;
    function Get_RightHeader: WideString; safecall;
    procedure Set_RightHeader(const Header: WideString); safecall;
    function SetHeader(const Left: WideString; const Center: WideString; const Right: WideString): WordBool; safecall;
    function Get_LeftFooter: WideString; safecall;
    procedure Set_LeftFooter(const Footer: WideString); safecall;
    function Get_CenterFooter: WideString; safecall;
    procedure Set_CenterFooter(const Footer: WideString); safecall;
    function Get_RightFooter: WideString; safecall;
    procedure Set_RightFooter(const Footer: WideString); safecall;
    function SetFooter(const Left: WideString; const Center: WideString; const Right: WideString): WordBool; safecall;
    function Get_HeaderTextFormat: ITextFormat; safecall;
    function Get_FooterTextFormat: ITextFormat; safecall;
    function GetHeaderFooterString(WhichOne: Integer): WideString; safecall;
    function Get_UsePageSetupOnSheets: WordBool; safecall;
    procedure Set_UsePageSetupOnSheets(UseSheet: WordBool); safecall;
    function Get_PrinterPaperSize: Integer; safecall;
    procedure Set_PrinterPaperSize(Size: Integer); safecall;
    function Get_PrinterPaperLength: Integer; safecall;
    procedure Set_PrinterPaperLength(Length: Integer); safecall;
    function Get_PrinterPaperWidth: Integer; safecall;
    procedure Set_PrinterPaperWidth(Width: Integer); safecall;
    function Get_PrinterPaperSource: Integer; safecall;
    procedure Set_PrinterPaperSource(Source: Integer); safecall;
    function GetUseDefaultResolution: WordBool; safecall;
    function GetResolution: Integer; safecall;
    function SetResolution(UseDefault: WordBool; DPI: Integer): WordBool; safecall;
    function Get_HighQuality: WordBool; safecall;
    procedure Set_HighQuality(Setting: WordBool); safecall;
    function Get_DrawingColor: Integer; safecall;
    procedure Set_DrawingColor(Setting: Integer); safecall;
    property ScaleToFit: WordBool read Get_ScaleToFit write Set_ScaleToFit;
    property Scale2: Double read Get_Scale2 write Set_Scale2;
    property Orientation: Integer read Get_Orientation write Set_Orientation;
    property LeftHeader: WideString read Get_LeftHeader write Set_LeftHeader;
    property CenterHeader: WideString read Get_CenterHeader write Set_CenterHeader;
    property RightHeader: WideString read Get_RightHeader write Set_RightHeader;
    property LeftFooter: WideString read Get_LeftFooter write Set_LeftFooter;
    property CenterFooter: WideString read Get_CenterFooter write Set_CenterFooter;
    property RightFooter: WideString read Get_RightFooter write Set_RightFooter;
    property HeaderTextFormat: ITextFormat read Get_HeaderTextFormat;
    property FooterTextFormat: ITextFormat read Get_FooterTextFormat;
    property UsePageSetupOnSheets: WordBool read Get_UsePageSetupOnSheets write Set_UsePageSetupOnSheets;
    property PrinterPaperSize: Integer read Get_PrinterPaperSize write Set_PrinterPaperSize;
    property PrinterPaperLength: Integer read Get_PrinterPaperLength write Set_PrinterPaperLength;
    property PrinterPaperWidth: Integer read Get_PrinterPaperWidth write Set_PrinterPaperWidth;
    property PrinterPaperSource: Integer read Get_PrinterPaperSource write Set_PrinterPaperSource;
    property HighQuality: WordBool read Get_HighQuality write Set_HighQuality;
    property DrawingColor: Integer read Get_DrawingColor write Set_DrawingColor;
  end;

// *********************************************************************//
// DispIntf:  IPageSetupDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {931374CC-CE0E-11D5-AF59-00C04F603FAF}
// *********************************************************************//
  IPageSetupDisp = dispinterface
    ['{931374CC-CE0E-11D5-AF59-00C04F603FAF}']
    property ScaleToFit: WordBool dispid 1;
    property Scale2: Double dispid 2;
    property Orientation: Integer dispid 3;
    property LeftHeader: WideString dispid 4;
    property CenterHeader: WideString dispid 5;
    property RightHeader: WideString dispid 6;
    function SetHeader(const Left: WideString; const Center: WideString; const Right: WideString): WordBool; dispid 7;
    property LeftFooter: WideString dispid 8;
    property CenterFooter: WideString dispid 9;
    property RightFooter: WideString dispid 10;
    function SetFooter(const Left: WideString; const Center: WideString; const Right: WideString): WordBool; dispid 11;
    property HeaderTextFormat: ITextFormat readonly dispid 12;
    property FooterTextFormat: ITextFormat readonly dispid 13;
    function GetHeaderFooterString(WhichOne: Integer): WideString; dispid 14;
    property UsePageSetupOnSheets: WordBool dispid 15;
    property PrinterPaperSize: Integer dispid 16;
    property PrinterPaperLength: Integer dispid 17;
    property PrinterPaperWidth: Integer dispid 18;
    property PrinterPaperSource: Integer dispid 19;
    function GetUseDefaultResolution: WordBool; dispid 20;
    function GetResolution: Integer; dispid 21;
    function SetResolution(UseDefault: WordBool; DPI: Integer): WordBool; dispid 22;
    property HighQuality: WordBool dispid 23;
    property DrawingColor: Integer dispid 24;
  end;

// *********************************************************************//
// Interface: IRevisionTableAnnotation
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {175CA9E4-B05A-48BA-8047-DA3D9BB6B583}
// *********************************************************************//
  IRevisionTableAnnotation = interface(IDispatch)
    ['{175CA9E4-B05A-48BA-8047-DA3D9BB6B583}']
    function Get_RevisionTableFeature: IRevisionTableFeature; safecall;
    function GetSheet: ISheet; safecall;
    function AddRevision(const Revision: WideString): Integer; safecall;
    function DeleteRevision(RevisionId: Integer; DeleteSymbols: WordBool): WordBool; safecall;
    function Get_CurrentRevision: WideString; safecall;
    function GetRevisionForId(RevisionId: Integer): WideString; safecall;
    function GetRowNumberForId(RevisionId: Integer): Integer; safecall;
    function GetIdForRowNumber(RowIndex: Integer): Integer; safecall;
    function GetRevisionSymbolCount(RevisionId: Integer): Integer; safecall;
    function GetRevisionSymbols(RevisionId: Integer): OleVariant; safecall;
    function IGetRevisionSymbols(RevisionId: Integer; Count: Integer): INote; safecall;
    function GetColumnCustomProperty(Index: Integer): WideString; safecall;
    function SetColumnCustomProperty(Index: Integer; const CustomProp: WideString): WordBool; safecall;
    function GetAllCustomPropertiesCount: Integer; safecall;
    function GetAllCustomProperties: OleVariant; safecall;
    function IGetAllCustomProperties(Count: Integer): WideString; safecall;
    property RevisionTableFeature: IRevisionTableFeature read Get_RevisionTableFeature;
    property CurrentRevision: WideString read Get_CurrentRevision;
  end;

// *********************************************************************//
// DispIntf:  IRevisionTableAnnotationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {175CA9E4-B05A-48BA-8047-DA3D9BB6B583}
// *********************************************************************//
  IRevisionTableAnnotationDisp = dispinterface
    ['{175CA9E4-B05A-48BA-8047-DA3D9BB6B583}']
    property RevisionTableFeature: IRevisionTableFeature readonly dispid 196609;
    function GetSheet: ISheet; dispid 196610;
    function AddRevision(const Revision: WideString): Integer; dispid 196611;
    function DeleteRevision(RevisionId: Integer; DeleteSymbols: WordBool): WordBool; dispid 196612;
    property CurrentRevision: WideString readonly dispid 196613;
    function GetRevisionForId(RevisionId: Integer): WideString; dispid 196614;
    function GetRowNumberForId(RevisionId: Integer): Integer; dispid 196615;
    function GetIdForRowNumber(RowIndex: Integer): Integer; dispid 196616;
    function GetRevisionSymbolCount(RevisionId: Integer): Integer; dispid 196617;
    function GetRevisionSymbols(RevisionId: Integer): OleVariant; dispid 196618;
    function IGetRevisionSymbols(RevisionId: Integer; Count: Integer): INote; dispid 196619;
    function GetColumnCustomProperty(Index: Integer): WideString; dispid 196620;
    function SetColumnCustomProperty(Index: Integer; const CustomProp: WideString): WordBool; dispid 196621;
    function GetAllCustomPropertiesCount: Integer; dispid 196622;
    function GetAllCustomProperties: OleVariant; dispid 196623;
    function IGetAllCustomProperties(Count: Integer): WideString; dispid 196624;
  end;

// *********************************************************************//
// Interface: IRevisionTableFeature
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {660CAF6B-65A0-4664-AD9F-81AB7A4664B7}
// *********************************************************************//
  IRevisionTableFeature = interface(IDispatch)
    ['{660CAF6B-65A0-4664-AD9F-81AB7A4664B7}']
    function GetFeature: IFeature; safecall;
    function GetTableAnnotationCount: Integer; safecall;
    function GetTableAnnotations: OleVariant; safecall;
    function IGetTableAnnotations(Count: Integer): IRevisionTableAnnotation; safecall;
  end;

// *********************************************************************//
// DispIntf:  IRevisionTableFeatureDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {660CAF6B-65A0-4664-AD9F-81AB7A4664B7}
// *********************************************************************//
  IRevisionTableFeatureDisp = dispinterface
    ['{660CAF6B-65A0-4664-AD9F-81AB7A4664B7}']
    function GetFeature: IFeature; dispid 1;
    function GetTableAnnotationCount: Integer; dispid 2;
    function GetTableAnnotations: OleVariant; dispid 3;
    function IGetTableAnnotations(Count: Integer): IRevisionTableAnnotation; dispid 4;
  end;

// *********************************************************************//
// Interface: ITableAnchor
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {94D89C12-93E7-4DA1-9239-5E93830B5635}
// *********************************************************************//
  ITableAnchor = interface(IDispatch)
    ['{94D89C12-93E7-4DA1-9239-5E93830B5635}']
    function Get_type_: Integer; safecall;
    function GetFeature: IFeature; safecall;
    function Get_Position: OleVariant; safecall;
    procedure Set_Position(Position: OleVariant); safecall;
    function IGetPosition: Double; safecall;
    procedure ISetPosition(var Position: Double); safecall;
    property type_: Integer read Get_type_;
    property Position: OleVariant read Get_Position write Set_Position;
  end;

// *********************************************************************//
// DispIntf:  ITableAnchorDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {94D89C12-93E7-4DA1-9239-5E93830B5635}
// *********************************************************************//
  ITableAnchorDisp = dispinterface
    ['{94D89C12-93E7-4DA1-9239-5E93830B5635}']
    property type_: Integer readonly dispid 1;
    function GetFeature: IFeature; dispid 2;
    property Position: OleVariant dispid 3;
    function IGetPosition: Double; dispid 4;
    procedure ISetPosition(var Position: Double); dispid 5;
  end;

// *********************************************************************//
// Interface: IWeldmentCutListAnnotation
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5253C565-2195-4E99-A353-CB62F5E5963B}
// *********************************************************************//
  IWeldmentCutListAnnotation = interface(IDispatch)
    ['{5253C565-2195-4E99-A353-CB62F5E5963B}']
    function Get_WeldmentCutListFeature: IWeldmentCutListFeature; safecall;
    function GetColumnCustomProperty(Index: Integer): WideString; safecall;
    function SetColumnCustomProperty(Index: Integer; const CustomProp: WideString): WordBool; safecall;
    function GetAllCustomPropertiesCount: Integer; safecall;
    function GetAllCustomProperties: OleVariant; safecall;
    function IGetAllCustomProperties(Count: Integer): WideString; safecall;
    property WeldmentCutListFeature: IWeldmentCutListFeature read Get_WeldmentCutListFeature;
  end;

// *********************************************************************//
// DispIntf:  IWeldmentCutListAnnotationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5253C565-2195-4E99-A353-CB62F5E5963B}
// *********************************************************************//
  IWeldmentCutListAnnotationDisp = dispinterface
    ['{5253C565-2195-4E99-A353-CB62F5E5963B}']
    property WeldmentCutListFeature: IWeldmentCutListFeature readonly dispid 196609;
    function GetColumnCustomProperty(Index: Integer): WideString; dispid 196610;
    function SetColumnCustomProperty(Index: Integer; const CustomProp: WideString): WordBool; dispid 196611;
    function GetAllCustomPropertiesCount: Integer; dispid 196612;
    function GetAllCustomProperties: OleVariant; dispid 196613;
    function IGetAllCustomProperties(Count: Integer): WideString; dispid 196614;
  end;

// *********************************************************************//
// Interface: IWeldmentCutListFeature
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3CD5DE06-83F6-4A7C-A288-D8A41F9F0351}
// *********************************************************************//
  IWeldmentCutListFeature = interface(IDispatch)
    ['{3CD5DE06-83F6-4A7C-A288-D8A41F9F0351}']
    function GetFeature: IFeature; safecall;
    function GetTableAnnotationCount: Integer; safecall;
    function GetTableAnnotations: OleVariant; safecall;
    function IGetTableAnnotations(Count: Integer): IWeldmentCutListAnnotation; safecall;
    function Get_KeepMissingItems: WordBool; safecall;
    procedure Set_KeepMissingItems(Keep: WordBool); safecall;
    function Get_StrikeoutMissingItems: WordBool; safecall;
    procedure Set_StrikeoutMissingItems(Strike: WordBool); safecall;
    function Get_SequenceStartNumber: Integer; safecall;
    procedure Set_SequenceStartNumber(Number: Integer); safecall;
    function Get_KeepCurrentItemNumbers: WordBool; safecall;
    procedure Set_KeepCurrentItemNumbers(Keep: WordBool); safecall;
    function Get_Configuration: WideString; safecall;
    procedure Set_Configuration(const Name: WideString); safecall;
    property KeepMissingItems: WordBool read Get_KeepMissingItems write Set_KeepMissingItems;
    property StrikeoutMissingItems: WordBool read Get_StrikeoutMissingItems write Set_StrikeoutMissingItems;
    property SequenceStartNumber: Integer read Get_SequenceStartNumber write Set_SequenceStartNumber;
    property KeepCurrentItemNumbers: WordBool read Get_KeepCurrentItemNumbers write Set_KeepCurrentItemNumbers;
    property Configuration: WideString read Get_Configuration write Set_Configuration;
  end;

// *********************************************************************//
// DispIntf:  IWeldmentCutListFeatureDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3CD5DE06-83F6-4A7C-A288-D8A41F9F0351}
// *********************************************************************//
  IWeldmentCutListFeatureDisp = dispinterface
    ['{3CD5DE06-83F6-4A7C-A288-D8A41F9F0351}']
    function GetFeature: IFeature; dispid 1;
    function GetTableAnnotationCount: Integer; dispid 2;
    function GetTableAnnotations: OleVariant; dispid 3;
    function IGetTableAnnotations(Count: Integer): IWeldmentCutListAnnotation; dispid 4;
    property KeepMissingItems: WordBool dispid 5;
    property StrikeoutMissingItems: WordBool dispid 6;
    property SequenceStartNumber: Integer dispid 7;
    property KeepCurrentItemNumbers: WordBool dispid 8;
    property Configuration: WideString dispid 9;
  end;

// *********************************************************************//
// Interface: IEnumSketchSegments
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33DCF-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumSketchSegments = interface(IUnknown)
    ['{83A33DCF-27C5-11CE-BFD4-00400513BB57}']
    function Next(Celt: Integer; out Rgelt: ISketchSegment; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumSketchSegments): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEnumSketchHatches
// Flags:     (272) Hidden OleAutomation
// GUID:      {54729B8E-4086-11D3-AE9B-00C04F683CBA}
// *********************************************************************//
  IEnumSketchHatches = interface(IUnknown)
    ['{54729B8E-4086-11D3-AE9B-00C04F683CBA}']
    function Next(Celt: Integer; out Rgelt: ISketchHatch; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumSketchHatches): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISketchHatch
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C3D00926-4068-11D3-AE9B-00C04F683CBA}
// *********************************************************************//
  ISketchHatch = interface(IDispatch)
    ['{C3D00926-4068-11D3-AE9B-00C04F683CBA}']
    function GetID: OleVariant; safecall;
    function IGetID: Integer; safecall;
    function Select(AppendFlag: WordBool): WordBool; safecall;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const Retval: WideString); safecall;
    function Get_LayerOverride: SYSINT; safecall;
    procedure Set_LayerOverride(Retval: SYSINT); safecall;
    function Get_Color: Integer; safecall;
    procedure Set_Color(Retval: Integer); safecall;
    function Get_Pattern: WideString; safecall;
    procedure Set_Pattern(const Retval: WideString); safecall;
    function Get_Scale: Double; safecall;
    procedure Set_Scale(Retval: Double); safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Retval: Double); safecall;
    function GetFace: IDispatch; safecall;
    function IGetFace: IFace; safecall;
    function GetSketch: ISketch; safecall;
    function Get_Scale2: Double; safecall;
    procedure Set_Scale2(Retval: Double); safecall;
    function IGetFace2: IFace2; safecall;
    function Select2(Append: WordBool; Mark: Integer): WordBool; safecall;
    function Select3(Append: WordBool; Mark: Integer; const Callout: ICallout): WordBool; safecall;
    function Get_SolidFill: WordBool; safecall;
    procedure Set_SolidFill(Retval: WordBool); safecall;
    function Select4(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    function Get_PatternId: Integer; safecall;
    procedure Set_PatternId(IdOut: Integer); safecall;
    property Layer: WideString read Get_Layer write Set_Layer;
    property LayerOverride: SYSINT read Get_LayerOverride write Set_LayerOverride;
    property Color: Integer read Get_Color write Set_Color;
    property Pattern: WideString read Get_Pattern write Set_Pattern;
    property Scale: Double read Get_Scale write Set_Scale;
    property Angle: Double read Get_Angle write Set_Angle;
    property Scale2: Double read Get_Scale2 write Set_Scale2;
    property SolidFill: WordBool read Get_SolidFill write Set_SolidFill;
    property PatternId: Integer read Get_PatternId write Set_PatternId;
  end;

// *********************************************************************//
// DispIntf:  ISketchHatchDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C3D00926-4068-11D3-AE9B-00C04F683CBA}
// *********************************************************************//
  ISketchHatchDisp = dispinterface
    ['{C3D00926-4068-11D3-AE9B-00C04F683CBA}']
    function GetID: OleVariant; dispid 1;
    function IGetID: Integer; dispid 2;
    function Select(AppendFlag: WordBool): WordBool; dispid 3;
    function SelectByMark(AppendFlag: WordBool; Mark: Integer): WordBool; dispid 4;
    function DeSelect: WordBool; dispid 5;
    property Layer: WideString dispid 6;
    property LayerOverride: SYSINT dispid 7;
    property Color: Integer dispid 8;
    property Pattern: WideString dispid 9;
    property Scale: Double dispid 10;
    property Angle: Double dispid 11;
    function GetFace: IDispatch; dispid 12;
    function IGetFace: IFace; dispid 13;
    function GetSketch: ISketch; dispid 14;
    property Scale2: Double dispid 15;
    function IGetFace2: IFace2; dispid 16;
    function Select2(Append: WordBool; Mark: Integer): WordBool; dispid 17;
    function Select3(Append: WordBool; Mark: Integer; const Callout: ICallout): WordBool; dispid 18;
    property SolidFill: WordBool dispid 19;
    function Select4(Append: WordBool; const Data: ISelectData): WordBool; dispid 20;
    property PatternId: Integer dispid 21;
  end;

// *********************************************************************//
// Interface: ISketchRelationManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D5F6D2C9-79D6-4CC8-AD19-DFF1AED88FE5}
// *********************************************************************//
  ISketchRelationManager = interface(IDispatch)
    ['{D5F6D2C9-79D6-4CC8-AD19-DFF1AED88FE5}']
    function GetRelations(Filter: Integer): OleVariant; safecall;
    function GetRelationsCount(Filter: Integer): Integer; safecall;
    function IGetRelations(Filter: Integer; Count: Integer): ISketchRelation; safecall;
    function AddRelation(Entities: OleVariant; RelationType: Integer): ISketchRelation; safecall;
    function IAddRelation(NumEntities: Integer; var EntityArray: IDispatch; RelationType: Integer): ISketchRelation; safecall;
    function DeleteAllRelations: WordBool; safecall;
    function DeleteRelation(const ThisRelation: ISketchRelation): WordBool; safecall;
    function GetAllowedRelations(Entities: OleVariant): OleVariant; safecall;
    function IGetAllowedRelationsCount(NumEntities: Integer; var EntityArray: IDispatch): Integer; safecall;
    function IGetAllowedRelations(NumEntities: Integer; var EntityArray: IDispatch; 
                                  NumAllowedRelations: Integer): Integer; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISketchRelationManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D5F6D2C9-79D6-4CC8-AD19-DFF1AED88FE5}
// *********************************************************************//
  ISketchRelationManagerDisp = dispinterface
    ['{D5F6D2C9-79D6-4CC8-AD19-DFF1AED88FE5}']
    function GetRelations(Filter: Integer): OleVariant; dispid 1;
    function GetRelationsCount(Filter: Integer): Integer; dispid 2;
    function IGetRelations(Filter: Integer; Count: Integer): ISketchRelation; dispid 3;
    function AddRelation(Entities: OleVariant; RelationType: Integer): ISketchRelation; dispid 4;
    function IAddRelation(NumEntities: Integer; var EntityArray: IDispatch; RelationType: Integer): ISketchRelation; dispid 5;
    function DeleteAllRelations: WordBool; dispid 6;
    function DeleteRelation(const ThisRelation: ISketchRelation): WordBool; dispid 7;
    function GetAllowedRelations(Entities: OleVariant): OleVariant; dispid 8;
    function IGetAllowedRelationsCount(NumEntities: Integer; var EntityArray: IDispatch): Integer; dispid 9;
    function IGetAllowedRelations(NumEntities: Integer; var EntityArray: IDispatch; 
                                  NumAllowedRelations: Integer): Integer; dispid 10;
  end;

// *********************************************************************//
// Interface: ISketchBlockInstance
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {93F9A5A6-A4F6-435E-BCC6-B4592C06858F}
// *********************************************************************//
  ISketchBlockInstance = interface(IDispatch)
    ['{93F9A5A6-A4F6-435E-BCC6-B4592C06858F}']
    function Get_Definition: ISketchBlockDefinition; safecall;
    procedure Set_Definition(const LpSketchBlockDef: ISketchBlockDefinition); safecall;
    function Get_InstancePosition: IMathPoint; safecall;
    procedure Set_InstancePosition(const LpInstancePosition: IMathPoint); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const BstrName: WideString); safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(DAngle: Double); safecall;
    function Get_Scale: Double; safecall;
    procedure Set_Scale(DScale: Double); safecall;
    function Select(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    function GetSketch: ISketch; safecall;
    function Get_BlockToSketchTransform: IMathTransform; safecall;
    function Get_TextDisplay: Integer; safecall;
    procedure Set_TextDisplay(DisplayState: Integer); safecall;
    function Get_DimensionDisplay: WordBool; safecall;
    procedure Set_DimensionDisplay(Visible: WordBool); safecall;
    function Get_Layer: WideString; safecall;
    procedure Set_Layer(const Name: WideString); safecall;
    function GetLeaderStyle: Integer; safecall;
    function GetArrowHeadStyle: Integer; safecall;
    function SetLeader(LeaderStyle: Integer; ArrowHeadStyle: Integer): WordBool; safecall;
    function GetAttributeCount: Integer; safecall;
    function GetAttributes: OleVariant; safecall;
    function IGetAttributes(Count: Integer): INote; safecall;
    function GetAttributeValue(const TagName: WideString): WideString; safecall;
    function SetAttributeValue(const TagName: WideString; const Value: WideString): WordBool; safecall;
    function GetLeaderPoints: OleVariant; safecall;
    function IGetLeaderPoints: Double; safecall;
    function Get_LockAngle: WordBool; safecall;
    procedure Set_LockAngle(LockAngle: WordBool); safecall;
    function Get_Scale2: Double; safecall;
    procedure Set_Scale2(Scale: Double); safecall;
    function GetAttachedEntities(var Entities: OleVariant; var EntityTypes: OleVariant): WordBool; safecall;
    property Definition: ISketchBlockDefinition read Get_Definition write Set_Definition;
    property InstancePosition: IMathPoint read Get_InstancePosition write Set_InstancePosition;
    property Name: WideString read Get_Name write Set_Name;
    property Angle: Double read Get_Angle write Set_Angle;
    property Scale: Double read Get_Scale write Set_Scale;
    property BlockToSketchTransform: IMathTransform read Get_BlockToSketchTransform;
    property TextDisplay: Integer read Get_TextDisplay write Set_TextDisplay;
    property DimensionDisplay: WordBool read Get_DimensionDisplay write Set_DimensionDisplay;
    property Layer: WideString read Get_Layer write Set_Layer;
    property LockAngle: WordBool read Get_LockAngle write Set_LockAngle;
    property Scale2: Double read Get_Scale2 write Set_Scale2;
  end;

// *********************************************************************//
// DispIntf:  ISketchBlockInstanceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {93F9A5A6-A4F6-435E-BCC6-B4592C06858F}
// *********************************************************************//
  ISketchBlockInstanceDisp = dispinterface
    ['{93F9A5A6-A4F6-435E-BCC6-B4592C06858F}']
    property Definition: ISketchBlockDefinition dispid 1;
    property InstancePosition: IMathPoint dispid 2;
    property Name: WideString dispid 3;
    property Angle: Double dispid 4;
    property Scale: Double dispid 5;
    function Select(Append: WordBool; const Data: ISelectData): WordBool; dispid 6;
    function GetSketch: ISketch; dispid 7;
    property BlockToSketchTransform: IMathTransform readonly dispid 8;
    property TextDisplay: Integer dispid 9;
    property DimensionDisplay: WordBool dispid 10;
    property Layer: WideString dispid 11;
    function GetLeaderStyle: Integer; dispid 12;
    function GetArrowHeadStyle: Integer; dispid 13;
    function SetLeader(LeaderStyle: Integer; ArrowHeadStyle: Integer): WordBool; dispid 14;
    function GetAttributeCount: Integer; dispid 15;
    function GetAttributes: OleVariant; dispid 16;
    function IGetAttributes(Count: Integer): INote; dispid 17;
    function GetAttributeValue(const TagName: WideString): WideString; dispid 18;
    function SetAttributeValue(const TagName: WideString; const Value: WideString): WordBool; dispid 19;
    function GetLeaderPoints: OleVariant; dispid 20;
    function IGetLeaderPoints: Double; dispid 21;
    property LockAngle: WordBool dispid 22;
    property Scale2: Double dispid 23;
    function GetAttachedEntities(var Entities: OleVariant; var EntityTypes: OleVariant): WordBool; dispid 24;
  end;

// *********************************************************************//
// Interface: ISketchBlockDefinition
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {82DC842F-001E-4B72-A762-540DCFB70705}
// *********************************************************************//
  ISketchBlockDefinition = interface(IDispatch)
    ['{82DC842F-001E-4B72-A762-540DCFB70705}']
    function GetFeature: IFeature; safecall;
    function GetSketch: ISketch; safecall;
    function Get_InsertionPoint: IMathPoint; safecall;
    procedure Set_InsertionPoint(const Point: IMathPoint); safecall;
    function Get_LinkToFile: WordBool; safecall;
    procedure Set_LinkToFile(Linked: WordBool); safecall;
    function Get_FileName: WideString; safecall;
    procedure Set_FileName(const FileName: WideString); safecall;
    function GetInstanceCount: Integer; safecall;
    function GetInstances: OleVariant; safecall;
    function IGetInstances(Count: Integer): ISketchBlockInstance; safecall;
    function GetLineCount: Integer; safecall;
    function GetLines: OleVariant; safecall;
    function IGetLines(ArraySize: Integer): Double; safecall;
    function GetArcCount: Integer; safecall;
    function GetArcs: OleVariant; safecall;
    function IGetArcs(ArraySize: Integer): Double; safecall;
    function GetEllipseCount: Integer; safecall;
    function GetEllipses: OleVariant; safecall;
    function IGetEllipses(ArraySize: Integer): Double; safecall;
    function GetParabolaCount: Integer; safecall;
    function GetParabolas: OleVariant; safecall;
    function IGetParabolas(ArraySize: Integer): Double; safecall;
    function GetSplineCount(var PointCount: Integer): Integer; safecall;
    function GetSplines: OleVariant; safecall;
    function IGetSplines(ArraySize: Integer): Double; safecall;
    function GetUserPointsCount: Integer; safecall;
    function GetUserPoints: OleVariant; safecall;
    function IGetUserPoints(ArraySize: Integer): Double; safecall;
    function GetNoteCount: Integer; safecall;
    function GetNotes: OleVariant; safecall;
    function IGetNotes(Count: Integer): INote; safecall;
    function GetDisplayDimensionCount: Integer; safecall;
    function GetDisplayDimensions: OleVariant; safecall;
    function IGetDisplayDimensions(Count: Integer): IDisplayDimension; safecall;
    function Save(const FileName: WideString): WordBool; safecall;
    function GetSplines2: OleVariant; safecall;
    function IGetSplines2(ArraySize: Integer): Double; safecall;
    function GetSplineParamsCount(var ArraySize: Integer): Integer; safecall;
    function GetSplineParams: OleVariant; safecall;
    function IGetSplineParams(ArraySize: Integer): Double; safecall;
    function GetSplineInterpolateCount(var ArraySize: Integer): Integer; safecall;
    function GetSplinesInterpolate: OleVariant; safecall;
    function IGetSplinesInterpolate(ArraySize: Integer): Double; safecall;
    property InsertionPoint: IMathPoint read Get_InsertionPoint write Set_InsertionPoint;
    property LinkToFile: WordBool read Get_LinkToFile write Set_LinkToFile;
    property FileName: WideString read Get_FileName write Set_FileName;
  end;

// *********************************************************************//
// DispIntf:  ISketchBlockDefinitionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {82DC842F-001E-4B72-A762-540DCFB70705}
// *********************************************************************//
  ISketchBlockDefinitionDisp = dispinterface
    ['{82DC842F-001E-4B72-A762-540DCFB70705}']
    function GetFeature: IFeature; dispid 1;
    function GetSketch: ISketch; dispid 2;
    property InsertionPoint: IMathPoint dispid 3;
    property LinkToFile: WordBool dispid 4;
    property FileName: WideString dispid 5;
    function GetInstanceCount: Integer; dispid 6;
    function GetInstances: OleVariant; dispid 7;
    function IGetInstances(Count: Integer): ISketchBlockInstance; dispid 8;
    function GetLineCount: Integer; dispid 9;
    function GetLines: OleVariant; dispid 10;
    function IGetLines(ArraySize: Integer): Double; dispid 11;
    function GetArcCount: Integer; dispid 12;
    function GetArcs: OleVariant; dispid 13;
    function IGetArcs(ArraySize: Integer): Double; dispid 14;
    function GetEllipseCount: Integer; dispid 15;
    function GetEllipses: OleVariant; dispid 16;
    function IGetEllipses(ArraySize: Integer): Double; dispid 17;
    function GetParabolaCount: Integer; dispid 18;
    function GetParabolas: OleVariant; dispid 19;
    function IGetParabolas(ArraySize: Integer): Double; dispid 20;
    function GetSplineCount(var PointCount: Integer): Integer; dispid 21;
    function GetSplines: OleVariant; dispid 22;
    function IGetSplines(ArraySize: Integer): Double; dispid 23;
    function GetUserPointsCount: Integer; dispid 24;
    function GetUserPoints: OleVariant; dispid 25;
    function IGetUserPoints(ArraySize: Integer): Double; dispid 26;
    function GetNoteCount: Integer; dispid 27;
    function GetNotes: OleVariant; dispid 28;
    function IGetNotes(Count: Integer): INote; dispid 29;
    function GetDisplayDimensionCount: Integer; dispid 30;
    function GetDisplayDimensions: OleVariant; dispid 31;
    function IGetDisplayDimensions(Count: Integer): IDisplayDimension; dispid 32;
    function Save(const FileName: WideString): WordBool; dispid 33;
    function GetSplines2: OleVariant; dispid 34;
    function IGetSplines2(ArraySize: Integer): Double; dispid 35;
    function GetSplineParamsCount(var ArraySize: Integer): Integer; dispid 36;
    function GetSplineParams: OleVariant; dispid 37;
    function IGetSplineParams(ArraySize: Integer): Double; dispid 38;
    function GetSplineInterpolateCount(var ArraySize: Integer): Integer; dispid 39;
    function GetSplinesInterpolate: OleVariant; dispid 40;
    function IGetSplinesInterpolate(ArraySize: Integer): Double; dispid 41;
  end;

// *********************************************************************//
// Interface: ISketchPicture
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0ABA4670-6FBE-4F2E-BE80-5C33EA2CF77B}
// *********************************************************************//
  ISketchPicture = interface(IDispatch)
    ['{0ABA4670-6FBE-4F2E-BE80-5C33EA2CF77B}']
    function GetFeature: IFeature; safecall;
    procedure GetOrigin(var X: Double; var Y: Double); safecall;
    function SetOrigin(X: Double; Y: Double): WordBool; safecall;
    procedure GetSize(var Width: Double; var Height: Double); safecall;
    function SetSize(Width: Double; Height: Double; AspectRatioLocked: WordBool): WordBool; safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Angle: Double); safecall;
    function Get_Flipped: WordBool; safecall;
    function Flip(SideToSide: WordBool): WordBool; safecall;
    procedure GetTransparency(var Style: Integer; var Transparency: Double; 
                              var MatchingColor: Integer; var MatchingTolerance: Double); safecall;
    function SetTransparency(Style: Integer; Transparency: Double; MatchingColor: Integer; 
                             MatchingTolerance: Double): WordBool; safecall;
    function GetPixelmapSize(var Width: Integer; var Height: Integer): Integer; safecall;
    function GetPixelmap: OleVariant; safecall;
    function IGetPixelmap(Count: Integer): Smallint; safecall;
    function GetPointOnSketchFromPixel(Row: Integer; Column: Integer): IMathPoint; safecall;
    property Angle: Double read Get_Angle write Set_Angle;
    property Flipped: WordBool read Get_Flipped;
  end;

// *********************************************************************//
// DispIntf:  ISketchPictureDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0ABA4670-6FBE-4F2E-BE80-5C33EA2CF77B}
// *********************************************************************//
  ISketchPictureDisp = dispinterface
    ['{0ABA4670-6FBE-4F2E-BE80-5C33EA2CF77B}']
    function GetFeature: IFeature; dispid 1;
    procedure GetOrigin(var X: Double; var Y: Double); dispid 2;
    function SetOrigin(X: Double; Y: Double): WordBool; dispid 3;
    procedure GetSize(var Width: Double; var Height: Double); dispid 4;
    function SetSize(Width: Double; Height: Double; AspectRatioLocked: WordBool): WordBool; dispid 5;
    property Angle: Double dispid 6;
    property Flipped: WordBool readonly dispid 7;
    function Flip(SideToSide: WordBool): WordBool; dispid 8;
    procedure GetTransparency(var Style: Integer; var Transparency: Double; 
                              var MatchingColor: Integer; var MatchingTolerance: Double); dispid 9;
    function SetTransparency(Style: Integer; Transparency: Double; MatchingColor: Integer; 
                             MatchingTolerance: Double): WordBool; dispid 10;
    function GetPixelmapSize(var Width: Integer; var Height: Integer): Integer; dispid 11;
    function GetPixelmap: OleVariant; dispid 12;
    function IGetPixelmap(Count: Integer): Smallint; dispid 13;
    function GetPointOnSketchFromPixel(Row: Integer; Column: Integer): IMathPoint; dispid 14;
  end;

// *********************************************************************//
// Interface: IMidSurface2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5B6E8476-461F-43AF-B784-90D3CD74337C}
// *********************************************************************//
  IMidSurface2 = interface(IDispatch)
    ['{5B6E8476-461F-43AF-B784-90D3CD74337C}']
    function GetFacePairCount: Integer; safecall;
    function GetFirstFacePair(out Thickness: Double; out PartnerFaceDisp: IDispatch): IDispatch; safecall;
    function IGetFirstFacePair(out Thickness: Double; out PartnerFaceDisp: IFace2): IFace2; safecall;
    function GetNextFacePair(out Thickness: Double; out PartnerFaceDisp: IDispatch): IDispatch; safecall;
    function IGetNextFacePair(out Thickness: Double; out PartnerFaceDisp: IFace2): IFace2; safecall;
    function GetFirstNeutralSheet: IDispatch; safecall;
    function IGetFirstNeutralSheet: IBody2; safecall;
    function GetNextNeutralSheet: IDispatch; safecall;
    function IGetNextNeutralSheet: IBody2; safecall;
    function GetNeutralSheetCount: Integer; safecall;
    function GetFaceCount: Integer; safecall;
    function GetFirstFace(out FromFace1Disp: IDispatch; out FromFace2Disp: IDispatch; 
                          out Thickness: Double): IDispatch; safecall;
    function IGetFirstFace(out FromFace1Disp: IFace2; out FromFace2Disp: IFace2; 
                           out Thickness: Double): IFace2; safecall;
    function GetNextFace(out FromFace1Disp: IDispatch; out FromFace2Disp: IDispatch; 
                         out Thickness: Double): IDispatch; safecall;
    function IGetNextFace(out FromFace1Disp: IFace2; out FromFace2Disp: IFace2; 
                          out Thickness: Double): IFace2; safecall;
    function EdgeGetFace(const EdgeInDisp: IDispatch): IDispatch; safecall;
    function IEdgeGetFace(const EdgeInDisp: IEdge): IFace2; safecall;
    function IGetFirstFaceArray(out FromFrontFaceListDisp: IFace2; 
                                out SizeOfFrontFaceList: Integer; out FromFaceBackListDisp: IFace2; 
                                out SizeOfBackFaceList: Integer; out Thickness: Double): IFace2; safecall;
    function IGetNextFaceArray(out FromFrontFaceListDisp: IFace2; out SizeOfFrontFaceList: Integer; 
                               out FromFaceBackListDisp: IFace2; out SizeOfBackFaceList: Integer; 
                               out Thickness: Double): IFace2; safecall;
    function GetFirstFaceArray(out Thickness: Double): OleVariant; safecall;
    function GetNextFaceArray(out Thickness: Double): OleVariant; safecall;
  end;

// *********************************************************************//
// DispIntf:  IMidSurface2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5B6E8476-461F-43AF-B784-90D3CD74337C}
// *********************************************************************//
  IMidSurface2Disp = dispinterface
    ['{5B6E8476-461F-43AF-B784-90D3CD74337C}']
    function GetFacePairCount: Integer; dispid 1;
    function GetFirstFacePair(out Thickness: Double; out PartnerFaceDisp: IDispatch): IDispatch; dispid 2;
    function IGetFirstFacePair(out Thickness: Double; out PartnerFaceDisp: IFace2): IFace2; dispid 3;
    function GetNextFacePair(out Thickness: Double; out PartnerFaceDisp: IDispatch): IDispatch; dispid 4;
    function IGetNextFacePair(out Thickness: Double; out PartnerFaceDisp: IFace2): IFace2; dispid 5;
    function GetFirstNeutralSheet: IDispatch; dispid 6;
    function IGetFirstNeutralSheet: IBody2; dispid 7;
    function GetNextNeutralSheet: IDispatch; dispid 8;
    function IGetNextNeutralSheet: IBody2; dispid 9;
    function GetNeutralSheetCount: Integer; dispid 10;
    function GetFaceCount: Integer; dispid 11;
    function GetFirstFace(out FromFace1Disp: IDispatch; out FromFace2Disp: IDispatch; 
                          out Thickness: Double): IDispatch; dispid 12;
    function IGetFirstFace(out FromFace1Disp: IFace2; out FromFace2Disp: IFace2; 
                           out Thickness: Double): IFace2; dispid 13;
    function GetNextFace(out FromFace1Disp: IDispatch; out FromFace2Disp: IDispatch; 
                         out Thickness: Double): IDispatch; dispid 14;
    function IGetNextFace(out FromFace1Disp: IFace2; out FromFace2Disp: IFace2; 
                          out Thickness: Double): IFace2; dispid 15;
    function EdgeGetFace(const EdgeInDisp: IDispatch): IDispatch; dispid 16;
    function IEdgeGetFace(const EdgeInDisp: IEdge): IFace2; dispid 17;
    function IGetFirstFaceArray(out FromFrontFaceListDisp: IFace2; 
                                out SizeOfFrontFaceList: Integer; out FromFaceBackListDisp: IFace2; 
                                out SizeOfBackFaceList: Integer; out Thickness: Double): IFace2; dispid 18;
    function IGetNextFaceArray(out FromFrontFaceListDisp: IFace2; out SizeOfFrontFaceList: Integer; 
                               out FromFaceBackListDisp: IFace2; out SizeOfBackFaceList: Integer; 
                               out Thickness: Double): IFace2; dispid 19;
    function GetFirstFaceArray(out Thickness: Double): OleVariant; dispid 20;
    function GetNextFaceArray(out Thickness: Double): OleVariant; dispid 21;
  end;

// *********************************************************************//
// Interface: IFeatMgrView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D75-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFeatMgrView = interface(IDispatch)
    ['{83A33D75-27C5-11CE-BFD4-00400513BB57}']
    function GetFeatMgrViewWnd: Integer; safecall;
    function GetControl: IDispatch; safecall;
    function IGetControl: IUnknown; safecall;
    function ActivateView: Integer; safecall;
    function DeActivateView: WordBool; safecall;
    function DeleteView: WordBool; safecall;
    function GetFeatMgrViewWndx64: Int64; safecall;
  end;

// *********************************************************************//
// DispIntf:  IFeatMgrViewDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D75-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFeatMgrViewDisp = dispinterface
    ['{83A33D75-27C5-11CE-BFD4-00400513BB57}']
    function GetFeatMgrViewWnd: Integer; dispid 1;
    function GetControl: IDispatch; dispid 2;
    function IGetControl: IUnknown; dispid 3;
    function ActivateView: Integer; dispid 4;
    function DeActivateView: WordBool; dispid 5;
    function DeleteView: WordBool; dispid 6;
    function GetFeatMgrViewWndx64: {??Int64}OleVariant; dispid 7;
  end;

// *********************************************************************//
// Interface: IConfiguration
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D98-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IConfiguration = interface(IDispatch)
    ['{83A33D98-27C5-11CE-BFD4-00400513BB57}']
    function GetRootComponent: IDispatch; safecall;
    function IGetRootComponent: IComponent; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Retval: WideString); safecall;
    function Get_Comment: WideString; safecall;
    procedure Set_Comment(const Retval: WideString); safecall;
    function Get_AlternateName: WideString; safecall;
    procedure Set_AlternateName(const Retval: WideString); safecall;
    function Get_UseAlternateNameInBOM: WordBool; safecall;
    procedure Set_UseAlternateNameInBOM(Retval: WordBool); safecall;
    function Get_SuppressNewFeatures: WordBool; safecall;
    procedure Set_SuppressNewFeatures(Retval: WordBool); safecall;
    function Get_HideNewComponentModels: WordBool; safecall;
    procedure Set_HideNewComponentModels(Retval: WordBool); safecall;
    function Get_SuppressNewComponentModels: WordBool; safecall;
    procedure Set_SuppressNewComponentModels(Retval: WordBool); safecall;
    function Get_ShowChildComponentsInBOM: WordBool; safecall;
    procedure Set_ShowChildComponentsInBOM(Retval: WordBool); safecall;
    function GetNumberOfExplodeSteps: SYSINT; safecall;
    function GetExplodeStep(ExplodeStepIndex: Integer): IDispatch; safecall;
    function IGetExplodeStep(ExplodeStepIndex: Integer): IExplodeStep; safecall;
    function AddExplodeStep(ExplDist: Double; ReverseDir: WordBool; RigidSubassembly: WordBool; 
                            ExplodeRelated: WordBool): IDispatch; safecall;
    function IAddExplodeStep(ExplDist: Double; ReverseDir: WordBool; RigidSubassembly: WordBool; 
                             ExplodeRelated: WordBool): IExplodeStep; safecall;
    function DeleteExplodeStep(const ExplodeStepName: WideString): WordBool; safecall;
    function GetStreamName: WideString; safecall;
    function IGetRootComponent2: IComponent2; safecall;
    function GetComponentSuppressionState(const CompName: WideString): WordBool; safecall;
    function GetComponentConfigName(const CompName: WideString): WideString; safecall;
    function Get_Lock: WordBool; safecall;
    procedure Set_Lock(Retval: WordBool); safecall;
    function GetCustomProperties(var PropNames: OleVariant; var PropValues: OleVariant; 
                                 var PropTypes: OleVariant): Integer; safecall;
    function GetCustomPropertiesCount: Integer; safecall;
    procedure IGetCustomProperties(NumProps: Integer; var PropNames: WideString; 
                                   var PropValues: WideString; var PropTypes: Integer); safecall;
    function SetColor(ColorIn: Integer): WordBool; safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Retval: WideString); safecall;
    function IsDerived: WordBool; safecall;
    function GetParent: IConfiguration; safecall;
    function GetChildren: OleVariant; safecall;
    function GetChildrenCount: Integer; safecall;
    function IGetChildren(NumChildren: Integer): IConfiguration; safecall;
    function Select(AppendFlag: WordBool): WordBool; safecall;
    function Get_BOMPartNoSource: Integer; safecall;
    procedure Set_BOMPartNoSource(Retval: Integer); safecall;
    function GetParameterCount: Integer; safecall;
    procedure GetParameters(out Params: OleVariant; out Values: OleVariant); safecall;
    procedure IGetParameters(NParamCount: Integer; out Params: WideString; out Values: WideString); safecall;
    procedure SetParameters(var Params: OleVariant; var Values: OleVariant); safecall;
    procedure ISetParameters(NParamCount: Integer; var Params: WideString; var Values: WideString); safecall;
    function Select2(AppendFlag: WordBool; const SelectData: ISelectData): WordBool; safecall;
    function GetDisplayStates: OleVariant; safecall;
    function GetDisplayStatesCount: Integer; safecall;
    function IGetDisplayStates(Count: Integer): WideString; safecall;
    function CreateDisplayState(const DisplayStateName: WideString): WordBool; safecall;
    function ApplyDisplayState(const DisplayStateName: WideString): WordBool; safecall;
    function DeleteDisplayState(const DisplayStateName: WideString): WordBool; safecall;
    function RenameDisplayState(const OldDisplayStateName: WideString; 
                                const NewDisplayStateName: WideString): WordBool; safecall;
    function CopyDisplayStateFromConfiguration(const CopyFromConfig: IConfiguration; 
                                               const DisplayStateNameToCopy: WideString): WordBool; safecall;
    function Get_CustomPropertyManager: ICustomPropertyManager; safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Comment: WideString read Get_Comment write Set_Comment;
    property AlternateName: WideString read Get_AlternateName write Set_AlternateName;
    property UseAlternateNameInBOM: WordBool read Get_UseAlternateNameInBOM write Set_UseAlternateNameInBOM;
    property SuppressNewFeatures: WordBool read Get_SuppressNewFeatures write Set_SuppressNewFeatures;
    property HideNewComponentModels: WordBool read Get_HideNewComponentModels write Set_HideNewComponentModels;
    property SuppressNewComponentModels: WordBool read Get_SuppressNewComponentModels write Set_SuppressNewComponentModels;
    property ShowChildComponentsInBOM: WordBool read Get_ShowChildComponentsInBOM write Set_ShowChildComponentsInBOM;
    property Lock: WordBool read Get_Lock write Set_Lock;
    property Description: WideString read Get_Description write Set_Description;
    property BOMPartNoSource: Integer read Get_BOMPartNoSource write Set_BOMPartNoSource;
    property CustomPropertyManager: ICustomPropertyManager read Get_CustomPropertyManager;
  end;

// *********************************************************************//
// DispIntf:  IConfigurationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D98-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IConfigurationDisp = dispinterface
    ['{83A33D98-27C5-11CE-BFD4-00400513BB57}']
    function GetRootComponent: IDispatch; dispid 1;
    function IGetRootComponent: IComponent; dispid 2;
    property Name: WideString dispid 3;
    property Comment: WideString dispid 4;
    property AlternateName: WideString dispid 5;
    property UseAlternateNameInBOM: WordBool dispid 6;
    property SuppressNewFeatures: WordBool dispid 7;
    property HideNewComponentModels: WordBool dispid 8;
    property SuppressNewComponentModels: WordBool dispid 9;
    property ShowChildComponentsInBOM: WordBool dispid 10;
    function GetNumberOfExplodeSteps: SYSINT; dispid 11;
    function GetExplodeStep(ExplodeStepIndex: Integer): IDispatch; dispid 12;
    function IGetExplodeStep(ExplodeStepIndex: Integer): IExplodeStep; dispid 13;
    function AddExplodeStep(ExplDist: Double; ReverseDir: WordBool; RigidSubassembly: WordBool; 
                            ExplodeRelated: WordBool): IDispatch; dispid 14;
    function IAddExplodeStep(ExplDist: Double; ReverseDir: WordBool; RigidSubassembly: WordBool; 
                             ExplodeRelated: WordBool): IExplodeStep; dispid 15;
    function DeleteExplodeStep(const ExplodeStepName: WideString): WordBool; dispid 16;
    function GetStreamName: WideString; dispid 17;
    function IGetRootComponent2: IComponent2; dispid 18;
    function GetComponentSuppressionState(const CompName: WideString): WordBool; dispid 19;
    function GetComponentConfigName(const CompName: WideString): WideString; dispid 20;
    property Lock: WordBool dispid 21;
    function GetCustomProperties(var PropNames: OleVariant; var PropValues: OleVariant; 
                                 var PropTypes: OleVariant): Integer; dispid 22;
    function GetCustomPropertiesCount: Integer; dispid 23;
    procedure IGetCustomProperties(NumProps: Integer; var PropNames: WideString; 
                                   var PropValues: WideString; var PropTypes: Integer); dispid 24;
    function SetColor(ColorIn: Integer): WordBool; dispid 25;
    property Description: WideString dispid 26;
    function IsDerived: WordBool; dispid 27;
    function GetParent: IConfiguration; dispid 28;
    function GetChildren: OleVariant; dispid 29;
    function GetChildrenCount: Integer; dispid 30;
    function IGetChildren(NumChildren: Integer): IConfiguration; dispid 31;
    function Select(AppendFlag: WordBool): WordBool; dispid 32;
    property BOMPartNoSource: Integer dispid 33;
    function GetParameterCount: Integer; dispid 34;
    procedure GetParameters(out Params: OleVariant; out Values: OleVariant); dispid 35;
    procedure IGetParameters(NParamCount: Integer; out Params: WideString; out Values: WideString); dispid 36;
    procedure SetParameters(var Params: OleVariant; var Values: OleVariant); dispid 37;
    procedure ISetParameters(NParamCount: Integer; var Params: WideString; var Values: WideString); dispid 38;
    function Select2(AppendFlag: WordBool; const SelectData: ISelectData): WordBool; dispid 39;
    function GetDisplayStates: OleVariant; dispid 40;
    function GetDisplayStatesCount: Integer; dispid 41;
    function IGetDisplayStates(Count: Integer): WideString; dispid 42;
    function CreateDisplayState(const DisplayStateName: WideString): WordBool; dispid 43;
    function ApplyDisplayState(const DisplayStateName: WideString): WordBool; dispid 44;
    function DeleteDisplayState(const DisplayStateName: WideString): WordBool; dispid 45;
    function RenameDisplayState(const OldDisplayStateName: WideString; 
                                const NewDisplayStateName: WideString): WordBool; dispid 46;
    function CopyDisplayStateFromConfiguration(const CopyFromConfig: IConfiguration; 
                                               const DisplayStateNameToCopy: WideString): WordBool; dispid 47;
    property CustomPropertyManager: ICustomPropertyManager readonly dispid 48;
  end;

// *********************************************************************//
// Interface: IExplodeStep
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7241680B-0BC6-11D4-AEEE-00C04F61025C}
// *********************************************************************//
  IExplodeStep = interface(IDispatch)
    ['{7241680B-0BC6-11D4-AEEE-00C04F61025C}']
    function GetNumOfComponents: SYSINT; safecall;
    function GetComponentName(Index: SYSINT): WideString; safecall;
    function GetComponentXform: OleVariant; safecall;
    function IGetComponentXform: Double; safecall;
    function GetComponent(Index: SYSINT): IDispatch; safecall;
    function IGetComponent(Index: SYSINT): IComponent; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Retval: WideString); safecall;
    function IsSubAssemblyRigid: WordBool; safecall;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  IExplodeStepDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7241680B-0BC6-11D4-AEEE-00C04F61025C}
// *********************************************************************//
  IExplodeStepDisp = dispinterface
    ['{7241680B-0BC6-11D4-AEEE-00C04F61025C}']
    function GetNumOfComponents: SYSINT; dispid 1;
    function GetComponentName(Index: SYSINT): WideString; dispid 2;
    function GetComponentXform: OleVariant; dispid 3;
    function IGetComponentXform: Double; dispid 4;
    function GetComponent(Index: SYSINT): IDispatch; dispid 5;
    function IGetComponent(Index: SYSINT): IComponent; dispid 6;
    property Name: WideString dispid 7;
    function IsSubAssemblyRigid: WordBool; dispid 8;
  end;

// *********************************************************************//
// Interface: IReferenceCurve
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA3-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IReferenceCurve = interface(IDispatch)
    ['{83A33DA3-27C5-11CE-BFD4-00400513BB57}']
    function GetSegmentCount: Integer; safecall;
    function GetFirstSegment: IDispatch; safecall;
    function IGetFirstSegment: IEdge; safecall;
    function GetNextSegment: IDispatch; safecall;
    function IGetNextSegment: IEdge; safecall;
    function SetColor(ColorIn: Integer): WordBool; safecall;
    function SetVisible(Visible: WordBool): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IReferenceCurveDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA3-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IReferenceCurveDisp = dispinterface
    ['{83A33DA3-27C5-11CE-BFD4-00400513BB57}']
    function GetSegmentCount: Integer; dispid 1;
    function GetFirstSegment: IDispatch; dispid 2;
    function IGetFirstSegment: IEdge; dispid 3;
    function GetNextSegment: IDispatch; dispid 4;
    function IGetNextSegment: IEdge; dispid 5;
    function SetColor(ColorIn: Integer): WordBool; dispid 6;
    function SetVisible(Visible: WordBool): WordBool; dispid 7;
  end;

// *********************************************************************//
// Interface: IColorTable
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA5-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IColorTable = interface(IDispatch)
    ['{83A33DA5-27C5-11CE-BFD4-00400513BB57}']
    function GetCount: Integer; safecall;
    function GetNameAtIndex(Index: Integer): WideString; safecall;
    function GetColorRefAtIndex(Index: Integer): Integer; safecall;
    function GetStandardCount: Integer; safecall;
    procedure SetColorRefAtIndex(Index: Integer; ColorRef: Integer; ApplyTo: SYSINT); safecall;
    function GetBasicColorCount: Integer; safecall;
    function GetBasicColors: OleVariant; safecall;
    function IGetBasicColors(ColorCount: Integer): Integer; safecall;
    function GetCustomColorCount: Integer; safecall;
    function GetCustomColors: OleVariant; safecall;
    function IGetCustomColors(ColorCount: Integer): Integer; safecall;
    function SetCustomColor(Index: Integer; ColorRef: Integer): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IColorTableDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA5-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IColorTableDisp = dispinterface
    ['{83A33DA5-27C5-11CE-BFD4-00400513BB57}']
    function GetCount: Integer; dispid 1;
    function GetNameAtIndex(Index: Integer): WideString; dispid 2;
    function GetColorRefAtIndex(Index: Integer): Integer; dispid 3;
    function GetStandardCount: Integer; dispid 4;
    procedure SetColorRefAtIndex(Index: Integer; ColorRef: Integer; ApplyTo: SYSINT); dispid 5;
    function GetBasicColorCount: Integer; dispid 6;
    function GetBasicColors: OleVariant; dispid 7;
    function IGetBasicColors(ColorCount: Integer): Integer; dispid 8;
    function GetCustomColorCount: Integer; dispid 9;
    function GetCustomColors: OleVariant; dispid 10;
    function IGetCustomColors(ColorCount: Integer): Integer; dispid 11;
    function SetCustomColor(Index: Integer; ColorRef: Integer): WordBool; dispid 12;
  end;

// *********************************************************************//
// Interface: IEnumModelViews
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33DB1-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumModelViews = interface(IUnknown)
    ['{83A33DB1-27C5-11CE-BFD4-00400513BB57}']
    function Next(Celt: Integer; out Rgelt: IModelView; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumModelViews): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IDetailingDefaults
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DB7-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDetailingDefaults = interface(IDispatch)
    ['{83A33DB7-27C5-11CE-BFD4-00400513BB57}']
    function GetAllValues: OleVariant; safecall;
    function IGetAllValues(Count: Integer): Double; safecall;
    function GetTextFormat: IDispatch; safecall;
    function IGetTextFormat: ITextFormat; safecall;
    procedure SetTextFormat(const TextFormat: IDispatch); safecall;
    procedure ISetTextFormat(const TextFormat: ITextFormat); safecall;
    function GetDimensionTextFormat: IDispatch; safecall;
    function IGetDimensionTextFormat: ITextFormat; safecall;
    procedure SetDimensionTextFormat(const TextFormat: IDispatch); safecall;
    procedure ISetDimensionTextFormat(const TextFormat: ITextFormat); safecall;
    function GetSectionTextFormat: IDispatch; safecall;
    function IGetSectionTextFormat: ITextFormat; safecall;
    procedure SetSectionTextFormat(const TextFormat: IDispatch); safecall;
    procedure ISetSectionTextFormat(const TextFormat: ITextFormat); safecall;
    function GetDetailTextFormat: IDispatch; safecall;
    function IGetDetailTextFormat: ITextFormat; safecall;
    procedure SetDetailTextFormat(const TextFormat: IDispatch); safecall;
    procedure ISetDetailTextFormat(const TextFormat: ITextFormat); safecall;
  end;

// *********************************************************************//
// DispIntf:  IDetailingDefaultsDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DB7-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDetailingDefaultsDisp = dispinterface
    ['{83A33DB7-27C5-11CE-BFD4-00400513BB57}']
    function GetAllValues: OleVariant; dispid 1;
    function IGetAllValues(Count: Integer): Double; dispid 2;
    function GetTextFormat: IDispatch; dispid 3;
    function IGetTextFormat: ITextFormat; dispid 4;
    procedure SetTextFormat(const TextFormat: IDispatch); dispid 5;
    procedure ISetTextFormat(const TextFormat: ITextFormat); dispid 6;
    function GetDimensionTextFormat: IDispatch; dispid 7;
    function IGetDimensionTextFormat: ITextFormat; dispid 8;
    procedure SetDimensionTextFormat(const TextFormat: IDispatch); dispid 9;
    procedure ISetDimensionTextFormat(const TextFormat: ITextFormat); dispid 10;
    function GetSectionTextFormat: IDispatch; dispid 11;
    function IGetSectionTextFormat: ITextFormat; dispid 12;
    procedure SetSectionTextFormat(const TextFormat: IDispatch); dispid 13;
    procedure ISetSectionTextFormat(const TextFormat: ITextFormat); dispid 14;
    function GetDetailTextFormat: IDispatch; dispid 15;
    function IGetDetailTextFormat: ITextFormat; dispid 16;
    procedure SetDetailTextFormat(const TextFormat: IDispatch); dispid 17;
    procedure ISetDetailTextFormat(const TextFormat: ITextFormat); dispid 18;
  end;

// *********************************************************************//
// Interface: ILayerMgr
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {75173E30-F19E-11D2-B8E9-00C04F8EF738}
// *********************************************************************//
  ILayerMgr = interface(IDispatch)
    ['{75173E30-F19E-11D2-B8E9-00C04F8EF738}']
    function AddLayer(const NameIn: WideString; const DescIn: WideString; ColorIn: Integer; 
                      StyleIn: Integer; WidthIn: Integer): SYSINT; safecall;
    function SetCurrentLayer(const NameIn: WideString): SYSINT; safecall;
    function GetCurrentLayer: WideString; safecall;
    function GetLayer(const NameIn: WideString): IDispatch; safecall;
    function IGetLayer(const NameIn: WideString): ILayer; safecall;
    function GetCount: SYSINT; safecall;
    function GetLayerList: OleVariant; safecall;
    function IGetLayerList: WideString; safecall;
    function GetLayerById(LayerId: Smallint): IDispatch; safecall;
    function IGetLayerById(LayerId: Smallint): ILayer; safecall;
    function DeleteLayer(const Name: WideString): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  ILayerMgrDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {75173E30-F19E-11D2-B8E9-00C04F8EF738}
// *********************************************************************//
  ILayerMgrDisp = dispinterface
    ['{75173E30-F19E-11D2-B8E9-00C04F8EF738}']
    function AddLayer(const NameIn: WideString; const DescIn: WideString; ColorIn: Integer; 
                      StyleIn: Integer; WidthIn: Integer): SYSINT; dispid 1;
    function SetCurrentLayer(const NameIn: WideString): SYSINT; dispid 2;
    function GetCurrentLayer: WideString; dispid 3;
    function GetLayer(const NameIn: WideString): IDispatch; dispid 4;
    function IGetLayer(const NameIn: WideString): ILayer; dispid 5;
    function GetCount: SYSINT; dispid 6;
    function GetLayerList: OleVariant; dispid 7;
    function IGetLayerList: WideString; dispid 8;
    function GetLayerById(LayerId: Smallint): IDispatch; dispid 9;
    function IGetLayerById(LayerId: Smallint): ILayer; dispid 10;
    function DeleteLayer(const Name: WideString): WordBool; dispid 11;
  end;

// *********************************************************************//
// Interface: ILayer
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04B7287C-F19D-11D2-B8E9-00C04F8EF738}
// *********************************************************************//
  ILayer = interface(IDispatch)
    ['{04B7287C-F19D-11D2-B8E9-00C04F8EF738}']
    function Get_Name: WideString; safecall;
    function Get_Color: Integer; safecall;
    function Get_Style: SYSINT; safecall;
    function Get_Width: SYSINT; safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(Retval: WordBool); safecall;
    function Get_Description: WideString; safecall;
    procedure Set_Description(const Retval: WideString); safecall;
    function GetID: Integer; safecall;
    procedure Set_Name(const Retval: WideString); safecall;
    procedure Set_Color(Retval: Integer); safecall;
    procedure Set_Style(Retval: Integer); safecall;
    procedure Set_Width(Retval: Integer); safecall;
    property Name: WideString read Get_Name write Set_Name;
    property Color: Integer read Get_Color write Set_Color;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Description: WideString read Get_Description write Set_Description;
  end;

// *********************************************************************//
// DispIntf:  ILayerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {04B7287C-F19D-11D2-B8E9-00C04F8EF738}
// *********************************************************************//
  ILayerDisp = dispinterface
    ['{04B7287C-F19D-11D2-B8E9-00C04F8EF738}']
    property Name: WideString dispid 1;
    property Color: Integer dispid 2;
    function Style: SYSINT; dispid 3;
    function Width: SYSINT; dispid 4;
    property Visible: WordBool dispid 5;
    property Description: WideString dispid 6;
    function GetID: Integer; dispid 7;
  end;

// *********************************************************************//
// Interface: IDesignTable
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CE1EAA88-25AD-11D3-AE91-00C04F683CBA}
// *********************************************************************//
  IDesignTable = interface(IDispatch)
    ['{CE1EAA88-25AD-11D3-AE91-00C04F683CBA}']
    function GetRowCount: Integer; safecall;
    function GetColumnCount: Integer; safecall;
    function GetHeaderText(Col: Integer): WideString; safecall;
    function GetEntryText(Row: Integer; Col: Integer): WideString; safecall;
    function Attach: WordBool; safecall;
    procedure Detach; safecall;
    function GetEntryValue(Row: Integer; Col: Integer): OleVariant; safecall;
    function GetTitle: WideString; safecall;
    function GetTotalRowCount: Integer; safecall;
    function GetTotalColumnCount: Integer; safecall;
    function GetVisibleRowCount: Integer; safecall;
    function GetVisibleColumnCount: Integer; safecall;
    procedure SetEntryText(Row: Integer; Col: Integer; const TextIn: WideString); safecall;
    function AddRow(CellValues: OleVariant): WordBool; safecall;
    function UpdateModel: WordBool; safecall;
    function GetStartRowNumber: Integer; safecall;
    function GetStartColumnNumber: Integer; safecall;
    function GetVisibleTopRowNumber: Integer; safecall;
    function GetVisibleLeftColumnNumber: Integer; safecall;
    procedure SetRowChanged(RowIndex: Integer); safecall;
    function Get_RowHidden(Row: Integer): WordBool; safecall;
    function Get_ColumnHidden(Col: Integer): WordBool; safecall;
    procedure EditFeature; safecall;
    procedure EditTable; safecall;
    function UpdateFeature: WordBool; safecall;
    function UpdateTable(Type_: Integer; Close: WordBool): WordBool; safecall;
    function Get_SourceType: Integer; safecall;
    procedure Set_SourceType(Retval: Integer); safecall;
    function Get_Updatable: WordBool; safecall;
    procedure Set_Updatable(Retval: WordBool); safecall;
    function Get_LinkToFile: WordBool; safecall;
    procedure Set_LinkToFile(Retval: WordBool); safecall;
    function Get_AutoAddNewParams: WordBool; safecall;
    procedure Set_AutoAddNewParams(Retval: WordBool); safecall;
    function Get_AutoAddNewConfigs: WordBool; safecall;
    procedure Set_AutoAddNewConfigs(Retval: WordBool); safecall;
    function Get_Warn: WordBool; safecall;
    procedure Set_Warn(Retval: WordBool); safecall;
    function Get_FileName: WideString; safecall;
    procedure Set_FileName(const Retval: WideString); safecall;
    function SaveAsExcelFile(const Value: WideString): WordBool; safecall;
    function IsActive: WordBool; safecall;
    procedure SetEntryValue(Row: Integer; Col: Integer; IsText: WordBool; const Retval: WideString); safecall;
    function EditTable2(NewWindow: WordBool): IDispatch; safecall;
    function Get_Worksheet: IDispatch; safecall;
    function Get_LastError: Integer; safecall;
    procedure Set_LastError(Retval: Integer); safecall;
    property RowHidden[Row: Integer]: WordBool read Get_RowHidden;
    property ColumnHidden[Col: Integer]: WordBool read Get_ColumnHidden;
    property SourceType: Integer read Get_SourceType write Set_SourceType;
    property Updatable: WordBool read Get_Updatable write Set_Updatable;
    property LinkToFile: WordBool read Get_LinkToFile write Set_LinkToFile;
    property AutoAddNewParams: WordBool read Get_AutoAddNewParams write Set_AutoAddNewParams;
    property AutoAddNewConfigs: WordBool read Get_AutoAddNewConfigs write Set_AutoAddNewConfigs;
    property Warn: WordBool read Get_Warn write Set_Warn;
    property FileName: WideString read Get_FileName write Set_FileName;
    property Worksheet: IDispatch read Get_Worksheet;
    property LastError: Integer read Get_LastError write Set_LastError;
  end;

// *********************************************************************//
// DispIntf:  IDesignTableDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CE1EAA88-25AD-11D3-AE91-00C04F683CBA}
// *********************************************************************//
  IDesignTableDisp = dispinterface
    ['{CE1EAA88-25AD-11D3-AE91-00C04F683CBA}']
    function GetRowCount: Integer; dispid 1;
    function GetColumnCount: Integer; dispid 2;
    function GetHeaderText(Col: Integer): WideString; dispid 3;
    function GetEntryText(Row: Integer; Col: Integer): WideString; dispid 4;
    function Attach: WordBool; dispid 5;
    procedure Detach; dispid 6;
    function GetEntryValue(Row: Integer; Col: Integer): OleVariant; dispid 7;
    function GetTitle: WideString; dispid 8;
    function GetTotalRowCount: Integer; dispid 9;
    function GetTotalColumnCount: Integer; dispid 10;
    function GetVisibleRowCount: Integer; dispid 11;
    function GetVisibleColumnCount: Integer; dispid 12;
    procedure SetEntryText(Row: Integer; Col: Integer; const TextIn: WideString); dispid 13;
    function AddRow(CellValues: OleVariant): WordBool; dispid 14;
    function UpdateModel: WordBool; dispid 15;
    function GetStartRowNumber: Integer; dispid 16;
    function GetStartColumnNumber: Integer; dispid 17;
    function GetVisibleTopRowNumber: Integer; dispid 18;
    function GetVisibleLeftColumnNumber: Integer; dispid 19;
    procedure SetRowChanged(RowIndex: Integer); dispid 20;
    property RowHidden[Row: Integer]: WordBool readonly dispid 21;
    property ColumnHidden[Col: Integer]: WordBool readonly dispid 22;
    procedure EditFeature; dispid 23;
    procedure EditTable; dispid 24;
    function UpdateFeature: WordBool; dispid 25;
    function UpdateTable(Type_: Integer; Close: WordBool): WordBool; dispid 26;
    property SourceType: Integer dispid 27;
    property Updatable: WordBool dispid 28;
    property LinkToFile: WordBool dispid 29;
    property AutoAddNewParams: WordBool dispid 30;
    property AutoAddNewConfigs: WordBool dispid 31;
    property Warn: WordBool dispid 32;
    property FileName: WideString dispid 33;
    function SaveAsExcelFile(const Value: WideString): WordBool; dispid 34;
    function IsActive: WordBool; dispid 35;
    procedure SetEntryValue(Row: Integer; Col: Integer; IsText: WordBool; const Retval: WideString); dispid 36;
    function EditTable2(NewWindow: WordBool): IDispatch; dispid 37;
    property Worksheet: IDispatch readonly dispid 38;
    property LastError: Integer dispid 39;
  end;

// *********************************************************************//
// Interface: IRefPlane
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D84-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IRefPlane = interface(IDispatch)
    ['{83A33D84-27C5-11CE-BFD4-00400513BB57}']
    function GetRefPlaneParams: OleVariant; safecall;
    function IGetRefPlaneParams: Double; safecall;
    function Get_Transform: IMathTransform; safecall;
    function Get_BoundingBox: OleVariant; safecall;
    function IGetBoundingBox: IMathPoint; safecall;
    property Transform: IMathTransform read Get_Transform;
    property BoundingBox: OleVariant read Get_BoundingBox;
  end;

// *********************************************************************//
// DispIntf:  IRefPlaneDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D84-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IRefPlaneDisp = dispinterface
    ['{83A33D84-27C5-11CE-BFD4-00400513BB57}']
    function GetRefPlaneParams: OleVariant; dispid 1;
    function IGetRefPlaneParams: Double; dispid 2;
    property Transform: IMathTransform readonly dispid 3;
    property BoundingBox: OleVariant readonly dispid 4;
    function IGetBoundingBox: IMathPoint; dispid 5;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E981B4FA-7E86-11D4-AEF2-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPage = interface(IDispatch)
    ['{E981B4FA-7E86-11D4-AEF2-00C04F603FAF}']
    function SetButtons(ButtonTypes: Integer): Integer; safecall;
    function SetGroupRange(FirstGroupId: Integer; FirstCheckId: Integer; GroupCount: Integer): Integer; safecall;
    function Show: Integer; safecall;
    function GetDialogWindow(var Status: Integer): Integer; safecall;
    function GetGroupVisible(GroupID: Integer; var Status: Integer): WordBool; safecall;
    function SetGroupVisible(GroupID: Integer; Visible: WordBool): Integer; safecall;
    function GetGroupExpanded(GroupID: Integer; var Status: Integer): WordBool; safecall;
    function SetGroupExpanded(GroupID: Integer; Expanded: WordBool): Integer; safecall;
    function Get_Pinned: WordBool; safecall;
    procedure Set_Pinned(Pinned: WordBool); safecall;
    function GetAllowMultiSelect(var Status: Integer): WordBool; safecall;
    function SetAllowMultiSelect(Allow: WordBool): Integer; safecall;
    function GetDialogWindowx64(var Status: Integer): Int64; safecall;
    property Pinned: WordBool read Get_Pinned write Set_Pinned;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E981B4FA-7E86-11D4-AEF2-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageDisp = dispinterface
    ['{E981B4FA-7E86-11D4-AEF2-00C04F603FAF}']
    function SetButtons(ButtonTypes: Integer): Integer; dispid 1;
    function SetGroupRange(FirstGroupId: Integer; FirstCheckId: Integer; GroupCount: Integer): Integer; dispid 2;
    function Show: Integer; dispid 3;
    function GetDialogWindow(var Status: Integer): Integer; dispid 4;
    function GetGroupVisible(GroupID: Integer; var Status: Integer): WordBool; dispid 5;
    function SetGroupVisible(GroupID: Integer; Visible: WordBool): Integer; dispid 6;
    function GetGroupExpanded(GroupID: Integer; var Status: Integer): WordBool; dispid 7;
    function SetGroupExpanded(GroupID: Integer; Expanded: WordBool): Integer; dispid 8;
    property Pinned: WordBool dispid 9;
    function GetAllowMultiSelect(var Status: Integer): WordBool; dispid 10;
    function SetAllowMultiSelect(Allow: WordBool): Integer; dispid 11;
    function GetDialogWindowx64(var Status: Integer): {??Int64}OleVariant; dispid 12;
  end;

// *********************************************************************//
// Interface: IUserUnit
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {82071121-8B32-4F51-8983-9304756503E7}
// *********************************************************************//
  IUserUnit = interface(IDispatch)
    ['{82071121-8B32-4F51-8983-9304756503E7}']
    function Get_FractionBase: Integer; safecall;
    procedure Set_FractionBase(Value: Integer); safecall;
    function Get_FractionValue: Integer; safecall;
    procedure Set_FractionValue(Value: Integer); safecall;
    function Get_RoundToFraction: WordBool; safecall;
    procedure Set_RoundToFraction(Value: WordBool); safecall;
    function Get_SignificantDigits: Integer; safecall;
    procedure Set_SignificantDigits(NumDigits: Integer); safecall;
    function Get_DisplayLeadingZero: WordBool; safecall;
    procedure Set_DisplayLeadingZero(Value: WordBool); safecall;
    function Get_PadZero: WordBool; safecall;
    procedure Set_PadZero(Value: WordBool); safecall;
    function Get_SeparatorCharacter: WideString; safecall;
    procedure Set_SeparatorCharacter(const Value: WideString); safecall;
    function GetConversionFactor: Double; safecall;
    function IsMetric: WordBool; safecall;
    function GetFullUnitName(Plural: WordBool): WideString; safecall;
    function ConvertToUserUnit(ValueIn: Double; ShowUsernames: WordBool; NameInEnglish: WordBool): WideString; safecall;
    function ConvertToSystemValue(const UnitText: WideString; var ComputedValue: Double): WordBool; safecall;
    function ConvertDoubleToSystemValue(UserValue: Double): Double; safecall;
    function GetUnitsString(InEnglish: WordBool): WideString; safecall;
    function Get_UnitType: Integer; safecall;
    function Get_SpecificUnitType: Integer; safecall;
    procedure Set_SpecificUnitType(SpecificUnitType: Integer); safecall;
    function GetUserAngleTolerance: Double; safecall;
    property FractionBase: Integer read Get_FractionBase write Set_FractionBase;
    property FractionValue: Integer read Get_FractionValue write Set_FractionValue;
    property RoundToFraction: WordBool read Get_RoundToFraction write Set_RoundToFraction;
    property SignificantDigits: Integer read Get_SignificantDigits write Set_SignificantDigits;
    property DisplayLeadingZero: WordBool read Get_DisplayLeadingZero write Set_DisplayLeadingZero;
    property PadZero: WordBool read Get_PadZero write Set_PadZero;
    property SeparatorCharacter: WideString read Get_SeparatorCharacter write Set_SeparatorCharacter;
    property UnitType: Integer read Get_UnitType;
    property SpecificUnitType: Integer read Get_SpecificUnitType write Set_SpecificUnitType;
  end;

// *********************************************************************//
// DispIntf:  IUserUnitDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {82071121-8B32-4F51-8983-9304756503E7}
// *********************************************************************//
  IUserUnitDisp = dispinterface
    ['{82071121-8B32-4F51-8983-9304756503E7}']
    property FractionBase: Integer dispid 1;
    property FractionValue: Integer dispid 2;
    property RoundToFraction: WordBool dispid 3;
    property SignificantDigits: Integer dispid 4;
    property DisplayLeadingZero: WordBool dispid 5;
    property PadZero: WordBool dispid 6;
    property SeparatorCharacter: WideString dispid 7;
    function GetConversionFactor: Double; dispid 8;
    function IsMetric: WordBool; dispid 9;
    function GetFullUnitName(Plural: WordBool): WideString; dispid 10;
    function ConvertToUserUnit(ValueIn: Double; ShowUsernames: WordBool; NameInEnglish: WordBool): WideString; dispid 11;
    function ConvertToSystemValue(const UnitText: WideString; var ComputedValue: Double): WordBool; dispid 12;
    function ConvertDoubleToSystemValue(UserValue: Double): Double; dispid 13;
    function GetUnitsString(InEnglish: WordBool): WideString; dispid 14;
    property UnitType: Integer readonly dispid 15;
    property SpecificUnitType: Integer dispid 16;
    function GetUserAngleTolerance: Double; dispid 17;
  end;

// *********************************************************************//
// Interface: ISketchText
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC5-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchText = interface(IDispatch)
    ['{83A33DC5-27C5-11CE-BFD4-00400513BB57}']
    function GetEdges: OleVariant; safecall;
    function EnumEdges: IEnumEdges; safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const Retval: WideString); safecall;
    function GetCoordinates: OleVariant; safecall;
    function IGetCoordinates: Double; safecall;
    function SetCoordinates(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function GetUseDocTextFormat: WordBool; safecall;
    function GetTextFormat: IDispatch; safecall;
    function IGetTextFormat: ITextFormat; safecall;
    function SetTextFormat(UseDoc: WordBool; const TextFormat: IDispatch): WordBool; safecall;
    function ISetTextFormat(UseDoc: WordBool; const TextFormat: ITextFormat): WordBool; safecall;
    property Text: WideString read Get_Text write Set_Text;
  end;

// *********************************************************************//
// DispIntf:  ISketchTextDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC5-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchTextDisp = dispinterface
    ['{83A33DC5-27C5-11CE-BFD4-00400513BB57}']
    function GetEdges: OleVariant; dispid 1;
    function EnumEdges: IEnumEdges; dispid 2;
    property Text: WideString dispid 3;
    function GetCoordinates: OleVariant; dispid 4;
    function IGetCoordinates: Double; dispid 5;
    function SetCoordinates(X: Double; Y: Double; Z: Double): WordBool; dispid 6;
    function GetUseDocTextFormat: WordBool; dispid 7;
    function GetTextFormat: IDispatch; dispid 8;
    function IGetTextFormat: ITextFormat; dispid 9;
    function SetTextFormat(UseDoc: WordBool; const TextFormat: IDispatch): WordBool; dispid 10;
    function ISetTextFormat(UseDoc: WordBool; const TextFormat: ITextFormat): WordBool; dispid 11;
  end;

// *********************************************************************//
// Interface: IEquationMgr
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {02272CE8-FE52-4B94-B120-6D1826FDBE32}
// *********************************************************************//
  IEquationMgr = interface(IDispatch)
    ['{02272CE8-FE52-4B94-B120-6D1826FDBE32}']
    function Get_Suppression(Index: Integer): WordBool; safecall;
    procedure Set_Suppression(Index: Integer; Retval: WordBool); safecall;
    function Add(Index: Integer; const Equation: WideString): Integer; safecall;
    function Delete(Index: Integer): Integer; safecall;
    function ChangeSuppressionForAllConfigurations(Index: Integer; State: WordBool): Integer; safecall;
    function ChangeSuppressionForConfiguration(Index: Integer; const ConfigName: WideString; 
                                               State: WordBool): Integer; safecall;
    function Get_Status: Integer; safecall;
    function Get_Value(Index: Integer): Double; safecall;
    function Get_Equation(Index: Integer): WideString; safecall;
    procedure Set_Equation(Index: Integer; const Equation: WideString); safecall;
    function GetCount: Integer; safecall;
    function Get_AngularEquationUnits: Integer; safecall;
    procedure Set_AngularEquationUnits(Units: Integer); safecall;
    property Suppression[Index: Integer]: WordBool read Get_Suppression write Set_Suppression;
    property Status: Integer read Get_Status;
    property Value[Index: Integer]: Double read Get_Value;
    property Equation[Index: Integer]: WideString read Get_Equation write Set_Equation;
    property AngularEquationUnits: Integer read Get_AngularEquationUnits write Set_AngularEquationUnits;
  end;

// *********************************************************************//
// DispIntf:  IEquationMgrDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {02272CE8-FE52-4B94-B120-6D1826FDBE32}
// *********************************************************************//
  IEquationMgrDisp = dispinterface
    ['{02272CE8-FE52-4B94-B120-6D1826FDBE32}']
    property Suppression[Index: Integer]: WordBool dispid 1;
    function Add(Index: Integer; const Equation: WideString): Integer; dispid 2;
    function Delete(Index: Integer): Integer; dispid 3;
    function ChangeSuppressionForAllConfigurations(Index: Integer; State: WordBool): Integer; dispid 4;
    function ChangeSuppressionForConfiguration(Index: Integer; const ConfigName: WideString; 
                                               State: WordBool): Integer; dispid 5;
    property Status: Integer readonly dispid 6;
    property Value[Index: Integer]: Double readonly dispid 7;
    property Equation[Index: Integer]: WideString dispid 8;
    function GetCount: Integer; dispid 9;
    property AngularEquationUnits: Integer dispid 10;
  end;

// *********************************************************************//
// Interface: IFeatureManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6B39655E-381B-4BD0-89F5-640D48593F15}
// *********************************************************************//
  IFeatureManager = interface(IDispatch)
    ['{6B39655E-381B-4BD0-89F5-640D48593F15}']
    function CreateCustomBendAllowance: ICustomBendAllowance; safecall;
    function InsertSheetMetalBaseFlange(Thickness: Double; ThickenDir: WordBool; Radius: Double; 
                                        ExtrudeDist1: Double; ExtrudeDist2: Double; 
                                        FlipExtruDir: WordBool; EndCondition1: Integer; 
                                        EndCondition2: Integer; DirToUse: Integer; 
                                        const PCBA: ICustomBendAllowance; 
                                        UseDefaultRelief: WordBool; ReliefType: Integer; 
                                        ReliefWidth: Double; ReliefDepth: Double; 
                                        ReliefRatio: Double; UseReliefRatio: WordBool): IFeature; safecall;
    function InsertDeleteBody: IFeature; safecall;
    function FeatureExtrusion(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                              T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                              Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                              Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                              TranslateSurface1: WordBool; TranslateSurface2: WordBool; 
                              Merge: WordBool; UseFeatScope: WordBool; UseAutoSelect: WordBool): IFeature; safecall;
    function FeatureExtrusionThin(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                  T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                  Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                                  Dang2: Double; OffsetReverse1: WordBool; 
                                  OffsetReverse2: WordBool; TranslateSurface1: WordBool; 
                                  TranslateSurface2: WordBool; Merge: WordBool; Thk1: Double; 
                                  Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                                  CapEnds: Integer; AddBends: WordBool; BendRad: Double; 
                                  UseFeatScope: WordBool; UseAutoSelect: WordBool): IFeature; safecall;
    function FeatureCut(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                        D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; Ddir1: WordBool; 
                        Ddir2: WordBool; Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                        OffsetReverse2: WordBool; TranslateSurface1: WordBool; 
                        TranslateSurface2: WordBool; NormalCut: WordBool; UseFeatScope: WordBool; 
                        UseAutoSelect: WordBool): IFeature; safecall;
    function FeatureCutThin(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                            D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                            Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                            OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                            TranslateSurface1: WordBool; TranslateSurface2: WordBool; Thk1: Double; 
                            Thk2: Double; EndThk: Double; RevThinDir: Integer; CapEnds: Integer; 
                            AddBends: WordBool; BendRad: Double; UseFeatScope: WordBool; 
                            UseAutoSelect: WordBool): IFeature; safecall;
    function FeatureRevolve(Angle: Double; ReverseDir: WordBool; Angle2: Double; RevType: Integer; 
                            Options: Integer; Merge: WordBool; UseFeatScope: WordBool; 
                            UseAutoSel: WordBool): IFeature; safecall;
    function FeatureRevolveCut(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                               RevType: Integer; Options: Integer; UseFeatScope: WordBool; 
                               UseAutoSelect: WordBool): IFeature; safecall;
    function FeatureRevolveThin(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                RevType: Integer; Thickness1: Double; Thickness2: Double; 
                                ReverseThinDir: Integer; Merge: WordBool; UseFeatScope: WordBool; 
                                UseAutoSelect: WordBool): IFeature; safecall;
    function FeatureRevolveThinCut(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                   RevType: Integer; Thickness1: Double; Thickness2: Double; 
                                   ReverseThinDir: Integer; UseFeatScope: WordBool; 
                                   UseAutoSelect: WordBool): IFeature; safecall;
    function FeatureBossThicken(Thickness: Double; Direction: Integer; FaceIndex: Integer; 
                                FillVolume: WordBool; Merge: WordBool; UseFeatScope: WordBool; 
                                UseAutoSelect: WordBool): IFeature; safecall;
    function FeatureCutThicken(Thickness: Double; Direction: Integer; FaceIndex: Integer; 
                               FillVolume: WordBool; UseFeatScope: WordBool; UseAutoSelect: WordBool): IFeature; safecall;
    function InsertProtrusionSwept(Propagate: WordBool; Alignment: WordBool; 
                                   TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                   ForceNonRational: WordBool; StartMatchingType: Smallint; 
                                   EndMatchingType: Smallint; IsThinBody: WordBool; 
                                   Thickness1: Double; Thickness2: Double; ThinType: Smallint; 
                                   Merge: WordBool; UseFeatScope: WordBool; UseAutoSelect: WordBool): IFeature; safecall;
    function InsertCutSwept(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                            KeepTangency: WordBool; ForceNonRational: WordBool; 
                            StartMatchingType: Smallint; EndMatchingType: Smallint; 
                            IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                            ThinType: Smallint; UseFeatScope: WordBool; UseAutoSelect: WordBool): IFeature; safecall;
    function InsertProtrusionBlend(Closed: WordBool; KeepTangency: WordBool; 
                                   ForceNonRational: WordBool; TessToleranceFactor: Double; 
                                   StartMatchingType: Smallint; EndMatchingType: Smallint; 
                                   StartTangentLength: Double; EndTangentLength: Double; 
                                   StartTangentDir: WordBool; EndTangentDir: WordBool; 
                                   IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                                   ThinType: Smallint; Merge: WordBool; UseFeatScope: WordBool; 
                                   UseAutoSelect: WordBool): IFeature; safecall;
    function InsertCutBlend(Closed: WordBool; KeepTangency: WordBool; ForceNonRational: WordBool; 
                            TessToleranceFactor: Double; StartMatchingType: Smallint; 
                            EndMatchingType: Smallint; IsThinBody: WordBool; Thickness1: Double; 
                            Thickness2: Double; ThinType: Smallint; UseFeatScope: WordBool; 
                            UseAutoSelect: WordBool): IFeature; safecall;
    function HoleWizard(GenericHoleType: Integer; StandardIndex: Integer; 
                        FastenerTypeIndex: Integer; const SSize: WideString; EndType: Smallint; 
                        Diameter: Double; Depth: Double; Value1: Double; Value2: Double; 
                        Value3: Double; Value4: Double; Value5: Double; Value6: Double; 
                        Value7: Double; Value8: Double; Value9: Double; Value10: Double; 
                        Value11: Double; Value12: Double): IFeature; safecall;
    function InsertMacroFeature(const BaseName: WideString; const ProgId: WideString; 
                                MacroMethods: OleVariant; ParamNames: OleVariant; 
                                ParamTypes: OleVariant; ParamValues: OleVariant; 
                                const EditBody: IBody2; Options: Integer): IFeature; safecall;
    function IInsertMacroFeature(const BaseName: WideString; const ProgId: WideString; 
                                 var MacroMethods: WideString; ParamCount: Integer; 
                                 var ParamNames: WideString; var ParamTypes: Integer; 
                                 var ParamValues: WideString; const EditBody: IBody2; 
                                 Options: Integer): IFeature; safecall;
    function Get_EnableFeatureTree: WordBool; safecall;
    procedure Set_EnableFeatureTree(PState: WordBool); safecall;
    procedure UpdateFeatureTree; safecall;
    function InsertFeatureTreeFolder: WordBool; safecall;
    function InsertSheetMetalCornerTrim(InternalCornerFlag: Integer; BreakType: Integer; 
                                        BreakDist: Double; ReliefType: Integer; Param: Double): IFeature; safecall;
    function Get_ShowFeatureName: WordBool; safecall;
    procedure Set_ShowFeatureName(ShowName: WordBool); safecall;
    function Get_ShowFeatureDescription: WordBool; safecall;
    procedure Set_ShowFeatureDescription(ShowDescription: WordBool); safecall;
    function InsertFillSurface(Resolution: Integer): IFeature; safecall;
    function EditRollback(Location: Integer; const Feature: WideString): WordBool; safecall;
    function InsertSheetMetalLoftedBend(ThickDirType: Integer; Thickness: Double): IFeature; safecall;
    procedure MakeStyledCurves(Tol: Double; Mode: Integer); safecall;
    procedure HideBodies; safecall;
    procedure ShowBodies; safecall;
    function InsertMirrorFeature(BMirrorBody: WordBool; BGeometryPattern: WordBool; 
                                 BMerge: WordBool; BKnit: WordBool): IFeature; safecall;
    function InsertMoveCopyBody(TransX: Double; TransY: Double; TransZ: Double; TransDist: Double; 
                                RotPointX: Double; RotPointY: Double; RotPointZ: Double; 
                                RotAngleX: Double; RotAngleY: Double; RotAngleZ: Double; 
                                BCopy: WordBool; NumCopies: Integer): IFeature; safecall;
    function Get_Document: IModelDoc2; safecall;
    function InsertCombineFeature(OperationType: Integer; const MainBody: IBody2; 
                                  ToolVar: OleVariant): IFeature; safecall;
    function IInsertCombineFeature(OperationType: Integer; const MainBody: IBody2; 
                                   ToolsCount: Integer; var ToolsArr: IBody2): IFeature; safecall;
    function InsertDwgOrDxfFile(const FileName: WideString): IFeature; safecall;
    function FeatureLinearPattern(Num1: Integer; Spacing1: Double; Num2: Integer; Spacing2: Double; 
                                  FlipDir1: WordBool; FlipDir2: WordBool; const DName1: WideString; 
                                  const DName2: WideString): IFeature; safecall;
    function FeatureCircularPattern(Num: Integer; Spacing: Double; FlipDir: WordBool; 
                                    const DName: WideString): IFeature; safecall;
    function InsertTableDrivenPattern(const FileName: WideString; PointVar: OleVariant; 
                                      UseCentrod: WordBool; GeomPatt: WordBool): IFeature; safecall;
    function IInsertTableDrivenPattern(const FileName: WideString; Count: Integer; 
                                       var PointArr: Double; UseCentrod: WordBool; 
                                       GeomPatt: WordBool): IFeature; safecall;
    function InsertCosmeticThread(Type_: Smallint; Depth: Double; Length: Double; 
                                  const Note: WideString): WideString; safecall;
    function InsertScale(Type_: Smallint; Uniform: WordBool; Xscale: Double; YScale: Double; 
                         ZScale: Double): IFeature; safecall;
    function InsertFeatureTreeFolder2(Type_: Integer): IFeature; safecall;
    function InsertMoveCopyBody2(TransX: Double; TransY: Double; TransZ: Double; TransDist: Double; 
                                 RotPointX: Double; RotPointY: Double; RotPointZ: Double; 
                                 RotAngleX: Double; RotAngleY: Double; RotAngleZ: Double; 
                                 BCopy: WordBool; NumCopies: Integer): IFeature; safecall;
    function FeatureSketchDrivenPattern(UseCentroid: WordBool; BGeomPatt: WordBool): IFeature; safecall;
    function InsertDerivedPattern: IFeature; safecall;
    function InsertGussetFeature(Depth: Double; DirType: Smallint; LocType: Smallint; 
                                 BIsProfile: WordBool; ProfileD1: Double; ProfileD2: Double; 
                                 ProfileD3: Double; ProfileAngle: Double; ProfileD4: Double; 
                                 BOffset: WordBool; DProfileOffset: Double; CrvIndex: Integer; 
                                 BReverseDir: WordBool; BReverseFace: WordBool; BUseLenDim: WordBool): IFeature; safecall;
    function InsertSubWeldFolder: IFeature; safecall;
    function InsertMoldPartingLine(BFlipDir: WordBool): IFeature; safecall;
    function InsertMoldShutOffSurface: IFeature; safecall;
    function InsertWeldmentFeature: IFeature; safecall;
    function InsertMultiFaceDraft(Angle: Double; FlipDir: WordBool; EdgeDraft: WordBool; 
                                  PropType: Integer; IsStepDraft: WordBool; IsBodyDraft: WordBool): IFeature; safecall;
    function InsertRuledSurfaceFromEdge(Type_: Integer; Length: Double; FlipPullDir: WordBool; 
                                        FlipDir: WordBool; TrimAndSew: WordBool; Angle: Double; 
                                        CoordInput: WordBool; X: Double; Y: Double; Z: Double): IFeature; safecall;
    function MakeStyledCurves2(Tolerance: Double; Mode: Integer): WordBool; safecall;
    function InsertSaveOutBodies: WordBool; safecall;
    function InsertMoldCoreCavitySolids(Dist1: Double; Dist2: Double; Setback: WordBool; 
                                        Angle: Double): IFeature; safecall;
    function InsertMacroFeature2(const BaseName: WideString; const ProgId: WideString; 
                                 MacroMethods: OleVariant; ParamNames: OleVariant; 
                                 ParamTypes: OleVariant; ParamValues: OleVariant; 
                                 DimTypes: OleVariant; DimValues: OleVariant; 
                                 const EditBody: IBody2; IconFiles: OleVariant; Options: Integer): IFeature; safecall;
    function IInsertMacroFeature2(const BaseName: WideString; const ProgId: WideString; 
                                  var MacroMethods: WideString; ParamCount: Integer; 
                                  var ParamNames: WideString; var ParamTypes: Integer; 
                                  var ParamValues: WideString; DimCount: Integer; 
                                  var DimTypes: Integer; var DimCountValues: Double; 
                                  const EditBody: IBody2; IconCount: Integer; 
                                  var IconFiles: WideString; Options: Integer): IFeature; safecall;
    procedure MoldUndercutDetect(ColUndercut: Integer; ColBase: Integer; BCoordInput: WordBool; 
                                 Dx: Double; Dy: Double; Dz: Double); safecall;
    function PreTrimSurface(BMutualTrimIn: WordBool; BSplitSystemIn: WordBool; 
                            BSplitLinearIn: WordBool; BRemovePickedIn: WordBool): WordBool; safecall;
    function PostTrimSurface(BSewSurfaceIn: WordBool): IFeature; safecall;
    function InsertStructuralWeldment(const Path: WideString; EndCond: Integer; Angle: Double): IFeature; safecall;
    function InsertWeldmentTrimFeature(EndCond: Integer): IFeature; safecall;
    function InsertWrapFeature(Type_: Integer; Thickness: Double; ReverseDir: WordBool): IFeature; safecall;
    function InsertFilletBeadFeature(Type1: Smallint; Size1: Double; Length1: Double; 
                                     Pitch: Double; Type2: Smallint; Size2: Double; 
                                     Length2: Double; Flag: Integer; EdgeNum1: Integer; 
                                     DeSelEdge1: OleVariant; EdgeNum2: Integer; 
                                     DeSelEdge2: OleVariant): IFeature; safecall;
    function InsertEndCapFeature(Depth: Double; BIsGivenOffset: WordBool; BIsChamfer: WordBool; 
                                 OffsetValue: Double; WallThicknessRatio: Double; 
                                 ChamferValue: Double): IFeature; safecall;
    function InsertReferencePoint(NRefPointType: Integer; NRefPointAlongCurveType: Integer; 
                                  DDistance_or_Percent: Double; NumberOfRefPoints: Integer): OleVariant; safecall;
    function IInsertReferencePoint(NRefPointType: Integer; NRefPointAlongCurveType: Integer; 
                                   DDistance_or_Percent: Double; NumberOfRefPoints: Integer): IFeature; safecall;
    function InsertProtrusionSwept2(Propagate: WordBool; Alignment: WordBool; 
                                    TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                    ForceNonRational: WordBool; StartMatchingType: Smallint; 
                                    EndMatchingType: Smallint; IsThinBody: WordBool; 
                                    Thickness1: Double; Thickness2: Double; ThinType: Smallint; 
                                    PathAlign: Smallint; Merge: WordBool; UseFeatScope: WordBool; 
                                    UseAutoSelect: WordBool): IFeature; safecall;
    function InsertCutSwept2(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                             KeepTangency: WordBool; ForceNonRational: WordBool; 
                             StartMatchingType: Smallint; EndMatchingType: Smallint; 
                             IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                             ThinType: Smallint; PathAlign: Smallint; UseFeatScope: WordBool; 
                             UseAutoSelect: WordBool): IFeature; safecall;
    function InsertSweepSurface(Propagate: WordBool; TwistCtrlOption: Smallint; 
                                KeepTangency: WordBool; ForceNonRational: WordBool; 
                                StartMatchingType: Smallint; EndMatchingType: Smallint; 
                                PathAlign: Smallint): IFeature; safecall;
    function SimpleHole(Dia: Double; Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                        T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                        Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                        OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                        TranslateSurface1: WordBool; TranslateSurface2: WordBool; 
                        UseFeatScope: WordBool; UseAutoSelect: WordBool): IFeature; safecall;
    function InsertMoldPartingSurface(Radiate: Integer; ReverseAlignment: WordBool; 
                                      ReverseOffset: WordBool; OffsetDistance: Double; 
                                      Angle: Double; Smooth: Integer; SmoothDistance: Double; 
                                      Knit: WordBool): IFeature; safecall;
    function InsertRuledSurfaceFromEdge2(Type_: Integer; Length: Double; FlipPullDir: WordBool; 
                                         FlipDir: WordBool; TrimAndSew: WordBool; Angle: Double; 
                                         CoordInput: WordBool; X: Double; Y: Double; Z: Double; 
                                         BConnectSurface: WordBool): IFeature; safecall;
    function InsertWeldmentCutList: IFeature; safecall;
    function InsertUntrimSurface(FaceUntrimType: Integer; EdgeUntrimType: Integer; 
                                 Distance: Double; BMerge: WordBool): IFeature; safecall;
    function InsertCosmeticThread2(Type_: Smallint; Depth: Double; Length: Double; 
                                   const Note: WideString): IFeature; safecall;
    function InsertStructuralWeldment2(const Path: WideString; EndCond: Integer; Angle: Double; 
                                       Merge: WordBool): IFeature; safecall;
    function InsertSheetMetalMiterFlange(UseDefaultRadius: WordBool; GlobalRadius: Double; 
                                         RipGap: Double; UseDefaultRelief: WordBool; 
                                         UseReliefRatio: WordBool; ReliefRatio: Double; 
                                         ReliefWidth: Double; ReliefDepth: Double; 
                                         ReliefType: Integer; TrimSideBends: WordBool; 
                                         FlangePos: Integer; OffsetDist1: Double; 
                                         OffsetDist2: Double; const PCBA: ICustomBendAllowance): IFeature; safecall;
    function InsertSubFolder: IFeature; safecall;
    function InsertFeatureChamfer(Options: Integer; ChamferType: Integer; Width: Double; 
                                  Angle: Double; OtherDist: Double; VertexChamDist1: Double; 
                                  VertexChamDist2: Double; VertexChamDist3: Double): IFeature; safecall;
    function MoveToFolder(const MoveToFeat: WideString; const MoveFromFeat: WideString; 
                          IsFolder: WordBool): WordBool; safecall;
    function InsertMateReference(const BstrMateReferenceName: WideString; 
                                 const PrimaryReferenceEntity: IEntity; 
                                 PrimaryReferenceType: Integer; PrimaryReferenceAlignment: Integer; 
                                 const SecondaryReferenceEntity: IEntity; 
                                 SecondaryReferenceType: Integer; 
                                 SecondaryReferenceAlignment: Integer; 
                                 const TertiaryReferenceEntity: IEntity; 
                                 TertiaryReferenceType: Integer; TertiaryReferenceAlignment: Integer): IFeature; safecall;
    function FeatureFillet(Options: Integer; R1: Double; Ftyp: Integer; OverflowType: Integer; 
                           Radii: OleVariant; SetBackDistances: OleVariant; 
                           PointRadiusArray: OleVariant): IDispatch; safecall;
    function IFeatureFillet(Options: Integer; R1: Double; Ftyp: Integer; OverflowType: Integer; 
                            NRadii: Integer; var Radii: Double; SetbackDistCount: Integer; 
                            var SetBackDistances: Double; PointCount: Integer; 
                            var PointRadiusArray: Double): IFeature; safecall;
    function InsertProtrusionSwept3(Propagate: WordBool; Alignment: WordBool; 
                                    TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                    BAdvancedSmoothing: WordBool; StartMatchingType: Smallint; 
                                    EndMatchingType: Smallint; IsThinBody: WordBool; 
                                    Thickness1: Double; Thickness2: Double; ThinType: Smallint; 
                                    PathAlign: Smallint; Merge: WordBool; UseFeatScope: WordBool; 
                                    UseAutoSelect: WordBool; TwistAngle: Double; 
                                    BMergeSmoothFaces: WordBool): IFeature; safecall;
    function InsertCutSwept3(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                             KeepTangency: WordBool; BAdvancedSmoothing: WordBool; 
                             StartMatchingType: Smallint; EndMatchingType: Smallint; 
                             IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                             ThinType: Smallint; PathAlign: Smallint; UseFeatScope: WordBool; 
                             UseAutoSelect: WordBool; TwistAngle: Double; 
                             BMergeSmoothFaces: WordBool): IFeature; safecall;
    function InsertSweepSurface2(Propagate: WordBool; TwistCtrlOption: Smallint; 
                                 KeepTangency: WordBool; BAdvancedSmoothing: WordBool; 
                                 StartMatchingType: Smallint; EndMatchingType: Smallint; 
                                 PathAlign: Smallint; UseFeatScope: WordBool; 
                                 UseAutoSelect: WordBool; TwistAngle: Double; 
                                 BMergeSmoothFaces: WordBool): IFeature; safecall;
    function InsertSheetMetalHem(Type_: Integer; Position: Integer; Reverse: WordBool; 
                                 DLength: Double; DGap: Double; DAngle: Double; DRad: Double; 
                                 DMiterGap: Double; const PCBA: ICustomBendAllowance): IFeature; safecall;
    function InsertSheetMetalEdgeFlange(const FlangeEdge: IEdge; const SketchFeat: IFeature; 
                                        BooleanOptions: Integer; DAngle: Double; DRadius: Double; 
                                        BendPosition: Integer; DOffsetDist: Double; 
                                        ReliefType: Integer; DReliefRatio: Double; 
                                        DReliefWidth: Double; DReliefDepth: Double; 
                                        FlangeSharpType: Integer; const PCBA: ICustomBendAllowance): IFeature; safecall;
    function InsertSheetMetal3dBend(Angle: Double; BUseDefaultRadius: WordBool; Radius: Double; 
                                    FlipDir: WordBool; BendPos: Smallint; 
                                    const PCBA: ICustomBendAllowance): IFeature; safecall;
    function InsertEdgeMerge(Angular_tolerance: Double; Edge_length_tolerance: Double): IFeature; safecall;
    procedure MoldUndercutDetect2(ColUndercut1: Integer; ColUndercut2: Integer; 
                                  ColOccluded: Integer; ColStraddle: Integer; ColBase: Integer; 
                                  BCoordInput: WordBool; Dx: Double; Dy: Double; Dz: Double); safecall;
    function InsertIndent(Thickness: Double; Clearance: Double; Exclude: WordBool; 
                          ClrDir: WordBool; Cut: WordBool; CutDir: WordBool): IFeature; safecall;
    function FeatureLinearPattern2(Num1: Integer; Spacing1: Double; Num2: Integer; 
                                   Spacing2: Double; FlipDir1: WordBool; FlipDir2: WordBool; 
                                   const DName1: WideString; const DName2: WideString; 
                                   GeometryPattern: WordBool): IFeature; safecall;
    function FeatureCircularPattern2(Num: Integer; Spacing: Double; FlipDir: WordBool; 
                                     const DName: WideString; GeometryPattern: WordBool): IFeature; safecall;
    function InsertSplitLineIntersect(CompleteOption: Integer): IFeature; safecall;
    function InsertFlexFeature(RotX: Double; RotY: Double; RotZ: Double; TanX: Double; 
                               TanY: Double; TanZ: Double; RadX: Double; RadY: Double; 
                               RadZ: Double; Angle: Double; PivotX: Double; PivotY: Double; 
                               PivotZ: Double; Type_: Integer; LeftTrim: Double; RightTrim: Double; 
                               HardEdges: WordBool): IFeature; safecall;
    function FeatureExtrusion2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                               T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                               Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                               Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                               TranslateSurface1: WordBool; TranslateSurface2: WordBool; 
                               Merge: WordBool; UseFeatScope: WordBool; UseAutoSelect: WordBool; 
                               T0: Integer; StartOffset: Double; FlipStartOffset: WordBool): IFeature; safecall;
    function InsertMoveFace(MoveType: Integer; ReverseDir: WordBool; Angle: Double; Distance: Double): IFeature; safecall;
    function Get_FeatureName(NameID: Integer): WideString; safecall;
    function IsNameUsed(Type_: Integer; const Name: WideString): WordBool; safecall;
    function Get_EnableFeatureTreeWindow: WordBool; safecall;
    procedure Set_EnableFeatureTreeWindow(State: WordBool); safecall;
    function HoleWizard2(GenericHoleType: Integer; StandardIndex: Integer; 
                         FastenerTypeIndex: Integer; const SSize: WideString; EndType: Smallint; 
                         Diameter: Double; Depth: Double; Value1: Double; Value2: Double; 
                         Value3: Double; Value4: Double; Value5: Double; Value6: Double; 
                         Value7: Double; Value8: Double; Value9: Double; Value10: Double; 
                         Value11: Double; Value12: Double; const ThreadClass: WideString; 
                         RevDir: WordBool; UseFeatScope: WordBool; UseAutoSelect: WordBool; 
                         AsmFeatScope: WordBool; AutoSelectComponents: WordBool): IFeature; safecall;
    function CreateDefinition(Type_: Integer): IDispatch; safecall;
    function CreateFeature(const FeatureData: IDispatch): IFeature; safecall;
    function CreateFormTool: IFeature; safecall;
    function InsertVariablePitchHelix(Reversed: WordBool; Clockwise: WordBool; Helixdef: Integer; 
                                      Startangle: Double): WordBool; safecall;
    function AddVariablePitchHelixSegment(Height: Double; Diameter: Double; Pitch: Double): WordBool; safecall;
    function EndVariablePitchHelix: IFeature; safecall;
    function GetFeatureCount(TopLevelOnly: WordBool): Integer; safecall;
    function GetFeatures(TopLevelOnly: WordBool): OleVariant; safecall;
    function IGetFeatures(TopLevelOnly: WordBool; Count: Integer): IFeature; safecall;
    function FeatureExtrusionThin2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                   T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                   Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; 
                                   Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                                   OffsetReverse2: WordBool; TranslateSurface1: WordBool; 
                                   TranslateSurface2: WordBool; Merge: WordBool; Thk1: Double; 
                                   Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                                   CapEnds: Integer; AddBends: WordBool; BendRad: Double; 
                                   UseFeatScope: WordBool; UseAutoSelect: WordBool; T0: Integer; 
                                   StartOffset: Double; FlipStartOffset: WordBool): IFeature; safecall;
    function InsertSecurityNote(const Text: WideString; const FeatureOwner: IFeature): INote; safecall;
    function PreSplitBody: OleVariant; safecall;
    function PostSplitBody(BodiesToMark: OleVariant; ConsumeCut: WordBool; Origins: OleVariant; 
                           SavePaths: OleVariant): IFeature; safecall;
    function InsertMacroFeature3(const BaseName: WideString; const ProgId: WideString; 
                                 MacroMethods: OleVariant; ParamNames: OleVariant; 
                                 ParamTypes: OleVariant; ParamValues: OleVariant; 
                                 DimTypes: OleVariant; DimValues: OleVariant; 
                                 EditBodies: OleVariant; IconFiles: OleVariant; Options: Integer): IFeature; safecall;
    function IInsertMacroFeature3(const BaseName: WideString; const ProgId: WideString; 
                                  var MacroMethods: WideString; ParamCount: Integer; 
                                  var ParamNames: WideString; var ParamTypes: Integer; 
                                  var ParamValues: WideString; DimCount: Integer; 
                                  var DimTypes: Integer; var DimCountValues: Double; 
                                  BodyCount: Integer; var EditBodies: IBody2; IconCount: Integer; 
                                  var IconFiles: WideString; Options: Integer): IFeature; safecall;
    function InsertNetBlend(Type_: Smallint; NCurvesDir1: Smallint; NCurvesDir2: Smallint; 
                            HasCenterline: WordBool; TessTolFactor: Double; WantsSolid: WordBool; 
                            MergeBody: WordBool; FeatureScope: WordBool; AutoSelect: WordBool; 
                            Thin: WordBool; Thickness1: Double; Thickness2: Double; 
                            ReverseThickness: WordBool; ThinSolidType: Smallint; 
                            UseSharedThickness: WordBool; CapEnds: WordBool; EndThickness: Double; 
                            AutoFillet: WordBool; FilletRadius: Double; ForceNonRational: WordBool): IFeature; safecall;
    function SetNetBlendCurveData(Direction: Smallint; CurveIndex: Smallint; TangentType: Smallint; 
                                  SignedDraftAngle: Double; SignedTangentLength: Double; 
                                  TangentLengthApplyAll: WordBool): IFeature; safecall;
    function SetNetBlendDirectionData(Direction: Smallint; InfluenceType: Smallint; 
                                      TrimCurves: Smallint; BlendClosed: WordBool; 
                                      SplitSurfaces: WordBool): IFeature; safecall;
    function SetNetBlendCenterlineData(CombineWithDir2: WordBool; TwistType: Smallint; 
                                       PathAlignmentType: Smallint; TwistAngleType: Smallint; 
                                       TwistAngle: Double): IFeature; safecall;
    function ConvertLoftOrSweepToNetBlend: IFeature; safecall;
    function InsertSheetMetalEdgeFlange2(FlangeEdges: OleVariant; SketchFeats: OleVariant; 
                                         BooleanOptions: Integer; FlangeAngle: Double; 
                                         FlangeRadius: Double; BendPosition: Integer; 
                                         FlangeOffsetDist: Double; ReliefType: Integer; 
                                         FlangeReliefRatio: Double; FlangeReliefWidth: Double; 
                                         FlangeReliefDepth: Double; FlangeSharpType: Integer; 
                                         const CustomBendAllowance: ICustomBendAllowance): IFeature; safecall;
    function IInsertSheetMetalEdgeFlange2(EdgeCount: Integer; var FlangeEdges: IEdge; 
                                          SketchFeatCount: Integer; var SketchFeat: IFeature; 
                                          BooleanOptions: Integer; FlangeAngle: Double; 
                                          FlangeRadius: Double; BendPosition: Integer; 
                                          FlangeOffsetDist: Double; ReliefType: Integer; 
                                          FlangeReliefRatio: Double; FlangeReliefWidth: Double; 
                                          FlangeReliefDepth: Double; FlangeSharpType: Integer; 
                                          const CustomBendAllowance: ICustomBendAllowance): IFeature; safecall;
    function InsertFillSurface2(Resolutions: Integer; Options: Integer; 
                                VPatchBoundaries: OleVariant; VCurvatureControlType: OleVariant; 
                                VFaces: OleVariant; VConstraintCurves: OleVariant): IFeature; safecall;
    function InsertFreeform(Continuity0: Smallint; Continuity1: Smallint; Continuity2: Smallint; 
                            Continuity3: Smallint; Symmetric0: WordBool; Symmetric1: WordBool): IFeature; safecall;
    procedure SetFreeformCurveData(Direction: Smallint; CurveParameter: Double; Tangent0X: Double; 
                                   Tangent0Y: Double; Tangent0Z: Double; Tangent1X: Double; 
                                   Tangent1Y: Double; Tangent1Z: Double); safecall;
    procedure SetFreeformPointData(Direction: Smallint; CurveParameter: Double; 
                                   ParameterOnCurve: Double; XOffset: Double; YOffset: Double; 
                                   ZOffset: Double); safecall;
    function DraftXpertChange(Angle: Double; FlipDir: WordBool; EdgeDraft: WordBool; 
                              PropType: Integer; IsStepDraft: WordBool; IsBodyDraft: WordBool): IFeature; safecall;
    function DraftXpertRemove: IFeature; safecall;
    function FilletXpertChange(Options: Integer; R1: Double; Ftyp: Integer; OverflowType: Integer): IFeature; safecall;
    function FilletXpertRemove: IFeature; safecall;
    function InsertRevolvedRefSurface(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                      RevType: Integer): IFeature; safecall;
    function Get_ShowComponentNames: WordBool; safecall;
    procedure Set_ShowComponentNames(ShowCompName: WordBool); safecall;
    function Get_ShowComponentDescriptions: WordBool; safecall;
    procedure Set_ShowComponentDescriptions(ShowCompDescriptions: WordBool); safecall;
    function Get_ShowComponentConfigurationNames: WordBool; safecall;
    procedure Set_ShowComponentConfigurationNames(ShowCompConfigName: WordBool); safecall;
    function Get_ShowComponentConfigurationDescriptions: WordBool; safecall;
    procedure Set_ShowComponentConfigurationDescriptions(ShowConfigDescription: WordBool); safecall;
    function GetPreTrimmedBodies(const TargetSurface: IBody2): OleVariant; safecall;
    function FilletXpertMakeCorner(CornerType: Integer): IFeature; safecall;
    function Get_MoveSizeFeatures: WordBool; safecall;
    procedure Set_MoveSizeFeatures(MoveSizeToggle: WordBool); safecall;
    function InsertMirrorFeature2(BMirrorBody: WordBool; BGeometryPattern: WordBool; 
                                  BMerge: WordBool; BKnit: WordBool; ScopeOptions: Integer): IFeature; safecall;
    function InsertFilletBeadFeature2(Type1: Smallint; Size1: Double; Length1: Double; 
                                      PenetrationType1: Smallint; PenetrationValue1: Double; 
                                      Pitch: Double; Type2: Smallint; Size2: Double; 
                                      Length2: Double; PenetrationType2: Smallint; 
                                      PenetrationValue2: Double; Flag: Integer; EdgeNum1: Integer; 
                                      DeSelEdge1: OleVariant; EdgeNum2: Integer; 
                                      DeSelEdge2: OleVariant): IFeature; safecall;
    function GetFeatureTreeRootItem: ITreeControlItem; safecall;
    property EnableFeatureTree: WordBool read Get_EnableFeatureTree write Set_EnableFeatureTree;
    property ShowFeatureName: WordBool read Get_ShowFeatureName write Set_ShowFeatureName;
    property ShowFeatureDescription: WordBool read Get_ShowFeatureDescription write Set_ShowFeatureDescription;
    property Document: IModelDoc2 read Get_Document;
    property FeatureName[NameID: Integer]: WideString read Get_FeatureName;
    property EnableFeatureTreeWindow: WordBool read Get_EnableFeatureTreeWindow write Set_EnableFeatureTreeWindow;
    property ShowComponentNames: WordBool read Get_ShowComponentNames write Set_ShowComponentNames;
    property ShowComponentDescriptions: WordBool read Get_ShowComponentDescriptions write Set_ShowComponentDescriptions;
    property ShowComponentConfigurationNames: WordBool read Get_ShowComponentConfigurationNames write Set_ShowComponentConfigurationNames;
    property ShowComponentConfigurationDescriptions: WordBool read Get_ShowComponentConfigurationDescriptions write Set_ShowComponentConfigurationDescriptions;
    property MoveSizeFeatures: WordBool read Get_MoveSizeFeatures write Set_MoveSizeFeatures;
  end;

// *********************************************************************//
// DispIntf:  IFeatureManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6B39655E-381B-4BD0-89F5-640D48593F15}
// *********************************************************************//
  IFeatureManagerDisp = dispinterface
    ['{6B39655E-381B-4BD0-89F5-640D48593F15}']
    function CreateCustomBendAllowance: ICustomBendAllowance; dispid 1;
    function InsertSheetMetalBaseFlange(Thickness: Double; ThickenDir: WordBool; Radius: Double; 
                                        ExtrudeDist1: Double; ExtrudeDist2: Double; 
                                        FlipExtruDir: WordBool; EndCondition1: Integer; 
                                        EndCondition2: Integer; DirToUse: Integer; 
                                        const PCBA: ICustomBendAllowance; 
                                        UseDefaultRelief: WordBool; ReliefType: Integer; 
                                        ReliefWidth: Double; ReliefDepth: Double; 
                                        ReliefRatio: Double; UseReliefRatio: WordBool): IFeature; dispid 2;
    function InsertDeleteBody: IFeature; dispid 3;
    function FeatureExtrusion(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                              T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                              Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                              Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                              TranslateSurface1: WordBool; TranslateSurface2: WordBool; 
                              Merge: WordBool; UseFeatScope: WordBool; UseAutoSelect: WordBool): IFeature; dispid 4;
    function FeatureExtrusionThin(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                  T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                  Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                                  Dang2: Double; OffsetReverse1: WordBool; 
                                  OffsetReverse2: WordBool; TranslateSurface1: WordBool; 
                                  TranslateSurface2: WordBool; Merge: WordBool; Thk1: Double; 
                                  Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                                  CapEnds: Integer; AddBends: WordBool; BendRad: Double; 
                                  UseFeatScope: WordBool; UseAutoSelect: WordBool): IFeature; dispid 5;
    function FeatureCut(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                        D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; Ddir1: WordBool; 
                        Ddir2: WordBool; Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                        OffsetReverse2: WordBool; TranslateSurface1: WordBool; 
                        TranslateSurface2: WordBool; NormalCut: WordBool; UseFeatScope: WordBool; 
                        UseAutoSelect: WordBool): IFeature; dispid 6;
    function FeatureCutThin(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; T2: Integer; 
                            D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                            Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                            OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                            TranslateSurface1: WordBool; TranslateSurface2: WordBool; Thk1: Double; 
                            Thk2: Double; EndThk: Double; RevThinDir: Integer; CapEnds: Integer; 
                            AddBends: WordBool; BendRad: Double; UseFeatScope: WordBool; 
                            UseAutoSelect: WordBool): IFeature; dispid 7;
    function FeatureRevolve(Angle: Double; ReverseDir: WordBool; Angle2: Double; RevType: Integer; 
                            Options: Integer; Merge: WordBool; UseFeatScope: WordBool; 
                            UseAutoSel: WordBool): IFeature; dispid 8;
    function FeatureRevolveCut(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                               RevType: Integer; Options: Integer; UseFeatScope: WordBool; 
                               UseAutoSelect: WordBool): IFeature; dispid 9;
    function FeatureRevolveThin(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                RevType: Integer; Thickness1: Double; Thickness2: Double; 
                                ReverseThinDir: Integer; Merge: WordBool; UseFeatScope: WordBool; 
                                UseAutoSelect: WordBool): IFeature; dispid 10;
    function FeatureRevolveThinCut(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                   RevType: Integer; Thickness1: Double; Thickness2: Double; 
                                   ReverseThinDir: Integer; UseFeatScope: WordBool; 
                                   UseAutoSelect: WordBool): IFeature; dispid 11;
    function FeatureBossThicken(Thickness: Double; Direction: Integer; FaceIndex: Integer; 
                                FillVolume: WordBool; Merge: WordBool; UseFeatScope: WordBool; 
                                UseAutoSelect: WordBool): IFeature; dispid 12;
    function FeatureCutThicken(Thickness: Double; Direction: Integer; FaceIndex: Integer; 
                               FillVolume: WordBool; UseFeatScope: WordBool; UseAutoSelect: WordBool): IFeature; dispid 13;
    function InsertProtrusionSwept(Propagate: WordBool; Alignment: WordBool; 
                                   TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                   ForceNonRational: WordBool; StartMatchingType: Smallint; 
                                   EndMatchingType: Smallint; IsThinBody: WordBool; 
                                   Thickness1: Double; Thickness2: Double; ThinType: Smallint; 
                                   Merge: WordBool; UseFeatScope: WordBool; UseAutoSelect: WordBool): IFeature; dispid 14;
    function InsertCutSwept(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                            KeepTangency: WordBool; ForceNonRational: WordBool; 
                            StartMatchingType: Smallint; EndMatchingType: Smallint; 
                            IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                            ThinType: Smallint; UseFeatScope: WordBool; UseAutoSelect: WordBool): IFeature; dispid 15;
    function InsertProtrusionBlend(Closed: WordBool; KeepTangency: WordBool; 
                                   ForceNonRational: WordBool; TessToleranceFactor: Double; 
                                   StartMatchingType: Smallint; EndMatchingType: Smallint; 
                                   StartTangentLength: Double; EndTangentLength: Double; 
                                   StartTangentDir: WordBool; EndTangentDir: WordBool; 
                                   IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                                   ThinType: Smallint; Merge: WordBool; UseFeatScope: WordBool; 
                                   UseAutoSelect: WordBool): IFeature; dispid 16;
    function InsertCutBlend(Closed: WordBool; KeepTangency: WordBool; ForceNonRational: WordBool; 
                            TessToleranceFactor: Double; StartMatchingType: Smallint; 
                            EndMatchingType: Smallint; IsThinBody: WordBool; Thickness1: Double; 
                            Thickness2: Double; ThinType: Smallint; UseFeatScope: WordBool; 
                            UseAutoSelect: WordBool): IFeature; dispid 17;
    function HoleWizard(GenericHoleType: Integer; StandardIndex: Integer; 
                        FastenerTypeIndex: Integer; const SSize: WideString; EndType: Smallint; 
                        Diameter: Double; Depth: Double; Value1: Double; Value2: Double; 
                        Value3: Double; Value4: Double; Value5: Double; Value6: Double; 
                        Value7: Double; Value8: Double; Value9: Double; Value10: Double; 
                        Value11: Double; Value12: Double): IFeature; dispid 18;
    function InsertMacroFeature(const BaseName: WideString; const ProgId: WideString; 
                                MacroMethods: OleVariant; ParamNames: OleVariant; 
                                ParamTypes: OleVariant; ParamValues: OleVariant; 
                                const EditBody: IBody2; Options: Integer): IFeature; dispid 19;
    function IInsertMacroFeature(const BaseName: WideString; const ProgId: WideString; 
                                 var MacroMethods: WideString; ParamCount: Integer; 
                                 var ParamNames: WideString; var ParamTypes: Integer; 
                                 var ParamValues: WideString; const EditBody: IBody2; 
                                 Options: Integer): IFeature; dispid 20;
    property EnableFeatureTree: WordBool dispid 21;
    procedure UpdateFeatureTree; dispid 22;
    function InsertFeatureTreeFolder: WordBool; dispid 23;
    function InsertSheetMetalCornerTrim(InternalCornerFlag: Integer; BreakType: Integer; 
                                        BreakDist: Double; ReliefType: Integer; Param: Double): IFeature; dispid 24;
    property ShowFeatureName: WordBool dispid 25;
    property ShowFeatureDescription: WordBool dispid 26;
    function InsertFillSurface(Resolution: Integer): IFeature; dispid 27;
    function EditRollback(Location: Integer; const Feature: WideString): WordBool; dispid 28;
    function InsertSheetMetalLoftedBend(ThickDirType: Integer; Thickness: Double): IFeature; dispid 29;
    procedure MakeStyledCurves(Tol: Double; Mode: Integer); dispid 30;
    procedure HideBodies; dispid 31;
    procedure ShowBodies; dispid 32;
    function InsertMirrorFeature(BMirrorBody: WordBool; BGeometryPattern: WordBool; 
                                 BMerge: WordBool; BKnit: WordBool): IFeature; dispid 33;
    function InsertMoveCopyBody(TransX: Double; TransY: Double; TransZ: Double; TransDist: Double; 
                                RotPointX: Double; RotPointY: Double; RotPointZ: Double; 
                                RotAngleX: Double; RotAngleY: Double; RotAngleZ: Double; 
                                BCopy: WordBool; NumCopies: Integer): IFeature; dispid 34;
    property Document: IModelDoc2 readonly dispid 35;
    function InsertCombineFeature(OperationType: Integer; const MainBody: IBody2; 
                                  ToolVar: OleVariant): IFeature; dispid 36;
    function IInsertCombineFeature(OperationType: Integer; const MainBody: IBody2; 
                                   ToolsCount: Integer; var ToolsArr: IBody2): IFeature; dispid 37;
    function InsertDwgOrDxfFile(const FileName: WideString): IFeature; dispid 38;
    function FeatureLinearPattern(Num1: Integer; Spacing1: Double; Num2: Integer; Spacing2: Double; 
                                  FlipDir1: WordBool; FlipDir2: WordBool; const DName1: WideString; 
                                  const DName2: WideString): IFeature; dispid 39;
    function FeatureCircularPattern(Num: Integer; Spacing: Double; FlipDir: WordBool; 
                                    const DName: WideString): IFeature; dispid 40;
    function InsertTableDrivenPattern(const FileName: WideString; PointVar: OleVariant; 
                                      UseCentrod: WordBool; GeomPatt: WordBool): IFeature; dispid 41;
    function IInsertTableDrivenPattern(const FileName: WideString; Count: Integer; 
                                       var PointArr: Double; UseCentrod: WordBool; 
                                       GeomPatt: WordBool): IFeature; dispid 42;
    function InsertCosmeticThread(Type_: Smallint; Depth: Double; Length: Double; 
                                  const Note: WideString): WideString; dispid 43;
    function InsertScale(Type_: Smallint; Uniform: WordBool; Xscale: Double; YScale: Double; 
                         ZScale: Double): IFeature; dispid 44;
    function InsertFeatureTreeFolder2(Type_: Integer): IFeature; dispid 45;
    function InsertMoveCopyBody2(TransX: Double; TransY: Double; TransZ: Double; TransDist: Double; 
                                 RotPointX: Double; RotPointY: Double; RotPointZ: Double; 
                                 RotAngleX: Double; RotAngleY: Double; RotAngleZ: Double; 
                                 BCopy: WordBool; NumCopies: Integer): IFeature; dispid 46;
    function FeatureSketchDrivenPattern(UseCentroid: WordBool; BGeomPatt: WordBool): IFeature; dispid 47;
    function InsertDerivedPattern: IFeature; dispid 48;
    function InsertGussetFeature(Depth: Double; DirType: Smallint; LocType: Smallint; 
                                 BIsProfile: WordBool; ProfileD1: Double; ProfileD2: Double; 
                                 ProfileD3: Double; ProfileAngle: Double; ProfileD4: Double; 
                                 BOffset: WordBool; DProfileOffset: Double; CrvIndex: Integer; 
                                 BReverseDir: WordBool; BReverseFace: WordBool; BUseLenDim: WordBool): IFeature; dispid 49;
    function InsertSubWeldFolder: IFeature; dispid 50;
    function InsertMoldPartingLine(BFlipDir: WordBool): IFeature; dispid 51;
    function InsertMoldShutOffSurface: IFeature; dispid 52;
    function InsertWeldmentFeature: IFeature; dispid 53;
    function InsertMultiFaceDraft(Angle: Double; FlipDir: WordBool; EdgeDraft: WordBool; 
                                  PropType: Integer; IsStepDraft: WordBool; IsBodyDraft: WordBool): IFeature; dispid 54;
    function InsertRuledSurfaceFromEdge(Type_: Integer; Length: Double; FlipPullDir: WordBool; 
                                        FlipDir: WordBool; TrimAndSew: WordBool; Angle: Double; 
                                        CoordInput: WordBool; X: Double; Y: Double; Z: Double): IFeature; dispid 55;
    function MakeStyledCurves2(Tolerance: Double; Mode: Integer): WordBool; dispid 56;
    function InsertSaveOutBodies: WordBool; dispid 57;
    function InsertMoldCoreCavitySolids(Dist1: Double; Dist2: Double; Setback: WordBool; 
                                        Angle: Double): IFeature; dispid 58;
    function InsertMacroFeature2(const BaseName: WideString; const ProgId: WideString; 
                                 MacroMethods: OleVariant; ParamNames: OleVariant; 
                                 ParamTypes: OleVariant; ParamValues: OleVariant; 
                                 DimTypes: OleVariant; DimValues: OleVariant; 
                                 const EditBody: IBody2; IconFiles: OleVariant; Options: Integer): IFeature; dispid 59;
    function IInsertMacroFeature2(const BaseName: WideString; const ProgId: WideString; 
                                  var MacroMethods: WideString; ParamCount: Integer; 
                                  var ParamNames: WideString; var ParamTypes: Integer; 
                                  var ParamValues: WideString; DimCount: Integer; 
                                  var DimTypes: Integer; var DimCountValues: Double; 
                                  const EditBody: IBody2; IconCount: Integer; 
                                  var IconFiles: WideString; Options: Integer): IFeature; dispid 60;
    procedure MoldUndercutDetect(ColUndercut: Integer; ColBase: Integer; BCoordInput: WordBool; 
                                 Dx: Double; Dy: Double; Dz: Double); dispid 61;
    function PreTrimSurface(BMutualTrimIn: WordBool; BSplitSystemIn: WordBool; 
                            BSplitLinearIn: WordBool; BRemovePickedIn: WordBool): WordBool; dispid 62;
    function PostTrimSurface(BSewSurfaceIn: WordBool): IFeature; dispid 63;
    function InsertStructuralWeldment(const Path: WideString; EndCond: Integer; Angle: Double): IFeature; dispid 64;
    function InsertWeldmentTrimFeature(EndCond: Integer): IFeature; dispid 65;
    function InsertWrapFeature(Type_: Integer; Thickness: Double; ReverseDir: WordBool): IFeature; dispid 66;
    function InsertFilletBeadFeature(Type1: Smallint; Size1: Double; Length1: Double; 
                                     Pitch: Double; Type2: Smallint; Size2: Double; 
                                     Length2: Double; Flag: Integer; EdgeNum1: Integer; 
                                     DeSelEdge1: OleVariant; EdgeNum2: Integer; 
                                     DeSelEdge2: OleVariant): IFeature; dispid 67;
    function InsertEndCapFeature(Depth: Double; BIsGivenOffset: WordBool; BIsChamfer: WordBool; 
                                 OffsetValue: Double; WallThicknessRatio: Double; 
                                 ChamferValue: Double): IFeature; dispid 68;
    function InsertReferencePoint(NRefPointType: Integer; NRefPointAlongCurveType: Integer; 
                                  DDistance_or_Percent: Double; NumberOfRefPoints: Integer): OleVariant; dispid 69;
    function IInsertReferencePoint(NRefPointType: Integer; NRefPointAlongCurveType: Integer; 
                                   DDistance_or_Percent: Double; NumberOfRefPoints: Integer): IFeature; dispid 70;
    function InsertProtrusionSwept2(Propagate: WordBool; Alignment: WordBool; 
                                    TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                    ForceNonRational: WordBool; StartMatchingType: Smallint; 
                                    EndMatchingType: Smallint; IsThinBody: WordBool; 
                                    Thickness1: Double; Thickness2: Double; ThinType: Smallint; 
                                    PathAlign: Smallint; Merge: WordBool; UseFeatScope: WordBool; 
                                    UseAutoSelect: WordBool): IFeature; dispid 71;
    function InsertCutSwept2(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                             KeepTangency: WordBool; ForceNonRational: WordBool; 
                             StartMatchingType: Smallint; EndMatchingType: Smallint; 
                             IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                             ThinType: Smallint; PathAlign: Smallint; UseFeatScope: WordBool; 
                             UseAutoSelect: WordBool): IFeature; dispid 72;
    function InsertSweepSurface(Propagate: WordBool; TwistCtrlOption: Smallint; 
                                KeepTangency: WordBool; ForceNonRational: WordBool; 
                                StartMatchingType: Smallint; EndMatchingType: Smallint; 
                                PathAlign: Smallint): IFeature; dispid 73;
    function SimpleHole(Dia: Double; Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                        T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; Dchk2: WordBool; 
                        Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; Dang2: Double; 
                        OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                        TranslateSurface1: WordBool; TranslateSurface2: WordBool; 
                        UseFeatScope: WordBool; UseAutoSelect: WordBool): IFeature; dispid 74;
    function InsertMoldPartingSurface(Radiate: Integer; ReverseAlignment: WordBool; 
                                      ReverseOffset: WordBool; OffsetDistance: Double; 
                                      Angle: Double; Smooth: Integer; SmoothDistance: Double; 
                                      Knit: WordBool): IFeature; dispid 75;
    function InsertRuledSurfaceFromEdge2(Type_: Integer; Length: Double; FlipPullDir: WordBool; 
                                         FlipDir: WordBool; TrimAndSew: WordBool; Angle: Double; 
                                         CoordInput: WordBool; X: Double; Y: Double; Z: Double; 
                                         BConnectSurface: WordBool): IFeature; dispid 76;
    function InsertWeldmentCutList: IFeature; dispid 77;
    function InsertUntrimSurface(FaceUntrimType: Integer; EdgeUntrimType: Integer; 
                                 Distance: Double; BMerge: WordBool): IFeature; dispid 78;
    function InsertCosmeticThread2(Type_: Smallint; Depth: Double; Length: Double; 
                                   const Note: WideString): IFeature; dispid 79;
    function InsertStructuralWeldment2(const Path: WideString; EndCond: Integer; Angle: Double; 
                                       Merge: WordBool): IFeature; dispid 80;
    function InsertSheetMetalMiterFlange(UseDefaultRadius: WordBool; GlobalRadius: Double; 
                                         RipGap: Double; UseDefaultRelief: WordBool; 
                                         UseReliefRatio: WordBool; ReliefRatio: Double; 
                                         ReliefWidth: Double; ReliefDepth: Double; 
                                         ReliefType: Integer; TrimSideBends: WordBool; 
                                         FlangePos: Integer; OffsetDist1: Double; 
                                         OffsetDist2: Double; const PCBA: ICustomBendAllowance): IFeature; dispid 81;
    function InsertSubFolder: IFeature; dispid 82;
    function InsertFeatureChamfer(Options: Integer; ChamferType: Integer; Width: Double; 
                                  Angle: Double; OtherDist: Double; VertexChamDist1: Double; 
                                  VertexChamDist2: Double; VertexChamDist3: Double): IFeature; dispid 83;
    function MoveToFolder(const MoveToFeat: WideString; const MoveFromFeat: WideString; 
                          IsFolder: WordBool): WordBool; dispid 84;
    function InsertMateReference(const BstrMateReferenceName: WideString; 
                                 const PrimaryReferenceEntity: IEntity; 
                                 PrimaryReferenceType: Integer; PrimaryReferenceAlignment: Integer; 
                                 const SecondaryReferenceEntity: IEntity; 
                                 SecondaryReferenceType: Integer; 
                                 SecondaryReferenceAlignment: Integer; 
                                 const TertiaryReferenceEntity: IEntity; 
                                 TertiaryReferenceType: Integer; TertiaryReferenceAlignment: Integer): IFeature; dispid 85;
    function FeatureFillet(Options: Integer; R1: Double; Ftyp: Integer; OverflowType: Integer; 
                           Radii: OleVariant; SetBackDistances: OleVariant; 
                           PointRadiusArray: OleVariant): IDispatch; dispid 86;
    function IFeatureFillet(Options: Integer; R1: Double; Ftyp: Integer; OverflowType: Integer; 
                            NRadii: Integer; var Radii: Double; SetbackDistCount: Integer; 
                            var SetBackDistances: Double; PointCount: Integer; 
                            var PointRadiusArray: Double): IFeature; dispid 87;
    function InsertProtrusionSwept3(Propagate: WordBool; Alignment: WordBool; 
                                    TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                                    BAdvancedSmoothing: WordBool; StartMatchingType: Smallint; 
                                    EndMatchingType: Smallint; IsThinBody: WordBool; 
                                    Thickness1: Double; Thickness2: Double; ThinType: Smallint; 
                                    PathAlign: Smallint; Merge: WordBool; UseFeatScope: WordBool; 
                                    UseAutoSelect: WordBool; TwistAngle: Double; 
                                    BMergeSmoothFaces: WordBool): IFeature; dispid 88;
    function InsertCutSwept3(Propagate: WordBool; Alignment: WordBool; TwistCtrlOption: Smallint; 
                             KeepTangency: WordBool; BAdvancedSmoothing: WordBool; 
                             StartMatchingType: Smallint; EndMatchingType: Smallint; 
                             IsThinBody: WordBool; Thickness1: Double; Thickness2: Double; 
                             ThinType: Smallint; PathAlign: Smallint; UseFeatScope: WordBool; 
                             UseAutoSelect: WordBool; TwistAngle: Double; 
                             BMergeSmoothFaces: WordBool): IFeature; dispid 89;
    function InsertSweepSurface2(Propagate: WordBool; TwistCtrlOption: Smallint; 
                                 KeepTangency: WordBool; BAdvancedSmoothing: WordBool; 
                                 StartMatchingType: Smallint; EndMatchingType: Smallint; 
                                 PathAlign: Smallint; UseFeatScope: WordBool; 
                                 UseAutoSelect: WordBool; TwistAngle: Double; 
                                 BMergeSmoothFaces: WordBool): IFeature; dispid 90;
    function InsertSheetMetalHem(Type_: Integer; Position: Integer; Reverse: WordBool; 
                                 DLength: Double; DGap: Double; DAngle: Double; DRad: Double; 
                                 DMiterGap: Double; const PCBA: ICustomBendAllowance): IFeature; dispid 91;
    function InsertSheetMetalEdgeFlange(const FlangeEdge: IEdge; const SketchFeat: IFeature; 
                                        BooleanOptions: Integer; DAngle: Double; DRadius: Double; 
                                        BendPosition: Integer; DOffsetDist: Double; 
                                        ReliefType: Integer; DReliefRatio: Double; 
                                        DReliefWidth: Double; DReliefDepth: Double; 
                                        FlangeSharpType: Integer; const PCBA: ICustomBendAllowance): IFeature; dispid 92;
    function InsertSheetMetal3dBend(Angle: Double; BUseDefaultRadius: WordBool; Radius: Double; 
                                    FlipDir: WordBool; BendPos: Smallint; 
                                    const PCBA: ICustomBendAllowance): IFeature; dispid 93;
    function InsertEdgeMerge(Angular_tolerance: Double; Edge_length_tolerance: Double): IFeature; dispid 94;
    procedure MoldUndercutDetect2(ColUndercut1: Integer; ColUndercut2: Integer; 
                                  ColOccluded: Integer; ColStraddle: Integer; ColBase: Integer; 
                                  BCoordInput: WordBool; Dx: Double; Dy: Double; Dz: Double); dispid 95;
    function InsertIndent(Thickness: Double; Clearance: Double; Exclude: WordBool; 
                          ClrDir: WordBool; Cut: WordBool; CutDir: WordBool): IFeature; dispid 96;
    function FeatureLinearPattern2(Num1: Integer; Spacing1: Double; Num2: Integer; 
                                   Spacing2: Double; FlipDir1: WordBool; FlipDir2: WordBool; 
                                   const DName1: WideString; const DName2: WideString; 
                                   GeometryPattern: WordBool): IFeature; dispid 97;
    function FeatureCircularPattern2(Num: Integer; Spacing: Double; FlipDir: WordBool; 
                                     const DName: WideString; GeometryPattern: WordBool): IFeature; dispid 98;
    function InsertSplitLineIntersect(CompleteOption: Integer): IFeature; dispid 99;
    function InsertFlexFeature(RotX: Double; RotY: Double; RotZ: Double; TanX: Double; 
                               TanY: Double; TanZ: Double; RadX: Double; RadY: Double; 
                               RadZ: Double; Angle: Double; PivotX: Double; PivotY: Double; 
                               PivotZ: Double; Type_: Integer; LeftTrim: Double; RightTrim: Double; 
                               HardEdges: WordBool): IFeature; dispid 100;
    function FeatureExtrusion2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                               T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                               Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                               Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                               TranslateSurface1: WordBool; TranslateSurface2: WordBool; 
                               Merge: WordBool; UseFeatScope: WordBool; UseAutoSelect: WordBool; 
                               T0: Integer; StartOffset: Double; FlipStartOffset: WordBool): IFeature; dispid 101;
    function InsertMoveFace(MoveType: Integer; ReverseDir: WordBool; Angle: Double; Distance: Double): IFeature; dispid 102;
    property FeatureName[NameID: Integer]: WideString readonly dispid 103;
    function IsNameUsed(Type_: Integer; const Name: WideString): WordBool; dispid 104;
    property EnableFeatureTreeWindow: WordBool dispid 105;
    function HoleWizard2(GenericHoleType: Integer; StandardIndex: Integer; 
                         FastenerTypeIndex: Integer; const SSize: WideString; EndType: Smallint; 
                         Diameter: Double; Depth: Double; Value1: Double; Value2: Double; 
                         Value3: Double; Value4: Double; Value5: Double; Value6: Double; 
                         Value7: Double; Value8: Double; Value9: Double; Value10: Double; 
                         Value11: Double; Value12: Double; const ThreadClass: WideString; 
                         RevDir: WordBool; UseFeatScope: WordBool; UseAutoSelect: WordBool; 
                         AsmFeatScope: WordBool; AutoSelectComponents: WordBool): IFeature; dispid 106;
    function CreateDefinition(Type_: Integer): IDispatch; dispid 107;
    function CreateFeature(const FeatureData: IDispatch): IFeature; dispid 108;
    function CreateFormTool: IFeature; dispid 109;
    function InsertVariablePitchHelix(Reversed: WordBool; Clockwise: WordBool; Helixdef: Integer; 
                                      Startangle: Double): WordBool; dispid 110;
    function AddVariablePitchHelixSegment(Height: Double; Diameter: Double; Pitch: Double): WordBool; dispid 111;
    function EndVariablePitchHelix: IFeature; dispid 112;
    function GetFeatureCount(TopLevelOnly: WordBool): Integer; dispid 113;
    function GetFeatures(TopLevelOnly: WordBool): OleVariant; dispid 114;
    function IGetFeatures(TopLevelOnly: WordBool; Count: Integer): IFeature; dispid 115;
    function FeatureExtrusionThin2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                   T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                   Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; 
                                   Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                                   OffsetReverse2: WordBool; TranslateSurface1: WordBool; 
                                   TranslateSurface2: WordBool; Merge: WordBool; Thk1: Double; 
                                   Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                                   CapEnds: Integer; AddBends: WordBool; BendRad: Double; 
                                   UseFeatScope: WordBool; UseAutoSelect: WordBool; T0: Integer; 
                                   StartOffset: Double; FlipStartOffset: WordBool): IFeature; dispid 116;
    function InsertSecurityNote(const Text: WideString; const FeatureOwner: IFeature): INote; dispid 117;
    function PreSplitBody: OleVariant; dispid 118;
    function PostSplitBody(BodiesToMark: OleVariant; ConsumeCut: WordBool; Origins: OleVariant; 
                           SavePaths: OleVariant): IFeature; dispid 119;
    function InsertMacroFeature3(const BaseName: WideString; const ProgId: WideString; 
                                 MacroMethods: OleVariant; ParamNames: OleVariant; 
                                 ParamTypes: OleVariant; ParamValues: OleVariant; 
                                 DimTypes: OleVariant; DimValues: OleVariant; 
                                 EditBodies: OleVariant; IconFiles: OleVariant; Options: Integer): IFeature; dispid 120;
    function IInsertMacroFeature3(const BaseName: WideString; const ProgId: WideString; 
                                  var MacroMethods: WideString; ParamCount: Integer; 
                                  var ParamNames: WideString; var ParamTypes: Integer; 
                                  var ParamValues: WideString; DimCount: Integer; 
                                  var DimTypes: Integer; var DimCountValues: Double; 
                                  BodyCount: Integer; var EditBodies: IBody2; IconCount: Integer; 
                                  var IconFiles: WideString; Options: Integer): IFeature; dispid 121;
    function InsertNetBlend(Type_: Smallint; NCurvesDir1: Smallint; NCurvesDir2: Smallint; 
                            HasCenterline: WordBool; TessTolFactor: Double; WantsSolid: WordBool; 
                            MergeBody: WordBool; FeatureScope: WordBool; AutoSelect: WordBool; 
                            Thin: WordBool; Thickness1: Double; Thickness2: Double; 
                            ReverseThickness: WordBool; ThinSolidType: Smallint; 
                            UseSharedThickness: WordBool; CapEnds: WordBool; EndThickness: Double; 
                            AutoFillet: WordBool; FilletRadius: Double; ForceNonRational: WordBool): IFeature; dispid 122;
    function SetNetBlendCurveData(Direction: Smallint; CurveIndex: Smallint; TangentType: Smallint; 
                                  SignedDraftAngle: Double; SignedTangentLength: Double; 
                                  TangentLengthApplyAll: WordBool): IFeature; dispid 123;
    function SetNetBlendDirectionData(Direction: Smallint; InfluenceType: Smallint; 
                                      TrimCurves: Smallint; BlendClosed: WordBool; 
                                      SplitSurfaces: WordBool): IFeature; dispid 124;
    function SetNetBlendCenterlineData(CombineWithDir2: WordBool; TwistType: Smallint; 
                                       PathAlignmentType: Smallint; TwistAngleType: Smallint; 
                                       TwistAngle: Double): IFeature; dispid 125;
    function ConvertLoftOrSweepToNetBlend: IFeature; dispid 126;
    function InsertSheetMetalEdgeFlange2(FlangeEdges: OleVariant; SketchFeats: OleVariant; 
                                         BooleanOptions: Integer; FlangeAngle: Double; 
                                         FlangeRadius: Double; BendPosition: Integer; 
                                         FlangeOffsetDist: Double; ReliefType: Integer; 
                                         FlangeReliefRatio: Double; FlangeReliefWidth: Double; 
                                         FlangeReliefDepth: Double; FlangeSharpType: Integer; 
                                         const CustomBendAllowance: ICustomBendAllowance): IFeature; dispid 127;
    function IInsertSheetMetalEdgeFlange2(EdgeCount: Integer; var FlangeEdges: IEdge; 
                                          SketchFeatCount: Integer; var SketchFeat: IFeature; 
                                          BooleanOptions: Integer; FlangeAngle: Double; 
                                          FlangeRadius: Double; BendPosition: Integer; 
                                          FlangeOffsetDist: Double; ReliefType: Integer; 
                                          FlangeReliefRatio: Double; FlangeReliefWidth: Double; 
                                          FlangeReliefDepth: Double; FlangeSharpType: Integer; 
                                          const CustomBendAllowance: ICustomBendAllowance): IFeature; dispid 128;
    function InsertFillSurface2(Resolutions: Integer; Options: Integer; 
                                VPatchBoundaries: OleVariant; VCurvatureControlType: OleVariant; 
                                VFaces: OleVariant; VConstraintCurves: OleVariant): IFeature; dispid 129;
    function InsertFreeform(Continuity0: Smallint; Continuity1: Smallint; Continuity2: Smallint; 
                            Continuity3: Smallint; Symmetric0: WordBool; Symmetric1: WordBool): IFeature; dispid 130;
    procedure SetFreeformCurveData(Direction: Smallint; CurveParameter: Double; Tangent0X: Double; 
                                   Tangent0Y: Double; Tangent0Z: Double; Tangent1X: Double; 
                                   Tangent1Y: Double; Tangent1Z: Double); dispid 131;
    procedure SetFreeformPointData(Direction: Smallint; CurveParameter: Double; 
                                   ParameterOnCurve: Double; XOffset: Double; YOffset: Double; 
                                   ZOffset: Double); dispid 132;
    function DraftXpertChange(Angle: Double; FlipDir: WordBool; EdgeDraft: WordBool; 
                              PropType: Integer; IsStepDraft: WordBool; IsBodyDraft: WordBool): IFeature; dispid 133;
    function DraftXpertRemove: IFeature; dispid 134;
    function FilletXpertChange(Options: Integer; R1: Double; Ftyp: Integer; OverflowType: Integer): IFeature; dispid 135;
    function FilletXpertRemove: IFeature; dispid 136;
    function InsertRevolvedRefSurface(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                      RevType: Integer): IFeature; dispid 137;
    property ShowComponentNames: WordBool dispid 138;
    property ShowComponentDescriptions: WordBool dispid 139;
    property ShowComponentConfigurationNames: WordBool dispid 140;
    property ShowComponentConfigurationDescriptions: WordBool dispid 141;
    function GetPreTrimmedBodies(const TargetSurface: IBody2): OleVariant; dispid 142;
    function FilletXpertMakeCorner(CornerType: Integer): IFeature; dispid 143;
    property MoveSizeFeatures: WordBool dispid 144;
    function InsertMirrorFeature2(BMirrorBody: WordBool; BGeometryPattern: WordBool; 
                                  BMerge: WordBool; BKnit: WordBool; ScopeOptions: Integer): IFeature; dispid 145;
    function InsertFilletBeadFeature2(Type1: Smallint; Size1: Double; Length1: Double; 
                                      PenetrationType1: Smallint; PenetrationValue1: Double; 
                                      Pitch: Double; Type2: Smallint; Size2: Double; 
                                      Length2: Double; PenetrationType2: Smallint; 
                                      PenetrationValue2: Double; Flag: Integer; EdgeNum1: Integer; 
                                      DeSelEdge1: OleVariant; EdgeNum2: Integer; 
                                      DeSelEdge2: OleVariant): IFeature; dispid 146;
    function GetFeatureTreeRootItem: ITreeControlItem; dispid 147;
  end;

// *********************************************************************//
// Interface: ICustomBendAllowance
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {442B6462-0350-4F5C-A168-3F753F6CA792}
// *********************************************************************//
  ICustomBendAllowance = interface(IDispatch)
    ['{442B6462-0350-4F5C-A168-3F753F6CA792}']
    function Get_type_: Integer; safecall;
    procedure Set_type_(Type_: Integer); safecall;
    function Get_BendTableFile: WideString; safecall;
    procedure Set_BendTableFile(const BendTableFile: WideString); safecall;
    function Get_KFactor: Double; safecall;
    procedure Set_KFactor(KFactor: Double); safecall;
    function Get_BendAllowance: Double; safecall;
    procedure Set_BendAllowance(BendAllowance: Double); safecall;
    function Get_BendDeduction: Double; safecall;
    procedure Set_BendDeduction(BendDeduction: Double); safecall;
    property type_: Integer read Get_type_ write Set_type_;
    property BendTableFile: WideString read Get_BendTableFile write Set_BendTableFile;
    property KFactor: Double read Get_KFactor write Set_KFactor;
    property BendAllowance: Double read Get_BendAllowance write Set_BendAllowance;
    property BendDeduction: Double read Get_BendDeduction write Set_BendDeduction;
  end;

// *********************************************************************//
// DispIntf:  ICustomBendAllowanceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {442B6462-0350-4F5C-A168-3F753F6CA792}
// *********************************************************************//
  ICustomBendAllowanceDisp = dispinterface
    ['{442B6462-0350-4F5C-A168-3F753F6CA792}']
    property type_: Integer dispid 1;
    property BendTableFile: WideString dispid 2;
    property KFactor: Double dispid 3;
    property BendAllowance: Double dispid 4;
    property BendDeduction: Double dispid 5;
  end;

// *********************************************************************//
// Interface: ITreeControlItem
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3AEA5179-14D5-407C-B669-48E9209043D2}
// *********************************************************************//
  ITreeControlItem = interface(IDispatch)
    ['{3AEA5179-14D5-407C-B669-48E9209043D2}']
    function GetRoot: ITreeControlItem; safecall;
    function GetParent: ITreeControlItem; safecall;
    function GetNext: ITreeControlItem; safecall;
    function GetPrevious: ITreeControlItem; safecall;
    function GetFirstChild: ITreeControlItem; safecall;
    function Get_Text: WideString; safecall;
    function Get_ObjectType: Integer; safecall;
    function Get_Object_: IDispatch; safecall;
    function Get_IsRoot: WordBool; safecall;
    property Text: WideString read Get_Text;
    property ObjectType: Integer read Get_ObjectType;
    property Object_: IDispatch read Get_Object_;
    property IsRoot: WordBool read Get_IsRoot;
  end;

// *********************************************************************//
// DispIntf:  ITreeControlItemDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3AEA5179-14D5-407C-B669-48E9209043D2}
// *********************************************************************//
  ITreeControlItemDisp = dispinterface
    ['{3AEA5179-14D5-407C-B669-48E9209043D2}']
    function GetRoot: ITreeControlItem; dispid 1;
    function GetParent: ITreeControlItem; dispid 2;
    function GetNext: ITreeControlItem; dispid 3;
    function GetPrevious: ITreeControlItem; dispid 4;
    function GetFirstChild: ITreeControlItem; dispid 5;
    property Text: WideString readonly dispid 6;
    property ObjectType: Integer readonly dispid 7;
    property Object_: IDispatch readonly dispid 8;
    property IsRoot: WordBool readonly dispid 9;
  end;

// *********************************************************************//
// Interface: IModelViewManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1AA249FF-B758-440A-8B88-26512F385BF3}
// *********************************************************************//
  IModelViewManager = interface(IDispatch)
    ['{1AA249FF-B758-440A-8B88-26512F385BF3}']
    function AddControl(const Name: WideString; const ControlName: WideString; 
                        const BstrLicKey: WideString): IUnknown; safecall;
    function GetControl(const Name: WideString): IDispatch; safecall;
    function IGetControl(const Name: WideString): IUnknown; safecall;
    function DeleteControlTab(const Name: WideString): WordBool; safecall;
    function ActivateControlTab(const Name: WideString): WordBool; safecall;
    function ActivateModelTab: WordBool; safecall;
    function IsControlTabActive(const Name: WideString): WordBool; safecall;
    function IsModelTabActive: WordBool; safecall;
    function CreateFeatureMgrView(const PPicture: IDispatch; const ToolTip: WideString; 
                                  WhichPane: Integer): IFeatMgrView; safecall;
    function CreateFeatureMgrControl(const PPicture: IDispatch; const Class_: WideString; 
                                     const LicKey: WideString; const ToolTip: WideString; 
                                     WhichPane: Integer): IFeatMgrView; safecall;
    function Get_Document: IModelDoc2; safecall;
    function CreateFeatureMgrView2(const BitMapFile: WideString; const ToolTip: WideString; 
                                   WhichPane: Integer): IFeatMgrView; safecall;
    function CreateFeatureMgrControl2(const BitMapFile: WideString; const Class_: WideString; 
                                      const LicKey: WideString; const ToolTip: WideString; 
                                      WhichPane: Integer): IFeatMgrView; safecall;
    function GetFeatureMgrViewHWnd(FeatMgrViewPane: Integer): Integer; safecall;
    function CreateManipulator(Type_: Integer; const PHandler: IDispatch): IManipulator; safecall;
    function AddControl2(const Name: WideString; const ControlName: WideString; 
                         const BstrLicKey: WideString): IUnknown; safecall;
    function CreateFeatureMgrControl3(const BitMapFile: WideString; const Class_: WideString; 
                                      const LicKey: WideString; const ToolTip: WideString; 
                                      WhichPane: Integer): IFeatMgrView; safecall;
    function Get_LinkedViews: WordBool; safecall;
    procedure Set_LinkedViews(Linked: WordBool); safecall;
    function GetFeatureMgrViewHWndx64(FeatMgrViewPane: Integer): Int64; safecall;
    function AddControl3(const Name: WideString; const ControlName: WideString; 
                         const BstrLicKey: WideString; SplitWindow: WordBool): IUnknown; safecall;
    function CreateSectionView(const SectionData: ISectionViewData): WordBool; safecall;
    function RemoveSectionView: WordBool; safecall;
    function CreateSectionViewData: ISectionViewData; safecall;
    function GetSectionViewData(const ViewName: WideString): ISectionViewData; safecall;
    property Document: IModelDoc2 read Get_Document;
    property LinkedViews: WordBool read Get_LinkedViews write Set_LinkedViews;
  end;

// *********************************************************************//
// DispIntf:  IModelViewManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1AA249FF-B758-440A-8B88-26512F385BF3}
// *********************************************************************//
  IModelViewManagerDisp = dispinterface
    ['{1AA249FF-B758-440A-8B88-26512F385BF3}']
    function AddControl(const Name: WideString; const ControlName: WideString; 
                        const BstrLicKey: WideString): IUnknown; dispid 1;
    function GetControl(const Name: WideString): IDispatch; dispid 2;
    function IGetControl(const Name: WideString): IUnknown; dispid 3;
    function DeleteControlTab(const Name: WideString): WordBool; dispid 4;
    function ActivateControlTab(const Name: WideString): WordBool; dispid 5;
    function ActivateModelTab: WordBool; dispid 6;
    function IsControlTabActive(const Name: WideString): WordBool; dispid 7;
    function IsModelTabActive: WordBool; dispid 8;
    function CreateFeatureMgrView(const PPicture: IDispatch; const ToolTip: WideString; 
                                  WhichPane: Integer): IFeatMgrView; dispid 9;
    function CreateFeatureMgrControl(const PPicture: IDispatch; const Class_: WideString; 
                                     const LicKey: WideString; const ToolTip: WideString; 
                                     WhichPane: Integer): IFeatMgrView; dispid 10;
    property Document: IModelDoc2 readonly dispid 11;
    function CreateFeatureMgrView2(const BitMapFile: WideString; const ToolTip: WideString; 
                                   WhichPane: Integer): IFeatMgrView; dispid 12;
    function CreateFeatureMgrControl2(const BitMapFile: WideString; const Class_: WideString; 
                                      const LicKey: WideString; const ToolTip: WideString; 
                                      WhichPane: Integer): IFeatMgrView; dispid 13;
    function GetFeatureMgrViewHWnd(FeatMgrViewPane: Integer): Integer; dispid 14;
    function CreateManipulator(Type_: Integer; const PHandler: IDispatch): IManipulator; dispid 15;
    function AddControl2(const Name: WideString; const ControlName: WideString; 
                         const BstrLicKey: WideString): IUnknown; dispid 16;
    function CreateFeatureMgrControl3(const BitMapFile: WideString; const Class_: WideString; 
                                      const LicKey: WideString; const ToolTip: WideString; 
                                      WhichPane: Integer): IFeatMgrView; dispid 17;
    property LinkedViews: WordBool dispid 18;
    function GetFeatureMgrViewHWndx64(FeatMgrViewPane: Integer): {??Int64}OleVariant; dispid 19;
    function AddControl3(const Name: WideString; const ControlName: WideString; 
                         const BstrLicKey: WideString; SplitWindow: WordBool): IUnknown; dispid 20;
    function CreateSectionView(const SectionData: ISectionViewData): WordBool; dispid 21;
    function RemoveSectionView: WordBool; dispid 22;
    function CreateSectionViewData: ISectionViewData; dispid 23;
    function GetSectionViewData(const ViewName: WideString): ISectionViewData; dispid 24;
  end;

// *********************************************************************//
// Interface: IManipulator
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C73D0A8D-B615-4F79-BF31-9EC49016A861}
// *********************************************************************//
  IManipulator = interface(IDispatch)
    ['{C73D0A8D-B615-4F79-BF31-9EC49016A861}']
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(BVisible: WordBool); safecall;
    procedure Show(const PModelDoc: IDispatch); safecall;
    procedure Remove; safecall;
    function GetSpecificManipulator: IDispatch; safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const Name: WideString); safecall;
    function Get_Selectable: WordBool; safecall;
    procedure Set_Selectable(BSelectable: WordBool); safecall;
    function Select(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Name: WideString read Get_Name write Set_Name;
    property Selectable: WordBool read Get_Selectable write Set_Selectable;
  end;

// *********************************************************************//
// DispIntf:  IManipulatorDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C73D0A8D-B615-4F79-BF31-9EC49016A861}
// *********************************************************************//
  IManipulatorDisp = dispinterface
    ['{C73D0A8D-B615-4F79-BF31-9EC49016A861}']
    property Visible: WordBool dispid 131073;
    procedure Show(const PModelDoc: IDispatch); dispid 131074;
    procedure Remove; dispid 131075;
    function GetSpecificManipulator: IDispatch; dispid 131076;
    property Name: WideString dispid 131077;
    property Selectable: WordBool dispid 131078;
    function Select(Append: WordBool; const Data: ISelectData): WordBool; dispid 131079;
  end;

// *********************************************************************//
// Interface: ISectionViewData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F73FA7FD-C4E7-44AC-82FA-3E03A11DDB21}
// *********************************************************************//
  ISectionViewData = interface(IDispatch)
    ['{F73FA7FD-C4E7-44AC-82FA-3E03A11DDB21}']
    function Get_FirstPlane: IDispatch; safecall;
    procedure Set_FirstPlane(const Plane: IDispatch); safecall;
    function Get_SecondPlane: IDispatch; safecall;
    procedure Set_SecondPlane(const Plane: IDispatch); safecall;
    function Get_ThirdPlane: IDispatch; safecall;
    procedure Set_ThirdPlane(const Plane: IDispatch); safecall;
    function Get_FirstOffset: Double; safecall;
    procedure Set_FirstOffset(Offset: Double); safecall;
    function Get_SecondOffset: Double; safecall;
    procedure Set_SecondOffset(Offset: Double); safecall;
    function Get_ThirdOffset: Double; safecall;
    procedure Set_ThirdOffset(Offset: Double); safecall;
    function Get_FirstRotationX: Double; safecall;
    procedure Set_FirstRotationX(RotationX: Double); safecall;
    function Get_SecondRotationX: Double; safecall;
    procedure Set_SecondRotationX(RotationX: Double); safecall;
    function Get_ThirdRotationX: Double; safecall;
    procedure Set_ThirdRotationX(RotationX: Double); safecall;
    function Get_FirstRotationY: Double; safecall;
    procedure Set_FirstRotationY(RotationY: Double); safecall;
    function Get_SecondRotationY: Double; safecall;
    procedure Set_SecondRotationY(RotationY: Double); safecall;
    function Get_ThirdRotationY: Double; safecall;
    procedure Set_ThirdRotationY(RotationY: Double); safecall;
    function Get_FirstColor: Integer; safecall;
    procedure Set_FirstColor(Color: Integer); safecall;
    function Get_SecondColor: Integer; safecall;
    procedure Set_SecondColor(Color: Integer); safecall;
    function Get_ThirdColor: Integer; safecall;
    procedure Set_ThirdColor(Color: Integer); safecall;
    function Get_FirstReverseDirection: WordBool; safecall;
    procedure Set_FirstReverseDirection(Reverse: WordBool); safecall;
    function Get_SecondReverseDirection: WordBool; safecall;
    procedure Set_SecondReverseDirection(Reverse: WordBool); safecall;
    function Get_ThirdReverseDirection: WordBool; safecall;
    procedure Set_ThirdReverseDirection(Reverse: WordBool); safecall;
    function Get_ShowSectionCap: WordBool; safecall;
    procedure Set_ShowSectionCap(ShowCap: WordBool); safecall;
    procedure GetFirstPlaneParameters(out PlaneCenter: IMathPoint; out PlaneVector: IMathVector); safecall;
    procedure GetSecondPlaneParameters(out PlaneCenter: IMathPoint; out PlaneVector: IMathVector); safecall;
    procedure GetThirdPlaneParameters(out PlaneCenter: IMathPoint; out PlaneVector: IMathVector); safecall;
    property FirstPlane: IDispatch read Get_FirstPlane write Set_FirstPlane;
    property SecondPlane: IDispatch read Get_SecondPlane write Set_SecondPlane;
    property ThirdPlane: IDispatch read Get_ThirdPlane write Set_ThirdPlane;
    property FirstOffset: Double read Get_FirstOffset write Set_FirstOffset;
    property SecondOffset: Double read Get_SecondOffset write Set_SecondOffset;
    property ThirdOffset: Double read Get_ThirdOffset write Set_ThirdOffset;
    property FirstRotationX: Double read Get_FirstRotationX write Set_FirstRotationX;
    property SecondRotationX: Double read Get_SecondRotationX write Set_SecondRotationX;
    property ThirdRotationX: Double read Get_ThirdRotationX write Set_ThirdRotationX;
    property FirstRotationY: Double read Get_FirstRotationY write Set_FirstRotationY;
    property SecondRotationY: Double read Get_SecondRotationY write Set_SecondRotationY;
    property ThirdRotationY: Double read Get_ThirdRotationY write Set_ThirdRotationY;
    property FirstColor: Integer read Get_FirstColor write Set_FirstColor;
    property SecondColor: Integer read Get_SecondColor write Set_SecondColor;
    property ThirdColor: Integer read Get_ThirdColor write Set_ThirdColor;
    property FirstReverseDirection: WordBool read Get_FirstReverseDirection write Set_FirstReverseDirection;
    property SecondReverseDirection: WordBool read Get_SecondReverseDirection write Set_SecondReverseDirection;
    property ThirdReverseDirection: WordBool read Get_ThirdReverseDirection write Set_ThirdReverseDirection;
    property ShowSectionCap: WordBool read Get_ShowSectionCap write Set_ShowSectionCap;
  end;

// *********************************************************************//
// DispIntf:  ISectionViewDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F73FA7FD-C4E7-44AC-82FA-3E03A11DDB21}
// *********************************************************************//
  ISectionViewDataDisp = dispinterface
    ['{F73FA7FD-C4E7-44AC-82FA-3E03A11DDB21}']
    property FirstPlane: IDispatch dispid 1;
    property SecondPlane: IDispatch dispid 2;
    property ThirdPlane: IDispatch dispid 3;
    property FirstOffset: Double dispid 4;
    property SecondOffset: Double dispid 5;
    property ThirdOffset: Double dispid 6;
    property FirstRotationX: Double dispid 7;
    property SecondRotationX: Double dispid 8;
    property ThirdRotationX: Double dispid 9;
    property FirstRotationY: Double dispid 10;
    property SecondRotationY: Double dispid 11;
    property ThirdRotationY: Double dispid 12;
    property FirstColor: Integer dispid 13;
    property SecondColor: Integer dispid 14;
    property ThirdColor: Integer dispid 15;
    property FirstReverseDirection: WordBool dispid 16;
    property SecondReverseDirection: WordBool dispid 17;
    property ThirdReverseDirection: WordBool dispid 18;
    property ShowSectionCap: WordBool dispid 19;
    procedure GetFirstPlaneParameters(out PlaneCenter: IMathPoint; out PlaneVector: IMathVector); dispid 20;
    procedure GetSecondPlaneParameters(out PlaneCenter: IMathPoint; out PlaneVector: IMathVector); dispid 21;
    procedure GetThirdPlaneParameters(out PlaneCenter: IMathPoint; out PlaneVector: IMathVector); dispid 22;
  end;

// *********************************************************************//
// Interface: IModelDocExtension
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {99F4D4AF-F268-4EE1-8C55-041F7BECF879}
// *********************************************************************//
  IModelDocExtension = interface(IDispatch)
    ['{99F4D4AF-F268-4EE1-8C55-041F7BECF879}']
    function Get_Document: IModelDoc2; safecall;
    function GetMassProperties(Accuracy: Integer; var Status: Integer): OleVariant; safecall;
    function IGetMassProperties(Accuracy: Integer; var Status: Integer): Double; safecall;
    function InsertDwgOrDxfFile(const FileName: WideString): WordBool; safecall;
    procedure PrintOut(FromPage: Integer; ToPage: Integer; Copies: Integer; Collate: WordBool; 
                       const Printer: WideString; const PrintFileName: WideString); safecall;
    function SelectByID(const Name: WideString; const Type_: WideString; X: Double; Y: Double; 
                        Z: Double; Append: WordBool; Mark: Integer; const Callout: ICallout): WordBool; safecall;
    function IGet3rdPartyStorageStore(const SubStorageName: WideString; IsStoring: WordBool): IUnknown; safecall;
    function IRelease3rdPartyStorageStore(const SubStorageName: WideString): WordBool; safecall;
    function Get_UsePageSetup: Integer; safecall;
    procedure Set_UsePageSetup(WhichOne: Integer); safecall;
    function Get_AppPageSetup: IPageSetup; safecall;
    function GetSectionProperties(Sections: OleVariant): OleVariant; safecall;
    function IGetSectionProperties(Count: Integer; var Sections: IUnknown): Double; safecall;
    function CreateMassProperty: IMassProperty; safecall;
    function GetCoordinateSystemTransformByName(const NameIn: WideString): IMathTransform; safecall;
    procedure SetMaterialPropertyValues(Material_property_values: OleVariant; Config_opt: Integer; 
                                        Config_names: OleVariant); safecall;
    procedure ISetMaterialPropertyValues(var Material_values: Double; Config_opt: Integer; 
                                         Config_count: Integer; var Config_names: WideString); safecall;
    function GetMaterialPropertyValues(Config_opt: Integer; Config_names: OleVariant): OleVariant; safecall;
    function IGetMaterialPropertyValues(Config_opt: Integer; Config_count: Integer; 
                                        var Config_names: WideString): Double; safecall;
    procedure PrintOut2(PageArray: OleVariant; Copies: Integer; Collate: WordBool; 
                        const Printer: WideString; const PrintFileName: WideString); safecall;
    procedure IPrintOut2(ArraySize: Integer; var PageArray: Integer; Copies: Integer; 
                         Collate: WordBool; const Printer: WideString; 
                         const PrintFileName: WideString); safecall;
    function GetPersistReference(const DispObj: IDispatch): OleVariant; safecall;
    function GetPersistReferenceCount(const DispObj: IDispatch): Integer; safecall;
    function IGetPersistReference(const DipsObj: IDispatch; Count: Integer): Byte; safecall;
    function GetObjectByPersistReference(PersistId: OleVariant): IDispatch; safecall;
    function IGetObjectByPersistReference(Count: Integer; var PersistId: Byte): IDispatch; safecall;
    function GetStream(StreamType: Integer; out ReadOnly: WordBool): IUnknown; safecall;
    function ReleaseStream(StreamType: Integer): WordBool; safecall;
    function GetLastFeatureAdded: IFeature; safecall;
    function IMultiSelect(Count: Integer; var Objects: IUnknown; AppendFlag: WordBool; 
                          const Data: ISelectData): Integer; safecall;
    function MultiSelect(Objects: OleVariant; AppendFlag: WordBool; const Data: IDispatch): Integer; safecall;
    function GetParameterValue(const DimName: WideString; Reserved: Integer): Double; safecall;
    function SetParameterValue(const DimName: WideString; Value: Double; Reserved: Integer): Integer; safecall;
    procedure MoveOrCopy(Copy: WordBool; NumCopies: Integer; KeepRelations: WordBool; 
                         BaseX: Double; BaseY: Double; BaseZ: Double; DestX: Double; DestY: Double; 
                         DestZ: Double); safecall;
    procedure RotateOrCopy(Copy: WordBool; NumCopies: Integer; KeepRelations: WordBool; 
                           BaseX: Double; BaseY: Double; BaseZ: Double; DestX: Double; 
                           DestY: Double; DestZ: Double; Angle: Double); safecall;
    procedure ScaleOrCopy(Copy: WordBool; NumCopies: Integer; BaseX: Double; BaseY: Double; 
                          BaseZ: Double; Scale: Double); safecall;
    function ApplyTexture(Scale: Integer; Angle: Double; const TextureFilename: WideString; 
                          BlendColor: WordBool): WordBool; safecall;
    function RemoveTexture: WordBool; safecall;
    function RemoveMaterialProperty(Config_opt: Integer; Config_names: OleVariant): WordBool; safecall;
    function IRemoveMaterialProperty(Config_opt: Integer; Config_count: Integer; 
                                     var Config_names: WideString): WordBool; safecall;
    procedure RemoveModelColorizer(const PInterface: IDispatch); safecall;
    procedure InstallModelColorizer(const PInterface: IDispatch); safecall;
    function HasDesignTable: WordBool; safecall;
    procedure ListExternalFileReferences(out ModelPathName: OleVariant; 
                                         out ComponentPathName: OleVariant; 
                                         out Feature: OleVariant; out DataType: OleVariant; 
                                         out Status: OleVariant; out RefEntity: OleVariant; 
                                         out FeatCom: OleVariant; out ConfigOption: Integer; 
                                         out ConfigName: WideString); safecall;
    function ListExternalFileReferencesCount: Integer; safecall;
    procedure IListExternalFileReferences(NumRefs: Integer; out ModelPathName: WideString; 
                                          out CompPathName: WideString; out Feature: WideString; 
                                          out DataType: WideString; out Status: Integer; 
                                          out RefEntity: WideString; out FeatComp: WideString; 
                                          out ConfigOption: Integer; out ConfigName: WideString); safecall;
    procedure UpdateExternalFileReferences(ConfigOption: Integer; const ConfigName: WideString; 
                                           UpdateStatus: Integer); safecall;
    function Get_NeedsRebuild: WordBool; safecall;
    function InsertSurfaceFinishSymbol3(SymType: Integer; LeaderType: Integer; LocX: Double; 
                                        LocY: Double; LocZ: Double; LaySymbol: Integer; 
                                        ArrowType: Integer; const MachAllowance: WideString; 
                                        const OtherVals: WideString; const ProdMethod: WideString; 
                                        const SampleLen: WideString; 
                                        const MaxRoughness: WideString; 
                                        const MinRoughness: WideString; 
                                        const RoughnessSpacing: WideString): ISFSymbol; safecall;
    function InsertDatumTargetSymbol2(const Datum1: WideString; const Datum2: WideString; 
                                      const Datum3: WideString; AreaStyle: Smallint; 
                                      AreaOutside: WordBool; Value1: Double; Value2: Double; 
                                      const ValueStr1: WideString; const ValueStr2: WideString; 
                                      ArrowsSmart: WordBool; ArrowStyle: Smallint; 
                                      LeaderLineStyle: Smallint; LeaderBent: WordBool; 
                                      ShowArea: WordBool; ShowSymbol: WordBool): IDatumTargetSym; safecall;
    function GetTexture(const Config_name: WideString): ITexture; safecall;
    function SetTexture(const Config_name: WideString; const TextureIn: ITexture): WordBool; safecall;
    function RemoveTexture2(const Config_name: WideString): WordBool; safecall;
    function CreateTexture(const MatName: WideString; Scale: Double; Angle: Double; Blend: WordBool): ITexture; safecall;
    function GetObjectByPersistReference2(PersistId: OleVariant; out ErrorCode: Integer): IDispatch; safecall;
    function IGetObjectByPersistReference2(Count: Integer; var PersistId: Byte; 
                                           out ErrorCode: Integer): IDispatch; safecall;
    function GetAnnotationCount: Integer; safecall;
    function GetAnnotations: OleVariant; safecall;
    function IGetAnnotations(NumAnnotations: Integer): IAnnotation; safecall;
    function Get_ViewDisplayRealView: WordBool; safecall;
    procedure Set_ViewDisplayRealView(VbRealView: WordBool); safecall;
    function InsertAnnotationFavorite(const BstrFileName: WideString; X: Double; Y: Double; 
                                      Z: Double): IAnnotation; safecall;
    function InsertAttachment(const FileName: WideString; Linked: WordBool): WordBool; safecall;
    function DeleteAttachment(const FileName: WideString): WordBool; safecall;
    function GetAttachmentCount: Integer; safecall;
    function GetAttachments(out LinkedVar: OleVariant): OleVariant; safecall;
    function IGetAttachments(NumAttachments: Integer; out LinkedArr: WordBool): WideString; safecall;
    function GetSectionProperties2(Sections: OleVariant): OleVariant; safecall;
    function IGetSectionProperties2(Count: Integer; var Sections: IUnknown): Double; safecall;
    function SelectByID2(const Name: WideString; const Type_: WideString; X: Double; Y: Double; 
                         Z: Double; Append: WordBool; Mark: Integer; const Callout: ICallout; 
                         SelectOption: Integer): WordBool; safecall;
    function CreateOLEObject(Aspect: Integer; Position: OleVariant; Buffer: OleVariant; 
                             out ErrorCode: Integer): ISwOLEObject; safecall;
    function ICreateOLEObject(Aspect: Integer; var Position: Double; ByteCount: Integer; 
                              var Buffer: Byte; out ErrorCode: Integer): ISwOLEObject; safecall;
    function GetOLEObjectCount(Options: Integer): Integer; safecall;
    function GetOLEObjects(Options: Integer): OleVariant; safecall;
    procedure IGetOLEObjects(Options: Integer; OleObjectCount: Integer; 
                             out LpOleObjects: ISwOLEObject); safecall;
    function InsertCamera: ICamera; safecall;
    function GetCameraCount: Integer; safecall;
    function GetCameraById(CameraId: Integer): ICamera; safecall;
    function InsertObjectFromFile(const FilePath: WideString; CreateLink: WordBool; 
                                  Aspect: Integer; XPos: Double; YPos: Double; ZPos: Double): ISwOLEObject; safecall;
    function AddComment(const Text: WideString): IComment; safecall;
    function DeleteSelection2(DeleteOptions: Integer): WordBool; safecall;
    procedure SetSceneBkgDIBx64(L_dib: Int64); safecall;
    function GetSceneBkgDIBx64: Int64; safecall;
    function Get_ClearLastActiveConfigModel: WordBool; safecall;
    procedure Set_ClearLastActiveConfigModel(Ret: WordBool); safecall;
    function Get_CustomPropertyManager(const ConfigName: WideString): ICustomPropertyManager; safecall;
    function RunCommand(CommandID: Integer; const NewTitle: WideString): WordBool; safecall;
    procedure StartRecordingUndoObject; safecall;
    function FinishRecordingUndoObject(const UndoObjectName: WideString): WordBool; safecall;
    procedure SetVisibleBox(const UpperLeft: IMathPoint; const LowerRight: IMathPoint); safecall;
    function GetVisibleBox(out UpperLeft: IMathPoint; out LowerRight: IMathPoint): WordBool; safecall;
    procedure RemoveVisibleBox; safecall;
    function GetCameraDefinition: ICamera; safecall;
    function AddOrdinateDimension(DimType: Integer; LocX: Double; LocY: Double; LocZ: Double): Integer; safecall;
    function GetUserPreferenceDoubleValueRange(UserPref: Integer; var Value: Double; 
                                               var MinValue: Double; var MaxValue: Double): Integer; safecall;
    function SaveAs(const Name: WideString; Version: Integer; Options: Integer; 
                    const ExportData: IDispatch; var Errors: Integer; var Warnings: Integer): WordBool; safecall;
    function GetCorrespondingEntity(const Entity: IDispatch): IDispatch; safecall;
    function GetCorresponding(const InputObject: IDispatch): IDispatch; safecall;
    function GetPrint3DDialog: IPrint3DDialog; safecall;
    procedure DeleteFeatureMgrViewx64(var AppView: Int64); safecall;
    function GetPersistReference3(const DispObj: IDispatch): OleVariant; safecall;
    function GetPersistReferenceCount3(const DispObj: IDispatch): Integer; safecall;
    function IGetPersistReference3(const DipsObj: IDispatch; Count: Integer): Byte; safecall;
    function GetObjectByPersistReference3(PersistId: OleVariant; out ErrorCode: Integer): IDispatch; safecall;
    function IGetObjectByPersistReference3(Count: Integer; var PersistId: Byte; 
                                           out ErrorCode: Integer): IDispatch; safecall;
    function SetApiUndoObject(const PHandler: IDispatch; const DisplayName: WideString): WordBool; safecall;
    function AddOrUpdateSearchData(const AppName: WideString; const AppKeyword: WideString; 
                                   const AppValue: WideString): WordBool; safecall;
    function InsertAnnotationView(AnnotationViewingDirection: Integer; 
                                  const DirectionReference: IDispatch; FlipDirection: WordBool; 
                                  const HorizontalDirectionReference: IDispatch; 
                                  AngleMadeWithHorizontal: Integer): IAnnotationView; safecall;
    function Get_AnnotationViewCount: Integer; safecall;
    function Get_AnnotationViews: OleVariant; safecall;
    function IGetAnnotationViews(AnnotationViewCount: Integer): IAnnotationView; safecall;
    function CreateMeasure: IMeasure; safecall;
    procedure BreakAllExternalFileReferences2(InsertFeatures: WordBool); safecall;
    function InsertScene(const SceneDefinitionFile: WideString): WordBool; safecall;
    function GetModelView(WindowID: Integer; Row: Integer; Col: Integer): IModelView; safecall;
    function GetDecalsCount: Integer; safecall;
    function GetDecals: OleVariant; safecall;
    function IGetDecals(Count: Integer): IDecal; safecall;
    function CreateDecal: IDecal; safecall;
    function AddDecal(const PDecal: IDecal; out DecalID: Integer): WordBool; safecall;
    function DeleteDecal(DecalID: Integer; BReassignIdsAndInvalidate: WordBool): WordBool; safecall;
    function HideDecal(DecalID: Integer; Hide: WordBool): WordBool; safecall;
    function DeleteAllDecals: WordBool; safecall;
    function MoveDecal(DecalID: Integer; MoveUp: WordBool): WordBool; safecall;
    function ReverseDecalsOrder(DecalID: Integer): WordBool; safecall;
    function GetRenderMaterialsCount: Integer; safecall;
    function GetRenderMaterials: OleVariant; safecall;
    function IGetRenderMaterials(Count: Integer): IRenderMaterial; safecall;
    function CreateRenderMaterial(const PathName: WideString): IRenderMaterial; safecall;
    function AddRenderMaterial(const PRenderMaterial: IRenderMaterial; out PwMaterialId: Integer): WordBool; safecall;
    function DeleteRenderMaterial(PwMaterialId: Integer; BReassignIdsAndInvalidate: WordBool): WordBool; safecall;
    procedure UpdateRenderMaterialsInSceneGraph(AddToSG: WordBool); safecall;
    procedure GetAdvancedSpotLightProperties(const Name: WideString; out Exponent: Double; 
                                             out AttenuationConst: Double; 
                                             out AttenuationLinear: Double; 
                                             out AttenuationQuad: Double); safecall;
    procedure SetAdvancedSpotLightProperties(const Name: WideString; Exponent: Double; 
                                             AttenuationConst: Double; AttenuationLinear: Double; 
                                             AttenuationQuad: Double); safecall;
    function GetDecal(ID: Integer; const Configuration: WideString): IDecal; safecall;
    function GetMaterial(ID: Integer; const Configuration: WideString): IRenderMaterial; safecall;
    procedure SetKeepLightInRenderScene(ID: Integer; Val: WordBool); safecall;
    function GetKeepLightInRenderScene(ID: Integer): WordBool; safecall;
    function AddDefaultRenderMaterial(const PRenderMaterial: IRenderMaterial; 
                                      out PwMaterialId: Integer): WordBool; safecall;
    procedure SetLightEnabledInRender(ID: Integer; Val: WordBool); safecall;
    function GetLightEnabledInRender(ID: Integer): WordBool; safecall;
    procedure DeleteScene; safecall;
    function GetMotionStudyManager: IDispatch; safecall;
    function GetSearchDataCount(const AppName: WideString): Integer; safecall;
    function GetSearchData(const AppName: WideString; var AppNames: OleVariant; 
                           var NodeNames: OleVariant; var NodeValues: OleVariant): Integer; safecall;
    procedure IGetSearchData(const AppName: WideString; Count: Integer; var AppNames: WideString; 
                             var NodeNames: WideString; var NodeValues: WideString); safecall;
    function DeleteSearchData(const AppName: WideString): WordBool; safecall;
    function IsVirtualComponent: WideString; safecall;
    function IsVirtualComponent2: OleVariant; safecall;
    function IsVirtualComponent3(out PathChain: OleVariant; out TitleChain: OleVariant): WordBool; safecall;
    function ChangeSketchPlane(Config_opt: Integer; Config_names: OleVariant): WordBool; safecall;
    function IChangeSketchPlane(Config_opt: Integer; Config_count: Integer; 
                                var Config_names: WideString): WordBool; safecall;
    property Document: IModelDoc2 read Get_Document;
    property UsePageSetup: Integer read Get_UsePageSetup write Set_UsePageSetup;
    property AppPageSetup: IPageSetup read Get_AppPageSetup;
    property NeedsRebuild: WordBool read Get_NeedsRebuild;
    property ViewDisplayRealView: WordBool read Get_ViewDisplayRealView write Set_ViewDisplayRealView;
    property ClearLastActiveConfigModel: WordBool read Get_ClearLastActiveConfigModel write Set_ClearLastActiveConfigModel;
    property CustomPropertyManager[const ConfigName: WideString]: ICustomPropertyManager read Get_CustomPropertyManager;
    property AnnotationViewCount: Integer read Get_AnnotationViewCount;
    property AnnotationViews: OleVariant read Get_AnnotationViews;
  end;

// *********************************************************************//
// DispIntf:  IModelDocExtensionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {99F4D4AF-F268-4EE1-8C55-041F7BECF879}
// *********************************************************************//
  IModelDocExtensionDisp = dispinterface
    ['{99F4D4AF-F268-4EE1-8C55-041F7BECF879}']
    property Document: IModelDoc2 readonly dispid 1;
    function GetMassProperties(Accuracy: Integer; var Status: Integer): OleVariant; dispid 2;
    function IGetMassProperties(Accuracy: Integer; var Status: Integer): Double; dispid 3;
    function InsertDwgOrDxfFile(const FileName: WideString): WordBool; dispid 4;
    procedure PrintOut(FromPage: Integer; ToPage: Integer; Copies: Integer; Collate: WordBool; 
                       const Printer: WideString; const PrintFileName: WideString); dispid 5;
    function SelectByID(const Name: WideString; const Type_: WideString; X: Double; Y: Double; 
                        Z: Double; Append: WordBool; Mark: Integer; const Callout: ICallout): WordBool; dispid 6;
    function IGet3rdPartyStorageStore(const SubStorageName: WideString; IsStoring: WordBool): IUnknown; dispid 7;
    function IRelease3rdPartyStorageStore(const SubStorageName: WideString): WordBool; dispid 8;
    property UsePageSetup: Integer dispid 9;
    property AppPageSetup: IPageSetup readonly dispid 10;
    function GetSectionProperties(Sections: OleVariant): OleVariant; dispid 11;
    function IGetSectionProperties(Count: Integer; var Sections: IUnknown): Double; dispid 12;
    function CreateMassProperty: IMassProperty; dispid 13;
    function GetCoordinateSystemTransformByName(const NameIn: WideString): IMathTransform; dispid 14;
    procedure SetMaterialPropertyValues(Material_property_values: OleVariant; Config_opt: Integer; 
                                        Config_names: OleVariant); dispid 15;
    procedure ISetMaterialPropertyValues(var Material_values: Double; Config_opt: Integer; 
                                         Config_count: Integer; var Config_names: WideString); dispid 16;
    function GetMaterialPropertyValues(Config_opt: Integer; Config_names: OleVariant): OleVariant; dispid 17;
    function IGetMaterialPropertyValues(Config_opt: Integer; Config_count: Integer; 
                                        var Config_names: WideString): Double; dispid 18;
    procedure PrintOut2(PageArray: OleVariant; Copies: Integer; Collate: WordBool; 
                        const Printer: WideString; const PrintFileName: WideString); dispid 19;
    procedure IPrintOut2(ArraySize: Integer; var PageArray: Integer; Copies: Integer; 
                         Collate: WordBool; const Printer: WideString; 
                         const PrintFileName: WideString); dispid 20;
    function GetPersistReference(const DispObj: IDispatch): OleVariant; dispid 21;
    function GetPersistReferenceCount(const DispObj: IDispatch): Integer; dispid 22;
    function IGetPersistReference(const DipsObj: IDispatch; Count: Integer): Byte; dispid 23;
    function GetObjectByPersistReference(PersistId: OleVariant): IDispatch; dispid 24;
    function IGetObjectByPersistReference(Count: Integer; var PersistId: Byte): IDispatch; dispid 25;
    function GetStream(StreamType: Integer; out ReadOnly: WordBool): IUnknown; dispid 26;
    function ReleaseStream(StreamType: Integer): WordBool; dispid 27;
    function GetLastFeatureAdded: IFeature; dispid 28;
    function IMultiSelect(Count: Integer; var Objects: IUnknown; AppendFlag: WordBool; 
                          const Data: ISelectData): Integer; dispid 29;
    function MultiSelect(Objects: OleVariant; AppendFlag: WordBool; const Data: IDispatch): Integer; dispid 30;
    function GetParameterValue(const DimName: WideString; Reserved: Integer): Double; dispid 31;
    function SetParameterValue(const DimName: WideString; Value: Double; Reserved: Integer): Integer; dispid 32;
    procedure MoveOrCopy(Copy: WordBool; NumCopies: Integer; KeepRelations: WordBool; 
                         BaseX: Double; BaseY: Double; BaseZ: Double; DestX: Double; DestY: Double; 
                         DestZ: Double); dispid 33;
    procedure RotateOrCopy(Copy: WordBool; NumCopies: Integer; KeepRelations: WordBool; 
                           BaseX: Double; BaseY: Double; BaseZ: Double; DestX: Double; 
                           DestY: Double; DestZ: Double; Angle: Double); dispid 34;
    procedure ScaleOrCopy(Copy: WordBool; NumCopies: Integer; BaseX: Double; BaseY: Double; 
                          BaseZ: Double; Scale: Double); dispid 35;
    function ApplyTexture(Scale: Integer; Angle: Double; const TextureFilename: WideString; 
                          BlendColor: WordBool): WordBool; dispid 36;
    function RemoveTexture: WordBool; dispid 37;
    function RemoveMaterialProperty(Config_opt: Integer; Config_names: OleVariant): WordBool; dispid 38;
    function IRemoveMaterialProperty(Config_opt: Integer; Config_count: Integer; 
                                     var Config_names: WideString): WordBool; dispid 39;
    procedure RemoveModelColorizer(const PInterface: IDispatch); dispid 40;
    procedure InstallModelColorizer(const PInterface: IDispatch); dispid 41;
    function HasDesignTable: WordBool; dispid 42;
    procedure ListExternalFileReferences(out ModelPathName: OleVariant; 
                                         out ComponentPathName: OleVariant; 
                                         out Feature: OleVariant; out DataType: OleVariant; 
                                         out Status: OleVariant; out RefEntity: OleVariant; 
                                         out FeatCom: OleVariant; out ConfigOption: Integer; 
                                         out ConfigName: WideString); dispid 43;
    function ListExternalFileReferencesCount: Integer; dispid 44;
    procedure IListExternalFileReferences(NumRefs: Integer; out ModelPathName: WideString; 
                                          out CompPathName: WideString; out Feature: WideString; 
                                          out DataType: WideString; out Status: Integer; 
                                          out RefEntity: WideString; out FeatComp: WideString; 
                                          out ConfigOption: Integer; out ConfigName: WideString); dispid 45;
    procedure UpdateExternalFileReferences(ConfigOption: Integer; const ConfigName: WideString; 
                                           UpdateStatus: Integer); dispid 46;
    property NeedsRebuild: WordBool readonly dispid 47;
    function InsertSurfaceFinishSymbol3(SymType: Integer; LeaderType: Integer; LocX: Double; 
                                        LocY: Double; LocZ: Double; LaySymbol: Integer; 
                                        ArrowType: Integer; const MachAllowance: WideString; 
                                        const OtherVals: WideString; const ProdMethod: WideString; 
                                        const SampleLen: WideString; 
                                        const MaxRoughness: WideString; 
                                        const MinRoughness: WideString; 
                                        const RoughnessSpacing: WideString): ISFSymbol; dispid 48;
    function InsertDatumTargetSymbol2(const Datum1: WideString; const Datum2: WideString; 
                                      const Datum3: WideString; AreaStyle: Smallint; 
                                      AreaOutside: WordBool; Value1: Double; Value2: Double; 
                                      const ValueStr1: WideString; const ValueStr2: WideString; 
                                      ArrowsSmart: WordBool; ArrowStyle: Smallint; 
                                      LeaderLineStyle: Smallint; LeaderBent: WordBool; 
                                      ShowArea: WordBool; ShowSymbol: WordBool): IDatumTargetSym; dispid 49;
    function GetTexture(const Config_name: WideString): ITexture; dispid 50;
    function SetTexture(const Config_name: WideString; const TextureIn: ITexture): WordBool; dispid 51;
    function RemoveTexture2(const Config_name: WideString): WordBool; dispid 52;
    function CreateTexture(const MatName: WideString; Scale: Double; Angle: Double; Blend: WordBool): ITexture; dispid 53;
    function GetObjectByPersistReference2(PersistId: OleVariant; out ErrorCode: Integer): IDispatch; dispid 54;
    function IGetObjectByPersistReference2(Count: Integer; var PersistId: Byte; 
                                           out ErrorCode: Integer): IDispatch; dispid 55;
    function GetAnnotationCount: Integer; dispid 56;
    function GetAnnotations: OleVariant; dispid 57;
    function IGetAnnotations(NumAnnotations: Integer): IAnnotation; dispid 58;
    property ViewDisplayRealView: WordBool dispid 59;
    function InsertAnnotationFavorite(const BstrFileName: WideString; X: Double; Y: Double; 
                                      Z: Double): IAnnotation; dispid 60;
    function InsertAttachment(const FileName: WideString; Linked: WordBool): WordBool; dispid 61;
    function DeleteAttachment(const FileName: WideString): WordBool; dispid 62;
    function GetAttachmentCount: Integer; dispid 63;
    function GetAttachments(out LinkedVar: OleVariant): OleVariant; dispid 64;
    function IGetAttachments(NumAttachments: Integer; out LinkedArr: WordBool): WideString; dispid 65;
    function GetSectionProperties2(Sections: OleVariant): OleVariant; dispid 66;
    function IGetSectionProperties2(Count: Integer; var Sections: IUnknown): Double; dispid 67;
    function SelectByID2(const Name: WideString; const Type_: WideString; X: Double; Y: Double; 
                         Z: Double; Append: WordBool; Mark: Integer; const Callout: ICallout; 
                         SelectOption: Integer): WordBool; dispid 68;
    function CreateOLEObject(Aspect: Integer; Position: OleVariant; Buffer: OleVariant; 
                             out ErrorCode: Integer): ISwOLEObject; dispid 69;
    function ICreateOLEObject(Aspect: Integer; var Position: Double; ByteCount: Integer; 
                              var Buffer: Byte; out ErrorCode: Integer): ISwOLEObject; dispid 70;
    function GetOLEObjectCount(Options: Integer): Integer; dispid 71;
    function GetOLEObjects(Options: Integer): OleVariant; dispid 72;
    procedure IGetOLEObjects(Options: Integer; OleObjectCount: Integer; 
                             out LpOleObjects: ISwOLEObject); dispid 73;
    function InsertCamera: ICamera; dispid 74;
    function GetCameraCount: Integer; dispid 75;
    function GetCameraById(CameraId: Integer): ICamera; dispid 76;
    function InsertObjectFromFile(const FilePath: WideString; CreateLink: WordBool; 
                                  Aspect: Integer; XPos: Double; YPos: Double; ZPos: Double): ISwOLEObject; dispid 77;
    function AddComment(const Text: WideString): IComment; dispid 78;
    function DeleteSelection2(DeleteOptions: Integer): WordBool; dispid 79;
    procedure SetSceneBkgDIBx64(L_dib: {??Int64}OleVariant); dispid 80;
    function GetSceneBkgDIBx64: {??Int64}OleVariant; dispid 81;
    property ClearLastActiveConfigModel: WordBool dispid 82;
    property CustomPropertyManager[const ConfigName: WideString]: ICustomPropertyManager readonly dispid 83;
    function RunCommand(CommandID: Integer; const NewTitle: WideString): WordBool; dispid 84;
    procedure StartRecordingUndoObject; dispid 85;
    function FinishRecordingUndoObject(const UndoObjectName: WideString): WordBool; dispid 86;
    procedure SetVisibleBox(const UpperLeft: IMathPoint; const LowerRight: IMathPoint); dispid 87;
    function GetVisibleBox(out UpperLeft: IMathPoint; out LowerRight: IMathPoint): WordBool; dispid 88;
    procedure RemoveVisibleBox; dispid 89;
    function GetCameraDefinition: ICamera; dispid 90;
    function AddOrdinateDimension(DimType: Integer; LocX: Double; LocY: Double; LocZ: Double): Integer; dispid 91;
    function GetUserPreferenceDoubleValueRange(UserPref: Integer; var Value: Double; 
                                               var MinValue: Double; var MaxValue: Double): Integer; dispid 92;
    function SaveAs(const Name: WideString; Version: Integer; Options: Integer; 
                    const ExportData: IDispatch; var Errors: Integer; var Warnings: Integer): WordBool; dispid 93;
    function GetCorrespondingEntity(const Entity: IDispatch): IDispatch; dispid 94;
    function GetCorresponding(const InputObject: IDispatch): IDispatch; dispid 95;
    function GetPrint3DDialog: IPrint3DDialog; dispid 96;
    procedure DeleteFeatureMgrViewx64(var AppView: {??Int64}OleVariant); dispid 97;
    function GetPersistReference3(const DispObj: IDispatch): OleVariant; dispid 98;
    function GetPersistReferenceCount3(const DispObj: IDispatch): Integer; dispid 99;
    function IGetPersistReference3(const DipsObj: IDispatch; Count: Integer): Byte; dispid 100;
    function GetObjectByPersistReference3(PersistId: OleVariant; out ErrorCode: Integer): IDispatch; dispid 101;
    function IGetObjectByPersistReference3(Count: Integer; var PersistId: Byte; 
                                           out ErrorCode: Integer): IDispatch; dispid 102;
    function SetApiUndoObject(const PHandler: IDispatch; const DisplayName: WideString): WordBool; dispid 103;
    function AddOrUpdateSearchData(const AppName: WideString; const AppKeyword: WideString; 
                                   const AppValue: WideString): WordBool; dispid 104;
    function InsertAnnotationView(AnnotationViewingDirection: Integer; 
                                  const DirectionReference: IDispatch; FlipDirection: WordBool; 
                                  const HorizontalDirectionReference: IDispatch; 
                                  AngleMadeWithHorizontal: Integer): IAnnotationView; dispid 105;
    property AnnotationViewCount: Integer readonly dispid 106;
    property AnnotationViews: OleVariant readonly dispid 107;
    function IGetAnnotationViews(AnnotationViewCount: Integer): IAnnotationView; dispid 108;
    function CreateMeasure: IMeasure; dispid 109;
    procedure BreakAllExternalFileReferences2(InsertFeatures: WordBool); dispid 110;
    function InsertScene(const SceneDefinitionFile: WideString): WordBool; dispid 111;
    function GetModelView(WindowID: Integer; Row: Integer; Col: Integer): IModelView; dispid 112;
    function GetDecalsCount: Integer; dispid 113;
    function GetDecals: OleVariant; dispid 114;
    function IGetDecals(Count: Integer): IDecal; dispid 115;
    function CreateDecal: IDecal; dispid 116;
    function AddDecal(const PDecal: IDecal; out DecalID: Integer): WordBool; dispid 117;
    function DeleteDecal(DecalID: Integer; BReassignIdsAndInvalidate: WordBool): WordBool; dispid 118;
    function HideDecal(DecalID: Integer; Hide: WordBool): WordBool; dispid 119;
    function DeleteAllDecals: WordBool; dispid 120;
    function MoveDecal(DecalID: Integer; MoveUp: WordBool): WordBool; dispid 121;
    function ReverseDecalsOrder(DecalID: Integer): WordBool; dispid 122;
    function GetRenderMaterialsCount: Integer; dispid 123;
    function GetRenderMaterials: OleVariant; dispid 124;
    function IGetRenderMaterials(Count: Integer): IRenderMaterial; dispid 125;
    function CreateRenderMaterial(const PathName: WideString): IRenderMaterial; dispid 126;
    function AddRenderMaterial(const PRenderMaterial: IRenderMaterial; out PwMaterialId: Integer): WordBool; dispid 127;
    function DeleteRenderMaterial(PwMaterialId: Integer; BReassignIdsAndInvalidate: WordBool): WordBool; dispid 128;
    procedure UpdateRenderMaterialsInSceneGraph(AddToSG: WordBool); dispid 129;
    procedure GetAdvancedSpotLightProperties(const Name: WideString; out Exponent: Double; 
                                             out AttenuationConst: Double; 
                                             out AttenuationLinear: Double; 
                                             out AttenuationQuad: Double); dispid 130;
    procedure SetAdvancedSpotLightProperties(const Name: WideString; Exponent: Double; 
                                             AttenuationConst: Double; AttenuationLinear: Double; 
                                             AttenuationQuad: Double); dispid 131;
    function GetDecal(ID: Integer; const Configuration: WideString): IDecal; dispid 132;
    function GetMaterial(ID: Integer; const Configuration: WideString): IRenderMaterial; dispid 133;
    procedure SetKeepLightInRenderScene(ID: Integer; Val: WordBool); dispid 134;
    function GetKeepLightInRenderScene(ID: Integer): WordBool; dispid 135;
    function AddDefaultRenderMaterial(const PRenderMaterial: IRenderMaterial; 
                                      out PwMaterialId: Integer): WordBool; dispid 136;
    procedure SetLightEnabledInRender(ID: Integer; Val: WordBool); dispid 137;
    function GetLightEnabledInRender(ID: Integer): WordBool; dispid 138;
    procedure DeleteScene; dispid 139;
    function GetMotionStudyManager: IDispatch; dispid 140;
    function GetSearchDataCount(const AppName: WideString): Integer; dispid 141;
    function GetSearchData(const AppName: WideString; var AppNames: OleVariant; 
                           var NodeNames: OleVariant; var NodeValues: OleVariant): Integer; dispid 142;
    procedure IGetSearchData(const AppName: WideString; Count: Integer; var AppNames: WideString; 
                             var NodeNames: WideString; var NodeValues: WideString); dispid 143;
    function DeleteSearchData(const AppName: WideString): WordBool; dispid 144;
    function IsVirtualComponent: WideString; dispid 145;
    function IsVirtualComponent2: OleVariant; dispid 146;
    function IsVirtualComponent3(out PathChain: OleVariant; out TitleChain: OleVariant): WordBool; dispid 147;
    function ChangeSketchPlane(Config_opt: Integer; Config_names: OleVariant): WordBool; dispid 148;
    function IChangeSketchPlane(Config_opt: Integer; Config_count: Integer; 
                                var Config_names: WideString): WordBool; dispid 149;
  end;

// *********************************************************************//
// Interface: IMassProperty
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {158BAD02-D515-4400-ADA4-F9941C974DC1}
// *********************************************************************//
  IMassProperty = interface(IDispatch)
    ['{158BAD02-D515-4400-ADA4-F9941C974DC1}']
    function Get_UseSystemUnits: WordBool; safecall;
    procedure Set_UseSystemUnits(Retval: WordBool); safecall;
    function Get_Mass: Double; safecall;
    function Get_Volume: Double; safecall;
    function Get_Density: Double; safecall;
    function Get_SurfaceArea: Double; safecall;
    function Get_CenterOfMass: OleVariant; safecall;
    function IGetCenterOfMass: Double; safecall;
    function Get_PrincipleAxesOfInertia(Axis: Integer): OleVariant; safecall;
    function IGetPrincipleAxesOfInertia(Axis: Integer): Double; safecall;
    function Get_PrincipleMomentsOfInertia: OleVariant; safecall;
    function IGetPrincipleMomentsOfInertia: Double; safecall;
    function GetMomentOfInertia(WhereTaken: Integer): OleVariant; safecall;
    function IGetMomentOfInertia(WhereTaken: Integer): Double; safecall;
    function SetCoordinateSystem(const Coords: IMathTransform): WordBool; safecall;
    function AddBodies(BodyListIn: OleVariant): WordBool; safecall;
    function IAddBodies(NumBodies: Integer; var BodyListIn: IBody2): WordBool; safecall;
    function SetAssignedMassProp(Mass: Double; Center_x: Double; Center_y: Double; 
                                 Center_z: Double; Config_opt: Integer; Config_names: OleVariant): WordBool; safecall;
    function ISetAssignedMassProp(Mass: Double; Center_x: Double; Center_y: Double; 
                                  Center_z: Double; Config_opt: Integer; ConfigNum: Integer; 
                                  var Config_names: WideString): WordBool; safecall;
    function Get_UserAssigned: WordBool; safecall;
    procedure Set_UserAssigned(Flag: WordBool); safecall;
    property UseSystemUnits: WordBool read Get_UseSystemUnits write Set_UseSystemUnits;
    property Mass: Double read Get_Mass;
    property Volume: Double read Get_Volume;
    property Density: Double read Get_Density;
    property SurfaceArea: Double read Get_SurfaceArea;
    property CenterOfMass: OleVariant read Get_CenterOfMass;
    property PrincipleAxesOfInertia[Axis: Integer]: OleVariant read Get_PrincipleAxesOfInertia;
    property PrincipleMomentsOfInertia: OleVariant read Get_PrincipleMomentsOfInertia;
    property UserAssigned: WordBool read Get_UserAssigned write Set_UserAssigned;
  end;

// *********************************************************************//
// DispIntf:  IMassPropertyDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {158BAD02-D515-4400-ADA4-F9941C974DC1}
// *********************************************************************//
  IMassPropertyDisp = dispinterface
    ['{158BAD02-D515-4400-ADA4-F9941C974DC1}']
    property UseSystemUnits: WordBool dispid 1;
    property Mass: Double readonly dispid 2;
    property Volume: Double readonly dispid 3;
    property Density: Double readonly dispid 4;
    property SurfaceArea: Double readonly dispid 5;
    property CenterOfMass: OleVariant readonly dispid 6;
    function IGetCenterOfMass: Double; dispid 7;
    property PrincipleAxesOfInertia[Axis: Integer]: OleVariant readonly dispid 8;
    function IGetPrincipleAxesOfInertia(Axis: Integer): Double; dispid 9;
    property PrincipleMomentsOfInertia: OleVariant readonly dispid 10;
    function IGetPrincipleMomentsOfInertia: Double; dispid 11;
    function GetMomentOfInertia(WhereTaken: Integer): OleVariant; dispid 12;
    function IGetMomentOfInertia(WhereTaken: Integer): Double; dispid 13;
    function SetCoordinateSystem(const Coords: IMathTransform): WordBool; dispid 14;
    function AddBodies(BodyListIn: OleVariant): WordBool; dispid 15;
    function IAddBodies(NumBodies: Integer; var BodyListIn: IBody2): WordBool; dispid 16;
    function SetAssignedMassProp(Mass: Double; Center_x: Double; Center_y: Double; 
                                 Center_z: Double; Config_opt: Integer; Config_names: OleVariant): WordBool; dispid 17;
    function ISetAssignedMassProp(Mass: Double; Center_x: Double; Center_y: Double; 
                                  Center_z: Double; Config_opt: Integer; ConfigNum: Integer; 
                                  var Config_names: WideString): WordBool; dispid 18;
    property UserAssigned: WordBool dispid 19;
  end;

// *********************************************************************//
// Interface: ISwOLEObject
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B0BAD545-4DD8-4D2A-8DDE-438124126932}
// *********************************************************************//
  ISwOLEObject = interface(IDispatch)
    ['{B0BAD545-4DD8-4D2A-8DDE-438124126932}']
    function Get_FileName: WideString; safecall;
    function Get_Clsid: WideString; safecall;
    function Get_IsLinked: WordBool; safecall;
    function Get_BufferSize: Integer; safecall;
    function Get_Buffer: OleVariant; safecall;
    procedure IGetBuffer(OleBufferSize: Integer; out BOleData: Byte); safecall;
    function Get_Aspect: Integer; safecall;
    function Get_Boundaries: OleVariant; safecall;
    procedure Set_Boundaries(VbBoundary: OleVariant); safecall;
    procedure IGetBoundaries(out Boundary: Double); safecall;
    procedure ISetBoundaries(var Boundary: Double); safecall;
    function Select(Append: WordBool): WordBool; safecall;
    procedure Refresh; safecall;
    function SetActive(Active: WordBool): IDispatch; safecall;
    property FileName: WideString read Get_FileName;
    property Clsid: WideString read Get_Clsid;
    property IsLinked: WordBool read Get_IsLinked;
    property BufferSize: Integer read Get_BufferSize;
    property Buffer: OleVariant read Get_Buffer;
    property Aspect: Integer read Get_Aspect;
    property Boundaries: OleVariant read Get_Boundaries write Set_Boundaries;
  end;

// *********************************************************************//
// DispIntf:  ISwOLEObjectDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B0BAD545-4DD8-4D2A-8DDE-438124126932}
// *********************************************************************//
  ISwOLEObjectDisp = dispinterface
    ['{B0BAD545-4DD8-4D2A-8DDE-438124126932}']
    property FileName: WideString readonly dispid 1;
    property Clsid: WideString readonly dispid 2;
    property IsLinked: WordBool readonly dispid 3;
    property BufferSize: Integer readonly dispid 4;
    property Buffer: OleVariant readonly dispid 5;
    procedure IGetBuffer(OleBufferSize: Integer; out BOleData: Byte); dispid 6;
    property Aspect: Integer readonly dispid 7;
    property Boundaries: OleVariant dispid 8;
    procedure IGetBoundaries(out Boundary: Double); dispid 9;
    procedure ISetBoundaries(var Boundary: Double); dispid 10;
    function Select(Append: WordBool): WordBool; dispid 11;
    procedure Refresh; dispid 12;
    function SetActive(Active: WordBool): IDispatch; dispid 13;
  end;

// *********************************************************************//
// Interface: IPrint3DDialog
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {41BD2A2F-BF57-49D6-9A56-D46B82DA04C8}
// *********************************************************************//
  IPrint3DDialog = interface(IDispatch)
    ['{41BD2A2F-BF57-49D6-9A56-D46B82DA04C8}']
    function UpdateDialog: WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IPrint3DDialogDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {41BD2A2F-BF57-49D6-9A56-D46B82DA04C8}
// *********************************************************************//
  IPrint3DDialogDisp = dispinterface
    ['{41BD2A2F-BF57-49D6-9A56-D46B82DA04C8}']
    function UpdateDialog: WordBool; dispid 1;
  end;

// *********************************************************************//
// Interface: IMeasure
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {151497A7-8B45-4A2C-9DA1-CAD54EEF5855}
// *********************************************************************//
  IMeasure = interface(IDispatch)
    ['{151497A7-8B45-4A2C-9DA1-CAD54EEF5855}']
    function Calculate(Entities: OleVariant): WordBool; safecall;
    function Get_X: Double; safecall;
    function Get_Y: Double; safecall;
    function Get_Z: Double; safecall;
    function Get_DeltaX: Double; safecall;
    function Get_DeltaY: Double; safecall;
    function Get_DeltaZ: Double; safecall;
    function Get_Length: Double; safecall;
    function Get_Area: Double; safecall;
    function Get_Perimeter: Double; safecall;
    function Get_Distance: Double; safecall;
    function Get_NormalDistance: Double; safecall;
    function Get_Angle: Double; safecall;
    function Get_TotalArea: Double; safecall;
    function Get_TotalLength: Double; safecall;
    function Get_CenterDistance: Double; safecall;
    function Get_Radius: Double; safecall;
    function Get_Diameter: Double; safecall;
    function Get_ArcLength: Double; safecall;
    function Get_ChordLength: Double; safecall;
    function Get_IsParallel: WordBool; safecall;
    function Get_IsPerpendicular: WordBool; safecall;
    function Get_IsIntersect: WordBool; safecall;
    function Get_Normal: Double; safecall;
    function Get_Projection: Double; safecall;
    function Get_ArcOption: Integer; safecall;
    procedure Set_ArcOption(Retval: Integer); safecall;
    function Get_ProjectionOption: Integer; safecall;
    procedure Set_ProjectionOption(Retval: Integer); safecall;
    function SetProjectionEntity(const Entity: IDispatch): WordBool; safecall;
    function Get_SpericalCenterDistance: Double; safecall;
    function Get_IsConcentricSpheres: WordBool; safecall;
    function Get_LengthDecimalPlaces: Integer; safecall;
    procedure Set_LengthDecimalPlaces(Retval: Integer); safecall;
    function Get_AngleDecimalPlaces: Integer; safecall;
    procedure Set_AngleDecimalPlaces(Retval: Integer); safecall;
    property X: Double read Get_X;
    property Y: Double read Get_Y;
    property Z: Double read Get_Z;
    property DeltaX: Double read Get_DeltaX;
    property DeltaY: Double read Get_DeltaY;
    property DeltaZ: Double read Get_DeltaZ;
    property Length: Double read Get_Length;
    property Area: Double read Get_Area;
    property Perimeter: Double read Get_Perimeter;
    property Distance: Double read Get_Distance;
    property NormalDistance: Double read Get_NormalDistance;
    property Angle: Double read Get_Angle;
    property TotalArea: Double read Get_TotalArea;
    property TotalLength: Double read Get_TotalLength;
    property CenterDistance: Double read Get_CenterDistance;
    property Radius: Double read Get_Radius;
    property Diameter: Double read Get_Diameter;
    property ArcLength: Double read Get_ArcLength;
    property ChordLength: Double read Get_ChordLength;
    property IsParallel: WordBool read Get_IsParallel;
    property IsPerpendicular: WordBool read Get_IsPerpendicular;
    property IsIntersect: WordBool read Get_IsIntersect;
    property Normal: Double read Get_Normal;
    property Projection: Double read Get_Projection;
    property ArcOption: Integer read Get_ArcOption write Set_ArcOption;
    property ProjectionOption: Integer read Get_ProjectionOption write Set_ProjectionOption;
    property SpericalCenterDistance: Double read Get_SpericalCenterDistance;
    property IsConcentricSpheres: WordBool read Get_IsConcentricSpheres;
    property LengthDecimalPlaces: Integer read Get_LengthDecimalPlaces write Set_LengthDecimalPlaces;
    property AngleDecimalPlaces: Integer read Get_AngleDecimalPlaces write Set_AngleDecimalPlaces;
  end;

// *********************************************************************//
// DispIntf:  IMeasureDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {151497A7-8B45-4A2C-9DA1-CAD54EEF5855}
// *********************************************************************//
  IMeasureDisp = dispinterface
    ['{151497A7-8B45-4A2C-9DA1-CAD54EEF5855}']
    function Calculate(Entities: OleVariant): WordBool; dispid 1;
    property X: Double readonly dispid 2;
    property Y: Double readonly dispid 3;
    property Z: Double readonly dispid 4;
    property DeltaX: Double readonly dispid 5;
    property DeltaY: Double readonly dispid 6;
    property DeltaZ: Double readonly dispid 7;
    property Length: Double readonly dispid 8;
    property Area: Double readonly dispid 9;
    property Perimeter: Double readonly dispid 10;
    property Distance: Double readonly dispid 11;
    property NormalDistance: Double readonly dispid 12;
    property Angle: Double readonly dispid 13;
    property TotalArea: Double readonly dispid 14;
    property TotalLength: Double readonly dispid 15;
    property CenterDistance: Double readonly dispid 16;
    property Radius: Double readonly dispid 17;
    property Diameter: Double readonly dispid 18;
    property ArcLength: Double readonly dispid 19;
    property ChordLength: Double readonly dispid 20;
    property IsParallel: WordBool readonly dispid 21;
    property IsPerpendicular: WordBool readonly dispid 22;
    property IsIntersect: WordBool readonly dispid 23;
    property Normal: Double readonly dispid 24;
    property Projection: Double readonly dispid 25;
    property ArcOption: Integer dispid 26;
    property ProjectionOption: Integer dispid 27;
    function SetProjectionEntity(const Entity: IDispatch): WordBool; dispid 28;
    property SpericalCenterDistance: Double readonly dispid 29;
    property IsConcentricSpheres: WordBool readonly dispid 30;
    property LengthDecimalPlaces: Integer dispid 31;
    property AngleDecimalPlaces: Integer dispid 32;
  end;

// *********************************************************************//
// Interface: IConfigurationManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8DB64337-F36E-47CC-BBBC-B4B979D31505}
// *********************************************************************//
  IConfigurationManager = interface(IDispatch)
    ['{8DB64337-F36E-47CC-BBBC-B4B979D31505}']
    function Get_Document: IModelDoc2; safecall;
    function GetConfigurationParams(const ConfigName: WideString; out Params: OleVariant; 
                                    out Values: OleVariant): WordBool; safecall;
    function IGetConfigurationParams(const ConfigName: WideString; ParamCount: Integer; 
                                     out ParamNames: WideString; out ParamValues: WideString): WordBool; safecall;
    function GetConfigurationParamsCount(const ConfigName: WideString): Integer; safecall;
    function AddConfiguration(const Name: WideString; const Comment: WideString; 
                              const AlternateName: WideString; Options: Integer; 
                              const ParentConfigName: WideString; const Description: WideString): IConfiguration; safecall;
    function SetConfigurationParams(const ConfigName: WideString; var ParamNames: OleVariant; 
                                    var ParamValues: OleVariant): WordBool; safecall;
    function ISetConfigurationParams(const ConfigName: WideString; ParamCount: Integer; 
                                     var ParamNames: WideString; var ParamValues: WideString): WordBool; safecall;
    function Get_ActiveConfiguration: IConfiguration; safecall;
    function Get_EnableConfigurationTree: WordBool; safecall;
    procedure Set_EnableConfigurationTree(PState: WordBool); safecall;
    property Document: IModelDoc2 read Get_Document;
    property ActiveConfiguration: IConfiguration read Get_ActiveConfiguration;
    property EnableConfigurationTree: WordBool read Get_EnableConfigurationTree write Set_EnableConfigurationTree;
  end;

// *********************************************************************//
// DispIntf:  IConfigurationManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8DB64337-F36E-47CC-BBBC-B4B979D31505}
// *********************************************************************//
  IConfigurationManagerDisp = dispinterface
    ['{8DB64337-F36E-47CC-BBBC-B4B979D31505}']
    property Document: IModelDoc2 readonly dispid 1;
    function GetConfigurationParams(const ConfigName: WideString; out Params: OleVariant; 
                                    out Values: OleVariant): WordBool; dispid 2;
    function IGetConfigurationParams(const ConfigName: WideString; ParamCount: Integer; 
                                     out ParamNames: WideString; out ParamValues: WideString): WordBool; dispid 3;
    function GetConfigurationParamsCount(const ConfigName: WideString): Integer; dispid 4;
    function AddConfiguration(const Name: WideString; const Comment: WideString; 
                              const AlternateName: WideString; Options: Integer; 
                              const ParentConfigName: WideString; const Description: WideString): IConfiguration; dispid 5;
    function SetConfigurationParams(const ConfigName: WideString; var ParamNames: OleVariant; 
                                    var ParamValues: OleVariant): WordBool; dispid 6;
    function ISetConfigurationParams(const ConfigName: WideString; ParamCount: Integer; 
                                     var ParamNames: WideString; var ParamValues: WideString): WordBool; dispid 7;
    property ActiveConfiguration: IConfiguration readonly dispid 8;
    property EnableConfigurationTree: WordBool dispid 9;
  end;

// *********************************************************************//
// Interface: ISketchManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9CE9DACE-E595-4D8F-B893-5AE4899517DE}
// *********************************************************************//
  ISketchManager = interface(IDispatch)
    ['{9CE9DACE-E595-4D8F-B893-5AE4899517DE}']
    function Get_Document: IModelDoc2; safecall;
    function SketchOffset(Offset: Double; BothDirections: WordBool; Chain: WordBool; 
                          CapEnds: WordBool; MakeConstruction: WordBool; AddDimensions: WordBool): WordBool; safecall;
    function PerimeterCircle(X1: Double; Y1: Double; X2: Double; Y2: Double; X3: Double; Y3: Double): IDispatch; safecall;
    function GetDynamicMirror: WordBool; safecall;
    function SetDynamicMirror(DynamicMirror: WordBool): WordBool; safecall;
    function SketchUseEdge(Chain: WordBool): WordBool; safecall;
    function GetSketchBlockDefinitionCount: Integer; safecall;
    function GetSketchBlockDefinitions: OleVariant; safecall;
    function IGetSketchBlockDefinitions(BlockDefCount: Integer): ISketchBlockDefinition; safecall;
    function MakeSketchBlockFromSelected(const InsertionPoint: IMathPoint): ISketchBlockDefinition; safecall;
    function MakeSketchBlockFromSketch(const InsertionPoint: IMathPoint; const Sketch: ISketch): ISketchBlockDefinition; safecall;
    function MakeSketchBlockFromFile(const InsertionPoint: IMathPoint; const FileName: WideString; 
                                     LinkedToFile: WordBool; Scale: Double; Angle: Double): ISketchBlockDefinition; safecall;
    function InsertSketchBlockInstance(const BlockDef: ISketchBlockDefinition; 
                                       const Position: IMathPoint; Scale: Double; Angle: Double): ISketchBlockInstance; safecall;
    procedure EditSketchBlock; safecall;
    procedure EndEditSketchBlock(AcceptChanges: WordBool); safecall;
    procedure ExplodeSketchBlockInstance(const LpSketchBlockInstance: ISketchBlockInstance); safecall;
    function SketchTrim(Option: Integer; X: Double; Y: Double; Z: Double): WordBool; safecall;
    function SketchExtend(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function MakeSketchChain: WordBool; safecall;
    function FullyDefineSketch(EntitiesToFullyDefine: WordBool; UseRelations: WordBool; 
                               RelationsToApply: Integer; UseDimensions: WordBool; 
                               HorizontalDimScheme: Integer; const HorizontalDatumDisp: IDispatch; 
                               VerticalDimScheme: Integer; const VerticalDatumDisp: IDispatch; 
                               HorizontalDimPlacement: Integer; VerticalDimPlacement: Integer): Integer; safecall;
    function Get_CurvatureScale: Double; safecall;
    procedure Set_CurvatureScale(Scale: Double); safecall;
    function Get_CurvatureDensity: Integer; safecall;
    procedure Set_CurvatureDensity(Value: Integer); safecall;
    function CreateSketchPlane(Relation1: Integer; Relation2: Integer; Relation3: Integer): WordBool; safecall;
    function CreateSketchBelt(Length: Double; Thickness: Double; Engage: Integer; 
                              PulleyCount: Integer; Side1: Integer; Side2: Integer; Side3: Integer; 
                              Side4: Integer; Side5: Integer; Side6: Integer; Side7: Integer; 
                              Side8: Integer; Side9: Integer; Side10: Integer; Side11: Integer; 
                              Side12: Integer): WordBool; safecall;
    procedure InsertSketch(UpdateEditRebuild: WordBool); safecall;
    function CreatePoint(X: Double; Y: Double; Z: Double): ISketchPoint; safecall;
    function CreateLine(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double): ISketchSegment; safecall;
    function CreateCenterLine(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double): ISketchSegment; safecall;
    function CreateCircle(XC: Double; YC: Double; Zc: Double; Xp: Double; Yp: Double; Zp: Double): ISketchSegment; safecall;
    function CreateCircleByRadius(XC: Double; YC: Double; Zc: Double; Radius: Double): ISketchSegment; safecall;
    function CreateArc(XC: Double; YC: Double; Zc: Double; X1: Double; Y1: Double; Z1: Double; 
                       X2: Double; Y2: Double; Z2: Double; Direction: Smallint): ISketchSegment; safecall;
    function Create3PointArc(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                             Z2: Double; X3: Double; Y3: Double; Z3: Double): ISketchSegment; safecall;
    function CreateTangentArc(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                              Z2: Double; ArcType: Integer): ISketchSegment; safecall;
    function CreateEllipse(XC: Double; YC: Double; Zc: Double; XMajor: Double; YMajor: Double; 
                           ZMajor: Double; XMinor: Double; YMinor: Double; ZMinor: Double): ISketchSegment; safecall;
    function CreateEllipticalArc(XC: Double; YC: Double; Zc: Double; XMajor: Double; 
                                 YMajor: Double; ZMajor: Double; XMinor: Double; YMinor: Double; 
                                 ZMinor: Double; X1: Double; Y1: Double; Z1: Double; X2: Double; 
                                 Y2: Double; Z2: Double; Direction: Smallint): ISketchSegment; safecall;
    function CreateParabola(XFocus: Double; YFocus: Double; ZFocus: Double; XApex: Double; 
                            YApex: Double; ZApex: Double; X1: Double; Y1: Double; Z1: Double; 
                            X2: Double; Y2: Double; Z2: Double): ISketchSegment; safecall;
    function CreateSpline(PointData: OleVariant): ISketchSegment; safecall;
    function ICreateSpline(PointCount: Integer; var PointData: Double): ISketchSegment; safecall;
    function CreateSplineByEqnParams(Parameters: OleVariant): ISketchSegment; safecall;
    function ICreateSplineByEqnParams(var Properties: Integer; KnotArrayCount: Integer; 
                                      var Knots: Double; ControlPointArrayCount: Integer; 
                                      var ControlPoints: Double): ISketchSegment; safecall;
    function CreateSplinesByEqnParams(Parameters: OleVariant): OleVariant; safecall;
    function ICreateSplinesByEqnParams(var Properties: Integer; KnotArrayCount: Integer; 
                                       var Knots: Double; ControlPointArrayCount: Integer; 
                                       var ControlPoints: Double): IEnumSketchSegments; safecall;
    function InsertSketchPicture(const FileName: WideString): ISketchPicture; safecall;
    function CreateCornerRectangle(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                   Z2: Double): OleVariant; safecall;
    function CreateCenterRectangle(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                   Z2: Double): OleVariant; safecall;
    function Create3PointCornerRectangle(X1: Double; Y1: Double; Z1: Double; X2: Double; 
                                         Y2: Double; Z2: Double; X3: Double; Y3: Double; Z3: Double): OleVariant; safecall;
    function Create3PointCenterRectangle(X1: Double; Y1: Double; Z1: Double; X2: Double; 
                                         Y2: Double; Z2: Double; X3: Double; Y3: Double; Z3: Double): OleVariant; safecall;
    function CreateParallelogram(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                 Z2: Double; X3: Double; Y3: Double; Z3: Double): OleVariant; safecall;
    function CreateChamfer(Type_: Integer; Distance: Double; AngleORdist: Double): ISketchSegment; safecall;
    function CreateFillet(Radius: Double; ConstrainedCorners: Integer): ISketchSegment; safecall;
    function CreatePolygon(XC: Double; YC: Double; Zc: Double; Xp: Double; Yp: Double; Zp: Double; 
                           Sides: Integer; Inscribed: WordBool): OleVariant; safecall;
    function Get_AutoSolve: WordBool; safecall;
    procedure Set_AutoSolve(AutoSolve: WordBool); safecall;
    function Get_AutoInference: WordBool; safecall;
    procedure Set_AutoInference(AutoInfer: WordBool); safecall;
    procedure Insert3DSketch(UpdateEditRebuild: WordBool); safecall;
    function Get_ActiveSketch: ISketch; safecall;
    function SplitOpenSegment(X: Double; Y: Double; Z: Double): OleVariant; safecall;
    function SplitClosedSegment(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                Z2: Double): OleVariant; safecall;
    function Get_AddToDB: WordBool; safecall;
    procedure Set_AddToDB(ToDatabase: WordBool); safecall;
    function Get_DisplayWhenAdded: WordBool; safecall;
    procedure Set_DisplayWhenAdded(Display: WordBool); safecall;
    function Get_InferenceMode: WordBool; safecall;
    procedure Set_InferenceMode(Mode: WordBool); safecall;
    procedure SetGridOptions(Display: WordBool; Spacing: Double; Snap: WordBool; 
                             DotStyle: WordBool; NumMajor: Smallint; NumMinor: Smallint; 
                             AlignToEdge: WordBool; AngleSnap: WordBool; AngleUnit: Double; 
                             MinorAuto: WordBool); safecall;
    function CreateBoundaryHatch(Angle: Double; Scale: Double; Color: Integer; 
                                 const Hatchname: WideString; const Layername: WideString): OleVariant; safecall;
    function CreateRegionHatch(X: Double; Y: Double; Z: Double; Angle: Double; Scale: Double; 
                               Color: Integer; const Hatchname: WideString; 
                               const Layername: WideString): ISketchHatch; safecall;
    property Document: IModelDoc2 read Get_Document;
    property CurvatureScale: Double read Get_CurvatureScale write Set_CurvatureScale;
    property CurvatureDensity: Integer read Get_CurvatureDensity write Set_CurvatureDensity;
    property AutoSolve: WordBool read Get_AutoSolve write Set_AutoSolve;
    property AutoInference: WordBool read Get_AutoInference write Set_AutoInference;
    property ActiveSketch: ISketch read Get_ActiveSketch;
    property AddToDB: WordBool read Get_AddToDB write Set_AddToDB;
    property DisplayWhenAdded: WordBool read Get_DisplayWhenAdded write Set_DisplayWhenAdded;
    property InferenceMode: WordBool read Get_InferenceMode write Set_InferenceMode;
  end;

// *********************************************************************//
// DispIntf:  ISketchManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9CE9DACE-E595-4D8F-B893-5AE4899517DE}
// *********************************************************************//
  ISketchManagerDisp = dispinterface
    ['{9CE9DACE-E595-4D8F-B893-5AE4899517DE}']
    property Document: IModelDoc2 readonly dispid 1;
    function SketchOffset(Offset: Double; BothDirections: WordBool; Chain: WordBool; 
                          CapEnds: WordBool; MakeConstruction: WordBool; AddDimensions: WordBool): WordBool; dispid 2;
    function PerimeterCircle(X1: Double; Y1: Double; X2: Double; Y2: Double; X3: Double; Y3: Double): IDispatch; dispid 3;
    function GetDynamicMirror: WordBool; dispid 4;
    function SetDynamicMirror(DynamicMirror: WordBool): WordBool; dispid 5;
    function SketchUseEdge(Chain: WordBool): WordBool; dispid 6;
    function GetSketchBlockDefinitionCount: Integer; dispid 7;
    function GetSketchBlockDefinitions: OleVariant; dispid 8;
    function IGetSketchBlockDefinitions(BlockDefCount: Integer): ISketchBlockDefinition; dispid 9;
    function MakeSketchBlockFromSelected(const InsertionPoint: IMathPoint): ISketchBlockDefinition; dispid 10;
    function MakeSketchBlockFromSketch(const InsertionPoint: IMathPoint; const Sketch: ISketch): ISketchBlockDefinition; dispid 11;
    function MakeSketchBlockFromFile(const InsertionPoint: IMathPoint; const FileName: WideString; 
                                     LinkedToFile: WordBool; Scale: Double; Angle: Double): ISketchBlockDefinition; dispid 12;
    function InsertSketchBlockInstance(const BlockDef: ISketchBlockDefinition; 
                                       const Position: IMathPoint; Scale: Double; Angle: Double): ISketchBlockInstance; dispid 13;
    procedure EditSketchBlock; dispid 14;
    procedure EndEditSketchBlock(AcceptChanges: WordBool); dispid 15;
    procedure ExplodeSketchBlockInstance(const LpSketchBlockInstance: ISketchBlockInstance); dispid 16;
    function SketchTrim(Option: Integer; X: Double; Y: Double; Z: Double): WordBool; dispid 17;
    function SketchExtend(X: Double; Y: Double; Z: Double): WordBool; dispid 18;
    function MakeSketchChain: WordBool; dispid 19;
    function FullyDefineSketch(EntitiesToFullyDefine: WordBool; UseRelations: WordBool; 
                               RelationsToApply: Integer; UseDimensions: WordBool; 
                               HorizontalDimScheme: Integer; const HorizontalDatumDisp: IDispatch; 
                               VerticalDimScheme: Integer; const VerticalDatumDisp: IDispatch; 
                               HorizontalDimPlacement: Integer; VerticalDimPlacement: Integer): Integer; dispid 20;
    property CurvatureScale: Double dispid 21;
    property CurvatureDensity: Integer dispid 22;
    function CreateSketchPlane(Relation1: Integer; Relation2: Integer; Relation3: Integer): WordBool; dispid 23;
    function CreateSketchBelt(Length: Double; Thickness: Double; Engage: Integer; 
                              PulleyCount: Integer; Side1: Integer; Side2: Integer; Side3: Integer; 
                              Side4: Integer; Side5: Integer; Side6: Integer; Side7: Integer; 
                              Side8: Integer; Side9: Integer; Side10: Integer; Side11: Integer; 
                              Side12: Integer): WordBool; dispid 24;
    procedure InsertSketch(UpdateEditRebuild: WordBool); dispid 25;
    function CreatePoint(X: Double; Y: Double; Z: Double): ISketchPoint; dispid 26;
    function CreateLine(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double): ISketchSegment; dispid 27;
    function CreateCenterLine(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; Z2: Double): ISketchSegment; dispid 28;
    function CreateCircle(XC: Double; YC: Double; Zc: Double; Xp: Double; Yp: Double; Zp: Double): ISketchSegment; dispid 29;
    function CreateCircleByRadius(XC: Double; YC: Double; Zc: Double; Radius: Double): ISketchSegment; dispid 30;
    function CreateArc(XC: Double; YC: Double; Zc: Double; X1: Double; Y1: Double; Z1: Double; 
                       X2: Double; Y2: Double; Z2: Double; Direction: Smallint): ISketchSegment; dispid 31;
    function Create3PointArc(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                             Z2: Double; X3: Double; Y3: Double; Z3: Double): ISketchSegment; dispid 32;
    function CreateTangentArc(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                              Z2: Double; ArcType: Integer): ISketchSegment; dispid 33;
    function CreateEllipse(XC: Double; YC: Double; Zc: Double; XMajor: Double; YMajor: Double; 
                           ZMajor: Double; XMinor: Double; YMinor: Double; ZMinor: Double): ISketchSegment; dispid 34;
    function CreateEllipticalArc(XC: Double; YC: Double; Zc: Double; XMajor: Double; 
                                 YMajor: Double; ZMajor: Double; XMinor: Double; YMinor: Double; 
                                 ZMinor: Double; X1: Double; Y1: Double; Z1: Double; X2: Double; 
                                 Y2: Double; Z2: Double; Direction: Smallint): ISketchSegment; dispid 35;
    function CreateParabola(XFocus: Double; YFocus: Double; ZFocus: Double; XApex: Double; 
                            YApex: Double; ZApex: Double; X1: Double; Y1: Double; Z1: Double; 
                            X2: Double; Y2: Double; Z2: Double): ISketchSegment; dispid 36;
    function CreateSpline(PointData: OleVariant): ISketchSegment; dispid 37;
    function ICreateSpline(PointCount: Integer; var PointData: Double): ISketchSegment; dispid 38;
    function CreateSplineByEqnParams(Parameters: OleVariant): ISketchSegment; dispid 39;
    function ICreateSplineByEqnParams(var Properties: Integer; KnotArrayCount: Integer; 
                                      var Knots: Double; ControlPointArrayCount: Integer; 
                                      var ControlPoints: Double): ISketchSegment; dispid 40;
    function CreateSplinesByEqnParams(Parameters: OleVariant): OleVariant; dispid 41;
    function ICreateSplinesByEqnParams(var Properties: Integer; KnotArrayCount: Integer; 
                                       var Knots: Double; ControlPointArrayCount: Integer; 
                                       var ControlPoints: Double): IEnumSketchSegments; dispid 42;
    function InsertSketchPicture(const FileName: WideString): ISketchPicture; dispid 43;
    function CreateCornerRectangle(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                   Z2: Double): OleVariant; dispid 44;
    function CreateCenterRectangle(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                   Z2: Double): OleVariant; dispid 45;
    function Create3PointCornerRectangle(X1: Double; Y1: Double; Z1: Double; X2: Double; 
                                         Y2: Double; Z2: Double; X3: Double; Y3: Double; Z3: Double): OleVariant; dispid 46;
    function Create3PointCenterRectangle(X1: Double; Y1: Double; Z1: Double; X2: Double; 
                                         Y2: Double; Z2: Double; X3: Double; Y3: Double; Z3: Double): OleVariant; dispid 47;
    function CreateParallelogram(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                 Z2: Double; X3: Double; Y3: Double; Z3: Double): OleVariant; dispid 48;
    function CreateChamfer(Type_: Integer; Distance: Double; AngleORdist: Double): ISketchSegment; dispid 49;
    function CreateFillet(Radius: Double; ConstrainedCorners: Integer): ISketchSegment; dispid 50;
    function CreatePolygon(XC: Double; YC: Double; Zc: Double; Xp: Double; Yp: Double; Zp: Double; 
                           Sides: Integer; Inscribed: WordBool): OleVariant; dispid 51;
    property AutoSolve: WordBool dispid 52;
    property AutoInference: WordBool dispid 53;
    procedure Insert3DSketch(UpdateEditRebuild: WordBool); dispid 54;
    property ActiveSketch: ISketch readonly dispid 55;
    function SplitOpenSegment(X: Double; Y: Double; Z: Double): OleVariant; dispid 56;
    function SplitClosedSegment(X1: Double; Y1: Double; Z1: Double; X2: Double; Y2: Double; 
                                Z2: Double): OleVariant; dispid 57;
    property AddToDB: WordBool dispid 58;
    property DisplayWhenAdded: WordBool dispid 59;
    property InferenceMode: WordBool dispid 60;
    procedure SetGridOptions(Display: WordBool; Spacing: Double; Snap: WordBool; 
                             DotStyle: WordBool; NumMajor: Smallint; NumMinor: Smallint; 
                             AlignToEdge: WordBool; AngleSnap: WordBool; AngleUnit: Double; 
                             MinorAuto: WordBool); dispid 61;
    function CreateBoundaryHatch(Angle: Double; Scale: Double; Color: Integer; 
                                 const Hatchname: WideString; const Layername: WideString): OleVariant; dispid 62;
    function CreateRegionHatch(X: Double; Y: Double; Z: Double; Angle: Double; Scale: Double; 
                               Color: Integer; const Hatchname: WideString; 
                               const Layername: WideString): ISketchHatch; dispid 63;
  end;

// *********************************************************************//
// Interface: IFaultEntity
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9EF72595-1414-46BF-B4BB-B0DA133C893C}
// *********************************************************************//
  IFaultEntity = interface(IDispatch)
    ['{9EF72595-1414-46BF-B4BB-B0DA133C893C}']
    function Get_Count: Integer; safecall;
    function Get_Entity(Index: Integer): IEntity; safecall;
    function Get_ErrorCode(Index: Integer): Integer; safecall;
    function Get_Entity2(Index: Integer): IDispatch; safecall;
    property Count: Integer read Get_Count;
    property Entity[Index: Integer]: IEntity read Get_Entity;
    property ErrorCode[Index: Integer]: Integer read Get_ErrorCode;
    property Entity2[Index: Integer]: IDispatch read Get_Entity2;
  end;

// *********************************************************************//
// DispIntf:  IFaultEntityDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9EF72595-1414-46BF-B4BB-B0DA133C893C}
// *********************************************************************//
  IFaultEntityDisp = dispinterface
    ['{9EF72595-1414-46BF-B4BB-B0DA133C893C}']
    property Count: Integer readonly dispid 1;
    property Entity[Index: Integer]: IEntity readonly dispid 2;
    property ErrorCode[Index: Integer]: Integer readonly dispid 3;
    property Entity2[Index: Integer]: IDispatch readonly dispid 4;
  end;

// *********************************************************************//
// Interface: IEnumLoops2
// Flags:     (272) Hidden OleAutomation
// GUID:      {9A6AD388-3FC9-48DE-BFA5-B8953433AB36}
// *********************************************************************//
  IEnumLoops2 = interface(IUnknown)
    ['{9A6AD388-3FC9-48DE-BFA5-B8953433AB36}']
    function Next(Celt: Integer; out Rgelt: ILoop2; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumLoops2): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IFaceDecalProperties
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {49077CE2-D642-464C-BC16-FC45C5E3AC86}
// *********************************************************************//
  IFaceDecalProperties = interface(IDispatch)
    ['{49077CE2-D642-464C-BC16-FC45C5E3AC86}']
    function Get_TextureTranslationX: Double; safecall;
    function Get_TextureTranslationY: Double; safecall;
    function Get_TextureUScale: Double; safecall;
    function Get_TextureVScale: Double; safecall;
    function Get_TextureAngle: Double; safecall;
    function Get_TextureFilename: WideString; safecall;
    function Get_TextureFilenameID: Integer; safecall;
    function Get_TextureRenderMode: Integer; safecall;
    function Get_TextureTranslationU: Double; safecall;
    function Get_TextureTranslationV: Double; safecall;
    function Get_TextureAngleUV: Double; safecall;
    function Get_TextureMirrored: WordBool; safecall;
    function Get_TextureMapID: Integer; safecall;
    function Get_TextureID: Integer; safecall;
    property TextureTranslationX: Double read Get_TextureTranslationX;
    property TextureTranslationY: Double read Get_TextureTranslationY;
    property TextureUScale: Double read Get_TextureUScale;
    property TextureVScale: Double read Get_TextureVScale;
    property TextureAngle: Double read Get_TextureAngle;
    property TextureFilename: WideString read Get_TextureFilename;
    property TextureFilenameID: Integer read Get_TextureFilenameID;
    property TextureRenderMode: Integer read Get_TextureRenderMode;
    property TextureTranslationU: Double read Get_TextureTranslationU;
    property TextureTranslationV: Double read Get_TextureTranslationV;
    property TextureAngleUV: Double read Get_TextureAngleUV;
    property TextureMirrored: WordBool read Get_TextureMirrored;
    property TextureMapID: Integer read Get_TextureMapID;
    property TextureID: Integer read Get_TextureID;
  end;

// *********************************************************************//
// DispIntf:  IFaceDecalPropertiesDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {49077CE2-D642-464C-BC16-FC45C5E3AC86}
// *********************************************************************//
  IFaceDecalPropertiesDisp = dispinterface
    ['{49077CE2-D642-464C-BC16-FC45C5E3AC86}']
    property TextureTranslationX: Double readonly dispid 1;
    property TextureTranslationY: Double readonly dispid 2;
    property TextureUScale: Double readonly dispid 3;
    property TextureVScale: Double readonly dispid 4;
    property TextureAngle: Double readonly dispid 5;
    property TextureFilename: WideString readonly dispid 6;
    property TextureFilenameID: Integer readonly dispid 7;
    property TextureRenderMode: Integer readonly dispid 8;
    property TextureTranslationU: Double readonly dispid 9;
    property TextureTranslationV: Double readonly dispid 10;
    property TextureAngleUV: Double readonly dispid 11;
    property TextureMirrored: WordBool readonly dispid 12;
    property TextureMapID: Integer readonly dispid 13;
    property TextureID: Integer readonly dispid 14;
  end;

// *********************************************************************//
// Interface: IEnumFaces2
// Flags:     (272) Hidden OleAutomation
// GUID:      {61ECFF18-AC2C-405E-B9B8-30D85FDB5087}
// *********************************************************************//
  IEnumFaces2 = interface(IUnknown)
    ['{61ECFF18-AC2C-405E-B9B8-30D85FDB5087}']
    function Next(Celt: Integer; out Rgelt: IFace2; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumFaces2): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPartDoc
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D32-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IPartDoc = interface(IDispatch)
    ['{83A33D32-27C5-11CE-BFD4-00400513BB57}']
    function Get_MaterialUserName: WideString; safecall;
    procedure Set_MaterialUserName(const Retval: WideString); safecall;
    function Get_MaterialIdName: WideString; safecall;
    procedure Set_MaterialIdName(const Retval: WideString); safecall;
    function Get_MaterialPropertyValues: OleVariant; safecall;
    procedure Set_MaterialPropertyValues(Retval: OleVariant); safecall;
    function FirstFeature: IDispatch; safecall;
    function IFirstFeature: IFeature; safecall;
    function FeatureByName(const Name: WideString): IDispatch; safecall;
    function IFeatureByName(const Name: WideString): IFeature; safecall;
    function FeatureById(ID: Integer): IDispatch; safecall;
    function IFeatureById(ID: Integer): IFeature; safecall;
    function Body: IDispatch; safecall;
    function IBodyObject: IBody; safecall;
    procedure Dummy18; safecall;
    procedure FeatureExtrusion(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                               T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                               Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                               Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool); safecall;
    procedure FeatureRevolve(Angle: Double; ReverseDir: WordBool; Angle2: Double; RevType: Integer); safecall;
    procedure FeatureRevolveCut(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                RevType: Integer); safecall;
    function GetTessTriangles(NoConversion: WordBool): OleVariant; safecall;
    function GetTessNorms: OleVariant; safecall;
    function GetProcessedBody: IDispatch; safecall;
    function IGetProcessedBody: IBody; safecall;
    function GetPartBox(NoConversion: WordBool): OleVariant; safecall;
    function CreateNewBody: IDispatch; safecall;
    function ICreateNewBody: IBody; safecall;
    procedure EditRebuild; safecall;
    procedure Dummy17; safecall;
    procedure Dummy19; safecall;
    procedure ForceRebuild; safecall;
    procedure EditUnsuppressDependent; safecall;
    procedure EditRollforward; safecall;
    procedure InsertStockTurned; safecall;
    procedure EditUnsuppress; safecall;
    procedure MakeSection; safecall;
    procedure Dumpfacets; safecall;
    procedure FeatureStock; safecall;
    procedure EditRollback; safecall;
    procedure EditSuppress; safecall;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; safecall;
    function GetPropertyExtension(ID: Integer): OleVariant; safecall;
    procedure MirrorFeature; safecall;
    procedure ResetPropertyExtension; safecall;
    procedure Dummy1; safecall;
    procedure Dummy2; safecall;
    procedure Dummy3; safecall;
    procedure Dummy4; safecall;
    procedure Dummy5; safecall;
    procedure Dummy6; safecall;
    procedure Dummy7; safecall;
    procedure Dummy8; safecall;
    procedure Dummy9; safecall;
    procedure Dummy10; safecall;
    procedure Dummy11; safecall;
    procedure Dummy12; safecall;
    procedure Dummy13; safecall;
    procedure Dummy14; safecall;
    procedure Dummy15; safecall;
    procedure Dummy16; safecall;
    function GetProcessedBodyWithSelFace: IDispatch; safecall;
    function IGetProcessedBodyWithSelFace: IBody; safecall;
    function GetTessTriStrips(NoConversion: WordBool): OleVariant; safecall;
    function GetTessTriStripNorms: OleVariant; safecall;
    procedure MirrorPart; safecall;
    function IGetTessTriangles(NoConversion: WordBool): Single; safecall;
    function IGetTessNorms: Single; safecall;
    function GetTessTriangleCount: Integer; safecall;
    function IGetPartBox(NoConversion: WordBool): Double; safecall;
    function IGetTessTriStrips(NoConversion: WordBool): Single; safecall;
    function IGetTessTriStripNorms: Single; safecall;
    function GetTessTriStripSize: Integer; safecall;
    function GetEntityByName(const Name: WideString; EntityType: Integer): IDispatch; safecall;
    function IGetEntityByName(const Name: WideString; EntityType: Integer): IEntity; safecall;
    function GetEntityName(const Entity: IDispatch): WideString; safecall;
    function IGetEntityName(const Entity: IEntity): WideString; safecall;
    function SetEntityName(const Entity: IDispatch; const StringValue: WideString): WordBool; safecall;
    function ISetEntityName(const Entity: IEntity; const StringValue: WideString): WordBool; safecall;
    function ReorderFeature(const FeatureToMove: WideString; const MoveAfterFeature: WideString): WordBool; safecall;
    function EnumRelatedBodies: IEnumBodies; safecall;
    function GetSectionedBody(const ViewIn: IDispatch): IDispatch; safecall;
    function IGetSectionedBody(const ViewIn: IModelView): IBody; safecall;
    function EnumRelatedSectionedBodies(const ViewIn: IModelView): IEnumBodies; safecall;
    function Get_IMaterialPropertyValues: Double; safecall;
    procedure Set_IMaterialPropertyValues(var Retval: Double); safecall;
    procedure FeatureRevolveThin(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                 RevType: Integer; Thickness1: Double; Thickness2: Double; 
                                 ReverseThinDir: Integer); safecall;
    procedure FeatureRevolveThinCut(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                    RevType: Integer; Thickness1: Double; Thickness2: Double; 
                                    ReverseThinDir: Integer); safecall;
    procedure FeatureExtrusionThin(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                   T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                   Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; 
                                   Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                                   OffsetReverse2: WordBool; Thk1: Double; Thk2: Double; 
                                   EndThk: Double; RevThinDir: Integer; CapEnds: Integer; 
                                   AddBends: WordBool; BendRad: Double); safecall;
    function InsertBends(Radius: Double; const UseBendTable: WideString; UseKfactor: Double; 
                         UseBendAllowance: Double; UseAutoRelief: WordBool; OffsetRatio: Double): WordBool; safecall;
    function CreateFeatureFromBody(const Body: IDispatch): IDispatch; safecall;
    function ICreateFeatureFromBody(const Body: IBody): IFeature; safecall;
    function CreateFeatureFromBody2(const Body: IDispatch; MakeRefSurface: WordBool): IDispatch; safecall;
    function ICreateFeatureFromBody2(const Body: IBody; MakeRefSurface: WordBool): IFeature; safecall;
    function ImportDiagnosis(CloseAllGaps: WordBool; RemoveFaces: WordBool; FixFaces: WordBool; 
                             Options: Integer): Integer; safecall;
    function DeleteEntityName(const Entity: IDispatch): WordBool; safecall;
    function IDeleteEntityName(const Entity: IEntity): WordBool; safecall;
    function GetTessTriStripEdges: OleVariant; safecall;
    function IGetTessTriStripEdges: Integer; safecall;
    function IGetTessTriStripEdgeSize: Integer; safecall;
    function EnumBodies(BodyType: Integer): IEnumBodies; safecall;
    function GetBodies(BodyType: Integer): OleVariant; safecall;
    function GetRelatedBodies: OleVariant; safecall;
    function GetRelatedSectionedBodies(const ViewIn: IDispatch): OleVariant; safecall;
    function InsertBends2(Radius: Double; const UseBendTable: WideString; UseKfactor: Double; 
                          UseBendAllowance: Double; UseAutoRelief: WordBool; OffsetRatio: Double; 
                          DoFlatten: WordBool): WordBool; safecall;
    function CreateFeatureFromBody3(const Body: IDispatch; MakeRefSurface: WordBool; 
                                    Options: Integer): IDispatch; safecall;
    function ICreateFeatureFromBody3(const Body: IBody; MakeRefSurface: WordBool; Options: Integer): IFeature; safecall;
    function GetMateReferenceEntity: IDispatch; safecall;
    procedure FeatureExtrusion2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                                Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                                Merge: WordBool); safecall;
    procedure FeatureExtrusionThin2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                    T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                    Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; 
                                    Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                                    OffsetReverse2: WordBool; Merge: WordBool; Thk1: Double; 
                                    Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                                    CapEnds: Integer; AddBends: WordBool; BendRad: Double); safecall;
    function CreateSurfaceFeatureFromBody(const Body: IDispatch; Options: Integer): OleVariant; safecall;
    function ICreateSurfaceFeatureFromBodyCount(const Body: IBody; Options: Integer): Integer; safecall;
    function ICreateSurfaceFeatureFromBody: IFeature; safecall;
    function IBodyObject2: IBody2; safecall;
    function IGetProcessedBody2: IBody2; safecall;
    function ICreateNewBody2: IBody2; safecall;
    function IGetProcessedBodyWithSelFace2: IBody2; safecall;
    function IGetSectionedBody2(const ViewIn: IModelView): IBody2; safecall;
    function ICreateFeatureFromBody4(const Body: IBody2; MakeRefSurface: WordBool; Options: Integer): IFeature; safecall;
    function ICreateSurfaceFeatureFromBodyCount2(const Body: IBody2; Options: Integer): Integer; safecall;
    function EnumRelatedBodies2: IEnumBodies2; safecall;
    function EnumRelatedSectionedBodies2(const ViewIn: IModelView): IEnumBodies2; safecall;
    function EnumBodies2(BodyType: Integer): IEnumBodies2; safecall;
    function GetNamedEntitiesCount: Integer; safecall;
    function GetNamedEntities: OleVariant; safecall;
    function IGetNamedEntities(Count: Integer): IEntity; safecall;
    function GetCorrespondingEntity(const Entity: IDispatch): IDispatch; safecall;
    function IGetCorrespondingEntity(const PEntity: IEntity): IEntity; safecall;
    function InsertBasePart(const FileName: WideString): WordBool; safecall;
    procedure FeatureExtrusion3(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                                Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                                TranslateSurface1: WordBool; TranslateSurface2: WordBool; 
                                Merge: WordBool); safecall;
    procedure FeatureExtrusionThin3(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                    T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                    Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; 
                                    Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                                    OffsetReverse2: WordBool; TranslateSurface1: WordBool; 
                                    TranslateSurface2: WordBool; Merge: WordBool; Thk1: Double; 
                                    Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                                    CapEnds: Integer; AddBends: WordBool; BendRad: Double); safecall;
    function InsertMirrorFeature(GeometryPattern: WordBool): WordBool; safecall;
    function InsertMirrorAll: WordBool; safecall;
    procedure FeatureRevolve2(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                              RevType: Integer; Merge: WordBool); safecall;
    procedure FeatureRevolveThin2(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                  RevType: Integer; Thickness1: Double; Thickness2: Double; 
                                  ReverseThinDir: Integer; Merge: WordBool); safecall;
    function InsertCombineFeature(OperationType: Integer; const MainBody: IDispatch; 
                                  ToolVar: OleVariant): WordBool; safecall;
    function IInsertCombineFeature(OperationType: Integer; const MainBody: IBody2; 
                                   ToolsCount: Integer; var ToolsArr: IBody2): WordBool; safecall;
    function EnumBodies3(BodyType: Integer; BVisibleOnly: WordBool): IEnumBodies2; safecall;
    function GetBodies2(BodyType: Integer; BVisibleOnly: WordBool): OleVariant; safecall;
    procedure SetLineStyle(const StyleName: WideString); safecall;
    procedure SetLineWidth(Width: Integer); safecall;
    procedure SetLineColor(Color: Integer); safecall;
    function InsertPart(const FileName: WideString; ImportPlane: WordBool; ImportAxis: WordBool; 
                        ImportCThread: WordBool): IFeature; safecall;
    procedure SaveToFile; safecall;
    function GetMaterialPropertyName(out Database: WideString): WideString; safecall;
    procedure SetMaterialPropertyName(const Database: WideString; const Name: WideString); safecall;
    function SaveToFile2(const Name: WideString; Options: Integer; out Errors: Integer; 
                         out Warnings: Integer): WordBool; safecall;
    function GetMaterialPropertyName2(const ConfigName: WideString; out Database: WideString): WideString; safecall;
    procedure SetMaterialPropertyName2(const ConfigName: WideString; const Database: WideString; 
                                       const Name: WideString); safecall;
    function GetCorresponding(const InputObject: IDispatch): IDispatch; safecall;
    procedure ImportDiagnosisGapCloser(OldX: Double; OldY: Double; OldZ: Double; NewX: Double; 
                                       NewY: Double; NewZ: Double; LastMove: WordBool); safecall;
    function IsWeldment: WordBool; safecall;
    function GetMaterialVisualProperties: IMaterialVisualPropertiesData; safecall;
    function SetMaterialVisualProperties(const Properties: IMaterialVisualPropertiesData; 
                                         ConfigOption: Integer; ConfigNames: OleVariant): Integer; safecall;
    procedure FeatureXpert; safecall;
    function InsertPart2(const FileName: WideString; Options: Integer): IFeature; safecall;
    function ExportFlatPatternView(const FilePath: WideString; Options: Integer): WordBool; safecall;
    function IsMirrored: WordBool; safecall;
    property MaterialUserName: WideString read Get_MaterialUserName write Set_MaterialUserName;
    property MaterialIdName: WideString read Get_MaterialIdName write Set_MaterialIdName;
    property MaterialPropertyValues: OleVariant read Get_MaterialPropertyValues write Set_MaterialPropertyValues;
  end;

// *********************************************************************//
// DispIntf:  IPartDocDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D32-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IPartDocDisp = dispinterface
    ['{83A33D32-27C5-11CE-BFD4-00400513BB57}']
    property MaterialUserName: WideString dispid 1;
    property MaterialIdName: WideString dispid 2;
    property MaterialPropertyValues: OleVariant dispid 3;
    function FirstFeature: IDispatch; dispid 4;
    function IFirstFeature: IFeature; dispid 53;
    function FeatureByName(const Name: WideString): IDispatch; dispid 5;
    function IFeatureByName(const Name: WideString): IFeature; dispid 54;
    function FeatureById(ID: Integer): IDispatch; dispid 6;
    function IFeatureById(ID: Integer): IFeature; dispid 55;
    function Body: IDispatch; dispid 7;
    function IBodyObject: IBody; dispid 56;
    procedure Dummy18; dispid 8;
    procedure FeatureExtrusion(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                               T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                               Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                               Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool); dispid 9;
    procedure FeatureRevolve(Angle: Double; ReverseDir: WordBool; Angle2: Double; RevType: Integer); dispid 10;
    procedure FeatureRevolveCut(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                RevType: Integer); dispid 11;
    function GetTessTriangles(NoConversion: WordBool): OleVariant; dispid 12;
    function GetTessNorms: OleVariant; dispid 13;
    function GetProcessedBody: IDispatch; dispid 14;
    function IGetProcessedBody: IBody; dispid 57;
    function GetPartBox(NoConversion: WordBool): OleVariant; dispid 15;
    function CreateNewBody: IDispatch; dispid 16;
    function ICreateNewBody: IBody; dispid 58;
    procedure EditRebuild; dispid 17;
    procedure Dummy17; dispid 18;
    procedure Dummy19; dispid 19;
    procedure ForceRebuild; dispid 20;
    procedure EditUnsuppressDependent; dispid 21;
    procedure EditRollforward; dispid 22;
    procedure InsertStockTurned; dispid 23;
    procedure EditUnsuppress; dispid 24;
    procedure MakeSection; dispid 25;
    procedure Dumpfacets; dispid 26;
    procedure FeatureStock; dispid 27;
    procedure EditRollback; dispid 28;
    procedure EditSuppress; dispid 29;
    function AddPropertyExtension(PropertyExtension: OleVariant): Integer; dispid 30;
    function GetPropertyExtension(ID: Integer): OleVariant; dispid 31;
    procedure MirrorFeature; dispid 32;
    procedure ResetPropertyExtension; dispid 33;
    procedure Dummy1; dispid 34;
    procedure Dummy2; dispid 35;
    procedure Dummy3; dispid 36;
    procedure Dummy4; dispid 37;
    procedure Dummy5; dispid 38;
    procedure Dummy6; dispid 39;
    procedure Dummy7; dispid 40;
    procedure Dummy8; dispid 41;
    procedure Dummy9; dispid 42;
    procedure Dummy10; dispid 43;
    procedure Dummy11; dispid 44;
    procedure Dummy12; dispid 45;
    procedure Dummy13; dispid 46;
    procedure Dummy14; dispid 47;
    procedure Dummy15; dispid 48;
    procedure Dummy16; dispid 49;
    function GetProcessedBodyWithSelFace: IDispatch; dispid 50;
    function IGetProcessedBodyWithSelFace: IBody; dispid 59;
    function GetTessTriStrips(NoConversion: WordBool): OleVariant; dispid 51;
    function GetTessTriStripNorms: OleVariant; dispid 52;
    procedure MirrorPart; dispid 60;
    function IGetTessTriangles(NoConversion: WordBool): Single; dispid 61;
    function IGetTessNorms: Single; dispid 62;
    function GetTessTriangleCount: Integer; dispid 63;
    function IGetPartBox(NoConversion: WordBool): Double; dispid 64;
    function IGetTessTriStrips(NoConversion: WordBool): Single; dispid 65;
    function IGetTessTriStripNorms: Single; dispid 66;
    function GetTessTriStripSize: Integer; dispid 67;
    function GetEntityByName(const Name: WideString; EntityType: Integer): IDispatch; dispid 68;
    function IGetEntityByName(const Name: WideString; EntityType: Integer): IEntity; dispid 69;
    function GetEntityName(const Entity: IDispatch): WideString; dispid 70;
    function IGetEntityName(const Entity: IEntity): WideString; dispid 71;
    function SetEntityName(const Entity: IDispatch; const StringValue: WideString): WordBool; dispid 72;
    function ISetEntityName(const Entity: IEntity; const StringValue: WideString): WordBool; dispid 73;
    function ReorderFeature(const FeatureToMove: WideString; const MoveAfterFeature: WideString): WordBool; dispid 74;
    function EnumRelatedBodies: IEnumBodies; dispid 75;
    function GetSectionedBody(const ViewIn: IDispatch): IDispatch; dispid 76;
    function IGetSectionedBody(const ViewIn: IModelView): IBody; dispid 77;
    function EnumRelatedSectionedBodies(const ViewIn: IModelView): IEnumBodies; dispid 78;
    function IMaterialPropertyValues: Double; dispid 79;
    procedure FeatureRevolveThin(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                 RevType: Integer; Thickness1: Double; Thickness2: Double; 
                                 ReverseThinDir: Integer); dispid 80;
    procedure FeatureRevolveThinCut(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                    RevType: Integer; Thickness1: Double; Thickness2: Double; 
                                    ReverseThinDir: Integer); dispid 81;
    procedure FeatureExtrusionThin(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                   T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                   Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; 
                                   Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                                   OffsetReverse2: WordBool; Thk1: Double; Thk2: Double; 
                                   EndThk: Double; RevThinDir: Integer; CapEnds: Integer; 
                                   AddBends: WordBool; BendRad: Double); dispid 82;
    function InsertBends(Radius: Double; const UseBendTable: WideString; UseKfactor: Double; 
                         UseBendAllowance: Double; UseAutoRelief: WordBool; OffsetRatio: Double): WordBool; dispid 83;
    function CreateFeatureFromBody(const Body: IDispatch): IDispatch; dispid 84;
    function ICreateFeatureFromBody(const Body: IBody): IFeature; dispid 85;
    function CreateFeatureFromBody2(const Body: IDispatch; MakeRefSurface: WordBool): IDispatch; dispid 86;
    function ICreateFeatureFromBody2(const Body: IBody; MakeRefSurface: WordBool): IFeature; dispid 87;
    function ImportDiagnosis(CloseAllGaps: WordBool; RemoveFaces: WordBool; FixFaces: WordBool; 
                             Options: Integer): Integer; dispid 88;
    function DeleteEntityName(const Entity: IDispatch): WordBool; dispid 89;
    function IDeleteEntityName(const Entity: IEntity): WordBool; dispid 90;
    function GetTessTriStripEdges: OleVariant; dispid 91;
    function IGetTessTriStripEdges: Integer; dispid 92;
    function IGetTessTriStripEdgeSize: Integer; dispid 93;
    function EnumBodies(BodyType: Integer): IEnumBodies; dispid 94;
    function GetBodies(BodyType: Integer): OleVariant; dispid 95;
    function GetRelatedBodies: OleVariant; dispid 96;
    function GetRelatedSectionedBodies(const ViewIn: IDispatch): OleVariant; dispid 97;
    function InsertBends2(Radius: Double; const UseBendTable: WideString; UseKfactor: Double; 
                          UseBendAllowance: Double; UseAutoRelief: WordBool; OffsetRatio: Double; 
                          DoFlatten: WordBool): WordBool; dispid 98;
    function CreateFeatureFromBody3(const Body: IDispatch; MakeRefSurface: WordBool; 
                                    Options: Integer): IDispatch; dispid 99;
    function ICreateFeatureFromBody3(const Body: IBody; MakeRefSurface: WordBool; Options: Integer): IFeature; dispid 100;
    function GetMateReferenceEntity: IDispatch; dispid 101;
    procedure FeatureExtrusion2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                                Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                                Merge: WordBool); dispid 102;
    procedure FeatureExtrusionThin2(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                    T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                    Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; 
                                    Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                                    OffsetReverse2: WordBool; Merge: WordBool; Thk1: Double; 
                                    Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                                    CapEnds: Integer; AddBends: WordBool; BendRad: Double); dispid 103;
    function CreateSurfaceFeatureFromBody(const Body: IDispatch; Options: Integer): OleVariant; dispid 104;
    function ICreateSurfaceFeatureFromBodyCount(const Body: IBody; Options: Integer): Integer; dispid 105;
    function ICreateSurfaceFeatureFromBody: IFeature; dispid 106;
    function IBodyObject2: IBody2; dispid 107;
    function IGetProcessedBody2: IBody2; dispid 108;
    function ICreateNewBody2: IBody2; dispid 109;
    function IGetProcessedBodyWithSelFace2: IBody2; dispid 110;
    function IGetSectionedBody2(const ViewIn: IModelView): IBody2; dispid 111;
    function ICreateFeatureFromBody4(const Body: IBody2; MakeRefSurface: WordBool; Options: Integer): IFeature; dispid 112;
    function ICreateSurfaceFeatureFromBodyCount2(const Body: IBody2; Options: Integer): Integer; dispid 113;
    function EnumRelatedBodies2: IEnumBodies2; dispid 114;
    function EnumRelatedSectionedBodies2(const ViewIn: IModelView): IEnumBodies2; dispid 115;
    function EnumBodies2(BodyType: Integer): IEnumBodies2; dispid 116;
    function GetNamedEntitiesCount: Integer; dispid 117;
    function GetNamedEntities: OleVariant; dispid 118;
    function IGetNamedEntities(Count: Integer): IEntity; dispid 119;
    function GetCorrespondingEntity(const Entity: IDispatch): IDispatch; dispid 120;
    function IGetCorrespondingEntity(const PEntity: IEntity): IEntity; dispid 121;
    function InsertBasePart(const FileName: WideString): WordBool; dispid 122;
    procedure FeatureExtrusion3(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; Dang1: Double; 
                                Dang2: Double; OffsetReverse1: WordBool; OffsetReverse2: WordBool; 
                                TranslateSurface1: WordBool; TranslateSurface2: WordBool; 
                                Merge: WordBool); dispid 123;
    procedure FeatureExtrusionThin3(Sd: WordBool; Flip: WordBool; Dir: WordBool; T1: Integer; 
                                    T2: Integer; D1: Double; D2: Double; Dchk1: WordBool; 
                                    Dchk2: WordBool; Ddir1: WordBool; Ddir2: WordBool; 
                                    Dang1: Double; Dang2: Double; OffsetReverse1: WordBool; 
                                    OffsetReverse2: WordBool; TranslateSurface1: WordBool; 
                                    TranslateSurface2: WordBool; Merge: WordBool; Thk1: Double; 
                                    Thk2: Double; EndThk: Double; RevThinDir: Integer; 
                                    CapEnds: Integer; AddBends: WordBool; BendRad: Double); dispid 124;
    function InsertMirrorFeature(GeometryPattern: WordBool): WordBool; dispid 125;
    function InsertMirrorAll: WordBool; dispid 126;
    procedure FeatureRevolve2(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                              RevType: Integer; Merge: WordBool); dispid 127;
    procedure FeatureRevolveThin2(Angle: Double; ReverseDir: WordBool; Angle2: Double; 
                                  RevType: Integer; Thickness1: Double; Thickness2: Double; 
                                  ReverseThinDir: Integer; Merge: WordBool); dispid 128;
    function InsertCombineFeature(OperationType: Integer; const MainBody: IDispatch; 
                                  ToolVar: OleVariant): WordBool; dispid 129;
    function IInsertCombineFeature(OperationType: Integer; const MainBody: IBody2; 
                                   ToolsCount: Integer; var ToolsArr: IBody2): WordBool; dispid 130;
    function EnumBodies3(BodyType: Integer; BVisibleOnly: WordBool): IEnumBodies2; dispid 131;
    function GetBodies2(BodyType: Integer; BVisibleOnly: WordBool): OleVariant; dispid 132;
    procedure SetLineStyle(const StyleName: WideString); dispid 133;
    procedure SetLineWidth(Width: Integer); dispid 134;
    procedure SetLineColor(Color: Integer); dispid 135;
    function InsertPart(const FileName: WideString; ImportPlane: WordBool; ImportAxis: WordBool; 
                        ImportCThread: WordBool): IFeature; dispid 136;
    procedure SaveToFile; dispid 137;
    function GetMaterialPropertyName(out Database: WideString): WideString; dispid 138;
    procedure SetMaterialPropertyName(const Database: WideString; const Name: WideString); dispid 139;
    function SaveToFile2(const Name: WideString; Options: Integer; out Errors: Integer; 
                         out Warnings: Integer): WordBool; dispid 140;
    function GetMaterialPropertyName2(const ConfigName: WideString; out Database: WideString): WideString; dispid 141;
    procedure SetMaterialPropertyName2(const ConfigName: WideString; const Database: WideString; 
                                       const Name: WideString); dispid 142;
    function GetCorresponding(const InputObject: IDispatch): IDispatch; dispid 143;
    procedure ImportDiagnosisGapCloser(OldX: Double; OldY: Double; OldZ: Double; NewX: Double; 
                                       NewY: Double; NewZ: Double; LastMove: WordBool); dispid 144;
    function IsWeldment: WordBool; dispid 145;
    function GetMaterialVisualProperties: IMaterialVisualPropertiesData; dispid 146;
    function SetMaterialVisualProperties(const Properties: IMaterialVisualPropertiesData; 
                                         ConfigOption: Integer; ConfigNames: OleVariant): Integer; dispid 147;
    procedure FeatureXpert; dispid 148;
    function InsertPart2(const FileName: WideString; Options: Integer): IFeature; dispid 149;
    function ExportFlatPatternView(const FilePath: WideString; Options: Integer): WordBool; dispid 150;
    function IsMirrored: WordBool; dispid 151;
  end;

// *********************************************************************//
// Interface: IEnumBodies
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33D96-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumBodies = interface(IUnknown)
    ['{83A33D96-27C5-11CE-BFD4-00400513BB57}']
    function Next(Celt: Integer; out Rgelt: IBody; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumBodies): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IMaterialVisualPropertiesData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {66E0FCBD-16D4-4483-8731-DB08F90218DA}
// *********************************************************************//
  IMaterialVisualPropertiesData = interface(IDispatch)
    ['{66E0FCBD-16D4-4483-8731-DB08F90218DA}']
    function Get_AdvancedGraphics: WordBool; safecall;
    procedure Set_AdvancedGraphics(Advanced: WordBool); safecall;
    function Get_RealView: WordBool; safecall;
    procedure Set_RealView(RealView: WordBool); safecall;
    function Get_Scale2: Double; safecall;
    procedure Set_Scale2(Scale: Double); safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Angle: Double); safecall;
    function Get_BlendColor: WordBool; safecall;
    procedure Set_BlendColor(Blend: WordBool); safecall;
    function Get_ApplyMaterialColorToPart: WordBool; safecall;
    procedure Set_ApplyMaterialColorToPart(Apply: WordBool); safecall;
    function Get_ApplyMaterialHatchToSection: WordBool; safecall;
    procedure Set_ApplyMaterialHatchToSection(Apply: WordBool); safecall;
    property AdvancedGraphics: WordBool read Get_AdvancedGraphics write Set_AdvancedGraphics;
    property RealView: WordBool read Get_RealView write Set_RealView;
    property Scale2: Double read Get_Scale2 write Set_Scale2;
    property Angle: Double read Get_Angle write Set_Angle;
    property BlendColor: WordBool read Get_BlendColor write Set_BlendColor;
    property ApplyMaterialColorToPart: WordBool read Get_ApplyMaterialColorToPart write Set_ApplyMaterialColorToPart;
    property ApplyMaterialHatchToSection: WordBool read Get_ApplyMaterialHatchToSection write Set_ApplyMaterialHatchToSection;
  end;

// *********************************************************************//
// DispIntf:  IMaterialVisualPropertiesDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {66E0FCBD-16D4-4483-8731-DB08F90218DA}
// *********************************************************************//
  IMaterialVisualPropertiesDataDisp = dispinterface
    ['{66E0FCBD-16D4-4483-8731-DB08F90218DA}']
    property AdvancedGraphics: WordBool dispid 1;
    property RealView: WordBool dispid 2;
    property Scale2: Double dispid 3;
    property Angle: Double dispid 4;
    property BlendColor: WordBool dispid 5;
    property ApplyMaterialColorToPart: WordBool dispid 6;
    property ApplyMaterialHatchToSection: WordBool dispid 7;
  end;

// *********************************************************************//
// Interface: ITessellation
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {699C7492-DB56-4CC2-B7A2-9FFD56698434}
// *********************************************************************//
  ITessellation = interface(IDispatch)
    ['{699C7492-DB56-4CC2-B7A2-9FFD56698434}']
    function Get_MaxFacetWidth: Double; safecall;
    procedure Set_MaxFacetWidth(MaxWidth: Double); safecall;
    function Get_CurveChordTolerance: Double; safecall;
    procedure Set_CurveChordTolerance(Tolerance: Double); safecall;
    function Get_CurveChordAngleTolerance: Double; safecall;
    procedure Set_CurveChordAngleTolerance(Tolerance: Double); safecall;
    function Get_SurfacePlaneTolerance: Double; safecall;
    procedure Set_SurfacePlaneTolerance(Tolerance: Double); safecall;
    function Get_SurfacePlaneAngleTolerance: Double; safecall;
    procedure Set_SurfacePlaneAngleTolerance(Tolerance: Double); safecall;
    function Get_NeedVertexNormal: WordBool; safecall;
    procedure Set_NeedVertexNormal(Option: WordBool); safecall;
    function Get_NeedVertexParams: WordBool; safecall;
    procedure Set_NeedVertexParams(Option: WordBool); safecall;
    function Get_NeedFaceFacetMap: WordBool; safecall;
    procedure Set_NeedFaceFacetMap(Option: WordBool); safecall;
    function Get_NeedEdgeFinMap: WordBool; safecall;
    procedure Set_NeedEdgeFinMap(Option: WordBool); safecall;
    function Get_NeedErrorList: WordBool; safecall;
    procedure Set_NeedErrorList(Option: WordBool); safecall;
    function Tessellate: WordBool; safecall;
    function GetFacetCount: Integer; safecall;
    function GetFinCount: Integer; safecall;
    function GetVertexCount: Integer; safecall;
    function GetFacetFins(FacetId: Integer): OleVariant; safecall;
    function IGetFacetFinsCount(FacetId: Integer): Integer; safecall;
    function IGetFacetFins(FacetId: Integer): Integer; safecall;
    function GetFinCoFin(FinId: Integer): Integer; safecall;
    function GetFinVertices(FinId: Integer): OleVariant; safecall;
    function IGetFinVertices(FinId: Integer): Integer; safecall;
    function GetVertexPoint(VertexId: Integer): OleVariant; safecall;
    function IGetVertexPoint(VertexId: Integer): Double; safecall;
    function GetVertexNormal(VertexId: Integer): OleVariant; safecall;
    function IGetVertexNormal(VertexId: Integer): Double; safecall;
    function GetVertexParams(VertexId: Integer): OleVariant; safecall;
    function IGetVertexParams(VertexId: Integer): Double; safecall;
    function GetFaceFacets(const Facedisp: IDispatch): OleVariant; safecall;
    function IGetFaceFacetsCount(const FaceObj: IFace): Integer; safecall;
    function IGetFaceFacets(const FaceObj: IFace): Integer; safecall;
    function GetFacetFace(FacetId: Integer): IDispatch; safecall;
    function IGetFacetFace(FacetId: Integer): IFace; safecall;
    function GetEdgeFins(const EdgeDisp: IDispatch): OleVariant; safecall;
    function IGetEdgeFinsCount(const EdgeObj: IEdge): Integer; safecall;
    function IGetEdgeFins(const EdgeObj: IEdge): Integer; safecall;
    function GetFinEdge(FinId: Integer): IDispatch; safecall;
    function IGetFinEdge(FinId: Integer): IEdge; safecall;
    procedure GetErrorList(out FaceErrArray: OleVariant; out FacetErrArray: OleVariant; 
                           out VertexPointErrArray: OleVariant; 
                           out VertexNormalErrArray: OleVariant; 
                           out VertexParamsErrArray: OleVariant); safecall;
    procedure IGetErrorListCount(out FaceErrArrayCount: Integer; out FacetErrArrayCount: Integer; 
                                 out VertexPointErrArrayCount: Integer; 
                                 out VertexNormalErrArrayCount: Integer; 
                                 out VertexParamsErrArrayCount: Integer); safecall;
    procedure IGetErrorList(out FaceErrArray: IFace; out FacetErrArray: Integer; 
                            out VertexPointErrArray: Integer; out VertexNormalErrArray: Integer; 
                            out VertexParamsErrArray: Integer); safecall;
    function IGetFaceFacetsCount2(const FaceObj: IFace2): Integer; safecall;
    function IGetFaceFacets2(const FaceObj: IFace2): Integer; safecall;
    function IGetFacetFace2(FacetId: Integer): IFace2; safecall;
    procedure IGetErrorList2(out FaceErrArray: IFace2; out FacetErrArray: Integer; 
                             out VertexPointErrArray: Integer; out VertexNormalErrArray: Integer; 
                             out VertexParamsErrArray: Integer); safecall;
    function Get_MinFacetWidth: Double; safecall;
    procedure Set_MinFacetWidth(MinWidth: Double); safecall;
    function Get_MatchType: Integer; safecall;
    procedure Set_MatchType(Type_: Integer); safecall;
    property MaxFacetWidth: Double read Get_MaxFacetWidth write Set_MaxFacetWidth;
    property CurveChordTolerance: Double read Get_CurveChordTolerance write Set_CurveChordTolerance;
    property CurveChordAngleTolerance: Double read Get_CurveChordAngleTolerance write Set_CurveChordAngleTolerance;
    property SurfacePlaneTolerance: Double read Get_SurfacePlaneTolerance write Set_SurfacePlaneTolerance;
    property SurfacePlaneAngleTolerance: Double read Get_SurfacePlaneAngleTolerance write Set_SurfacePlaneAngleTolerance;
    property NeedVertexNormal: WordBool read Get_NeedVertexNormal write Set_NeedVertexNormal;
    property NeedVertexParams: WordBool read Get_NeedVertexParams write Set_NeedVertexParams;
    property NeedFaceFacetMap: WordBool read Get_NeedFaceFacetMap write Set_NeedFaceFacetMap;
    property NeedEdgeFinMap: WordBool read Get_NeedEdgeFinMap write Set_NeedEdgeFinMap;
    property NeedErrorList: WordBool read Get_NeedErrorList write Set_NeedErrorList;
    property MinFacetWidth: Double read Get_MinFacetWidth write Set_MinFacetWidth;
    property MatchType: Integer read Get_MatchType write Set_MatchType;
  end;

// *********************************************************************//
// DispIntf:  ITessellationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {699C7492-DB56-4CC2-B7A2-9FFD56698434}
// *********************************************************************//
  ITessellationDisp = dispinterface
    ['{699C7492-DB56-4CC2-B7A2-9FFD56698434}']
    property MaxFacetWidth: Double dispid 1;
    property CurveChordTolerance: Double dispid 2;
    property CurveChordAngleTolerance: Double dispid 3;
    property SurfacePlaneTolerance: Double dispid 4;
    property SurfacePlaneAngleTolerance: Double dispid 5;
    property NeedVertexNormal: WordBool dispid 6;
    property NeedVertexParams: WordBool dispid 7;
    property NeedFaceFacetMap: WordBool dispid 8;
    property NeedEdgeFinMap: WordBool dispid 9;
    property NeedErrorList: WordBool dispid 10;
    function Tessellate: WordBool; dispid 11;
    function GetFacetCount: Integer; dispid 12;
    function GetFinCount: Integer; dispid 13;
    function GetVertexCount: Integer; dispid 14;
    function GetFacetFins(FacetId: Integer): OleVariant; dispid 15;
    function IGetFacetFinsCount(FacetId: Integer): Integer; dispid 16;
    function IGetFacetFins(FacetId: Integer): Integer; dispid 17;
    function GetFinCoFin(FinId: Integer): Integer; dispid 18;
    function GetFinVertices(FinId: Integer): OleVariant; dispid 19;
    function IGetFinVertices(FinId: Integer): Integer; dispid 20;
    function GetVertexPoint(VertexId: Integer): OleVariant; dispid 21;
    function IGetVertexPoint(VertexId: Integer): Double; dispid 22;
    function GetVertexNormal(VertexId: Integer): OleVariant; dispid 23;
    function IGetVertexNormal(VertexId: Integer): Double; dispid 24;
    function GetVertexParams(VertexId: Integer): OleVariant; dispid 25;
    function IGetVertexParams(VertexId: Integer): Double; dispid 26;
    function GetFaceFacets(const Facedisp: IDispatch): OleVariant; dispid 27;
    function IGetFaceFacetsCount(const FaceObj: IFace): Integer; dispid 28;
    function IGetFaceFacets(const FaceObj: IFace): Integer; dispid 29;
    function GetFacetFace(FacetId: Integer): IDispatch; dispid 30;
    function IGetFacetFace(FacetId: Integer): IFace; dispid 31;
    function GetEdgeFins(const EdgeDisp: IDispatch): OleVariant; dispid 32;
    function IGetEdgeFinsCount(const EdgeObj: IEdge): Integer; dispid 33;
    function IGetEdgeFins(const EdgeObj: IEdge): Integer; dispid 34;
    function GetFinEdge(FinId: Integer): IDispatch; dispid 35;
    function IGetFinEdge(FinId: Integer): IEdge; dispid 36;
    procedure GetErrorList(out FaceErrArray: OleVariant; out FacetErrArray: OleVariant; 
                           out VertexPointErrArray: OleVariant; 
                           out VertexNormalErrArray: OleVariant; 
                           out VertexParamsErrArray: OleVariant); dispid 37;
    procedure IGetErrorListCount(out FaceErrArrayCount: Integer; out FacetErrArrayCount: Integer; 
                                 out VertexPointErrArrayCount: Integer; 
                                 out VertexNormalErrArrayCount: Integer; 
                                 out VertexParamsErrArrayCount: Integer); dispid 38;
    procedure IGetErrorList(out FaceErrArray: IFace; out FacetErrArray: Integer; 
                            out VertexPointErrArray: Integer; out VertexNormalErrArray: Integer; 
                            out VertexParamsErrArray: Integer); dispid 39;
    function IGetFaceFacetsCount2(const FaceObj: IFace2): Integer; dispid 40;
    function IGetFaceFacets2(const FaceObj: IFace2): Integer; dispid 41;
    function IGetFacetFace2(FacetId: Integer): IFace2; dispid 42;
    procedure IGetErrorList2(out FaceErrArray: IFace2; out FacetErrArray: Integer; 
                             out VertexPointErrArray: Integer; out VertexNormalErrArray: Integer; 
                             out VertexParamsErrArray: Integer); dispid 43;
    property MinFacetWidth: Double dispid 44;
    property MatchType: Integer dispid 45;
  end;

// *********************************************************************//
// Interface: IDiagnoseResult
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {08CC54D0-ECA9-416C-ABF0-07586843D51D}
// *********************************************************************//
  IDiagnoseResult = interface(IDispatch)
    ['{08CC54D0-ECA9-416C-ABF0-07586843D51D}']
    function GetGapsCount: Integer; safecall;
    function GetCoEdgesCountAtGap(Index: Integer): Integer; safecall;
    function IGetCoEdgesAtGap(Index: Integer; CoEdgeCount: Integer): ICoEdge; safecall;
    function GetCoEdgesAtGap(Index: Integer): OleVariant; safecall;
  end;

// *********************************************************************//
// DispIntf:  IDiagnoseResultDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {08CC54D0-ECA9-416C-ABF0-07586843D51D}
// *********************************************************************//
  IDiagnoseResultDisp = dispinterface
    ['{08CC54D0-ECA9-416C-ABF0-07586843D51D}']
    function GetGapsCount: Integer; dispid 1;
    function GetCoEdgesCountAtGap(Index: Integer): Integer; dispid 2;
    function IGetCoEdgesAtGap(Index: Integer; CoEdgeCount: Integer): ICoEdge; dispid 3;
    function GetCoEdgesAtGap(Index: Integer): OleVariant; dispid 4;
  end;

// *********************************************************************//
// Interface: IEnumLoops
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33D5D-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumLoops = interface(IUnknown)
    ['{83A33D5D-27C5-11CE-BFD4-00400513BB57}']
    function Next(Celt: Integer; out Rgelt: ILoop; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumLoops): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IEnumFaces
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33D5B-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumFaces = interface(IUnknown)
    ['{83A33D5B-27C5-11CE-BFD4-00400513BB57}']
    function Next(Celt: Integer; out Rgelt: IFace; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumFaces): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IMidSurface
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D88-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMidSurface = interface(IDispatch)
    ['{83A33D88-27C5-11CE-BFD4-00400513BB57}']
    function GetFacePairCount: Integer; safecall;
    function GetFirstFacePair(out Thickness: Double; out PartnerFaceDisp: IDispatch): IDispatch; safecall;
    function IGetFirstFacePair(out Thickness: Double; out PartnerFaceDisp: IFace): IFace; safecall;
    function GetNextFacePair(out Thickness: Double; out PartnerFaceDisp: IDispatch): IDispatch; safecall;
    function IGetNextFacePair(out Thickness: Double; out PartnerFaceDisp: IFace): IFace; safecall;
    function GetFirstNeutralSheet: IDispatch; safecall;
    function IGetFirstNeutralSheet: IBody; safecall;
    function GetNextNeutralSheet: IDispatch; safecall;
    function IGetNextNeutralSheet: IBody; safecall;
    function GetNeutralSheetCount: Integer; safecall;
    function GetFaceCount: Integer; safecall;
    function GetFirstFace(out FromFace1Disp: IDispatch; out FromFace2Disp: IDispatch; 
                          out Thickness: Double): IDispatch; safecall;
    function IGetFirstFace(out FromFace1Disp: IFace; out FromFace2Disp: IFace; out Thickness: Double): IFace; safecall;
    function GetNextFace(out FromFace1Disp: IDispatch; out FromFace2Disp: IDispatch; 
                         out Thickness: Double): IDispatch; safecall;
    function IGetNextFace(out FromFace1Disp: IFace; out FromFace2Disp: IFace; out Thickness: Double): IFace; safecall;
    function EdgeGetFace(const EdgeInDisp: IDispatch): IDispatch; safecall;
    function IEdgeGetFace(const EdgeInDisp: IEdge): IFace; safecall;
    function IGetFirstFaceArray(out FromFrontFaceListDisp: PPUserType5; 
                                out SizeOfFrontFaceList: Integer; 
                                out FromFaceBackListDisp: PPUserType5; 
                                out SizeOfBackFaceList: Integer; out Thickness: Double): IFace; safecall;
    function IGetNextFaceArray(out FromFrontFaceListDisp: PPUserType5; 
                               out SizeOfFrontFaceList: Integer; 
                               out FromFaceBackListDisp: PPUserType5; 
                               out SizeOfBackFaceList: Integer; out Thickness: Double): IFace; safecall;
    function GetFirstFaceArray(out Thickness: Double): OleVariant; safecall;
    function GetNextFaceArray(out Thickness: Double): OleVariant; safecall;
  end;

// *********************************************************************//
// DispIntf:  IMidSurfaceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D88-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMidSurfaceDisp = dispinterface
    ['{83A33D88-27C5-11CE-BFD4-00400513BB57}']
    function GetFacePairCount: Integer; dispid 1;
    function GetFirstFacePair(out Thickness: Double; out PartnerFaceDisp: IDispatch): IDispatch; dispid 2;
    function IGetFirstFacePair(out Thickness: Double; out PartnerFaceDisp: IFace): IFace; dispid 3;
    function GetNextFacePair(out Thickness: Double; out PartnerFaceDisp: IDispatch): IDispatch; dispid 4;
    function IGetNextFacePair(out Thickness: Double; out PartnerFaceDisp: IFace): IFace; dispid 5;
    function GetFirstNeutralSheet: IDispatch; dispid 6;
    function IGetFirstNeutralSheet: IBody; dispid 7;
    function GetNextNeutralSheet: IDispatch; dispid 8;
    function IGetNextNeutralSheet: IBody; dispid 9;
    function GetNeutralSheetCount: Integer; dispid 10;
    function GetFaceCount: Integer; dispid 11;
    function GetFirstFace(out FromFace1Disp: IDispatch; out FromFace2Disp: IDispatch; 
                          out Thickness: Double): IDispatch; dispid 12;
    function IGetFirstFace(out FromFace1Disp: IFace; out FromFace2Disp: IFace; out Thickness: Double): IFace; dispid 13;
    function GetNextFace(out FromFace1Disp: IDispatch; out FromFace2Disp: IDispatch; 
                         out Thickness: Double): IDispatch; dispid 14;
    function IGetNextFace(out FromFace1Disp: IFace; out FromFace2Disp: IFace; out Thickness: Double): IFace; dispid 15;
    function EdgeGetFace(const EdgeInDisp: IDispatch): IDispatch; dispid 16;
    function IEdgeGetFace(const EdgeInDisp: IEdge): IFace; dispid 17;
    function IGetFirstFaceArray(out FromFrontFaceListDisp: {??PPUserType5}OleVariant; 
                                out SizeOfFrontFaceList: Integer; 
                                out FromFaceBackListDisp: {??PPUserType5}OleVariant; 
                                out SizeOfBackFaceList: Integer; out Thickness: Double): IFace; dispid 18;
    function IGetNextFaceArray(out FromFrontFaceListDisp: {??PPUserType5}OleVariant; 
                               out SizeOfFrontFaceList: Integer; 
                               out FromFaceBackListDisp: {??PPUserType5}OleVariant; 
                               out SizeOfBackFaceList: Integer; out Thickness: Double): IFace; dispid 19;
    function GetFirstFaceArray(out Thickness: Double): OleVariant; dispid 20;
    function GetNextFaceArray(out Thickness: Double): OleVariant; dispid 21;
  end;

// *********************************************************************//
// Interface: IFrame
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D48-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFrame = interface(IDispatch)
    ['{83A33D48-27C5-11CE-BFD4-00400513BB57}']
    function AddMenuItem(const Menu: WideString; const Item: WideString; Position: Integer; 
                         const CallbackFcnAndModule: WideString): WordBool; safecall;
    function AddMenu(const Menu: WideString; Position: Integer): WordBool; safecall;
    procedure Dummy003; safecall;
    procedure Dummy004; safecall;
    function GetMenuState(const MenuItemString: WideString): Integer; safecall;
    procedure RenameMenu(const MenuItemString: WideString; const NewName: WideString); safecall;
    procedure RemoveMenu(const MenuItemString: WideString); safecall;
    function AddMenuPopupItem(DocType: Integer; SelectType: Integer; const Item: WideString; 
                              const CallbackFcnAndModule: WideString; 
                              const CustomNames: WideString; Unused: Integer): WordBool; safecall;
    function GetStatusBarPane: IStatusBarPane; safecall;
    procedure SetStatusBarText(const MessageString: WideString); safecall;
    function GetHWnd: Integer; safecall;
    function GetSubMenuCount(DocType: Integer; const FullMenuName: WideString): Integer; safecall;
    function GetSubMenus(DocType: Integer; const FullMenuName: WideString): OleVariant; safecall;
    function IGetSubMenus(DocType: Integer; const FullMenuName: WideString; NumSubMenus: Integer): WideString; safecall;
    function AddMenuItem2(const Menu: WideString; const Item: WideString; Position: Integer; 
                          const CallbackFcnAndModule: WideString; const BitmapFileName: WideString): WordBool; safecall;
    function GetHWndx64: Int64; safecall;
    function Get_ModelWindows: OleVariant; safecall;
    function GetModelWindowCount: Integer; safecall;
    function IGetModelWindows(ModelWindowCount: Integer): IModelWindow; safecall;
    procedure ShowModelWindow(const LpModelWindow: IModelWindow); safecall;
    function Get_MenuPinned: WordBool; safecall;
    procedure Set_MenuPinned(Pinned: WordBool); safecall;
    function GetMenu: Integer; safecall;
    function GetMenux64: Int64; safecall;
    property ModelWindows: OleVariant read Get_ModelWindows;
    property MenuPinned: WordBool read Get_MenuPinned write Set_MenuPinned;
  end;

// *********************************************************************//
// DispIntf:  IFrameDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D48-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IFrameDisp = dispinterface
    ['{83A33D48-27C5-11CE-BFD4-00400513BB57}']
    function AddMenuItem(const Menu: WideString; const Item: WideString; Position: Integer; 
                         const CallbackFcnAndModule: WideString): WordBool; dispid 1;
    function AddMenu(const Menu: WideString; Position: Integer): WordBool; dispid 2;
    procedure Dummy003; dispid 3;
    procedure Dummy004; dispid 4;
    function GetMenuState(const MenuItemString: WideString): Integer; dispid 5;
    procedure RenameMenu(const MenuItemString: WideString; const NewName: WideString); dispid 6;
    procedure RemoveMenu(const MenuItemString: WideString); dispid 7;
    function AddMenuPopupItem(DocType: Integer; SelectType: Integer; const Item: WideString; 
                              const CallbackFcnAndModule: WideString; 
                              const CustomNames: WideString; Unused: Integer): WordBool; dispid 8;
    function GetStatusBarPane: IStatusBarPane; dispid 9;
    procedure SetStatusBarText(const MessageString: WideString); dispid 10;
    function GetHWnd: Integer; dispid 11;
    function GetSubMenuCount(DocType: Integer; const FullMenuName: WideString): Integer; dispid 12;
    function GetSubMenus(DocType: Integer; const FullMenuName: WideString): OleVariant; dispid 13;
    function IGetSubMenus(DocType: Integer; const FullMenuName: WideString; NumSubMenus: Integer): WideString; dispid 14;
    function AddMenuItem2(const Menu: WideString; const Item: WideString; Position: Integer; 
                          const CallbackFcnAndModule: WideString; const BitmapFileName: WideString): WordBool; dispid 15;
    function GetHWndx64: {??Int64}OleVariant; dispid 16;
    property ModelWindows: OleVariant readonly dispid 17;
    function GetModelWindowCount: Integer; dispid 18;
    function IGetModelWindows(ModelWindowCount: Integer): IModelWindow; dispid 19;
    procedure ShowModelWindow(const LpModelWindow: IModelWindow); dispid 20;
    property MenuPinned: WordBool dispid 21;
    function GetMenu: Integer; dispid 22;
    function GetMenux64: {??Int64}OleVariant; dispid 23;
  end;

// *********************************************************************//
// Interface: IStatusBarPane
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {931F2702-3257-4372-BBCC-CBD4A7FBBC41}
// *********************************************************************//
  IStatusBarPane = interface(IDispatch)
    ['{931F2702-3257-4372-BBCC-CBD4A7FBBC41}']
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(Visible: WordBool); safecall;
    function Get_Text: WideString; safecall;
    procedure Set_Text(const Text: WideString); safecall;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Text: WideString read Get_Text write Set_Text;
  end;

// *********************************************************************//
// DispIntf:  IStatusBarPaneDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {931F2702-3257-4372-BBCC-CBD4A7FBBC41}
// *********************************************************************//
  IStatusBarPaneDisp = dispinterface
    ['{931F2702-3257-4372-BBCC-CBD4A7FBBC41}']
    property Visible: WordBool dispid 1;
    property Text: WideString dispid 2;
  end;

// *********************************************************************//
// Interface: IModelWindow
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {84BC447E-D4A9-43CF-8287-5D9F5AB0CA41}
// *********************************************************************//
  IModelWindow = interface(IDispatch)
    ['{84BC447E-D4A9-43CF-8287-5D9F5AB0CA41}']
    procedure Activate; safecall;
    function Get_HWnd: Integer; safecall;
    function Get_Title: WideString; safecall;
    function Get_ModelDoc: IModelDoc2; safecall;
    property HWnd: Integer read Get_HWnd;
    property Title: WideString read Get_Title;
    property ModelDoc: IModelDoc2 read Get_ModelDoc;
  end;

// *********************************************************************//
// DispIntf:  IModelWindowDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {84BC447E-D4A9-43CF-8287-5D9F5AB0CA41}
// *********************************************************************//
  IModelWindowDisp = dispinterface
    ['{84BC447E-D4A9-43CF-8287-5D9F5AB0CA41}']
    procedure Activate; dispid 1;
    property HWnd: Integer readonly dispid 2;
    property Title: WideString readonly dispid 3;
    property ModelDoc: IModelDoc2 readonly dispid 4;
  end;

// *********************************************************************//
// Interface: IAssemblyDoc
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D35-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAssemblyDoc = interface(IDispatch)
    ['{83A33D35-27C5-11CE-BFD4-00400513BB57}']
    function AddComponent(const CompName: WideString; X: Double; Y: Double; Z: Double): WordBool; safecall;
    procedure Dummy2; safecall;
    procedure FeatureExtrusion; safecall;
    procedure EditRebuild; safecall;
    procedure Dummy3; safecall;
    procedure Dummy4; safecall;
    procedure ToolsCheckInterference; safecall;
    procedure Dummy5; safecall;
    procedure Dummy6; safecall;
    function GetFirstMember: IDispatch; safecall;
    function GetSelectedMember: IDispatch; safecall;
    function IGetFirstMember: IMember; safecall;
    function IGetSelectedMember: IMember; safecall;
    procedure Dummy7; safecall;
    procedure ViewCollapseAssembly; safecall;
    procedure ViewExplodeAssembly; safecall;
    procedure TranslateComponent; safecall;
    procedure InsertNewPart; safecall;
    procedure Dummy1; safecall;
    procedure RotateComponent; safecall;
    procedure FileDeriveComponentPart; safecall;
    procedure InsertCavity; safecall;
    procedure HideComponent; safecall;
    procedure ShowComponent; safecall;
    procedure FixComponent; safecall;
    procedure UnfixComponent; safecall;
    procedure EditAssembly; safecall;
    procedure EditPart; safecall;
    procedure OpenCompFile; safecall;
    procedure UpdateFeatureScope; safecall;
    procedure AddMate(MateType: Integer; Align: Integer; Flip: WordBool; Dist: Double; Angle: Double); safecall;
    procedure CompConfigProperties(M_suppressed: WordBool; M_show_component: WordBool; 
                                   M_fdetail: WordBool); safecall;
    function AddToFeatureScope(const CompName: WideString): WordBool; safecall;
    function RemoveFromFeatureScope(const CompName: WideString): WordBool; safecall;
    procedure EditExplodeParameters; safecall;
    procedure RotateComponentAxis; safecall;
    procedure ViewFeatureManagerByFeatures; safecall;
    procedure ComponentReload; safecall;
    procedure ViewFeatureManagerByDependencies; safecall;
    procedure AssemblyPartToggle; safecall;
    function FeatureByName(const Name: WideString): IDispatch; safecall;
    function IFeatureByName(const Name: WideString): IFeature; safecall;
    procedure InsertJoin; safecall;
    procedure UpdateBox; safecall;
    procedure InsertWeld(const Type_: WideString; const Shape: WideString; TopDelta: Double; 
                         BottomDelta: Double; Radius: Double; const Part: WideString); safecall;
    procedure ForceRebuild; safecall;
    function GetEditTarget: IDispatch; safecall;
    function IGetEditTarget: IModelDoc; safecall;
    procedure InsertCavity2(ScaleFactor: Double; ScaleType: Integer); safecall;
    function AutoExplode: WordBool; safecall;
    function ShowExploded(ShowIt: WordBool): WordBool; safecall;
    function AddComponent2(const CompName: WideString; X: Double; Y: Double; Z: Double): IDispatch; safecall;
    function IAddComponent2(const CompName: WideString; X: Double; Y: Double; Z: Double): IComponent; safecall;
    procedure EditMate(MateType: Integer; Align: Integer; Flip: WordBool; Dist: Double; 
                       Angle: Double); safecall;
    function InsertDerivedPattern: WordBool; safecall;
    function ResolveAllLightWeightComponents(WarnUser: WordBool): Integer; safecall;
    function GetLightWeightComponentCount: Integer; safecall;
    procedure InsertCavity3(ScaleFactor: Double; ScaleType: Integer; KeepPieceIndex: Integer); safecall;
    function ComponentReload2(const Component: IDispatch; ReadOnly: WordBool; Options: Integer): Integer; safecall;
    function IComponentReload2(const Component: IComponent; ReadOnly: WordBool; Options: Integer): Integer; safecall;
    function CompConfigProperties2(Suppression: Integer; Visibility: WordBool; 
                                   FeatureDetails: WordBool): WordBool; safecall;
    function AddPipePenetration: Integer; safecall;
    function AddPipingFitting(const PathName: WideString; const ConfigName: WideString; 
                              AlignmentIndex: Smallint): WordBool; safecall;
    function IsComponentTreeValid: WordBool; safecall;
    procedure ForceRebuild2(TopOnly: WordBool); safecall;
    function SetDroppedFileConfigName(const ConfigName: WideString): WordBool; safecall;
    function AddComponents(Names: OleVariant; Transforms: OleVariant): OleVariant; safecall;
    function IAddComponents(var Count: Integer; var Names: WideString; var Transforms: Double): IComponent; safecall;
    function EditPart2(Silent: WordBool; AllowReadOnly: WordBool; var Information: Integer): Integer; safecall;
    procedure InsertCavity4(ScaleFactor_x: Double; ScaleFactor_y: Double; ScaleFactor_z: Double; 
                            IsUniform: WordBool; ScaleType: Integer; KeepPieceIndex: Integer); safecall;
    procedure ToolsCheckInterference2(NumComponents: Integer; LpComponents: OleVariant; 
                                      CoincidentInterference: WordBool; out PComp: OleVariant; 
                                      out PFace: OleVariant); safecall;
    procedure IToolsCheckInterference2(NumComponents: Integer; var LpComponents: IComponent; 
                                       CoincidentInterference: WordBool; out PComp: OleVariant; 
                                       out PFace: OleVariant); safecall;
    function GetDroppedAtEntity: IDispatch; safecall;
    function CompConfigProperties3(Suppression: Integer; Solving: Integer; Visibility: WordBool; 
                                   FeatureDetails: WordBool): WordBool; safecall;
    function IGetEditTarget2: IModelDoc2; safecall;
    function IAddComponent3(const CompName: WideString; X: Double; Y: Double; Z: Double): IComponent2; safecall;
    function IComponentReload3(const Component: IComponent2; ReadOnly: WordBool; Options: Integer): Integer; safecall;
    function IAddComponents2(var Count: Integer; var Names: WideString; var Transforms: Double): IComponent2; safecall;
    procedure IToolsCheckInterference3(NumComponents: Integer; var LpComponents: IComponent2; 
                                       CoincidentInterference: WordBool; out PComp: OleVariant; 
                                       out PFace: OleVariant); safecall;
    function SetDroppedFileName(const FileName: WideString): WordBool; safecall;
    function GetDragOperator: IDispatch; safecall;
    function IGetDragOperator: IDragOperator; safecall;
    procedure ViewFeatureManagerFeatureDetail(Detail: WordBool); safecall;
    function InsertJoin2(HideParts: WordBool; ForceContact: WordBool): WordBool; safecall;
    function DissolveSubAssembly: WordBool; safecall;
    function Get_EnablePresentation: WordBool; safecall;
    procedure Set_EnablePresentation(Retval: WordBool); safecall;
    function SetComponentState(SuppressionState: Integer; CompArr: OleVariant; 
                               ConfigOption: Integer; const WhichConfig: WideString; 
                               SaveClosedDocs: WordBool): WordBool; safecall;
    function ISetComponentState(SuppressionState: Integer; NumComps: Integer; 
                                var CompArr: IComponent2; ConfigOption: Integer; 
                                const WhichConfig: WideString; SaveClosedDocs: WordBool): WordBool; safecall;
    function ReplaceComponents(const FileName: WideString; const ConfigName: WideString; 
                               ReplaceAllInstance: WordBool; ReAttachMates: WordBool): WordBool; safecall;
    function GetVisibleComponentsInView: OleVariant; safecall;
    function GetVisibleComponentsInViewCount: Integer; safecall;
    function IGetVisibleComponentsInView(Count: Integer): IComponent2; safecall;
    procedure MakeLightWeight; safecall;
    function GetBox(Options: Integer): OleVariant; safecall;
    function IGetBox(Options: Integer): Double; safecall;
    function GetFeatureScopeCount(const FeatureIn: IFeature): Integer; safecall;
    function GetFeatureScope(const FeatureIn: IFeature): OleVariant; safecall;
    function IGetFeatureScope(const FeatureIn: IFeature; NumComponents: Integer): IComponent2; safecall;
    function AddComponent4(const CompName: WideString; const ConfigName: WideString; X: Double; 
                           Y: Double; Z: Double): IComponent2; safecall;
    function InsertNewPart2(const FilePathIn: WideString; const Face_or_Plane_to_select: IDispatch): Integer; safecall;
    function AddMate2(MateTypeFromEnum: Integer; AlignFromEnum: Integer; Flip: WordBool; 
                      Distance: Double; DistanceAbsUpperLimit: Double; 
                      DistanceAbsLowerLimit: Double; GearRatioNumerator: Double; 
                      GearRatioDenominator: Double; Angle: Double; AngleAbsUpperLimit: Double; 
                      AngleAbsLowerLimit: Double; out ErrorStatus: Integer): IMate2; safecall;
    procedure EditMate2(MateTypeFromEnum: Integer; AlignFromEnum: Integer; Flip: WordBool; 
                        Distance: Double; DistanceAbsUpperLimit: Double; 
                        DistanceAbsLowerLimit: Double; GearRatioNumerator: Double; 
                        GearRatioDenominator: Double; Angle: Double; AngleAbsUpperLimit: Double; 
                        AngleAbsLowerLimit: Double; out ErrorStatus: Integer); safecall;
    function DissolveComponentPattern: WordBool; safecall;
    procedure GetPhysicalSimulationComponents(InDuration: Double; out OutCount: Integer; 
                                              out OutComponents: OleVariant; 
                                              out OutTransforms: OleVariant; 
                                              out OutStepStartTimes: OleVariant; 
                                              out OutStepDurations: OleVariant; 
                                              out OutTotalPhysSimDuration: Double); safecall;
    procedure SetComponentVisibility(Visibility: WordBool; Config_opt: Integer; 
                                     Config_names: OleVariant); safecall;
    procedure ISetComponentVisibility(Visibility: WordBool; Config_opt: Integer; 
                                      Config_count: Integer; var Config_names: WideString); safecall;
    procedure ForceUpdateElectricalData(Stream: Integer); safecall;
    function CompConfigProperties4(Suppression: Integer; Solving: Integer; Visibility: WordBool; 
                                   UseNamedRefConfig: WordBool; const RefConfigName: WideString; 
                                   ExcludeFromBOM: WordBool): WordBool; safecall;
    function AddComponentConfiguration(const Name: WideString; const Comment: WideString; 
                                       const AlternateName: WideString; Options: Integer): IConfiguration; safecall;
    function Get_EnableAssemblyRebuild: WordBool; safecall;
    procedure Set_EnableAssemblyRebuild(VbEnable: WordBool); safecall;
    function AddMate3(MateTypeFromEnum: Integer; AlignFromEnum: Integer; Flip: WordBool; 
                      Distance: Double; DistanceAbsUpperLimit: Double; 
                      DistanceAbsLowerLimit: Double; GearRatioNumerator: Double; 
                      GearRatioDenominator: Double; Angle: Double; AngleAbsUpperLimit: Double; 
                      AngleAbsLowerLimit: Double; ForPositioningOnly: WordBool; 
                      out ErrorStatus: Integer): IMate2; safecall;
    function GetRouteManager: IDispatch; safecall;
    function GetSimulation: ISimulation; safecall;
    function GetAdvancedSelection: IAdvancedSelectionCriteria; safecall;
    function GetEditTargetComponent: IComponent2; safecall;
    function ForceUpdateElectricalData2(Stream: Integer): Integer; safecall;
    function GetComponentCount(TopLevelOnly: WordBool): Integer; safecall;
    function GetComponents(TopLevelOnly: WordBool): OleVariant; safecall;
    function IGetComponents(TopLevelOnly: WordBool; Count: Integer): IComponent2; safecall;
    function ResolveOutOfDateLightWeightComponents: WordBool; safecall;
    function InsertEnvelope(const CompName: WideString; const ConfigName: WideString; X: Double; 
                            Y: Double; Z: Double): IComponent2; safecall;
    function InsertLoadReference(const Mate: IMate2): IMateLoadReference; safecall;
    function ResolveAllLightweight: WordBool; safecall;
    function LightweightAllResolved: WordBool; safecall;
    function SetComponentSuppression(State: Integer): WordBool; safecall;
    function Get_InterferenceDetectionManager: IInterferenceDetectionMgr; safecall;
    function SetComponentTransparent(State: WordBool): WordBool; safecall;
    function CreateSmartComponent(const ComponentIn: IComponent2; RelatedComponents: OleVariant; 
                                  RelatedFeatures: OleVariant; AutoSizeDiameter: WordBool; 
                                  const LpMateReference: IEntity; BoundingValues: OleVariant): WordBool; safecall;
    function IsRouteAssembly: WordBool; safecall;
    function SetForceResetConfigName(Set_: WordBool): WordBool; safecall;
    function ReorderComponents(Source: OleVariant; const Target: IDispatch; Where: Integer): WordBool; safecall;
    function IReorderComponents(Count: Integer; var Source: IComponent2; const Target: IDispatch; 
                                Where: Integer): WordBool; safecall;
    function MirrorComponents(const Plane: IDispatch; ComponentsToInstance: OleVariant; 
                              ComponentsToMirror: OleVariant; 
                              MirroredComponentFilenames: OleVariant; RecreateMates: WordBool; 
                              ComponentModifier: Integer; const ComponentNameModifier: WideString; 
                              const MirroredFileLocation: WideString; CopyCustomProperties: WordBool): OleVariant; safecall;
    function IMirrorComponents(const Plane: IDispatch; InstanceCount: Integer; 
                               var ComponentsToInstance: IComponent2; MirrorCount: Integer; 
                               var ComponentsToMirror: IComponent2; NameCount: Integer; 
                               var MirroredComponentFilenames: WideString; RecreateMates: WordBool; 
                               ComponentModifier: Integer; const ComponentNameModifier: WideString; 
                               const MirroredFileLocation: WideString; 
                               CopyCustomProperties: WordBool): IComponent2; safecall;
    function SetDroppedFileFeatureName(const FeatureName: WideString): WordBool; safecall;
    function HasUnloadedComponents: WordBool; safecall;
    function GetUnloadedComponentNames(out UnloadedComponentPathNames: OleVariant; 
                                       out UnloadedComponentReferencedConfigurationNames: OleVariant; 
                                       out ReasonForUnloadingComponents: OleVariant; 
                                       out DocTypes: OleVariant): OleVariant; safecall;
    property EnablePresentation: WordBool read Get_EnablePresentation write Set_EnablePresentation;
    property EnableAssemblyRebuild: WordBool read Get_EnableAssemblyRebuild write Set_EnableAssemblyRebuild;
    property InterferenceDetectionManager: IInterferenceDetectionMgr read Get_InterferenceDetectionManager;
  end;

// *********************************************************************//
// DispIntf:  IAssemblyDocDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D35-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IAssemblyDocDisp = dispinterface
    ['{83A33D35-27C5-11CE-BFD4-00400513BB57}']
    function AddComponent(const CompName: WideString; X: Double; Y: Double; Z: Double): WordBool; dispid 1;
    procedure Dummy2; dispid 2;
    procedure FeatureExtrusion; dispid 3;
    procedure EditRebuild; dispid 4;
    procedure Dummy3; dispid 5;
    procedure Dummy4; dispid 6;
    procedure ToolsCheckInterference; dispid 7;
    procedure Dummy5; dispid 8;
    procedure Dummy6; dispid 9;
    function GetFirstMember: IDispatch; dispid 10;
    function GetSelectedMember: IDispatch; dispid 11;
    function IGetFirstMember: IMember; dispid 12;
    function IGetSelectedMember: IMember; dispid 13;
    procedure Dummy7; dispid 14;
    procedure ViewCollapseAssembly; dispid 15;
    procedure ViewExplodeAssembly; dispid 16;
    procedure TranslateComponent; dispid 17;
    procedure InsertNewPart; dispid 18;
    procedure Dummy1; dispid 19;
    procedure RotateComponent; dispid 20;
    procedure FileDeriveComponentPart; dispid 21;
    procedure InsertCavity; dispid 22;
    procedure HideComponent; dispid 23;
    procedure ShowComponent; dispid 24;
    procedure FixComponent; dispid 25;
    procedure UnfixComponent; dispid 26;
    procedure EditAssembly; dispid 27;
    procedure EditPart; dispid 28;
    procedure OpenCompFile; dispid 29;
    procedure UpdateFeatureScope; dispid 30;
    procedure AddMate(MateType: Integer; Align: Integer; Flip: WordBool; Dist: Double; Angle: Double); dispid 31;
    procedure CompConfigProperties(M_suppressed: WordBool; M_show_component: WordBool; 
                                   M_fdetail: WordBool); dispid 32;
    function AddToFeatureScope(const CompName: WideString): WordBool; dispid 33;
    function RemoveFromFeatureScope(const CompName: WideString): WordBool; dispid 34;
    procedure EditExplodeParameters; dispid 35;
    procedure RotateComponentAxis; dispid 36;
    procedure ViewFeatureManagerByFeatures; dispid 37;
    procedure ComponentReload; dispid 38;
    procedure ViewFeatureManagerByDependencies; dispid 39;
    procedure AssemblyPartToggle; dispid 40;
    function FeatureByName(const Name: WideString): IDispatch; dispid 41;
    function IFeatureByName(const Name: WideString): IFeature; dispid 42;
    procedure InsertJoin; dispid 43;
    procedure UpdateBox; dispid 44;
    procedure InsertWeld(const Type_: WideString; const Shape: WideString; TopDelta: Double; 
                         BottomDelta: Double; Radius: Double; const Part: WideString); dispid 45;
    procedure ForceRebuild; dispid 46;
    function GetEditTarget: IDispatch; dispid 47;
    function IGetEditTarget: IModelDoc; dispid 48;
    procedure InsertCavity2(ScaleFactor: Double; ScaleType: Integer); dispid 49;
    function AutoExplode: WordBool; dispid 50;
    function ShowExploded(ShowIt: WordBool): WordBool; dispid 51;
    function AddComponent2(const CompName: WideString; X: Double; Y: Double; Z: Double): IDispatch; dispid 52;
    function IAddComponent2(const CompName: WideString; X: Double; Y: Double; Z: Double): IComponent; dispid 53;
    procedure EditMate(MateType: Integer; Align: Integer; Flip: WordBool; Dist: Double; 
                       Angle: Double); dispid 54;
    function InsertDerivedPattern: WordBool; dispid 55;
    function ResolveAllLightWeightComponents(WarnUser: WordBool): Integer; dispid 56;
    function GetLightWeightComponentCount: Integer; dispid 57;
    procedure InsertCavity3(ScaleFactor: Double; ScaleType: Integer; KeepPieceIndex: Integer); dispid 58;
    function ComponentReload2(const Component: IDispatch; ReadOnly: WordBool; Options: Integer): Integer; dispid 59;
    function IComponentReload2(const Component: IComponent; ReadOnly: WordBool; Options: Integer): Integer; dispid 60;
    function CompConfigProperties2(Suppression: Integer; Visibility: WordBool; 
                                   FeatureDetails: WordBool): WordBool; dispid 61;
    function AddPipePenetration: Integer; dispid 62;
    function AddPipingFitting(const PathName: WideString; const ConfigName: WideString; 
                              AlignmentIndex: Smallint): WordBool; dispid 63;
    function IsComponentTreeValid: WordBool; dispid 64;
    procedure ForceRebuild2(TopOnly: WordBool); dispid 65;
    function SetDroppedFileConfigName(const ConfigName: WideString): WordBool; dispid 66;
    function AddComponents(Names: OleVariant; Transforms: OleVariant): OleVariant; dispid 67;
    function IAddComponents(var Count: Integer; var Names: WideString; var Transforms: Double): IComponent; dispid 68;
    function EditPart2(Silent: WordBool; AllowReadOnly: WordBool; var Information: Integer): Integer; dispid 69;
    procedure InsertCavity4(ScaleFactor_x: Double; ScaleFactor_y: Double; ScaleFactor_z: Double; 
                            IsUniform: WordBool; ScaleType: Integer; KeepPieceIndex: Integer); dispid 70;
    procedure ToolsCheckInterference2(NumComponents: Integer; LpComponents: OleVariant; 
                                      CoincidentInterference: WordBool; out PComp: OleVariant; 
                                      out PFace: OleVariant); dispid 71;
    procedure IToolsCheckInterference2(NumComponents: Integer; var LpComponents: IComponent; 
                                       CoincidentInterference: WordBool; out PComp: OleVariant; 
                                       out PFace: OleVariant); dispid 72;
    function GetDroppedAtEntity: IDispatch; dispid 73;
    function CompConfigProperties3(Suppression: Integer; Solving: Integer; Visibility: WordBool; 
                                   FeatureDetails: WordBool): WordBool; dispid 74;
    function IGetEditTarget2: IModelDoc2; dispid 75;
    function IAddComponent3(const CompName: WideString; X: Double; Y: Double; Z: Double): IComponent2; dispid 76;
    function IComponentReload3(const Component: IComponent2; ReadOnly: WordBool; Options: Integer): Integer; dispid 77;
    function IAddComponents2(var Count: Integer; var Names: WideString; var Transforms: Double): IComponent2; dispid 78;
    procedure IToolsCheckInterference3(NumComponents: Integer; var LpComponents: IComponent2; 
                                       CoincidentInterference: WordBool; out PComp: OleVariant; 
                                       out PFace: OleVariant); dispid 79;
    function SetDroppedFileName(const FileName: WideString): WordBool; dispid 80;
    function GetDragOperator: IDispatch; dispid 81;
    function IGetDragOperator: IDragOperator; dispid 82;
    procedure ViewFeatureManagerFeatureDetail(Detail: WordBool); dispid 83;
    function InsertJoin2(HideParts: WordBool; ForceContact: WordBool): WordBool; dispid 84;
    function DissolveSubAssembly: WordBool; dispid 85;
    property EnablePresentation: WordBool dispid 86;
    function SetComponentState(SuppressionState: Integer; CompArr: OleVariant; 
                               ConfigOption: Integer; const WhichConfig: WideString; 
                               SaveClosedDocs: WordBool): WordBool; dispid 87;
    function ISetComponentState(SuppressionState: Integer; NumComps: Integer; 
                                var CompArr: IComponent2; ConfigOption: Integer; 
                                const WhichConfig: WideString; SaveClosedDocs: WordBool): WordBool; dispid 88;
    function ReplaceComponents(const FileName: WideString; const ConfigName: WideString; 
                               ReplaceAllInstance: WordBool; ReAttachMates: WordBool): WordBool; dispid 89;
    function GetVisibleComponentsInView: OleVariant; dispid 90;
    function GetVisibleComponentsInViewCount: Integer; dispid 91;
    function IGetVisibleComponentsInView(Count: Integer): IComponent2; dispid 92;
    procedure MakeLightWeight; dispid 93;
    function GetBox(Options: Integer): OleVariant; dispid 94;
    function IGetBox(Options: Integer): Double; dispid 95;
    function GetFeatureScopeCount(const FeatureIn: IFeature): Integer; dispid 96;
    function GetFeatureScope(const FeatureIn: IFeature): OleVariant; dispid 97;
    function IGetFeatureScope(const FeatureIn: IFeature; NumComponents: Integer): IComponent2; dispid 98;
    function AddComponent4(const CompName: WideString; const ConfigName: WideString; X: Double; 
                           Y: Double; Z: Double): IComponent2; dispid 99;
    function InsertNewPart2(const FilePathIn: WideString; const Face_or_Plane_to_select: IDispatch): Integer; dispid 100;
    function AddMate2(MateTypeFromEnum: Integer; AlignFromEnum: Integer; Flip: WordBool; 
                      Distance: Double; DistanceAbsUpperLimit: Double; 
                      DistanceAbsLowerLimit: Double; GearRatioNumerator: Double; 
                      GearRatioDenominator: Double; Angle: Double; AngleAbsUpperLimit: Double; 
                      AngleAbsLowerLimit: Double; out ErrorStatus: Integer): IMate2; dispid 101;
    procedure EditMate2(MateTypeFromEnum: Integer; AlignFromEnum: Integer; Flip: WordBool; 
                        Distance: Double; DistanceAbsUpperLimit: Double; 
                        DistanceAbsLowerLimit: Double; GearRatioNumerator: Double; 
                        GearRatioDenominator: Double; Angle: Double; AngleAbsUpperLimit: Double; 
                        AngleAbsLowerLimit: Double; out ErrorStatus: Integer); dispid 102;
    function DissolveComponentPattern: WordBool; dispid 103;
    procedure GetPhysicalSimulationComponents(InDuration: Double; out OutCount: Integer; 
                                              out OutComponents: OleVariant; 
                                              out OutTransforms: OleVariant; 
                                              out OutStepStartTimes: OleVariant; 
                                              out OutStepDurations: OleVariant; 
                                              out OutTotalPhysSimDuration: Double); dispid 104;
    procedure SetComponentVisibility(Visibility: WordBool; Config_opt: Integer; 
                                     Config_names: OleVariant); dispid 105;
    procedure ISetComponentVisibility(Visibility: WordBool; Config_opt: Integer; 
                                      Config_count: Integer; var Config_names: WideString); dispid 106;
    procedure ForceUpdateElectricalData(Stream: Integer); dispid 107;
    function CompConfigProperties4(Suppression: Integer; Solving: Integer; Visibility: WordBool; 
                                   UseNamedRefConfig: WordBool; const RefConfigName: WideString; 
                                   ExcludeFromBOM: WordBool): WordBool; dispid 108;
    function AddComponentConfiguration(const Name: WideString; const Comment: WideString; 
                                       const AlternateName: WideString; Options: Integer): IConfiguration; dispid 109;
    property EnableAssemblyRebuild: WordBool dispid 110;
    function AddMate3(MateTypeFromEnum: Integer; AlignFromEnum: Integer; Flip: WordBool; 
                      Distance: Double; DistanceAbsUpperLimit: Double; 
                      DistanceAbsLowerLimit: Double; GearRatioNumerator: Double; 
                      GearRatioDenominator: Double; Angle: Double; AngleAbsUpperLimit: Double; 
                      AngleAbsLowerLimit: Double; ForPositioningOnly: WordBool; 
                      out ErrorStatus: Integer): IMate2; dispid 111;
    function GetRouteManager: IDispatch; dispid 112;
    function GetSimulation: ISimulation; dispid 113;
    function GetAdvancedSelection: IAdvancedSelectionCriteria; dispid 114;
    function GetEditTargetComponent: IComponent2; dispid 115;
    function ForceUpdateElectricalData2(Stream: Integer): Integer; dispid 116;
    function GetComponentCount(TopLevelOnly: WordBool): Integer; dispid 117;
    function GetComponents(TopLevelOnly: WordBool): OleVariant; dispid 118;
    function IGetComponents(TopLevelOnly: WordBool; Count: Integer): IComponent2; dispid 119;
    function ResolveOutOfDateLightWeightComponents: WordBool; dispid 120;
    function InsertEnvelope(const CompName: WideString; const ConfigName: WideString; X: Double; 
                            Y: Double; Z: Double): IComponent2; dispid 121;
    function InsertLoadReference(const Mate: IMate2): IMateLoadReference; dispid 122;
    function ResolveAllLightweight: WordBool; dispid 123;
    function LightweightAllResolved: WordBool; dispid 124;
    function SetComponentSuppression(State: Integer): WordBool; dispid 125;
    property InterferenceDetectionManager: IInterferenceDetectionMgr readonly dispid 126;
    function SetComponentTransparent(State: WordBool): WordBool; dispid 127;
    function CreateSmartComponent(const ComponentIn: IComponent2; RelatedComponents: OleVariant; 
                                  RelatedFeatures: OleVariant; AutoSizeDiameter: WordBool; 
                                  const LpMateReference: IEntity; BoundingValues: OleVariant): WordBool; dispid 128;
    function IsRouteAssembly: WordBool; dispid 129;
    function SetForceResetConfigName(Set_: WordBool): WordBool; dispid 130;
    function ReorderComponents(Source: OleVariant; const Target: IDispatch; Where: Integer): WordBool; dispid 131;
    function IReorderComponents(Count: Integer; var Source: IComponent2; const Target: IDispatch; 
                                Where: Integer): WordBool; dispid 132;
    function MirrorComponents(const Plane: IDispatch; ComponentsToInstance: OleVariant; 
                              ComponentsToMirror: OleVariant; 
                              MirroredComponentFilenames: OleVariant; RecreateMates: WordBool; 
                              ComponentModifier: Integer; const ComponentNameModifier: WideString; 
                              const MirroredFileLocation: WideString; CopyCustomProperties: WordBool): OleVariant; dispid 133;
    function IMirrorComponents(const Plane: IDispatch; InstanceCount: Integer; 
                               var ComponentsToInstance: IComponent2; MirrorCount: Integer; 
                               var ComponentsToMirror: IComponent2; NameCount: Integer; 
                               var MirroredComponentFilenames: WideString; RecreateMates: WordBool; 
                               ComponentModifier: Integer; const ComponentNameModifier: WideString; 
                               const MirroredFileLocation: WideString; 
                               CopyCustomProperties: WordBool): IComponent2; dispid 134;
    function SetDroppedFileFeatureName(const FeatureName: WideString): WordBool; dispid 135;
    function HasUnloadedComponents: WordBool; dispid 136;
    function GetUnloadedComponentNames(out UnloadedComponentPathNames: OleVariant; 
                                       out UnloadedComponentReferencedConfigurationNames: OleVariant; 
                                       out ReasonForUnloadingComponents: OleVariant; 
                                       out DocTypes: OleVariant): OleVariant; dispid 137;
  end;

// *********************************************************************//
// Interface: IMember
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D4E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMember = interface(IDispatch)
    ['{83A33D4E-27C5-11CE-BFD4-00400513BB57}']
    function Get_Dummy001: WideString; safecall;
    procedure Set_Dummy001(const Retval: WideString); safecall;
    procedure Dummy002; safecall;
    procedure Dummy007; safecall;
    procedure Dummy003; safecall;
    procedure Dummy004; safecall;
    procedure Dummy008; safecall;
    procedure Dummy005; safecall;
    procedure Dummy006; safecall;
    procedure Dummy009; safecall;
    procedure Dummy010; safecall;
    procedure Dummy011; safecall;
    property Dummy001: WideString read Get_Dummy001 write Set_Dummy001;
  end;

// *********************************************************************//
// DispIntf:  IMemberDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D4E-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMemberDisp = dispinterface
    ['{83A33D4E-27C5-11CE-BFD4-00400513BB57}']
    property Dummy001: WideString dispid 1;
    procedure Dummy002; dispid 2;
    procedure Dummy007; dispid 7;
    procedure Dummy003; dispid 3;
    procedure Dummy004; dispid 4;
    procedure Dummy008; dispid 8;
    procedure Dummy005; dispid 5;
    procedure Dummy006; dispid 6;
    procedure Dummy009; dispid 9;
    procedure Dummy010; dispid 10;
    procedure Dummy011; dispid 11;
  end;

// *********************************************************************//
// Interface: IDragOperator
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E0AACE0F-3A47-437E-99B4-9330CD6186BA}
// *********************************************************************//
  IDragOperator = interface(IDispatch)
    ['{E0AACE0F-3A47-437E-99B4-9330CD6186BA}']
    function Get_IsRelaxationEval: WordBool; safecall;
    procedure Set_IsRelaxationEval(Method: WordBool); safecall;
    function Get_DragMode: Smallint; safecall;
    procedure Set_DragMode(Mode: Smallint); safecall;
    function Get_IsDragSpecific: WordBool; safecall;
    procedure Set_IsDragSpecific(Value: WordBool); safecall;
    function Get_TransformType: Smallint; safecall;
    procedure Set_TransformType(Type_: Smallint); safecall;
    function Get_IsDragByRay: WordBool; safecall;
    procedure Set_IsDragByRay(Value: WordBool); safecall;
    function Get_CollisionDetectionEnabled: WordBool; safecall;
    procedure Set_CollisionDetectionEnabled(Result: WordBool); safecall;
    function Get_HighlightClashes: WordBool; safecall;
    procedure Set_HighlightClashes(Result: WordBool); safecall;
    function Get_HearClashes: WordBool; safecall;
    procedure Set_HearClashes(Result: WordBool); safecall;
    function Get_ApplyToThisConfiguration: WordBool; safecall;
    procedure Set_ApplyToThisConfiguration(Result: WordBool); safecall;
    function Get_IgnoreComplexSurfaces: WordBool; safecall;
    procedure Set_IgnoreComplexSurfaces(Result: WordBool); safecall;
    function Get_SmartMating: WordBool; safecall;
    procedure Set_SmartMating(Result: WordBool); safecall;
    function Get_DynamicClearanceEnabled: WordBool; safecall;
    procedure Set_DynamicClearanceEnabled(Result: WordBool); safecall;
    function AddComponent(const PDisp: IDispatch; AppendFlag: WordBool): WordBool; safecall;
    function IAddComponent(const PComp: IComponent2; AppendFlag: WordBool): WordBool; safecall;
    function BeginDrag: WordBool; safecall;
    function EndDrag: WordBool; safecall;
    function Drag(const PXform: IDispatch): WordBool; safecall;
    function IDrag(const PXform: IMathTransform): WordBool; safecall;
    function AddDynamicClearance(const Comp1: IDispatch; const Comp2: IDispatch; Value: Double; 
                                 AppendFlag: WordBool; ShowDim: WordBool): Integer; safecall;
    function IAddDynamicClearance(const Comp1: IComponent2; const Comp2: IComponent2; 
                                  Value: Double; AppendFlag: WordBool; ShowDim: WordBool): Integer; safecall;
    function Get_Clearance(NIndex: Integer): Double; safecall;
    function CollisionDetection(EntityArray: OleVariant; PartOnly: WordBool; StopAt: WordBool): WordBool; safecall;
    function ICollisionDetection(Count: Integer; var ComponentArray: IComponent2; 
                                 PartOnly: WordBool; StopAt: WordBool): WordBool; safecall;
    function GetDragPoint(out Point: OleVariant): WordBool; safecall;
    function SetDragPoint(Point: OleVariant): WordBool; safecall;
    function IGetDragPoint(out Point: Double): WordBool; safecall;
    function ISetDragPoint(var Point: Double): WordBool; safecall;
    function DragAsUI(const PXform: IMathTransform): WordBool; safecall;
    function Get_DragCorrected: WordBool; safecall;
    function Get_UseAbsoluteTransform: WordBool; safecall;
    procedure Set_UseAbsoluteTransform(Result: WordBool); safecall;
    function Get_GraphicsRedrawEnabled: WordBool; safecall;
    procedure Set_GraphicsRedrawEnabled(State: WordBool); safecall;
    property IsRelaxationEval: WordBool read Get_IsRelaxationEval write Set_IsRelaxationEval;
    property DragMode: Smallint read Get_DragMode write Set_DragMode;
    property IsDragSpecific: WordBool read Get_IsDragSpecific write Set_IsDragSpecific;
    property TransformType: Smallint read Get_TransformType write Set_TransformType;
    property IsDragByRay: WordBool read Get_IsDragByRay write Set_IsDragByRay;
    property CollisionDetectionEnabled: WordBool read Get_CollisionDetectionEnabled write Set_CollisionDetectionEnabled;
    property HighlightClashes: WordBool read Get_HighlightClashes write Set_HighlightClashes;
    property HearClashes: WordBool read Get_HearClashes write Set_HearClashes;
    property ApplyToThisConfiguration: WordBool read Get_ApplyToThisConfiguration write Set_ApplyToThisConfiguration;
    property IgnoreComplexSurfaces: WordBool read Get_IgnoreComplexSurfaces write Set_IgnoreComplexSurfaces;
    property SmartMating: WordBool read Get_SmartMating write Set_SmartMating;
    property DynamicClearanceEnabled: WordBool read Get_DynamicClearanceEnabled write Set_DynamicClearanceEnabled;
    property Clearance[NIndex: Integer]: Double read Get_Clearance;
    property DragCorrected: WordBool read Get_DragCorrected;
    property UseAbsoluteTransform: WordBool read Get_UseAbsoluteTransform write Set_UseAbsoluteTransform;
    property GraphicsRedrawEnabled: WordBool read Get_GraphicsRedrawEnabled write Set_GraphicsRedrawEnabled;
  end;

// *********************************************************************//
// DispIntf:  IDragOperatorDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E0AACE0F-3A47-437E-99B4-9330CD6186BA}
// *********************************************************************//
  IDragOperatorDisp = dispinterface
    ['{E0AACE0F-3A47-437E-99B4-9330CD6186BA}']
    property IsRelaxationEval: WordBool dispid 1;
    property DragMode: Smallint dispid 2;
    property IsDragSpecific: WordBool dispid 3;
    property TransformType: Smallint dispid 4;
    property IsDragByRay: WordBool dispid 5;
    property CollisionDetectionEnabled: WordBool dispid 6;
    property HighlightClashes: WordBool dispid 7;
    property HearClashes: WordBool dispid 8;
    property ApplyToThisConfiguration: WordBool dispid 9;
    property IgnoreComplexSurfaces: WordBool dispid 10;
    property SmartMating: WordBool dispid 11;
    property DynamicClearanceEnabled: WordBool dispid 12;
    function AddComponent(const PDisp: IDispatch; AppendFlag: WordBool): WordBool; dispid 13;
    function IAddComponent(const PComp: IComponent2; AppendFlag: WordBool): WordBool; dispid 14;
    function BeginDrag: WordBool; dispid 15;
    function EndDrag: WordBool; dispid 16;
    function Drag(const PXform: IDispatch): WordBool; dispid 17;
    function IDrag(const PXform: IMathTransform): WordBool; dispid 18;
    function AddDynamicClearance(const Comp1: IDispatch; const Comp2: IDispatch; Value: Double; 
                                 AppendFlag: WordBool; ShowDim: WordBool): Integer; dispid 19;
    function IAddDynamicClearance(const Comp1: IComponent2; const Comp2: IComponent2; 
                                  Value: Double; AppendFlag: WordBool; ShowDim: WordBool): Integer; dispid 20;
    property Clearance[NIndex: Integer]: Double readonly dispid 21;
    function CollisionDetection(EntityArray: OleVariant; PartOnly: WordBool; StopAt: WordBool): WordBool; dispid 22;
    function ICollisionDetection(Count: Integer; var ComponentArray: IComponent2; 
                                 PartOnly: WordBool; StopAt: WordBool): WordBool; dispid 23;
    function GetDragPoint(out Point: OleVariant): WordBool; dispid 24;
    function SetDragPoint(Point: OleVariant): WordBool; dispid 25;
    function IGetDragPoint(out Point: Double): WordBool; dispid 26;
    function ISetDragPoint(var Point: Double): WordBool; dispid 27;
    function DragAsUI(const PXform: IMathTransform): WordBool; dispid 28;
    property DragCorrected: WordBool readonly dispid 29;
    property UseAbsoluteTransform: WordBool dispid 30;
    property GraphicsRedrawEnabled: WordBool dispid 31;
  end;

// *********************************************************************//
// Interface: IMate2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B09D234A-7581-408E-B3B3-FC0A514AAFA8}
// *********************************************************************//
  IMate2 = interface(IDispatch)
    ['{B09D234A-7581-408E-B3B3-FC0A514AAFA8}']
    function GetMateEntityCount: Integer; safecall;
    function MateEntity(Index: Integer): IMateEntity2; safecall;
    function Get_type_: Integer; safecall;
    function Get_Alignment: Integer; safecall;
    function Get_CanBeFlipped: WordBool; safecall;
    function Get_DisplayDimension: IDisplayDimension; safecall;
    function Get_MaximumVariation: Double; safecall;
    function Get_MinimumVariation: Double; safecall;
    function Get_Flipped: WordBool; safecall;
    procedure Set_Flipped(VbFlipped: WordBool); safecall;
    function Get_DisplayDimension2(Index: Integer): IDisplayDimension; safecall;
    function Get_MateLoadReference: IMateLoadReference; safecall;
    property type_: Integer read Get_type_;
    property Alignment: Integer read Get_Alignment;
    property CanBeFlipped: WordBool read Get_CanBeFlipped;
    property DisplayDimension: IDisplayDimension read Get_DisplayDimension;
    property MaximumVariation: Double read Get_MaximumVariation;
    property MinimumVariation: Double read Get_MinimumVariation;
    property Flipped: WordBool read Get_Flipped write Set_Flipped;
    property DisplayDimension2[Index: Integer]: IDisplayDimension read Get_DisplayDimension2;
    property MateLoadReference: IMateLoadReference read Get_MateLoadReference;
  end;

// *********************************************************************//
// DispIntf:  IMate2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B09D234A-7581-408E-B3B3-FC0A514AAFA8}
// *********************************************************************//
  IMate2Disp = dispinterface
    ['{B09D234A-7581-408E-B3B3-FC0A514AAFA8}']
    function GetMateEntityCount: Integer; dispid 1;
    function MateEntity(Index: Integer): IMateEntity2; dispid 2;
    property type_: Integer readonly dispid 3;
    property Alignment: Integer readonly dispid 4;
    property CanBeFlipped: WordBool readonly dispid 5;
    property DisplayDimension: IDisplayDimension readonly dispid 6;
    property MaximumVariation: Double readonly dispid 7;
    property MinimumVariation: Double readonly dispid 8;
    property Flipped: WordBool dispid 9;
    property DisplayDimension2[Index: Integer]: IDisplayDimension readonly dispid 10;
    property MateLoadReference: IMateLoadReference readonly dispid 11;
  end;

// *********************************************************************//
// Interface: IMateEntity2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CE7FE69D-BCFA-441F-A37D-E740546458A4}
// *********************************************************************//
  IMateEntity2 = interface(IDispatch)
    ['{CE7FE69D-BCFA-441F-A37D-E740546458A4}']
    function GetEntityParamsSize: Integer; safecall;
    function Get_EntityParams: OleVariant; safecall;
    function IGetEntityParams(NParamsSize: Integer): Double; safecall;
    function Get_Reference: IDispatch; safecall;
    function Get_ReferenceType: Integer; safecall;
    function Get_ReferenceComponent: IComponent2; safecall;
    function Get_ReferenceType2: Integer; safecall;
    property EntityParams: OleVariant read Get_EntityParams;
    property Reference: IDispatch read Get_Reference;
    property ReferenceType: Integer read Get_ReferenceType;
    property ReferenceComponent: IComponent2 read Get_ReferenceComponent;
    property ReferenceType2: Integer read Get_ReferenceType2;
  end;

// *********************************************************************//
// DispIntf:  IMateEntity2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CE7FE69D-BCFA-441F-A37D-E740546458A4}
// *********************************************************************//
  IMateEntity2Disp = dispinterface
    ['{CE7FE69D-BCFA-441F-A37D-E740546458A4}']
    function GetEntityParamsSize: Integer; dispid 1;
    property EntityParams: OleVariant readonly dispid 2;
    function IGetEntityParams(NParamsSize: Integer): Double; dispid 3;
    property Reference: IDispatch readonly dispid 4;
    property ReferenceType: Integer readonly dispid 5;
    property ReferenceComponent: IComponent2 readonly dispid 6;
    property ReferenceType2: Integer readonly dispid 7;
  end;

// *********************************************************************//
// Interface: IMateLoadReference
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {35627CFB-32E3-468C-AAA3-9222D2F190BD}
// *********************************************************************//
  IMateLoadReference = interface(IDispatch)
    ['{35627CFB-32E3-468C-AAA3-9222D2F190BD}']
    function Get_Mate: IMate2; safecall;
    function Get_Name: WideString; safecall;
    function Get_Component(WhichOne: Integer): IComponent2; safecall;
    function GetFaces(WhichOne: Integer): OleVariant; safecall;
    function GetFacesCount(WhichOne: Integer): Integer; safecall;
    function IGetFaces(WhichOne: Integer; FaceCount: Integer): IFace2; safecall;
    function Delete: WordBool; safecall;
    property Mate: IMate2 read Get_Mate;
    property Name: WideString read Get_Name;
    property Component[WhichOne: Integer]: IComponent2 read Get_Component;
  end;

// *********************************************************************//
// DispIntf:  IMateLoadReferenceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {35627CFB-32E3-468C-AAA3-9222D2F190BD}
// *********************************************************************//
  IMateLoadReferenceDisp = dispinterface
    ['{35627CFB-32E3-468C-AAA3-9222D2F190BD}']
    property Mate: IMate2 readonly dispid 1;
    property Name: WideString readonly dispid 2;
    property Component[WhichOne: Integer]: IComponent2 readonly dispid 3;
    function GetFaces(WhichOne: Integer): OleVariant; dispid 4;
    function GetFacesCount(WhichOne: Integer): Integer; dispid 5;
    function IGetFaces(WhichOne: Integer; FaceCount: Integer): IFace2; dispid 6;
    function Delete: WordBool; dispid 7;
  end;

// *********************************************************************//
// Interface: ISimulation
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B2A77CEC-857C-43BE-9E28-106201212B43}
// *********************************************************************//
  ISimulation = interface(IDispatch)
    ['{B2A77CEC-857C-43BE-9E28-106201212B43}']
    function GetFeature: IFeature; safecall;
    function Get_Status: WordBool; safecall;
    function Get_Duration: Double; safecall;
    function Get_Frames: Integer; safecall;
    function Get_Timestamp: Integer; safecall;
    function ResetComponents: WordBool; safecall;
    function IsAnimationPlaying: WordBool; safecall;
    function PlayAnimation: IAnimation; safecall;
    function Get_Animation: IAnimation; safecall;
    property Status: WordBool read Get_Status;
    property Duration: Double read Get_Duration;
    property Frames: Integer read Get_Frames;
    property Timestamp: Integer read Get_Timestamp;
    property Animation: IAnimation read Get_Animation;
  end;

// *********************************************************************//
// DispIntf:  ISimulationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B2A77CEC-857C-43BE-9E28-106201212B43}
// *********************************************************************//
  ISimulationDisp = dispinterface
    ['{B2A77CEC-857C-43BE-9E28-106201212B43}']
    function GetFeature: IFeature; dispid 1;
    property Status: WordBool readonly dispid 2;
    property Duration: Double readonly dispid 3;
    property Frames: Integer readonly dispid 4;
    property Timestamp: Integer readonly dispid 5;
    function ResetComponents: WordBool; dispid 6;
    function IsAnimationPlaying: WordBool; dispid 7;
    function PlayAnimation: IAnimation; dispid 8;
    property Animation: IAnimation readonly dispid 9;
  end;

// *********************************************************************//
// Interface: IAnimation
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4F50FA8D-BCF3-4395-B146-B5AE933AFFD5}
// *********************************************************************//
  IAnimation = interface(IDispatch)
    ['{4F50FA8D-BCF3-4395-B146-B5AE933AFFD5}']
    function Get_Duration: Double; safecall;
    function Get_Speed: Integer; safecall;
    procedure Set_Speed(Speed: Integer); safecall;
    function Get_PlayMode: Integer; safecall;
    procedure Set_PlayMode(Mode: Integer); safecall;
    function Play: WordBool; safecall;
    function Pause: WordBool; safecall;
    function Stop: WordBool; safecall;
    function Beginning: WordBool; safecall;
    function End_: WordBool; safecall;
    function Close: WordBool; safecall;
    property Duration: Double read Get_Duration;
    property Speed: Integer read Get_Speed write Set_Speed;
    property PlayMode: Integer read Get_PlayMode write Set_PlayMode;
  end;

// *********************************************************************//
// DispIntf:  IAnimationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4F50FA8D-BCF3-4395-B146-B5AE933AFFD5}
// *********************************************************************//
  IAnimationDisp = dispinterface
    ['{4F50FA8D-BCF3-4395-B146-B5AE933AFFD5}']
    property Duration: Double readonly dispid 1;
    property Speed: Integer dispid 2;
    property PlayMode: Integer dispid 3;
    function Play: WordBool; dispid 4;
    function Pause: WordBool; dispid 5;
    function Stop: WordBool; dispid 6;
    function Beginning: WordBool; dispid 7;
    function End_: WordBool; dispid 8;
    function Close: WordBool; dispid 9;
  end;

// *********************************************************************//
// Interface: IAdvancedSelectionCriteria
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F40E5FA3-6C6A-4C23-A5AF-628357CCEE50}
// *********************************************************************//
  IAdvancedSelectionCriteria = interface(IDispatch)
    ['{F40E5FA3-6C6A-4C23-A5AF-628357CCEE50}']
    function AddItem(const Property_: WideString; Condition: Integer; const Value: WideString; 
                     IsAnd: WordBool): Integer; safecall;
    function DeleteItem(Index: Integer): WordBool; safecall;
    function SaveCriteria(const CriteriaFileName: WideString): WordBool; safecall;
    function LoadCriteria(const CriteriaFileName: WideString): WordBool; safecall;
    function GetItem(Index: Integer; out Property_: WideString; out Condition: Integer; 
                     out Value: WideString; out IsAnd: WordBool): Integer; safecall;
    function GetItemCount: Integer; safecall;
    function Select: WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IAdvancedSelectionCriteriaDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F40E5FA3-6C6A-4C23-A5AF-628357CCEE50}
// *********************************************************************//
  IAdvancedSelectionCriteriaDisp = dispinterface
    ['{F40E5FA3-6C6A-4C23-A5AF-628357CCEE50}']
    function AddItem(const Property_: WideString; Condition: Integer; const Value: WideString; 
                     IsAnd: WordBool): Integer; dispid 1;
    function DeleteItem(Index: Integer): WordBool; dispid 2;
    function SaveCriteria(const CriteriaFileName: WideString): WordBool; dispid 3;
    function LoadCriteria(const CriteriaFileName: WideString): WordBool; dispid 4;
    function GetItem(Index: Integer; out Property_: WideString; out Condition: Integer; 
                     out Value: WideString; out IsAnd: WordBool): Integer; dispid 5;
    function GetItemCount: Integer; dispid 6;
    function Select: WordBool; dispid 7;
  end;

// *********************************************************************//
// Interface: IInterferenceDetectionMgr
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EAE282BD-588A-4C1B-AD99-5FE6081C4585}
// *********************************************************************//
  IInterferenceDetectionMgr = interface(IDispatch)
    ['{EAE282BD-588A-4C1B-AD99-5FE6081C4585}']
    function GetInterferences: OleVariant; safecall;
    function GetInterferenceCount: Integer; safecall;
    function IGetInterferences(InterfernceCount: Integer): IInterference; safecall;
    function GetInterferenceComponents: OleVariant; safecall;
    function GetInterferenceComponentCount: Integer; safecall;
    function IGetInterferenceComponents(InterfernceComponentCount: Integer): IComponent2; safecall;
    function Get_TreatCoincidenceAsInterference: WordBool; safecall;
    procedure Set_TreatCoincidenceAsInterference(ValueOut: WordBool); safecall;
    function Get_ShowIgnoredInterferences: WordBool; safecall;
    procedure Set_ShowIgnoredInterferences(ValueOut: WordBool); safecall;
    function Get_TreatSubAssembliesAsComponents: WordBool; safecall;
    procedure Set_TreatSubAssembliesAsComponents(ValueOut: WordBool); safecall;
    function Get_IncludeMultibodyPartInterferences: WordBool; safecall;
    procedure Set_IncludeMultibodyPartInterferences(ValueOut: WordBool); safecall;
    function Get_MakeInterferingPartsTransparent: WordBool; safecall;
    procedure Set_MakeInterferingPartsTransparent(ValueOut: WordBool); safecall;
    function Get_CreateFastenersFolder: WordBool; safecall;
    procedure Set_CreateFastenersFolder(ValueOut: WordBool); safecall;
    function Get_NonInterferingComponentDisplay: Integer; safecall;
    procedure Set_NonInterferingComponentDisplay(ValueOut: Integer); safecall;
    procedure Done; safecall;
    property TreatCoincidenceAsInterference: WordBool read Get_TreatCoincidenceAsInterference write Set_TreatCoincidenceAsInterference;
    property ShowIgnoredInterferences: WordBool read Get_ShowIgnoredInterferences write Set_ShowIgnoredInterferences;
    property TreatSubAssembliesAsComponents: WordBool read Get_TreatSubAssembliesAsComponents write Set_TreatSubAssembliesAsComponents;
    property IncludeMultibodyPartInterferences: WordBool read Get_IncludeMultibodyPartInterferences write Set_IncludeMultibodyPartInterferences;
    property MakeInterferingPartsTransparent: WordBool read Get_MakeInterferingPartsTransparent write Set_MakeInterferingPartsTransparent;
    property CreateFastenersFolder: WordBool read Get_CreateFastenersFolder write Set_CreateFastenersFolder;
    property NonInterferingComponentDisplay: Integer read Get_NonInterferingComponentDisplay write Set_NonInterferingComponentDisplay;
  end;

// *********************************************************************//
// DispIntf:  IInterferenceDetectionMgrDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EAE282BD-588A-4C1B-AD99-5FE6081C4585}
// *********************************************************************//
  IInterferenceDetectionMgrDisp = dispinterface
    ['{EAE282BD-588A-4C1B-AD99-5FE6081C4585}']
    function GetInterferences: OleVariant; dispid 1;
    function GetInterferenceCount: Integer; dispid 2;
    function IGetInterferences(InterfernceCount: Integer): IInterference; dispid 3;
    function GetInterferenceComponents: OleVariant; dispid 4;
    function GetInterferenceComponentCount: Integer; dispid 5;
    function IGetInterferenceComponents(InterfernceComponentCount: Integer): IComponent2; dispid 6;
    property TreatCoincidenceAsInterference: WordBool dispid 7;
    property ShowIgnoredInterferences: WordBool dispid 8;
    property TreatSubAssembliesAsComponents: WordBool dispid 9;
    property IncludeMultibodyPartInterferences: WordBool dispid 10;
    property MakeInterferingPartsTransparent: WordBool dispid 11;
    property CreateFastenersFolder: WordBool dispid 12;
    property NonInterferingComponentDisplay: Integer dispid 13;
    procedure Done; dispid 14;
  end;

// *********************************************************************//
// Interface: IInterference
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F04EC279-EDF3-4A8E-BF87-E3237CBCCD8C}
// *********************************************************************//
  IInterference = interface(IDispatch)
    ['{F04EC279-EDF3-4A8E-BF87-E3237CBCCD8C}']
    function Get_Ignore: WordBool; safecall;
    procedure Set_Ignore(ValueOut: WordBool); safecall;
    function Get_Volume: Double; safecall;
    function Get_Components: OleVariant; safecall;
    function GetComponentCount: Integer; safecall;
    function IGetComponents(ComponentCount: Integer): IComponent2; safecall;
    function Get_IsPossibleInterference: WordBool; safecall;
    function Get_IsFastener: WordBool; safecall;
    property Ignore: WordBool read Get_Ignore write Set_Ignore;
    property Volume: Double read Get_Volume;
    property Components: OleVariant read Get_Components;
    property IsPossibleInterference: WordBool read Get_IsPossibleInterference;
    property IsFastener: WordBool read Get_IsFastener;
  end;

// *********************************************************************//
// DispIntf:  IInterferenceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F04EC279-EDF3-4A8E-BF87-E3237CBCCD8C}
// *********************************************************************//
  IInterferenceDisp = dispinterface
    ['{F04EC279-EDF3-4A8E-BF87-E3237CBCCD8C}']
    property Ignore: WordBool dispid 1;
    property Volume: Double readonly dispid 2;
    property Components: OleVariant readonly dispid 3;
    function GetComponentCount: Integer; dispid 4;
    function IGetComponents(ComponentCount: Integer): IComponent2; dispid 5;
    property IsPossibleInterference: WordBool readonly dispid 6;
    property IsFastener: WordBool readonly dispid 7;
  end;

// *********************************************************************//
// Interface: IDrawingDoc
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D33-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDrawingDoc = interface(IDispatch)
    ['{83A33D33-27C5-11CE-BFD4-00400513BB57}']
    procedure NewNote(const Text: WideString; Height: Double); safecall;
    procedure NewSheet(const Name: WideString; PaperSize: Smallint; TemplateIn: Smallint; 
                       Scale1: Double; Scale2: Double); safecall;
    procedure SetupSheet(const Name: WideString; PaperSize: Smallint; TemplateIn: Smallint; 
                         Scale1: Double; Scale2: Double); safecall;
    function NewGtol: IDispatch; safecall;
    function INewGtol: IGtol; safecall;
    function EditSelectedGtol: IDispatch; safecall;
    function IEditSelectedGtol: IGtol; safecall;
    function CreateLinearDim(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                             P4: OleVariant; Angle: Double; ArrowSize: Double; 
                             const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                             WitnessOvershoot: Double): WordBool; safecall;
    function CreateAngDim(VP0: OleVariant; VP1: OleVariant; VP2: OleVariant; VP3: OleVariant; 
                          VP4: OleVariant; VP5: OleVariant; VP6: OleVariant; ArrowSize: Double; 
                          const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                          WitnessOvershoot: Double): WordBool; safecall;
    function CreateDiamDim(DimVal: Double; VP0: OleVariant; VP1: OleVariant; VP2: OleVariant; 
                           VP3: OleVariant; ArrowSize: Double; const Text: WideString; 
                           TextHeight: Double; WitnessGap: Double; WitnessOvershoot: Double): WordBool; safecall;
    function CreateViewport(LowerLeftX: Double; LowerLeftY: Double; UpperRightX: Double; 
                            UpperRightY: Double; SketchSize: Smallint): WideString; safecall;
    function ActivateView(const ViewName: WideString): WordBool; safecall;
    function Create1stAngleViews(const ModelName: WideString): WordBool; safecall;
    function Create3rdAngleViews(const ModelName: WideString): WordBool; safecall;
    function CreateDrawViewFromModelView(const ModelName: WideString; const ViewName: WideString; 
                                         LocX: Double; LocY: Double; LocZ: Double): WordBool; safecall;
    function CreateUnfoldedViewAt(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function CreateText(const TextString: WideString; TextX: Double; TextY: Double; TextZ: Double; 
                        TextHeight: Double; TextAngle: Double): WordBool; safecall;
    procedure EditRebuild; safecall;
    procedure ViewFullPage; safecall;
    procedure Dummy018; safecall;
    procedure CreateSectionView; safecall;
    procedure SheetNext; safecall;
    procedure Dimensions; safecall;
    procedure InsertGroup; safecall;
    procedure SheetPrevious; safecall;
    procedure AlignVert; safecall;
    procedure AlignHorz; safecall;
    procedure InsertRefDim; safecall;
    procedure MakeSectionLine; safecall;
    procedure InsertBaseDim; safecall;
    procedure EditSketch; safecall;
    procedure CreateDetailView; safecall;
    procedure CreateAuxiliaryView; safecall;
    procedure StartDrawing; safecall;
    procedure EndDrawing; safecall;
    function GetFirstView: IDispatch; safecall;
    function IGetFirstView: IView; safecall;
    function GetInsertionPoint: OleVariant; safecall;
    procedure AttachDimensions; safecall;
    procedure InsertModelDimensions(Option: Integer); safecall;
    procedure EditTemplate; safecall;
    procedure InsertOrdinate; safecall;
    procedure UnsuppressView; safecall;
    procedure HideShowDrawingViews; safecall;
    procedure SuppressView; safecall;
    procedure AlignOrdinate; safecall;
    procedure SketchDim; safecall;
    procedure CenterMark; safecall;
    procedure EditSheet; safecall;
    procedure InsertHorizontalOrdinate; safecall;
    procedure EditOrdinate; safecall;
    procedure InsertVerticalOrdinate; safecall;
    procedure ChangeOrdDir; safecall;
    function GetLineFontCount: Integer; safecall;
    function GetLineFontName(Index: Integer): WideString; safecall;
    function GetLineFontInfo(Index: Integer): OleVariant; safecall;
    procedure ICreateLinearDim(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                               var P4: Double; Angle: Double; ArrowSize: Double; 
                               const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                               WitnessOvershoot: Double); safecall;
    procedure ICreateAngDim(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                            var P4: Double; var P5: Double; var P6: Double; ArrowSize: Double; 
                            const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                            WitnessOvershoot: Double); safecall;
    procedure ICreateDiamDim(DimValue: Double; var P0: Double; var P1: Double; var P2: Double; 
                             var P3: Double; ArrowSize: Double; const Text: WideString; 
                             TextHeight: Double; WitnessGap: Double; WitnessOvershoot: Double); safecall;
    function IGetInsertionPoint: Double; safecall;
    function CreateCompoundNote(Height: Double; X: Double; Y: Double; Z: Double): IDispatch; safecall;
    function ICreateCompoundNote(Height: Double; X: Double; Y: Double; Z: Double): INote; safecall;
    function CreateOrdinateDim(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                               P4: OleVariant; Angle: Double; ArrowSize: Double; 
                               const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                               WitnessOvershoot: Double): WordBool; safecall;
    procedure ICreateOrdinateDim(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                 var P4: Double; Angle: Double; ArrowSize: Double; 
                                 const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                                 WitnessOvershoot: Double); safecall;
    procedure InsertNewNote(const Text: WideString; NoLeader: WordBool; BalloonNote: WordBool; 
                            BentLeader: WordBool; ArrowStyle: Smallint; LeaderSide: Smallint); safecall;
    function AddCenterMark(CmSize: Double; CmShowLines: WordBool): WordBool; safecall;
    procedure InsertWeldSymbol(const Dim1: WideString; const Symbol: WideString; 
                               const Dim2: WideString; Symmetric: WordBool; FieldWeld: WordBool; 
                               ShowOtherSide: WordBool; DashOnTop: WordBool; Peripheral: WordBool; 
                               HasProcess: WordBool; const ProcessValue: WideString); safecall;
    function InsertSurfaceFinishSymbol(SymType: Integer; LeaderType: Integer; LocX: Double; 
                                       LocY: Double; LocZ: Double; LaySymbol: Integer; 
                                       ArrowType: Integer; const MachAllowance: WideString; 
                                       const OtherVals: WideString; const ProdMethod: WideString; 
                                       const SampleLen: WideString; const MaxRoughness: WideString; 
                                       const MinRoughness: WideString; 
                                       const RoughnessSpacing: WideString): WordBool; safecall;
    function ModifySurfaceFinishSymbol(SymType: Integer; LeaderType: Integer; LocX: Double; 
                                       LocY: Double; LocZ: Double; LaySymbol: Integer; 
                                       ArrowType: Integer; const MachAllowance: WideString; 
                                       const OtherVals: WideString; const ProdMethod: WideString; 
                                       const SampleLen: WideString; const MaxRoughness: WideString; 
                                       const MinRoughness: WideString; 
                                       const RoughnessSpacing: WideString): WordBool; safecall;
    function GetCurrentSheet: IDispatch; safecall;
    function IGetCurrentSheet: ISheet; safecall;
    procedure CreateConstructionGeometry; safecall;
    procedure ViewDisplayHidden; safecall;
    procedure InsertBreakHorizontal; safecall;
    procedure ViewDisplayWireframe; safecall;
    procedure BreakLineZigZagCut; safecall;
    procedure BreakView; safecall;
    procedure ViewDisplayHiddengreyed; safecall;
    procedure ViewTangentEdges; safecall;
    procedure BreakLineSplineCut; safecall;
    procedure InsertBreakVertical; safecall;
    procedure UnBreakView; safecall;
    procedure BreakLineStraightCut; safecall;
    procedure InsertDatumTag; safecall;
    procedure ToggleGrid; safecall;
    procedure FlipSectionLine; safecall;
    function FeatureByName(const Name: WideString): IDispatch; safecall;
    function IFeatureByName(const Name: WideString): IFeature; safecall;
    function NewSheet2(const Name: WideString; PaperSize: Integer; TemplateIn: Integer; 
                       Scale1: Double; Scale2: Double; FirstAngle: WordBool; 
                       const TemplateName: WideString; Width: Double; Height: Double): WordBool; safecall;
    function CreateLinearDim2(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                              P4: OleVariant; Val: Double; PrimPrec: Integer; 
                              const Text: WideString; TextPoint: OleVariant; Angle: Double; 
                              TextHeight: Double; const Prefix: WideString; 
                              const Suffix: WideString; const Callout1: WideString; 
                              const Callout2: WideString; TolType: Integer; 
                              const TolMin: WideString; const TolMax: WideString; TolPrec: Integer; 
                              ArrowSize: Double; ArrowStyle: Integer; ArrowDir: Integer; 
                              WitnessGap: Double; WitnessOvershoot: Double; DualDisplay: WordBool; 
                              DualPrec: Integer): WordBool; safecall;
    procedure ICreateLinearDim2(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                var P4: Double; Val: Double; PrimPrec: Integer; 
                                const Text: WideString; var TextPoint: Double; Angle: Double; 
                                TextHeight: Double; const Prefix: WideString; 
                                const Suffix: WideString; const Callout1: WideString; 
                                const Callout2: WideString; TolType: Integer; 
                                const TolMin: WideString; const TolMax: WideString; 
                                TolPrec: Integer; ArrowSize: Double; ArrowStyle: Integer; 
                                ArrowDir: Integer; WitnessGap: Double; WitnessOvershoot: Double; 
                                DualDisplay: WordBool; DualPrecision: Integer); safecall;
    function CreateAngDim2(VP0: OleVariant; VP1: OleVariant; VP2: OleVariant; VP3: OleVariant; 
                           VP4: OleVariant; VP5: OleVariant; VP6: OleVariant; ArrowSize: Double; 
                           const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                           WitnessOvershoot: Double; VTextPoint: OleVariant): WordBool; safecall;
    procedure ICreateAngDim2(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                             var P4: Double; var P5: Double; var P6: Double; ArrowSize: Double; 
                             const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                             WitnessOvershoot: Double; var TextPoint: Double); safecall;
    function CreateDiamDim2(DimVal: Double; VP0: OleVariant; VP1: OleVariant; VP2: OleVariant; 
                            VP3: OleVariant; ArrowSize: Double; const Text: WideString; 
                            TextHeight: Double; WitnessGap: Double; WitnessOvershoot: Double; 
                            VTextPoint: OleVariant): WordBool; safecall;
    procedure ICreateDiamDim2(DimValue: Double; var P0: Double; var P1: Double; var P2: Double; 
                              var P3: Double; ArrowSize: Double; const Text: WideString; 
                              TextHeight: Double; WitnessGap: Double; WitnessOvershoot: Double; 
                              var TextPoint: Double); safecall;
    function CreateOrdinateDim2(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                                P4: OleVariant; Angle: Double; ArrowSize: Double; 
                                const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                                WitnessOvershoot: Double; P5: OleVariant): WordBool; safecall;
    procedure ICreateOrdinateDim2(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                  var P4: Double; Angle: Double; ArrowSize: Double; 
                                  const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                                  WitnessOvershoot: Double; var P5: Double); safecall;
    procedure InsertNewNote2(const UpperText: WideString; const LowerText: WideString; 
                             NoLeader: WordBool; BentLeader: WordBool; ArrowStyle: Smallint; 
                             LeaderSide: Smallint; Angle: Double; BalloonStyle: Smallint; 
                             BalloonFit: Smallint; UpperNoteContent: Smallint; 
                             LowerNoteContent: Smallint); safecall;
    procedure DragModelDimension(const ViewName: WideString; DropEffect: Smallint; X: Double; 
                                 Y: Double; Z: Double); safecall;
    function CreateViewport2(LowerLeftX: Double; LowerLeftY: Double; UpperRightX: Double; 
                             UpperRightY: Double; SketchSize: Smallint; Scale: Double): WideString; safecall;
    procedure SetupSheet2(const Name: WideString; PaperSize: Smallint; TemplateIn: Smallint; 
                          Scale1: Double; Scale2: Double; SkPointsFlag: Integer); safecall;
    procedure OnComponentProperties; safecall;
    function GetLineFontCount2: Integer; safecall;
    function GetLineFontName2(Index: Integer): WideString; safecall;
    function GetLineFontInfo2(Index: Integer): OleVariant; safecall;
    procedure SetLineStyle(const StyleName: WideString); safecall;
    procedure SetLineWidth(Width: Integer); safecall;
    procedure SetLineColor(Color: Integer); safecall;
    procedure ShowEdge; safecall;
    procedure HideEdge; safecall;
    procedure AddHoleCallout; safecall;
    function GetPenCount: Integer; safecall;
    function GetPenInfo: OleVariant; safecall;
    function IGetPenInfo: Integer; safecall;
    function GetLineFontId(Index: Integer): Integer; safecall;
    function CreateAuxiliaryViewAt(X: Double; Y: Double; Z: Double; NotAligned: WordBool): WordBool; safecall;
    function CreateDetailViewAt(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function CreateSectionViewAt(X: Double; Y: Double; Z: Double; NotAligned: WordBool; 
                                 IsOffsetSection: WordBool): WordBool; safecall;
    function CreateUnfoldedViewAt2(X: Double; Y: Double; Z: Double; NotAligned: WordBool): WordBool; safecall;
    function SetupSheet3(const Name: WideString; PaperSize: Integer; TemplateIn: Integer; 
                         Scale1: Double; Scale2: Double; FirstAngle: WordBool; 
                         const TemplateName: WideString; Width: Double; Height: Double): WordBool; safecall;
    function InsertModelAnnotations(Option: Integer; AllTypes: WordBool; Types: Integer; 
                                    AllViews: WordBool): WordBool; safecall;
    procedure InsertCustomSymbol(const SymbolPath: WideString); safecall;
    function GetSheetCount: Integer; safecall;
    function GetSheetNames: OleVariant; safecall;
    function IGetSheetNames(var Count: Integer): WideString; safecall;
    function ActivateSheet(const Name: WideString): WordBool; safecall;
    function CreateText2(const TextString: WideString; TextX: Double; TextY: Double; TextZ: Double; 
                         TextHeight: Double; TextAngle: Double): IDispatch; safecall;
    function ICreateText2(const TextString: WideString; TextX: Double; TextY: Double; 
                          TextZ: Double; TextHeight: Double; TextAngle: Double): INote; safecall;
    function NewSheet3(const Name: WideString; PaperSize: Integer; TemplateIn: Integer; 
                       Scale1: Double; Scale2: Double; FirstAngle: WordBool; 
                       const TemplateName: WideString; Width: Double; Height: Double; 
                       const PropertyViewName: WideString): WordBool; safecall;
    function SetupSheet4(const Name: WideString; PaperSize: Integer; TemplateIn: Integer; 
                         Scale1: Double; Scale2: Double; FirstAngle: WordBool; 
                         const TemplateName: WideString; Width: Double; Height: Double; 
                         const PropertyViewName: WideString): WordBool; safecall;
    function CreateLinearDim3(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                              P4: OleVariant; Val: Double; PrimPrec: Integer; 
                              const Text: WideString; TextPoint: OleVariant; Angle: Double; 
                              TextHeight: Double; const Prefix: WideString; 
                              const Suffix: WideString; const Callout1: WideString; 
                              const Callout2: WideString; TolType: Integer; 
                              const TolMin: WideString; const TolMax: WideString; TolPrec: Integer; 
                              ArrowSize: Double; ArrowStyle: Integer; ArrowDir: Integer; 
                              WitnessGap: Double; WitnessOvershoot: Double; DualDisplay: WordBool; 
                              DualPrec: Integer): IDispatch; safecall;
    function ICreateLinearDim3(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                               var P4: Double; Val: Double; PrimPrec: Integer; 
                               const Text: WideString; var TextPoint: Double; Angle: Double; 
                               TextHeight: Double; const Prefix: WideString; 
                               const Suffix: WideString; const Callout1: WideString; 
                               const Callout2: WideString; TolType: Integer; 
                               const TolMin: WideString; const TolMax: WideString; 
                               TolPrec: Integer; ArrowSize: Double; ArrowStyle: Integer; 
                               ArrowDir: Integer; WitnessGap: Double; WitnessOvershoot: Double; 
                               DualDisplay: WordBool; DualPrecision: Integer): IDisplayDimension; safecall;
    function CreateAngDim3(VP0: OleVariant; VP1: OleVariant; VP2: OleVariant; VP3: OleVariant; 
                           VP4: OleVariant; VP5: OleVariant; VP6: OleVariant; ArrowSize: Double; 
                           const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                           WitnessOvershoot: Double; VTextPoint: OleVariant): IDispatch; safecall;
    function ICreateAngDim3(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                            var P4: Double; var P5: Double; var P6: Double; ArrowSize: Double; 
                            const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                            WitnessOvershoot: Double; var TextPoint: Double): IDisplayDimension; safecall;
    function CreateDiamDim3(DimVal: Double; VP0: OleVariant; VP1: OleVariant; VP2: OleVariant; 
                            VP3: OleVariant; ArrowSize: Double; const Text: WideString; 
                            TextHeight: Double; WitnessGap: Double; WitnessOvershoot: Double; 
                            VTextPoint: OleVariant): IDispatch; safecall;
    function ICreateDiamDim3(DimValue: Double; var P0: Double; var P1: Double; var P2: Double; 
                             var P3: Double; ArrowSize: Double; const Text: WideString; 
                             TextHeight: Double; WitnessGap: Double; WitnessOvershoot: Double; 
                             var TextPoint: Double): IDisplayDimension; safecall;
    function CreateOrdinateDim3(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                                P4: OleVariant; Angle: Double; ArrowSize: Double; 
                                const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                                WitnessOvershoot: Double; P5: OleVariant): IDispatch; safecall;
    function ICreateOrdinateDim3(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                 var P4: Double; Angle: Double; ArrowSize: Double; 
                                 const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                                 WitnessOvershoot: Double; var P5: Double): IDisplayDimension; safecall;
    procedure ForceRebuild; safecall;
    function AddOrdinateDimension(DimType: Integer; LocX: Double; LocY: Double; LocZ: Double): WordBool; safecall;
    function CreateLayer(const Layername: WideString; const LayerDesc: WideString; 
                         LayerColor: Integer; LayerStyle: Integer; LayerWidth: Integer; 
                         BOn: WordBool): WordBool; safecall;
    function SetCurrentLayer(const Layername: WideString): WordBool; safecall;
    function DrawingViewRotate(NewAngle: Double): WordBool; safecall;
    function CreateDetailViewAt2(X: Double; Y: Double; Z: Double): WordBool; safecall;
    procedure RestoreRotation; safecall;
    function GetEditSheet: WordBool; safecall;
    procedure TranslateDrawing(DeltaX: Double; DeltaY: Double); safecall;
    function Create1stAngleViews2(const ModelName: WideString): WordBool; safecall;
    function Create3rdAngleViews2(const ModelName: WideString): WordBool; safecall;
    procedure HideShowDimensions; safecall;
    function CreateLinearDim4(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                              P4: OleVariant; TextPoint: OleVariant; Val: Double; Angle: Double; 
                              TextHeight: Double): IDispatch; safecall;
    function ICreateLinearDim4(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                               var P4: Double; var TextPoint: Double; Val: Double; Angle: Double; 
                               TextHeight: Double): IDisplayDimension; safecall;
    function CreateDiamDim4(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                            TextPoint: OleVariant; Val: Double; TextHeight: Double): IDispatch; safecall;
    function ICreateDiamDim4(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                             var TextPoint: Double; Val: Double; TextHeight: Double): IDisplayDimension; safecall;
    function CreateOrdinateDim4(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                                P4: OleVariant; P5: OleVariant; Val: Double; Angle: Double; 
                                TextHeight: Double): IDispatch; safecall;
    function ICreateOrdinateDim4(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                 var P4: Double; var P5: Double; Val: Double; Angle: Double; 
                                 TextHeight: Double): IDisplayDimension; safecall;
    function CreateAngDim4(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                           P4: OleVariant; P5: OleVariant; P6: OleVariant; TextPoint: OleVariant; 
                           TextHeight: Double): IDispatch; safecall;
    function ICreateAngDim4(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                            var P4: Double; var P5: Double; var P6: Double; var TextPoint: Double; 
                            TextHeight: Double): IDisplayDimension; safecall;
    function CreateDetailViewAt3(X: Double; Y: Double; Z: Double; Style: Integer; Scale1: Double; 
                                 Scale2: Double; const LabelIn: WideString; Showtype: Integer; 
                                 FullOutline: WordBool): IDispatch; safecall;
    function ICreateDetailViewAt3(X: Double; Y: Double; Z: Double; Style: Integer; Scale1: Double; 
                                  Scale2: Double; const LabelIn: WideString; Showtype: Integer; 
                                  FullOutline: WordBool): IView; safecall;
    function CreateSectionViewAt2(X: Double; Y: Double; Z: Double; NotAligned: WordBool; 
                                  IsOffsetSection: WordBool; const Label_: WideString; 
                                  Chgdirection: WordBool; Scwithmodel: WordBool; Partial: WordBool; 
                                  Dispsurfcut: WordBool): IDispatch; safecall;
    function ICreateSectionViewAt2(X: Double; Y: Double; Z: Double; NotAligned: WordBool; 
                                   IsOffsetSection: WordBool; const Label_: WideString; 
                                   Chgdirection: WordBool; Scwithmodel: WordBool; 
                                   Partial: WordBool; Dispsurfcut: WordBool): IView; safecall;
    function CreateAuxiliaryViewAt2(X: Double; Y: Double; Z: Double; NotAligned: WordBool; 
                                    const Label_: WideString; Showarrow: WordBool; Flip: WordBool): IDispatch; safecall;
    function ICreateAuxiliaryViewAt2(X: Double; Y: Double; Z: Double; NotAligned: WordBool; 
                                     const Label_: WideString; Showarrow: WordBool; Flip: WordBool): IView; safecall;
    procedure MakeCustomSymbol; safecall;
    procedure ExplodeCustomSymbol; safecall;
    procedure SaveCustomSymbol(const FileNameIn: WideString); safecall;
    function CreateBreakOutSection(Depth: Double): WordBool; safecall;
    procedure InsertThreadCallout; safecall;
    function CreateFlatPatternViewFromModelView(const ModelName: WideString; 
                                                const ConfigName: WideString; LocX: Double; 
                                                LocY: Double; LocZ: Double): WordBool; safecall;
    function ChangeRefConfigurationOfFlatPatternView(const ModelName: WideString; 
                                                     const ConfigName: WideString): WordBool; safecall;
    function AddHoleCallout2(X: Double; Y: Double; Z: Double): IDispatch; safecall;
    function IAddHoleCallout2(X: Double; Y: Double; Z: Double): IDisplayDimension; safecall;
    procedure EditCenterMarkProperties(Angle: Double; Size: Double; Lines: WordBool; 
                                       DocSettings: WordBool); safecall;
    function InsertDowelSymbol: IDispatch; safecall;
    function IInsertDowelSymbol: IDowelSymbol; safecall;
    procedure InsertMultiJogLeader; safecall;
    function Get_HiddenViewsVisible: WordBool; safecall;
    procedure Set_HiddenViewsVisible(Visible: WordBool); safecall;
    function AddChamferDim(X: Double; Y: Double; Z: Double): IDispatch; safecall;
    function IAddChamferDim(X: Double; Y: Double; Z: Double): IDisplayDimension; safecall;
    function MakeCustomSymbol2: IDispatch; safecall;
    function IMakeCustomSymbol2: ICustomSymbol; safecall;
    function InsertCustomSymbol2(const FileName: WideString): IDispatch; safecall;
    function IInsertCustomSymbol2(const FileName: WideString): ICustomSymbol; safecall;
    function CreateCustomSymbol(Segments: OleVariant; Points: OleVariant; Notes: OleVariant): IDispatch; safecall;
    function ICreateCustomSymbol(SegmentCount: Integer; var Segments: ISketchSegment; 
                                 PointCount: Integer; var Points: ISketchPoint; NoteCount: Integer; 
                                 var Notes: INote): ICustomSymbol; safecall;
    procedure ViewDisplayShaded; safecall;
    procedure ChangeComponentLayer(const Layername: WideString; AllViews: WordBool); safecall;
    function Get_AutomaticViewUpdate: WordBool; safecall;
    procedure Set_AutomaticViewUpdate(Update: WordBool); safecall;
    function Get_ActiveDrawingView: IDispatch; safecall;
    function Get_IActiveDrawingView: IView; safecall;
    function InsertCenterMark(UseDoc: WordBool; Size: Double; ShowLines: WordBool; Angle: Double): ICenterMark; safecall;
    function CreateFlatPatternViewFromModelView2(const ModelName: WideString; 
                                                 const ConfigName: WideString; LocX: Double; 
                                                 LocY: Double; LocZ: Double; HideBendLines: WordBool): WordBool; safecall;
    procedure ViewHlrQuality; safecall;
    procedure ViewModelEdges; safecall;
    function GetBlockDefinitionCount: Integer; safecall;
    function GetBlockDefinitions: OleVariant; safecall;
    function IGetBlockDefinitions(Count: Integer): IBlockDefinition; safecall;
    function GetBlockDefinition(const Name: WideString): IBlockDefinition; safecall;
    function MakeBlockDefinition(const Name: WideString; const XRefFileName: WideString; 
                                 Instance: WordBool): IBlockDefinition; safecall;
    function CreateBlockDefinition(const Name: WideString; const XRefFileName: WideString; 
                                   Instance: WordBool; Segments: OleVariant; Points: OleVariant; 
                                   Notes: OleVariant; Dimensions: OleVariant; Blocks: OleVariant): IDispatch; safecall;
    function ICreateBlockDefinition(const Name: WideString; const XRefFileName: WideString; 
                                    Instance: WordBool; SegmentCount: Integer; 
                                    var Segments: ISketchSegment; PointCount: Integer; 
                                    var Points: ISketchPoint; NoteCount: Integer; var Notes: INote; 
                                    DimensionCount: Integer; var Dimensions: IDisplayDimension; 
                                    BlockCount: Integer; var Blocks: IBlockInstance): IBlockDefinition; safecall;
    function InsertBlock(const FileName: WideString; X: Double; Y: Double; Angle: Double; 
                         Scale: Double): IBlockInstance; safecall;
    function SaveBlock(const FileName: WideString): WordBool; safecall;
    function ExplodeBlockInstance: WordBool; safecall;
    function InsertCenterMark2(Style: Integer; Propagate: WordBool): ICenterMark; safecall;
    function InsertCenterLine: WordBool; safecall;
    function AddOrdinateDimension2(DimType: Integer; LocX: Double; LocY: Double; LocZ: Double): Integer; safecall;
    function InsertTableAnnotation(X: Double; Y: Double; AnchorType: Integer; Rows: Integer; 
                                   Columns: Integer): ITableAnnotation; safecall;
    function InsertModelInPredefinedView(const ModelName: WideString): WordBool; safecall;
    function InsertRevisionSymbol(X: Double; Y: Double): INote; safecall;
    function AutoBalloon(Layout: Integer): OleVariant; safecall;
    function CreateSectionViewAt3(X: Double; Y: Double; Z: Double; NotAligned: WordBool; 
                                  IsOffsetSection: WordBool; const Label_: WideString; 
                                  Chgdirection: WordBool; Scwithmodel: WordBool; Partial: WordBool; 
                                  Dispsurfcut: WordBool; ExcludedComponents: OleVariant): IView; safecall;
    function ICreateSectionViewAt3(X: Double; Y: Double; Z: Double; NotAligned: WordBool; 
                                   IsOffsetSection: WordBool; const Label_: WideString; 
                                   Chgdirection: WordBool; Scwithmodel: WordBool; 
                                   Partial: WordBool; Dispsurfcut: WordBool; 
                                   NumExcludedComponents: Integer; 
                                   var PExcludedComponents: IDispatch): IView; safecall;
    function InsertModelAnnotations2(Option: Integer; AllTypes: WordBool; Types: Integer; 
                                     AllViews: WordBool; DuplicateDims: WordBool; 
                                     HiddenFeatureDims: WordBool): WordBool; safecall;
    function GetEditBlock: WordBool; safecall;
    function InsertCenterLine2: ICenterLine; safecall;
    function InsertMultiJogLeader2(Points: OleVariant): IDispatch; safecall;
    function IInsertMultiJogLeader2(PointsCount: Integer; var Points: IMathPoint): IMultiJogLeader; safecall;
    function AutoDimension(EntitiesToDimension: Integer; HorizontalScheme: Integer; 
                           HorizontalPlacement: Integer; VerticalScheme: Integer; 
                           VerticalPlacement: Integer): Integer; safecall;
    function InsertModelAnnotations3(Option: Integer; Types: Integer; AllViews: WordBool; 
                                     DuplicateDims: WordBool; HiddenFeatureDims: WordBool; 
                                     UsePlacementInSketch: WordBool): OleVariant; safecall;
    function CreateUnfoldedViewAt3(X: Double; Y: Double; Z: Double; NotAligned: WordBool): IView; safecall;
    function CreateDrawViewFromModelView2(const ModelName: WideString; const ViewName: WideString; 
                                          LocX: Double; LocY: Double; LocZ: Double): IView; safecall;
    function CreateSectionViewAt4(X: Double; Y: Double; Z: Double; const SectionLabel: WideString; 
                                  Options: Integer; ExcludedComponents: OleVariant): IView; safecall;
    function ICreateSectionViewAt4(X: Double; Y: Double; Z: Double; const SectionLabel: WideString; 
                                   Options: Integer; NumExcludedComponents: Integer; 
                                   var ExcludedComponents: IDispatch): IView; safecall;
    function AutoBalloon2(Layout: Integer; IgnoreMultiple: WordBool): OleVariant; safecall;
    function CreateViewport3(LowerLeftX: Double; LowerLeftY: Double; SketchSize: Smallint; 
                             Scale: Double): IView; safecall;
    function CreateDrawViewFromModelView3(const ModelName: WideString; const ViewName: WideString; 
                                          LocX: Double; LocY: Double; LocZ: Double): IView; safecall;
    function InsertMultiJogLeader3(Points: OleVariant; StartPointArrowStyle: Integer; 
                                   EndPointArrowStyle: Integer): IDispatch; safecall;
    function IInsertMultiJogLeader3(PointsCount: Integer; var Points: IMathPoint; 
                                    StartPointArrowStyle: Integer; EndPointArrowStyle: Integer): IMultiJogLeader; safecall;
    function InsertTableAnnotation2(UseAnchorPoint: WordBool; X: Double; Y: Double; 
                                    AnchorType: Integer; const TableTemplate: WideString; 
                                    Rows: Integer; Columns: Integer): ITableAnnotation; safecall;
    function ResolveOutOfDateLightWeightComponents: WordBool; safecall;
    function CreateRelativeView(const ModelName: WideString; XPos: Double; YPos: Double; 
                                ViewDirFront: Integer; ViewDirRight: Integer): IView; safecall;
    function AutoBalloon3(Layout: Integer; IgnoreMultiple: WordBool; Style: Integer; Size: Integer; 
                          UpperTextContent: Integer; const UpperText: WideString; 
                          LowerTextContent: Integer; const LowerText: WideString; 
                          const Layername: WideString): OleVariant; safecall;
    function DropDrawingViewFromPalette(Layout: Integer; X: Double; Y: Double; Z: Double): IView; safecall;
    function ReorderSheets(NewSheetList: OleVariant): WordBool; safecall;
    function IReorderSheets(SheetCount: Integer; var NewSheetList: WideString): WordBool; safecall;
    function DropDrawingViewFromPalette2(const PaletteViewName: WideString; X: Double; Y: Double; 
                                         Z: Double): IView; safecall;
    function GetDrawingPaletteViewNames: OleVariant; safecall;
    function GenerateViewPaletteViews(const FileName: WideString): WordBool; safecall;
    function CreateFlatPatternViewFromModelView3(const ModelName: WideString; 
                                                 const ConfigName: WideString; LocX: Double; 
                                                 LocY: Double; LocZ: Double; 
                                                 HideBendLines: WordBool; FlipView: WordBool): IView; safecall;
    function SetupSheet5(const Name: WideString; PaperSize: Integer; TemplateIn: Integer; 
                         Scale1: Double; Scale2: Double; FirstAngle: WordBool; 
                         const TemplateName: WideString; Width: Double; Height: Double; 
                         const PropertyViewName: WideString; RemoveModifiedNotes: WordBool): WordBool; safecall;
    property HiddenViewsVisible: WordBool read Get_HiddenViewsVisible write Set_HiddenViewsVisible;
    property AutomaticViewUpdate: WordBool read Get_AutomaticViewUpdate write Set_AutomaticViewUpdate;
    property ActiveDrawingView: IDispatch read Get_ActiveDrawingView;
    property IActiveDrawingView: IView read Get_IActiveDrawingView;
  end;

// *********************************************************************//
// DispIntf:  IDrawingDocDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D33-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDrawingDocDisp = dispinterface
    ['{83A33D33-27C5-11CE-BFD4-00400513BB57}']
    procedure NewNote(const Text: WideString; Height: Double); dispid 1;
    procedure NewSheet(const Name: WideString; PaperSize: Smallint; TemplateIn: Smallint; 
                       Scale1: Double; Scale2: Double); dispid 2;
    procedure SetupSheet(const Name: WideString; PaperSize: Smallint; TemplateIn: Smallint; 
                         Scale1: Double; Scale2: Double); dispid 3;
    function NewGtol: IDispatch; dispid 4;
    function INewGtol: IGtol; dispid 38;
    function EditSelectedGtol: IDispatch; dispid 5;
    function IEditSelectedGtol: IGtol; dispid 39;
    function CreateLinearDim(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                             P4: OleVariant; Angle: Double; ArrowSize: Double; 
                             const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                             WitnessOvershoot: Double): WordBool; dispid 6;
    function CreateAngDim(VP0: OleVariant; VP1: OleVariant; VP2: OleVariant; VP3: OleVariant; 
                          VP4: OleVariant; VP5: OleVariant; VP6: OleVariant; ArrowSize: Double; 
                          const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                          WitnessOvershoot: Double): WordBool; dispid 7;
    function CreateDiamDim(DimVal: Double; VP0: OleVariant; VP1: OleVariant; VP2: OleVariant; 
                           VP3: OleVariant; ArrowSize: Double; const Text: WideString; 
                           TextHeight: Double; WitnessGap: Double; WitnessOvershoot: Double): WordBool; dispid 8;
    function CreateViewport(LowerLeftX: Double; LowerLeftY: Double; UpperRightX: Double; 
                            UpperRightY: Double; SketchSize: Smallint): WideString; dispid 9;
    function ActivateView(const ViewName: WideString): WordBool; dispid 10;
    function Create1stAngleViews(const ModelName: WideString): WordBool; dispid 11;
    function Create3rdAngleViews(const ModelName: WideString): WordBool; dispid 12;
    function CreateDrawViewFromModelView(const ModelName: WideString; const ViewName: WideString; 
                                         LocX: Double; LocY: Double; LocZ: Double): WordBool; dispid 13;
    function CreateUnfoldedViewAt(X: Double; Y: Double; Z: Double): WordBool; dispid 14;
    function CreateText(const TextString: WideString; TextX: Double; TextY: Double; TextZ: Double; 
                        TextHeight: Double; TextAngle: Double): WordBool; dispid 15;
    procedure EditRebuild; dispid 16;
    procedure ViewFullPage; dispid 17;
    procedure Dummy018; dispid 18;
    procedure CreateSectionView; dispid 19;
    procedure SheetNext; dispid 20;
    procedure Dimensions; dispid 21;
    procedure InsertGroup; dispid 22;
    procedure SheetPrevious; dispid 23;
    procedure AlignVert; dispid 24;
    procedure AlignHorz; dispid 25;
    procedure InsertRefDim; dispid 26;
    procedure MakeSectionLine; dispid 27;
    procedure InsertBaseDim; dispid 28;
    procedure EditSketch; dispid 29;
    procedure CreateDetailView; dispid 30;
    procedure CreateAuxiliaryView; dispid 31;
    procedure StartDrawing; dispid 32;
    procedure EndDrawing; dispid 33;
    function GetFirstView: IDispatch; dispid 34;
    function IGetFirstView: IView; dispid 40;
    function GetInsertionPoint: OleVariant; dispid 35;
    procedure AttachDimensions; dispid 36;
    procedure InsertModelDimensions(Option: Integer); dispid 37;
    procedure EditTemplate; dispid 41;
    procedure InsertOrdinate; dispid 42;
    procedure UnsuppressView; dispid 43;
    procedure HideShowDrawingViews; dispid 44;
    procedure SuppressView; dispid 45;
    procedure AlignOrdinate; dispid 46;
    procedure SketchDim; dispid 47;
    procedure CenterMark; dispid 48;
    procedure EditSheet; dispid 49;
    procedure InsertHorizontalOrdinate; dispid 50;
    procedure EditOrdinate; dispid 51;
    procedure InsertVerticalOrdinate; dispid 52;
    procedure ChangeOrdDir; dispid 53;
    function GetLineFontCount: Integer; dispid 54;
    function GetLineFontName(Index: Integer): WideString; dispid 55;
    function GetLineFontInfo(Index: Integer): OleVariant; dispid 56;
    procedure ICreateLinearDim(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                               var P4: Double; Angle: Double; ArrowSize: Double; 
                               const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                               WitnessOvershoot: Double); dispid 57;
    procedure ICreateAngDim(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                            var P4: Double; var P5: Double; var P6: Double; ArrowSize: Double; 
                            const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                            WitnessOvershoot: Double); dispid 58;
    procedure ICreateDiamDim(DimValue: Double; var P0: Double; var P1: Double; var P2: Double; 
                             var P3: Double; ArrowSize: Double; const Text: WideString; 
                             TextHeight: Double; WitnessGap: Double; WitnessOvershoot: Double); dispid 59;
    function IGetInsertionPoint: Double; dispid 60;
    function CreateCompoundNote(Height: Double; X: Double; Y: Double; Z: Double): IDispatch; dispid 61;
    function ICreateCompoundNote(Height: Double; X: Double; Y: Double; Z: Double): INote; dispid 62;
    function CreateOrdinateDim(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                               P4: OleVariant; Angle: Double; ArrowSize: Double; 
                               const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                               WitnessOvershoot: Double): WordBool; dispid 63;
    procedure ICreateOrdinateDim(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                 var P4: Double; Angle: Double; ArrowSize: Double; 
                                 const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                                 WitnessOvershoot: Double); dispid 64;
    procedure InsertNewNote(const Text: WideString; NoLeader: WordBool; BalloonNote: WordBool; 
                            BentLeader: WordBool; ArrowStyle: Smallint; LeaderSide: Smallint); dispid 65;
    function AddCenterMark(CmSize: Double; CmShowLines: WordBool): WordBool; dispid 66;
    procedure InsertWeldSymbol(const Dim1: WideString; const Symbol: WideString; 
                               const Dim2: WideString; Symmetric: WordBool; FieldWeld: WordBool; 
                               ShowOtherSide: WordBool; DashOnTop: WordBool; Peripheral: WordBool; 
                               HasProcess: WordBool; const ProcessValue: WideString); dispid 67;
    function InsertSurfaceFinishSymbol(SymType: Integer; LeaderType: Integer; LocX: Double; 
                                       LocY: Double; LocZ: Double; LaySymbol: Integer; 
                                       ArrowType: Integer; const MachAllowance: WideString; 
                                       const OtherVals: WideString; const ProdMethod: WideString; 
                                       const SampleLen: WideString; const MaxRoughness: WideString; 
                                       const MinRoughness: WideString; 
                                       const RoughnessSpacing: WideString): WordBool; dispid 68;
    function ModifySurfaceFinishSymbol(SymType: Integer; LeaderType: Integer; LocX: Double; 
                                       LocY: Double; LocZ: Double; LaySymbol: Integer; 
                                       ArrowType: Integer; const MachAllowance: WideString; 
                                       const OtherVals: WideString; const ProdMethod: WideString; 
                                       const SampleLen: WideString; const MaxRoughness: WideString; 
                                       const MinRoughness: WideString; 
                                       const RoughnessSpacing: WideString): WordBool; dispid 69;
    function GetCurrentSheet: IDispatch; dispid 70;
    function IGetCurrentSheet: ISheet; dispid 71;
    procedure CreateConstructionGeometry; dispid 72;
    procedure ViewDisplayHidden; dispid 73;
    procedure InsertBreakHorizontal; dispid 74;
    procedure ViewDisplayWireframe; dispid 75;
    procedure BreakLineZigZagCut; dispid 76;
    procedure BreakView; dispid 77;
    procedure ViewDisplayHiddengreyed; dispid 78;
    procedure ViewTangentEdges; dispid 79;
    procedure BreakLineSplineCut; dispid 80;
    procedure InsertBreakVertical; dispid 81;
    procedure UnBreakView; dispid 82;
    procedure BreakLineStraightCut; dispid 83;
    procedure InsertDatumTag; dispid 84;
    procedure ToggleGrid; dispid 85;
    procedure FlipSectionLine; dispid 86;
    function FeatureByName(const Name: WideString): IDispatch; dispid 87;
    function IFeatureByName(const Name: WideString): IFeature; dispid 88;
    function NewSheet2(const Name: WideString; PaperSize: Integer; TemplateIn: Integer; 
                       Scale1: Double; Scale2: Double; FirstAngle: WordBool; 
                       const TemplateName: WideString; Width: Double; Height: Double): WordBool; dispid 89;
    function CreateLinearDim2(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                              P4: OleVariant; Val: Double; PrimPrec: Integer; 
                              const Text: WideString; TextPoint: OleVariant; Angle: Double; 
                              TextHeight: Double; const Prefix: WideString; 
                              const Suffix: WideString; const Callout1: WideString; 
                              const Callout2: WideString; TolType: Integer; 
                              const TolMin: WideString; const TolMax: WideString; TolPrec: Integer; 
                              ArrowSize: Double; ArrowStyle: Integer; ArrowDir: Integer; 
                              WitnessGap: Double; WitnessOvershoot: Double; DualDisplay: WordBool; 
                              DualPrec: Integer): WordBool; dispid 90;
    procedure ICreateLinearDim2(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                var P4: Double; Val: Double; PrimPrec: Integer; 
                                const Text: WideString; var TextPoint: Double; Angle: Double; 
                                TextHeight: Double; const Prefix: WideString; 
                                const Suffix: WideString; const Callout1: WideString; 
                                const Callout2: WideString; TolType: Integer; 
                                const TolMin: WideString; const TolMax: WideString; 
                                TolPrec: Integer; ArrowSize: Double; ArrowStyle: Integer; 
                                ArrowDir: Integer; WitnessGap: Double; WitnessOvershoot: Double; 
                                DualDisplay: WordBool; DualPrecision: Integer); dispid 91;
    function CreateAngDim2(VP0: OleVariant; VP1: OleVariant; VP2: OleVariant; VP3: OleVariant; 
                           VP4: OleVariant; VP5: OleVariant; VP6: OleVariant; ArrowSize: Double; 
                           const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                           WitnessOvershoot: Double; VTextPoint: OleVariant): WordBool; dispid 92;
    procedure ICreateAngDim2(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                             var P4: Double; var P5: Double; var P6: Double; ArrowSize: Double; 
                             const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                             WitnessOvershoot: Double; var TextPoint: Double); dispid 93;
    function CreateDiamDim2(DimVal: Double; VP0: OleVariant; VP1: OleVariant; VP2: OleVariant; 
                            VP3: OleVariant; ArrowSize: Double; const Text: WideString; 
                            TextHeight: Double; WitnessGap: Double; WitnessOvershoot: Double; 
                            VTextPoint: OleVariant): WordBool; dispid 94;
    procedure ICreateDiamDim2(DimValue: Double; var P0: Double; var P1: Double; var P2: Double; 
                              var P3: Double; ArrowSize: Double; const Text: WideString; 
                              TextHeight: Double; WitnessGap: Double; WitnessOvershoot: Double; 
                              var TextPoint: Double); dispid 95;
    function CreateOrdinateDim2(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                                P4: OleVariant; Angle: Double; ArrowSize: Double; 
                                const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                                WitnessOvershoot: Double; P5: OleVariant): WordBool; dispid 96;
    procedure ICreateOrdinateDim2(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                  var P4: Double; Angle: Double; ArrowSize: Double; 
                                  const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                                  WitnessOvershoot: Double; var P5: Double); dispid 97;
    procedure InsertNewNote2(const UpperText: WideString; const LowerText: WideString; 
                             NoLeader: WordBool; BentLeader: WordBool; ArrowStyle: Smallint; 
                             LeaderSide: Smallint; Angle: Double; BalloonStyle: Smallint; 
                             BalloonFit: Smallint; UpperNoteContent: Smallint; 
                             LowerNoteContent: Smallint); dispid 98;
    procedure DragModelDimension(const ViewName: WideString; DropEffect: Smallint; X: Double; 
                                 Y: Double; Z: Double); dispid 99;
    function CreateViewport2(LowerLeftX: Double; LowerLeftY: Double; UpperRightX: Double; 
                             UpperRightY: Double; SketchSize: Smallint; Scale: Double): WideString; dispid 100;
    procedure SetupSheet2(const Name: WideString; PaperSize: Smallint; TemplateIn: Smallint; 
                          Scale1: Double; Scale2: Double; SkPointsFlag: Integer); dispid 101;
    procedure OnComponentProperties; dispid 102;
    function GetLineFontCount2: Integer; dispid 103;
    function GetLineFontName2(Index: Integer): WideString; dispid 104;
    function GetLineFontInfo2(Index: Integer): OleVariant; dispid 105;
    procedure SetLineStyle(const StyleName: WideString); dispid 106;
    procedure SetLineWidth(Width: Integer); dispid 107;
    procedure SetLineColor(Color: Integer); dispid 108;
    procedure ShowEdge; dispid 109;
    procedure HideEdge; dispid 110;
    procedure AddHoleCallout; dispid 111;
    function GetPenCount: Integer; dispid 112;
    function GetPenInfo: OleVariant; dispid 113;
    function IGetPenInfo: Integer; dispid 114;
    function GetLineFontId(Index: Integer): Integer; dispid 115;
    function CreateAuxiliaryViewAt(X: Double; Y: Double; Z: Double; NotAligned: WordBool): WordBool; dispid 116;
    function CreateDetailViewAt(X: Double; Y: Double; Z: Double): WordBool; dispid 117;
    function CreateSectionViewAt(X: Double; Y: Double; Z: Double; NotAligned: WordBool; 
                                 IsOffsetSection: WordBool): WordBool; dispid 118;
    function CreateUnfoldedViewAt2(X: Double; Y: Double; Z: Double; NotAligned: WordBool): WordBool; dispid 119;
    function SetupSheet3(const Name: WideString; PaperSize: Integer; TemplateIn: Integer; 
                         Scale1: Double; Scale2: Double; FirstAngle: WordBool; 
                         const TemplateName: WideString; Width: Double; Height: Double): WordBool; dispid 120;
    function InsertModelAnnotations(Option: Integer; AllTypes: WordBool; Types: Integer; 
                                    AllViews: WordBool): WordBool; dispid 121;
    procedure InsertCustomSymbol(const SymbolPath: WideString); dispid 122;
    function GetSheetCount: Integer; dispid 123;
    function GetSheetNames: OleVariant; dispid 124;
    function IGetSheetNames(var Count: Integer): WideString; dispid 125;
    function ActivateSheet(const Name: WideString): WordBool; dispid 126;
    function CreateText2(const TextString: WideString; TextX: Double; TextY: Double; TextZ: Double; 
                         TextHeight: Double; TextAngle: Double): IDispatch; dispid 127;
    function ICreateText2(const TextString: WideString; TextX: Double; TextY: Double; 
                          TextZ: Double; TextHeight: Double; TextAngle: Double): INote; dispid 128;
    function NewSheet3(const Name: WideString; PaperSize: Integer; TemplateIn: Integer; 
                       Scale1: Double; Scale2: Double; FirstAngle: WordBool; 
                       const TemplateName: WideString; Width: Double; Height: Double; 
                       const PropertyViewName: WideString): WordBool; dispid 129;
    function SetupSheet4(const Name: WideString; PaperSize: Integer; TemplateIn: Integer; 
                         Scale1: Double; Scale2: Double; FirstAngle: WordBool; 
                         const TemplateName: WideString; Width: Double; Height: Double; 
                         const PropertyViewName: WideString): WordBool; dispid 130;
    function CreateLinearDim3(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                              P4: OleVariant; Val: Double; PrimPrec: Integer; 
                              const Text: WideString; TextPoint: OleVariant; Angle: Double; 
                              TextHeight: Double; const Prefix: WideString; 
                              const Suffix: WideString; const Callout1: WideString; 
                              const Callout2: WideString; TolType: Integer; 
                              const TolMin: WideString; const TolMax: WideString; TolPrec: Integer; 
                              ArrowSize: Double; ArrowStyle: Integer; ArrowDir: Integer; 
                              WitnessGap: Double; WitnessOvershoot: Double; DualDisplay: WordBool; 
                              DualPrec: Integer): IDispatch; dispid 131;
    function ICreateLinearDim3(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                               var P4: Double; Val: Double; PrimPrec: Integer; 
                               const Text: WideString; var TextPoint: Double; Angle: Double; 
                               TextHeight: Double; const Prefix: WideString; 
                               const Suffix: WideString; const Callout1: WideString; 
                               const Callout2: WideString; TolType: Integer; 
                               const TolMin: WideString; const TolMax: WideString; 
                               TolPrec: Integer; ArrowSize: Double; ArrowStyle: Integer; 
                               ArrowDir: Integer; WitnessGap: Double; WitnessOvershoot: Double; 
                               DualDisplay: WordBool; DualPrecision: Integer): IDisplayDimension; dispid 132;
    function CreateAngDim3(VP0: OleVariant; VP1: OleVariant; VP2: OleVariant; VP3: OleVariant; 
                           VP4: OleVariant; VP5: OleVariant; VP6: OleVariant; ArrowSize: Double; 
                           const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                           WitnessOvershoot: Double; VTextPoint: OleVariant): IDispatch; dispid 133;
    function ICreateAngDim3(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                            var P4: Double; var P5: Double; var P6: Double; ArrowSize: Double; 
                            const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                            WitnessOvershoot: Double; var TextPoint: Double): IDisplayDimension; dispid 134;
    function CreateDiamDim3(DimVal: Double; VP0: OleVariant; VP1: OleVariant; VP2: OleVariant; 
                            VP3: OleVariant; ArrowSize: Double; const Text: WideString; 
                            TextHeight: Double; WitnessGap: Double; WitnessOvershoot: Double; 
                            VTextPoint: OleVariant): IDispatch; dispid 135;
    function ICreateDiamDim3(DimValue: Double; var P0: Double; var P1: Double; var P2: Double; 
                             var P3: Double; ArrowSize: Double; const Text: WideString; 
                             TextHeight: Double; WitnessGap: Double; WitnessOvershoot: Double; 
                             var TextPoint: Double): IDisplayDimension; dispid 136;
    function CreateOrdinateDim3(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                                P4: OleVariant; Angle: Double; ArrowSize: Double; 
                                const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                                WitnessOvershoot: Double; P5: OleVariant): IDispatch; dispid 137;
    function ICreateOrdinateDim3(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                 var P4: Double; Angle: Double; ArrowSize: Double; 
                                 const Text: WideString; TextHeight: Double; WitnessGap: Double; 
                                 WitnessOvershoot: Double; var P5: Double): IDisplayDimension; dispid 138;
    procedure ForceRebuild; dispid 139;
    function AddOrdinateDimension(DimType: Integer; LocX: Double; LocY: Double; LocZ: Double): WordBool; dispid 140;
    function CreateLayer(const Layername: WideString; const LayerDesc: WideString; 
                         LayerColor: Integer; LayerStyle: Integer; LayerWidth: Integer; 
                         BOn: WordBool): WordBool; dispid 141;
    function SetCurrentLayer(const Layername: WideString): WordBool; dispid 142;
    function DrawingViewRotate(NewAngle: Double): WordBool; dispid 143;
    function CreateDetailViewAt2(X: Double; Y: Double; Z: Double): WordBool; dispid 144;
    procedure RestoreRotation; dispid 145;
    function GetEditSheet: WordBool; dispid 146;
    procedure TranslateDrawing(DeltaX: Double; DeltaY: Double); dispid 147;
    function Create1stAngleViews2(const ModelName: WideString): WordBool; dispid 148;
    function Create3rdAngleViews2(const ModelName: WideString): WordBool; dispid 149;
    procedure HideShowDimensions; dispid 150;
    function CreateLinearDim4(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                              P4: OleVariant; TextPoint: OleVariant; Val: Double; Angle: Double; 
                              TextHeight: Double): IDispatch; dispid 151;
    function ICreateLinearDim4(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                               var P4: Double; var TextPoint: Double; Val: Double; Angle: Double; 
                               TextHeight: Double): IDisplayDimension; dispid 152;
    function CreateDiamDim4(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                            TextPoint: OleVariant; Val: Double; TextHeight: Double): IDispatch; dispid 153;
    function ICreateDiamDim4(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                             var TextPoint: Double; Val: Double; TextHeight: Double): IDisplayDimension; dispid 154;
    function CreateOrdinateDim4(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                                P4: OleVariant; P5: OleVariant; Val: Double; Angle: Double; 
                                TextHeight: Double): IDispatch; dispid 155;
    function ICreateOrdinateDim4(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                                 var P4: Double; var P5: Double; Val: Double; Angle: Double; 
                                 TextHeight: Double): IDisplayDimension; dispid 156;
    function CreateAngDim4(P0: OleVariant; P1: OleVariant; P2: OleVariant; P3: OleVariant; 
                           P4: OleVariant; P5: OleVariant; P6: OleVariant; TextPoint: OleVariant; 
                           TextHeight: Double): IDispatch; dispid 157;
    function ICreateAngDim4(var P0: Double; var P1: Double; var P2: Double; var P3: Double; 
                            var P4: Double; var P5: Double; var P6: Double; var TextPoint: Double; 
                            TextHeight: Double): IDisplayDimension; dispid 158;
    function CreateDetailViewAt3(X: Double; Y: Double; Z: Double; Style: Integer; Scale1: Double; 
                                 Scale2: Double; const LabelIn: WideString; Showtype: Integer; 
                                 FullOutline: WordBool): IDispatch; dispid 159;
    function ICreateDetailViewAt3(X: Double; Y: Double; Z: Double; Style: Integer; Scale1: Double; 
                                  Scale2: Double; const LabelIn: WideString; Showtype: Integer; 
                                  FullOutline: WordBool): IView; dispid 160;
    function CreateSectionViewAt2(X: Double; Y: Double; Z: Double; NotAligned: WordBool; 
                                  IsOffsetSection: WordBool; const Label_: WideString; 
                                  Chgdirection: WordBool; Scwithmodel: WordBool; Partial: WordBool; 
                                  Dispsurfcut: WordBool): IDispatch; dispid 161;
    function ICreateSectionViewAt2(X: Double; Y: Double; Z: Double; NotAligned: WordBool; 
                                   IsOffsetSection: WordBool; const Label_: WideString; 
                                   Chgdirection: WordBool; Scwithmodel: WordBool; 
                                   Partial: WordBool; Dispsurfcut: WordBool): IView; dispid 162;
    function CreateAuxiliaryViewAt2(X: Double; Y: Double; Z: Double; NotAligned: WordBool; 
                                    const Label_: WideString; Showarrow: WordBool; Flip: WordBool): IDispatch; dispid 163;
    function ICreateAuxiliaryViewAt2(X: Double; Y: Double; Z: Double; NotAligned: WordBool; 
                                     const Label_: WideString; Showarrow: WordBool; Flip: WordBool): IView; dispid 164;
    procedure MakeCustomSymbol; dispid 165;
    procedure ExplodeCustomSymbol; dispid 166;
    procedure SaveCustomSymbol(const FileNameIn: WideString); dispid 167;
    function CreateBreakOutSection(Depth: Double): WordBool; dispid 168;
    procedure InsertThreadCallout; dispid 169;
    function CreateFlatPatternViewFromModelView(const ModelName: WideString; 
                                                const ConfigName: WideString; LocX: Double; 
                                                LocY: Double; LocZ: Double): WordBool; dispid 170;
    function ChangeRefConfigurationOfFlatPatternView(const ModelName: WideString; 
                                                     const ConfigName: WideString): WordBool; dispid 171;
    function AddHoleCallout2(X: Double; Y: Double; Z: Double): IDispatch; dispid 172;
    function IAddHoleCallout2(X: Double; Y: Double; Z: Double): IDisplayDimension; dispid 173;
    procedure EditCenterMarkProperties(Angle: Double; Size: Double; Lines: WordBool; 
                                       DocSettings: WordBool); dispid 174;
    function InsertDowelSymbol: IDispatch; dispid 175;
    function IInsertDowelSymbol: IDowelSymbol; dispid 176;
    procedure InsertMultiJogLeader; dispid 177;
    property HiddenViewsVisible: WordBool dispid 178;
    function AddChamferDim(X: Double; Y: Double; Z: Double): IDispatch; dispid 179;
    function IAddChamferDim(X: Double; Y: Double; Z: Double): IDisplayDimension; dispid 180;
    function MakeCustomSymbol2: IDispatch; dispid 181;
    function IMakeCustomSymbol2: ICustomSymbol; dispid 182;
    function InsertCustomSymbol2(const FileName: WideString): IDispatch; dispid 183;
    function IInsertCustomSymbol2(const FileName: WideString): ICustomSymbol; dispid 184;
    function CreateCustomSymbol(Segments: OleVariant; Points: OleVariant; Notes: OleVariant): IDispatch; dispid 185;
    function ICreateCustomSymbol(SegmentCount: Integer; var Segments: ISketchSegment; 
                                 PointCount: Integer; var Points: ISketchPoint; NoteCount: Integer; 
                                 var Notes: INote): ICustomSymbol; dispid 186;
    procedure ViewDisplayShaded; dispid 187;
    procedure ChangeComponentLayer(const Layername: WideString; AllViews: WordBool); dispid 188;
    property AutomaticViewUpdate: WordBool dispid 189;
    property ActiveDrawingView: IDispatch readonly dispid 190;
    property IActiveDrawingView: IView readonly dispid 191;
    function InsertCenterMark(UseDoc: WordBool; Size: Double; ShowLines: WordBool; Angle: Double): ICenterMark; dispid 192;
    function CreateFlatPatternViewFromModelView2(const ModelName: WideString; 
                                                 const ConfigName: WideString; LocX: Double; 
                                                 LocY: Double; LocZ: Double; HideBendLines: WordBool): WordBool; dispid 193;
    procedure ViewHlrQuality; dispid 194;
    procedure ViewModelEdges; dispid 195;
    function GetBlockDefinitionCount: Integer; dispid 196;
    function GetBlockDefinitions: OleVariant; dispid 197;
    function IGetBlockDefinitions(Count: Integer): IBlockDefinition; dispid 198;
    function GetBlockDefinition(const Name: WideString): IBlockDefinition; dispid 199;
    function MakeBlockDefinition(const Name: WideString; const XRefFileName: WideString; 
                                 Instance: WordBool): IBlockDefinition; dispid 200;
    function CreateBlockDefinition(const Name: WideString; const XRefFileName: WideString; 
                                   Instance: WordBool; Segments: OleVariant; Points: OleVariant; 
                                   Notes: OleVariant; Dimensions: OleVariant; Blocks: OleVariant): IDispatch; dispid 201;
    function ICreateBlockDefinition(const Name: WideString; const XRefFileName: WideString; 
                                    Instance: WordBool; SegmentCount: Integer; 
                                    var Segments: ISketchSegment; PointCount: Integer; 
                                    var Points: ISketchPoint; NoteCount: Integer; var Notes: INote; 
                                    DimensionCount: Integer; var Dimensions: IDisplayDimension; 
                                    BlockCount: Integer; var Blocks: IBlockInstance): IBlockDefinition; dispid 202;
    function InsertBlock(const FileName: WideString; X: Double; Y: Double; Angle: Double; 
                         Scale: Double): IBlockInstance; dispid 203;
    function SaveBlock(const FileName: WideString): WordBool; dispid 204;
    function ExplodeBlockInstance: WordBool; dispid 205;
    function InsertCenterMark2(Style: Integer; Propagate: WordBool): ICenterMark; dispid 206;
    function InsertCenterLine: WordBool; dispid 207;
    function AddOrdinateDimension2(DimType: Integer; LocX: Double; LocY: Double; LocZ: Double): Integer; dispid 208;
    function InsertTableAnnotation(X: Double; Y: Double; AnchorType: Integer; Rows: Integer; 
                                   Columns: Integer): ITableAnnotation; dispid 209;
    function InsertModelInPredefinedView(const ModelName: WideString): WordBool; dispid 210;
    function InsertRevisionSymbol(X: Double; Y: Double): INote; dispid 211;
    function AutoBalloon(Layout: Integer): OleVariant; dispid 212;
    function CreateSectionViewAt3(X: Double; Y: Double; Z: Double; NotAligned: WordBool; 
                                  IsOffsetSection: WordBool; const Label_: WideString; 
                                  Chgdirection: WordBool; Scwithmodel: WordBool; Partial: WordBool; 
                                  Dispsurfcut: WordBool; ExcludedComponents: OleVariant): IView; dispid 213;
    function ICreateSectionViewAt3(X: Double; Y: Double; Z: Double; NotAligned: WordBool; 
                                   IsOffsetSection: WordBool; const Label_: WideString; 
                                   Chgdirection: WordBool; Scwithmodel: WordBool; 
                                   Partial: WordBool; Dispsurfcut: WordBool; 
                                   NumExcludedComponents: Integer; 
                                   var PExcludedComponents: IDispatch): IView; dispid 214;
    function InsertModelAnnotations2(Option: Integer; AllTypes: WordBool; Types: Integer; 
                                     AllViews: WordBool; DuplicateDims: WordBool; 
                                     HiddenFeatureDims: WordBool): WordBool; dispid 215;
    function GetEditBlock: WordBool; dispid 216;
    function InsertCenterLine2: ICenterLine; dispid 217;
    function InsertMultiJogLeader2(Points: OleVariant): IDispatch; dispid 218;
    function IInsertMultiJogLeader2(PointsCount: Integer; var Points: IMathPoint): IMultiJogLeader; dispid 219;
    function AutoDimension(EntitiesToDimension: Integer; HorizontalScheme: Integer; 
                           HorizontalPlacement: Integer; VerticalScheme: Integer; 
                           VerticalPlacement: Integer): Integer; dispid 220;
    function InsertModelAnnotations3(Option: Integer; Types: Integer; AllViews: WordBool; 
                                     DuplicateDims: WordBool; HiddenFeatureDims: WordBool; 
                                     UsePlacementInSketch: WordBool): OleVariant; dispid 221;
    function CreateUnfoldedViewAt3(X: Double; Y: Double; Z: Double; NotAligned: WordBool): IView; dispid 222;
    function CreateDrawViewFromModelView2(const ModelName: WideString; const ViewName: WideString; 
                                          LocX: Double; LocY: Double; LocZ: Double): IView; dispid 223;
    function CreateSectionViewAt4(X: Double; Y: Double; Z: Double; const SectionLabel: WideString; 
                                  Options: Integer; ExcludedComponents: OleVariant): IView; dispid 224;
    function ICreateSectionViewAt4(X: Double; Y: Double; Z: Double; const SectionLabel: WideString; 
                                   Options: Integer; NumExcludedComponents: Integer; 
                                   var ExcludedComponents: IDispatch): IView; dispid 225;
    function AutoBalloon2(Layout: Integer; IgnoreMultiple: WordBool): OleVariant; dispid 226;
    function CreateViewport3(LowerLeftX: Double; LowerLeftY: Double; SketchSize: Smallint; 
                             Scale: Double): IView; dispid 227;
    function CreateDrawViewFromModelView3(const ModelName: WideString; const ViewName: WideString; 
                                          LocX: Double; LocY: Double; LocZ: Double): IView; dispid 228;
    function InsertMultiJogLeader3(Points: OleVariant; StartPointArrowStyle: Integer; 
                                   EndPointArrowStyle: Integer): IDispatch; dispid 229;
    function IInsertMultiJogLeader3(PointsCount: Integer; var Points: IMathPoint; 
                                    StartPointArrowStyle: Integer; EndPointArrowStyle: Integer): IMultiJogLeader; dispid 230;
    function InsertTableAnnotation2(UseAnchorPoint: WordBool; X: Double; Y: Double; 
                                    AnchorType: Integer; const TableTemplate: WideString; 
                                    Rows: Integer; Columns: Integer): ITableAnnotation; dispid 231;
    function ResolveOutOfDateLightWeightComponents: WordBool; dispid 232;
    function CreateRelativeView(const ModelName: WideString; XPos: Double; YPos: Double; 
                                ViewDirFront: Integer; ViewDirRight: Integer): IView; dispid 233;
    function AutoBalloon3(Layout: Integer; IgnoreMultiple: WordBool; Style: Integer; Size: Integer; 
                          UpperTextContent: Integer; const UpperText: WideString; 
                          LowerTextContent: Integer; const LowerText: WideString; 
                          const Layername: WideString): OleVariant; dispid 234;
    function DropDrawingViewFromPalette(Layout: Integer; X: Double; Y: Double; Z: Double): IView; dispid 235;
    function ReorderSheets(NewSheetList: OleVariant): WordBool; dispid 236;
    function IReorderSheets(SheetCount: Integer; var NewSheetList: WideString): WordBool; dispid 237;
    function DropDrawingViewFromPalette2(const PaletteViewName: WideString; X: Double; Y: Double; 
                                         Z: Double): IView; dispid 238;
    function GetDrawingPaletteViewNames: OleVariant; dispid 239;
    function GenerateViewPaletteViews(const FileName: WideString): WordBool; dispid 240;
    function CreateFlatPatternViewFromModelView3(const ModelName: WideString; 
                                                 const ConfigName: WideString; LocX: Double; 
                                                 LocY: Double; LocZ: Double; 
                                                 HideBendLines: WordBool; FlipView: WordBool): IView; dispid 241;
    function SetupSheet5(const Name: WideString; PaperSize: Integer; TemplateIn: Integer; 
                         Scale1: Double; Scale2: Double; FirstAngle: WordBool; 
                         const TemplateName: WideString; Width: Double; Height: Double; 
                         const PropertyViewName: WideString; RemoveModifiedNotes: WordBool): WordBool; dispid 242;
  end;

// *********************************************************************//
// Interface: IModeler
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D73-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IModeler = interface(IDispatch)
    ['{83A33D73-27C5-11CE-BFD4-00400513BB57}']
    function CreateBodyFromBox(BoxDimArray: OleVariant): IDispatch; safecall;
    function ICreateBodyFromBox(var BoxDimArray: Double): IBody; safecall;
    function SetTolerances(var ToleranceIDArray: Integer; var ToleranceValueArray: Double; 
                           NumTol: Integer): WordBool; safecall;
    function UnsetTolerances(var ToleranceIDArray: Integer; NumTol: Integer): WordBool; safecall;
    function Restore(const StreamIn: IUnknown): IDispatch; safecall;
    function IRestore(const StreamIn: IUnknown): IBody; safecall;
    function SetInitKnitGapWidth(InitGapWidth: Double): WordBool; safecall;
    function GetInitKnitGapWidth: Double; safecall;
    function CreateBodyFromCyl(CylDimArray: OleVariant): IDispatch; safecall;
    function ICreateBodyFromCyl(var CylDimArray: Double): IBody; safecall;
    function CreateBodyFromCone(ConeDimArray: OleVariant): IDispatch; safecall;
    function ICreateBodyFromCone(var ConeDimArray: Double): IBody; safecall;
    function CreateBrepBody(Type_: SYSINT; NTopologies: SYSINT; Topologies: OleVariant; 
                            EdgeToleranceArray: OleVariant; VertexToleranceArray: OleVariant; 
                            PointArray: OleVariant; CurveArray: OleVariant; 
                            SurfaceArray: OleVariant; NRelations: SYSINT; Parents: OleVariant; 
                            Children: OleVariant; Senses: OleVariant): IDispatch; safecall;
    function ICreateBrepBody(Type_: SYSINT; NTopologies: SYSINT; var Topologies: SYSINT; 
                             var EdgeTolArray: Double; var VertexTolArray: Double; 
                             var PointArray: Double; var CurveArray: ICurve; 
                             var SurfaceArray: ISurface; NRelations: SYSINT; var Parents: SYSINT; 
                             var Children: SYSINT; var Senses: SYSINT): IBody; safecall;
    function CreatePlanarSurface(VRootPoint: OleVariant; VNormal: OleVariant): IDispatch; safecall;
    function ICreatePlanarSurface(var RootPoint: Double; var Normal: Double): ISurface; safecall;
    function CreateExtrusionSurface(const ProfileCurve: IDispatch; AxisDirection: OleVariant): IDispatch; safecall;
    function ICreateExtrusionSurface(const ProfileCurve: ICurve; var AxisDirection: Double): ISurface; safecall;
    function CreateRevolutionSurface(const ProfileCurve: IDispatch; AxisPoint: OleVariant; 
                                     AxisDirection: OleVariant; ProfileEndPtParams: OleVariant): IDispatch; safecall;
    function ICreateRevolutionSurface(const ProfileCurve: ICurve; var AxisPoint: Double; 
                                      var AxisDirection: Double; var ProfileEndPtParams: Double): ISurface; safecall;
    function CreateBsplineSurface(Props: OleVariant; UKnots: OleVariant; VKnots: OleVariant; 
                                  CtrlPtCoords: OleVariant): IDispatch; safecall;
    function ICreateBsplineSurface(var Properties: Integer; var UKnotArray: Double; 
                                   var VKnotArray: Double; var ControlPointCoordArray: Double): ISurface; safecall;
    function CreateOffsetSurface(const SurfaceIn: IDispatch; Distance: Double): IDispatch; safecall;
    function ICreateOffsetSurface(const SurfaceIn: ISurface; Distance: Double): ISurface; safecall;
    function CreateLine(RootPoint: OleVariant; Direction: OleVariant): IDispatch; safecall;
    function ICreateLine(var RootPoint: Double; var Direction: Double): ICurve; safecall;
    function CreateArc(Center: OleVariant; Axis: OleVariant; Radius: Double; 
                       StartPoint: OleVariant; EndPoint: OleVariant): IDispatch; safecall;
    function ICreateArc(var Center: Double; var Axis: Double; Radius: Double; 
                        var StartPoint: Double; var EndPoint: Double): ICurve; safecall;
    function CreateBsplineCurve(Props: OleVariant; Knots: OleVariant; CtrlPtCoords: OleVariant): IDispatch; safecall;
    function ICreateBsplineCurve(var Properties: Integer; var KnotArray: Double; 
                                 var ControlPointCoordArray: Double): ICurve; safecall;
    function CreatePCurve(const Surface: IDispatch; Props: OleVariant; Knots: OleVariant; 
                          CtrlPtCoords: OleVariant): IDispatch; safecall;
    function ICreatePCurve(const Surface: ISurface; var Props: Integer; var Knots: Double; 
                           var CtrlPtCoords: Double): ICurve; safecall;
    function CreateBodiesFromSheets(Sheets: OleVariant; Options: Integer; var Error: Integer): OleVariant; safecall;
    function ICreateBodiesFromSheets(NSheets: Integer; var Sheets: IUnknown; Options: Integer; 
                                     var NResults: Integer; var Results: IUnknown): Integer; safecall;
    function ICreateBodyFromFaces(NumOfFaces: Integer; var Faces: IFace; DoLocalCheck: WordBool; 
                                  var LocalCheckResult: WordBool): IBody; safecall;
    function FindTwoEdgeMaxDeviation(const LpEdge1: IDispatch; const LpEdge2: IDispatch): Double; safecall;
    function IFindTwoEdgeMaxDeviation(const PEdge1: IEdge; const PEdge2: IEdge): Double; safecall;
    function CreateConicalSurface(Center: OleVariant; Direction: OleVariant; Radius: Double; 
                                  SemiAngle: Double): IDispatch; safecall;
    function ICreateConicalSurface(var Center: Double; var Direction: Double; Radius: Double; 
                                   SemiAngle: Double): ISurface; safecall;
    function CreateCylindricalSurface(Center: OleVariant; Direction: OleVariant; Radius: Double): IDispatch; safecall;
    function ICreateCylindricalSurface(var Center: Double; var Direction: Double; Radius: Double): ISurface; safecall;
    function CreateSphericalSurface(Center: OleVariant; Radius: Double): IDispatch; safecall;
    function ICreateSphericalSurface(var Center: Double; Radius: Double): ISurface; safecall;
    function CreateToroidalSurface(Center: OleVariant; Axis: OleVariant; RefDirection: OleVariant; 
                                   MajorRadius: Double; MinorRadius: Double): IDispatch; safecall;
    function ICreateToroidalSurface(var Center: Double; var Axis: Double; var RefDirection: Double; 
                                    MajorRadius: Double; MinorRadius: Double): ISurface; safecall;
    function CreateBodyFromFaces2(NumOfFaces: Integer; Faces: OleVariant; ActionType: Integer; 
                                  DoLocalCheck: WordBool; out LocalCheckResult: WordBool): IDispatch; safecall;
    function ICreateBodyFromFaces2(NumOfFaces: Integer; var Faces: IFace; ActionType: Integer; 
                                   DoLocalCheck: WordBool; out LocalCheckResult: WordBool): IBody; safecall;
    function SetToleranceValue(ToleranceID: Integer; NewToleranceValue: Double): Double; safecall;
    function GetToleranceValue(ToleranceID: Integer): Double; safecall;
    function CreateSheetFromSurface(const SurfaceIn: IDispatch; UvRange: OleVariant): IDispatch; safecall;
    function ICreateSheetFromSurface(const SurfaceIn: ISurface; var UvRange: Double): IBody; safecall;
    function ImprintingFaces(TargetFaceArray: OleVariant; ToolFaceArray: OleVariant; 
                             Options: Integer; out TargetEdges: OleVariant; 
                             out ToolEdges: OleVariant; out TargetVertices: OleVariant; 
                             out ToolVertices: OleVariant): WordBool; safecall;
    procedure IImprintingFaces(out TargetEdges: IEdge; out ToolEdges: IEdge; 
                               out TargetVertices: IVertex; out ToolVertices: IVertex); safecall;
    function IImprintingFacesCount(NTargetFaces: Integer; var TargetFaceArray: IFace; 
                                   NToolFaces: Integer; var ToolFaceArray: IFace; Options: Integer; 
                                   out NTargetEdges: Integer; out NtoolEdges: Integer; 
                                   out NtargetVertices: Integer; out ToolVertices: Integer): WordBool; safecall;
    function CreateSweptSurface(const CurveIn: IDispatch; Dir: OleVariant): IDispatch; safecall;
    function ICreateSweptSurface(const CurveIn: ICurve; var Dir: Double): ISurface; safecall;
    function ReplaceSurfaces(NFaces: Integer; FaceArray: OleVariant; NewSurfArray: OleVariant; 
                             SenseArray: OleVariant; Tolerance: Double): WordBool; safecall;
    function IReplaceSurfaces(NFaces: Integer; var FaceArray: IFace; var NewSurfArray: ISurface; 
                              var SenseArray: SYSINT; Tolerance: Double): WordBool; safecall;
    function SplitFaceOnParam(const Facedisp: IDispatch; UVFlag: Integer; Parameter: Double; 
                              out Status: WordBool): OleVariant; safecall;
    function ISplitFaceOnParamCount(const Facedisp: IFace; UVFlag: Integer; Parameter: Double; 
                                    out Status: WordBool): Integer; safecall;
    function ISplitFaceOnParam: IFace; safecall;
    function CheckInterference(const Body1: IDispatch; const Body2: IDispatch; 
                               CoincidentInterference: WordBool; 
                               out Body1InterferedFaceArray: OleVariant; 
                               out Body2InterferedFaceArray: OleVariant; 
                               out IntersectedBodyArray: OleVariant): WordBool; safecall;
    function ICheckInterferenceCount(const Body1: IBody; const Body2: IBody; 
                                     CoincidentInterference: WordBool; 
                                     out Body1InterferedFaceCount: Integer; 
                                     out Body2InterferedFaceCount: Integer; 
                                     out IntersectedBodyCount: Integer): WordBool; safecall;
    procedure ICheckInterference(out Body1InterferedFaceArray: IFace; 
                                 out Body2InterferedFaceArray: IFace; 
                                 out IntersectedBodyArray: IBody); safecall;
    function CreateRuledSurface(const Curve1In: IDispatch; const Curve2In: IDispatch; 
                                Apex: OleVariant): IDispatch; safecall;
    function ICreateRuledSurface(const Curve1In: ICurve; const Curve2In: ICurve; var Apex: Double): ISurface; safecall;
    function CreateCylindricalSurface2(Center: OleVariant; Direction: OleVariant; 
                                       RefDirection: OleVariant; Radius: Double): IDispatch; safecall;
    function ICreateCylindricalSurface2(var Center: Double; var Direction: Double; 
                                        var RefDirection: Double; Radius: Double): ISurface; safecall;
    function CreateSphericalSurface2(Center: OleVariant; Axis: OleVariant; RefDir: OleVariant; 
                                     Radius: Double): IDispatch; safecall;
    function ICreateSphericalSurface2(var Center: Double; var Axis: Double; var RefDir: Double; 
                                      Radius: Double): ISurface; safecall;
    function ICreateBodyFromBox2(var BoxDimArray: Double): IBody2; safecall;
    function IRestore2(const StreamIn: IUnknown): IBody2; safecall;
    function ICreateBodyFromCyl2(var CylDimArray: Double): IBody2; safecall;
    function ICreateBodyFromCone2(var ConeDimArray: Double): IBody2; safecall;
    function ICreateBrepBody2(Type_: SYSINT; NTopologies: SYSINT; var Topologies: SYSINT; 
                              var EdgeTolArray: Double; var VertexTolArray: Double; 
                              var PointArray: Double; var CurveArray: ICurve; 
                              var SurfaceArray: ISurface; NRelations: SYSINT; var Parents: SYSINT; 
                              var Children: SYSINT; var Senses: SYSINT): IBody2; safecall;
    function ICreateSheetFromSurface2(const SurfaceIn: ISurface; var UvRange: Double): IBody2; safecall;
    function ICheckInterferenceCount2(const Body1: IBody2; const Body2: IBody2; 
                                      CoincidentInterference: WordBool; 
                                      out Body1InterferedFaceCount: Integer; 
                                      out Body2InterferedFaceCount: Integer; 
                                      out IntersectedBodyCount: Integer): WordBool; safecall;
    function ICreateBodyFromFaces3(NumOfFaces: Integer; var Faces: IFace2; ActionType: Integer; 
                                   DoLocalCheck: WordBool; out LocalCheckResult: WordBool): IBody2; safecall;
    function IImprintingFacesCount2(NTargetFaces: Integer; var TargetFaceArray: IFace2; 
                                    NToolFaces: Integer; var ToolFaceArray: IFace2; 
                                    Options: Integer; out NTargetEdges: Integer; 
                                    out NtoolEdges: Integer; out NtargetVertices: Integer; 
                                    out ToolVertices: Integer): WordBool; safecall;
    function IReplaceSurfaces2(NFaces: Integer; var FaceArray: IFace2; var NewSurfArray: ISurface; 
                               var SenseArray: SYSINT; Tolerance: Double): WordBool; safecall;
    function ISplitFaceOnParamCount2(const Facedisp: IFace2; UVFlag: Integer; Parameter: Double; 
                                     out Status: WordBool): Integer; safecall;
    function ISplitFaceOnParam2: IFace2; safecall;
    procedure ICheckInterference2(out Body1InterferedFaceArray: IFace2; 
                                  out Body2InterferedFaceArray: IFace2; 
                                  out IntersectedBodyArray: IBody2); safecall;
    function CreatePlanarSurface2(VRootPoint: OleVariant; VNormal: OleVariant; VRef: OleVariant): IDispatch; safecall;
    function ICreatePlanarSurface2(var RootPoint: Double; var Normal: Double; var Ref: Double): ISurface; safecall;
    function CreateConicalSurface2(Center: OleVariant; Direction: OleVariant; 
                                   RefDirection: OleVariant; Radius: Double; SemiAngle: Double): IDispatch; safecall;
    function ICreateConicalSurface2(var Center: Double; var Direction: Double; 
                                    var RefDirection: Double; Radius: Double; SemiAngle: Double): ISurface; safecall;
    function CopyWizardHole(const SourceHole: IDispatch; const DestinationHole: IDispatch; 
                            RebuildOwner: WordBool): Integer; safecall;
    function ICopyWizardHole(const SourceHole: IFeature; const DestinationHole: IFeature; 
                             RebuildOwner: WordBool): Integer; safecall;
    function DeleteFacesFromSheetBody(FaceVar: OleVariant): WordBool; safecall;
    function IDeleteFacesFromSheetBody(Count: Integer; var FaceVar: IFace2): WordBool; safecall;
    function CreateWireBody(EntVar: OleVariant; Option: Integer): IBody2; safecall;
    function ICreateWireBody(Count: Integer; var EntArr: IDispatch; Option: Integer): IBody2; safecall;
    function CreateBrepBody3(Type_: SYSINT; NTopologies: SYSINT; Topologies: OleVariant; 
                             EdgeToleranceArray: OleVariant; VertexToleranceArray: OleVariant; 
                             PointArray: OleVariant; CurveArray1: OleVariant; 
                             CurveSurfaceArray1: OleVariant; CurveArray2: OleVariant; 
                             CurveSurfaceArray2: OleVariant; SurfaceArray: OleVariant; 
                             NRelations: SYSINT; Parents: OleVariant; Children: OleVariant; 
                             Senses: OleVariant; Option: Integer): IDispatch; safecall;
    function ICreateBrepBody3(Type_: SYSINT; NTopologies: SYSINT; var Topologies: SYSINT; 
                              var EdgeTolArray: Double; var VertexTolArray: Double; 
                              var PointArray: Double; var CurveArra1: ICurve; 
                              var CurveSurfaceArray1: ISurface; var CurveArray2: ICurve; 
                              var CurveSurfaceArray2: ISurface; var SurfaceArray: ISurface; 
                              NRelations: SYSINT; var Parents: SYSINT; var Children: SYSINT; 
                              var Senses: SYSINT; Option: Integer): IBody2; safecall;
    function CreateSheetFromFaces(FaceArr: OleVariant): IBody2; safecall;
    function ICreateSheetFromFaces(FaceCount: Integer; var FaceArr: IFace2): IBody2; safecall;
    function CreateSpring: ISpring; safecall;
    function GetBodyOutline(BodyVar: OleVariant; const Direction: IMathVector; Tolerance: Double; 
                            out CurvesOut: OleVariant; out TopolEntities: OleVariant; 
                            out Outline: OleVariant): Integer; safecall;
    function MergeCurves(CurveVar: OleVariant): ICurve; safecall;
    function IMergeCurves(CurveCount: Integer; var CurveArr: ICurve): ICurve; safecall;
    function CreateSweptBody(const PModDoc: IModelDoc2; Propagate: WordBool; Alignment: WordBool; 
                             TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                             BAdvancedSmoothing: WordBool; StartMatchingType: Smallint; 
                             EndMatchingType: Smallint; IsThinBody: WordBool; Thickness1: Double; 
                             Thickness2: Double; ThinType: Smallint; PathAlign: Smallint; 
                             TwistAngle: Double; BMergeSmoothFaces: WordBool): IBody2; safecall;
    function Get_GeneralTopology: WordBool; safecall;
    procedure Set_GeneralTopology(BSet: WordBool); safecall;
    function GetManifoldBodiesCount(const NonManifoldIn: IBody2): Integer; safecall;
    function MakeManifoldBodies(const NonManifoldIn: IBody2): OleVariant; safecall;
    function IMakeManifoldBodies(const NonManifoldIn: IBody2; Count: Integer): IBody2; safecall;
    function CreateCoonsBSurface(const UCurve0: ICurve; const UCurve1: ICurve; 
                                 const VCurve0: ICurve; const VCurve1: ICurve; 
                                 IgnoreClosureReqt: WordBool): ISurface; safecall;
    function ICreateLoftSurface(NCurves: Integer; var CurveArray: ICurve; BBlendClosed: WordBool; 
                                BForceCubic: WordBool; NGuides: Integer; var GuideCrvArray: ICurve; 
                                StartMatchingType: Integer; EndMatchingType: Integer; 
                                const NormalAtStartSection: IMathVector; 
                                const NormalAtEndSection: IMathVector; 
                                NStartMatchingFaces: Integer; var StartMatchingFaceList: IFace2; 
                                NEndMatchingFaces: Integer; var EndMatchingFaceList: IFace2; 
                                DegeneratedStart: WordBool; DegeneratedEnd: WordBool; 
                                const StartPointOfStartSection: IMathPoint; 
                                const StartPointOfEndSection: IMathPoint; 
                                SectionIndexStart: Integer; SectionIndexEnd: Integer; 
                                GuideIndexStart: Integer; GuideIndexEnd: Integer): ISurface; safecall;
    function CreateLoftSurface(CurveArray: OleVariant; BBlendClosed: WordBool; 
                               BForceCubic: WordBool; GuideCrvArray: OleVariant; 
                               StartMatchingType: Integer; EndMatchingType: Integer; 
                               const NormalAtStartSection: IDispatch; 
                               const NormalAtEndSection: IDispatch; 
                               StartMatchingFaceList: OleVariant; EndMatchingFaceList: OleVariant; 
                               DegeneratedStart: WordBool; DegeneratedEnd: WordBool; 
                               const StartPointOfStartSection: IDispatch; 
                               const StartPointOfEndSection: IDispatch; SectionIndexStart: Integer; 
                               SectionIndexEnd: Integer; GuideIndexStart: Integer; 
                               GuideIndexEnd: Integer): IDispatch; safecall;
    function ProjectCurveOnSurface(const CurveIn: ICurve; const SurfaceIn: ISurface; 
                                   const ProjDir: IMathVector): ICurve; safecall;
    function CreateExtrudedBody(const SheetBody: IBody2; const Direction: IMathVector; 
                                Length: Double): IBody2; safecall;
    function CreateBodiesFromSheets2(Sheets: OleVariant; Options: Integer; 
                                     KnittingTolerance: Double; var Error: Integer): OleVariant; safecall;
    function ICreateBodiesFromSheets2(NSheets: Integer; var Sheets: IBody2; Options: Integer; 
                                      KnittingTolerance: Double; var NResults: Integer; 
                                      var Results: IBody2): Integer; safecall;
    function CreateBodyFromBox3(BoxDimArray: OleVariant): IBody2; safecall;
    function CreateLoftBody(const PModDoc: IModelDoc2; IsBlendClosed: WordBool; 
                            KeepTangency: WordBool; ForceNonRational: WordBool; 
                            IsSolidBody: WordBool; TessTolFactor: Double; 
                            StartMatchingType: Smallint; EndMatchingType: Smallint): IBody2; safecall;
    function ThickenSheet(const Sheet: IBody2; Thickness: Double; Direction: Integer): IBody2; safecall;
    property GeneralTopology: WordBool read Get_GeneralTopology write Set_GeneralTopology;
  end;

// *********************************************************************//
// DispIntf:  IModelerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D73-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IModelerDisp = dispinterface
    ['{83A33D73-27C5-11CE-BFD4-00400513BB57}']
    function CreateBodyFromBox(BoxDimArray: OleVariant): IDispatch; dispid 1;
    function ICreateBodyFromBox(var BoxDimArray: Double): IBody; dispid 2;
    function SetTolerances(var ToleranceIDArray: Integer; var ToleranceValueArray: Double; 
                           NumTol: Integer): WordBool; dispid 3;
    function UnsetTolerances(var ToleranceIDArray: Integer; NumTol: Integer): WordBool; dispid 4;
    function Restore(const StreamIn: IUnknown): IDispatch; dispid 5;
    function IRestore(const StreamIn: IUnknown): IBody; dispid 6;
    function SetInitKnitGapWidth(InitGapWidth: Double): WordBool; dispid 7;
    function GetInitKnitGapWidth: Double; dispid 8;
    function CreateBodyFromCyl(CylDimArray: OleVariant): IDispatch; dispid 9;
    function ICreateBodyFromCyl(var CylDimArray: Double): IBody; dispid 10;
    function CreateBodyFromCone(ConeDimArray: OleVariant): IDispatch; dispid 11;
    function ICreateBodyFromCone(var ConeDimArray: Double): IBody; dispid 12;
    function CreateBrepBody(Type_: SYSINT; NTopologies: SYSINT; Topologies: OleVariant; 
                            EdgeToleranceArray: OleVariant; VertexToleranceArray: OleVariant; 
                            PointArray: OleVariant; CurveArray: OleVariant; 
                            SurfaceArray: OleVariant; NRelations: SYSINT; Parents: OleVariant; 
                            Children: OleVariant; Senses: OleVariant): IDispatch; dispid 13;
    function ICreateBrepBody(Type_: SYSINT; NTopologies: SYSINT; var Topologies: SYSINT; 
                             var EdgeTolArray: Double; var VertexTolArray: Double; 
                             var PointArray: Double; var CurveArray: ICurve; 
                             var SurfaceArray: ISurface; NRelations: SYSINT; var Parents: SYSINT; 
                             var Children: SYSINT; var Senses: SYSINT): IBody; dispid 14;
    function CreatePlanarSurface(VRootPoint: OleVariant; VNormal: OleVariant): IDispatch; dispid 15;
    function ICreatePlanarSurface(var RootPoint: Double; var Normal: Double): ISurface; dispid 16;
    function CreateExtrusionSurface(const ProfileCurve: IDispatch; AxisDirection: OleVariant): IDispatch; dispid 17;
    function ICreateExtrusionSurface(const ProfileCurve: ICurve; var AxisDirection: Double): ISurface; dispid 18;
    function CreateRevolutionSurface(const ProfileCurve: IDispatch; AxisPoint: OleVariant; 
                                     AxisDirection: OleVariant; ProfileEndPtParams: OleVariant): IDispatch; dispid 19;
    function ICreateRevolutionSurface(const ProfileCurve: ICurve; var AxisPoint: Double; 
                                      var AxisDirection: Double; var ProfileEndPtParams: Double): ISurface; dispid 20;
    function CreateBsplineSurface(Props: OleVariant; UKnots: OleVariant; VKnots: OleVariant; 
                                  CtrlPtCoords: OleVariant): IDispatch; dispid 21;
    function ICreateBsplineSurface(var Properties: Integer; var UKnotArray: Double; 
                                   var VKnotArray: Double; var ControlPointCoordArray: Double): ISurface; dispid 22;
    function CreateOffsetSurface(const SurfaceIn: IDispatch; Distance: Double): IDispatch; dispid 23;
    function ICreateOffsetSurface(const SurfaceIn: ISurface; Distance: Double): ISurface; dispid 24;
    function CreateLine(RootPoint: OleVariant; Direction: OleVariant): IDispatch; dispid 25;
    function ICreateLine(var RootPoint: Double; var Direction: Double): ICurve; dispid 26;
    function CreateArc(Center: OleVariant; Axis: OleVariant; Radius: Double; 
                       StartPoint: OleVariant; EndPoint: OleVariant): IDispatch; dispid 27;
    function ICreateArc(var Center: Double; var Axis: Double; Radius: Double; 
                        var StartPoint: Double; var EndPoint: Double): ICurve; dispid 28;
    function CreateBsplineCurve(Props: OleVariant; Knots: OleVariant; CtrlPtCoords: OleVariant): IDispatch; dispid 29;
    function ICreateBsplineCurve(var Properties: Integer; var KnotArray: Double; 
                                 var ControlPointCoordArray: Double): ICurve; dispid 30;
    function CreatePCurve(const Surface: IDispatch; Props: OleVariant; Knots: OleVariant; 
                          CtrlPtCoords: OleVariant): IDispatch; dispid 31;
    function ICreatePCurve(const Surface: ISurface; var Props: Integer; var Knots: Double; 
                           var CtrlPtCoords: Double): ICurve; dispid 32;
    function CreateBodiesFromSheets(Sheets: OleVariant; Options: Integer; var Error: Integer): OleVariant; dispid 33;
    function ICreateBodiesFromSheets(NSheets: Integer; var Sheets: IUnknown; Options: Integer; 
                                     var NResults: Integer; var Results: IUnknown): Integer; dispid 34;
    function ICreateBodyFromFaces(NumOfFaces: Integer; var Faces: IFace; DoLocalCheck: WordBool; 
                                  var LocalCheckResult: WordBool): IBody; dispid 35;
    function FindTwoEdgeMaxDeviation(const LpEdge1: IDispatch; const LpEdge2: IDispatch): Double; dispid 36;
    function IFindTwoEdgeMaxDeviation(const PEdge1: IEdge; const PEdge2: IEdge): Double; dispid 37;
    function CreateConicalSurface(Center: OleVariant; Direction: OleVariant; Radius: Double; 
                                  SemiAngle: Double): IDispatch; dispid 38;
    function ICreateConicalSurface(var Center: Double; var Direction: Double; Radius: Double; 
                                   SemiAngle: Double): ISurface; dispid 39;
    function CreateCylindricalSurface(Center: OleVariant; Direction: OleVariant; Radius: Double): IDispatch; dispid 40;
    function ICreateCylindricalSurface(var Center: Double; var Direction: Double; Radius: Double): ISurface; dispid 41;
    function CreateSphericalSurface(Center: OleVariant; Radius: Double): IDispatch; dispid 42;
    function ICreateSphericalSurface(var Center: Double; Radius: Double): ISurface; dispid 43;
    function CreateToroidalSurface(Center: OleVariant; Axis: OleVariant; RefDirection: OleVariant; 
                                   MajorRadius: Double; MinorRadius: Double): IDispatch; dispid 44;
    function ICreateToroidalSurface(var Center: Double; var Axis: Double; var RefDirection: Double; 
                                    MajorRadius: Double; MinorRadius: Double): ISurface; dispid 45;
    function CreateBodyFromFaces2(NumOfFaces: Integer; Faces: OleVariant; ActionType: Integer; 
                                  DoLocalCheck: WordBool; out LocalCheckResult: WordBool): IDispatch; dispid 46;
    function ICreateBodyFromFaces2(NumOfFaces: Integer; var Faces: IFace; ActionType: Integer; 
                                   DoLocalCheck: WordBool; out LocalCheckResult: WordBool): IBody; dispid 47;
    function SetToleranceValue(ToleranceID: Integer; NewToleranceValue: Double): Double; dispid 48;
    function GetToleranceValue(ToleranceID: Integer): Double; dispid 49;
    function CreateSheetFromSurface(const SurfaceIn: IDispatch; UvRange: OleVariant): IDispatch; dispid 50;
    function ICreateSheetFromSurface(const SurfaceIn: ISurface; var UvRange: Double): IBody; dispid 51;
    function ImprintingFaces(TargetFaceArray: OleVariant; ToolFaceArray: OleVariant; 
                             Options: Integer; out TargetEdges: OleVariant; 
                             out ToolEdges: OleVariant; out TargetVertices: OleVariant; 
                             out ToolVertices: OleVariant): WordBool; dispid 52;
    procedure IImprintingFaces(out TargetEdges: IEdge; out ToolEdges: IEdge; 
                               out TargetVertices: IVertex; out ToolVertices: IVertex); dispid 53;
    function IImprintingFacesCount(NTargetFaces: Integer; var TargetFaceArray: IFace; 
                                   NToolFaces: Integer; var ToolFaceArray: IFace; Options: Integer; 
                                   out NTargetEdges: Integer; out NtoolEdges: Integer; 
                                   out NtargetVertices: Integer; out ToolVertices: Integer): WordBool; dispid 54;
    function CreateSweptSurface(const CurveIn: IDispatch; Dir: OleVariant): IDispatch; dispid 55;
    function ICreateSweptSurface(const CurveIn: ICurve; var Dir: Double): ISurface; dispid 56;
    function ReplaceSurfaces(NFaces: Integer; FaceArray: OleVariant; NewSurfArray: OleVariant; 
                             SenseArray: OleVariant; Tolerance: Double): WordBool; dispid 57;
    function IReplaceSurfaces(NFaces: Integer; var FaceArray: IFace; var NewSurfArray: ISurface; 
                              var SenseArray: SYSINT; Tolerance: Double): WordBool; dispid 58;
    function SplitFaceOnParam(const Facedisp: IDispatch; UVFlag: Integer; Parameter: Double; 
                              out Status: WordBool): OleVariant; dispid 59;
    function ISplitFaceOnParamCount(const Facedisp: IFace; UVFlag: Integer; Parameter: Double; 
                                    out Status: WordBool): Integer; dispid 60;
    function ISplitFaceOnParam: IFace; dispid 61;
    function CheckInterference(const Body1: IDispatch; const Body2: IDispatch; 
                               CoincidentInterference: WordBool; 
                               out Body1InterferedFaceArray: OleVariant; 
                               out Body2InterferedFaceArray: OleVariant; 
                               out IntersectedBodyArray: OleVariant): WordBool; dispid 62;
    function ICheckInterferenceCount(const Body1: IBody; const Body2: IBody; 
                                     CoincidentInterference: WordBool; 
                                     out Body1InterferedFaceCount: Integer; 
                                     out Body2InterferedFaceCount: Integer; 
                                     out IntersectedBodyCount: Integer): WordBool; dispid 63;
    procedure ICheckInterference(out Body1InterferedFaceArray: IFace; 
                                 out Body2InterferedFaceArray: IFace; 
                                 out IntersectedBodyArray: IBody); dispid 64;
    function CreateRuledSurface(const Curve1In: IDispatch; const Curve2In: IDispatch; 
                                Apex: OleVariant): IDispatch; dispid 65;
    function ICreateRuledSurface(const Curve1In: ICurve; const Curve2In: ICurve; var Apex: Double): ISurface; dispid 66;
    function CreateCylindricalSurface2(Center: OleVariant; Direction: OleVariant; 
                                       RefDirection: OleVariant; Radius: Double): IDispatch; dispid 67;
    function ICreateCylindricalSurface2(var Center: Double; var Direction: Double; 
                                        var RefDirection: Double; Radius: Double): ISurface; dispid 68;
    function CreateSphericalSurface2(Center: OleVariant; Axis: OleVariant; RefDir: OleVariant; 
                                     Radius: Double): IDispatch; dispid 69;
    function ICreateSphericalSurface2(var Center: Double; var Axis: Double; var RefDir: Double; 
                                      Radius: Double): ISurface; dispid 70;
    function ICreateBodyFromBox2(var BoxDimArray: Double): IBody2; dispid 71;
    function IRestore2(const StreamIn: IUnknown): IBody2; dispid 72;
    function ICreateBodyFromCyl2(var CylDimArray: Double): IBody2; dispid 73;
    function ICreateBodyFromCone2(var ConeDimArray: Double): IBody2; dispid 74;
    function ICreateBrepBody2(Type_: SYSINT; NTopologies: SYSINT; var Topologies: SYSINT; 
                              var EdgeTolArray: Double; var VertexTolArray: Double; 
                              var PointArray: Double; var CurveArray: ICurve; 
                              var SurfaceArray: ISurface; NRelations: SYSINT; var Parents: SYSINT; 
                              var Children: SYSINT; var Senses: SYSINT): IBody2; dispid 75;
    function ICreateSheetFromSurface2(const SurfaceIn: ISurface; var UvRange: Double): IBody2; dispid 76;
    function ICheckInterferenceCount2(const Body1: IBody2; const Body2: IBody2; 
                                      CoincidentInterference: WordBool; 
                                      out Body1InterferedFaceCount: Integer; 
                                      out Body2InterferedFaceCount: Integer; 
                                      out IntersectedBodyCount: Integer): WordBool; dispid 77;
    function ICreateBodyFromFaces3(NumOfFaces: Integer; var Faces: IFace2; ActionType: Integer; 
                                   DoLocalCheck: WordBool; out LocalCheckResult: WordBool): IBody2; dispid 78;
    function IImprintingFacesCount2(NTargetFaces: Integer; var TargetFaceArray: IFace2; 
                                    NToolFaces: Integer; var ToolFaceArray: IFace2; 
                                    Options: Integer; out NTargetEdges: Integer; 
                                    out NtoolEdges: Integer; out NtargetVertices: Integer; 
                                    out ToolVertices: Integer): WordBool; dispid 79;
    function IReplaceSurfaces2(NFaces: Integer; var FaceArray: IFace2; var NewSurfArray: ISurface; 
                               var SenseArray: SYSINT; Tolerance: Double): WordBool; dispid 80;
    function ISplitFaceOnParamCount2(const Facedisp: IFace2; UVFlag: Integer; Parameter: Double; 
                                     out Status: WordBool): Integer; dispid 81;
    function ISplitFaceOnParam2: IFace2; dispid 82;
    procedure ICheckInterference2(out Body1InterferedFaceArray: IFace2; 
                                  out Body2InterferedFaceArray: IFace2; 
                                  out IntersectedBodyArray: IBody2); dispid 83;
    function CreatePlanarSurface2(VRootPoint: OleVariant; VNormal: OleVariant; VRef: OleVariant): IDispatch; dispid 84;
    function ICreatePlanarSurface2(var RootPoint: Double; var Normal: Double; var Ref: Double): ISurface; dispid 85;
    function CreateConicalSurface2(Center: OleVariant; Direction: OleVariant; 
                                   RefDirection: OleVariant; Radius: Double; SemiAngle: Double): IDispatch; dispid 86;
    function ICreateConicalSurface2(var Center: Double; var Direction: Double; 
                                    var RefDirection: Double; Radius: Double; SemiAngle: Double): ISurface; dispid 87;
    function CopyWizardHole(const SourceHole: IDispatch; const DestinationHole: IDispatch; 
                            RebuildOwner: WordBool): Integer; dispid 88;
    function ICopyWizardHole(const SourceHole: IFeature; const DestinationHole: IFeature; 
                             RebuildOwner: WordBool): Integer; dispid 89;
    function DeleteFacesFromSheetBody(FaceVar: OleVariant): WordBool; dispid 90;
    function IDeleteFacesFromSheetBody(Count: Integer; var FaceVar: IFace2): WordBool; dispid 91;
    function CreateWireBody(EntVar: OleVariant; Option: Integer): IBody2; dispid 92;
    function ICreateWireBody(Count: Integer; var EntArr: IDispatch; Option: Integer): IBody2; dispid 93;
    function CreateBrepBody3(Type_: SYSINT; NTopologies: SYSINT; Topologies: OleVariant; 
                             EdgeToleranceArray: OleVariant; VertexToleranceArray: OleVariant; 
                             PointArray: OleVariant; CurveArray1: OleVariant; 
                             CurveSurfaceArray1: OleVariant; CurveArray2: OleVariant; 
                             CurveSurfaceArray2: OleVariant; SurfaceArray: OleVariant; 
                             NRelations: SYSINT; Parents: OleVariant; Children: OleVariant; 
                             Senses: OleVariant; Option: Integer): IDispatch; dispid 94;
    function ICreateBrepBody3(Type_: SYSINT; NTopologies: SYSINT; var Topologies: SYSINT; 
                              var EdgeTolArray: Double; var VertexTolArray: Double; 
                              var PointArray: Double; var CurveArra1: ICurve; 
                              var CurveSurfaceArray1: ISurface; var CurveArray2: ICurve; 
                              var CurveSurfaceArray2: ISurface; var SurfaceArray: ISurface; 
                              NRelations: SYSINT; var Parents: SYSINT; var Children: SYSINT; 
                              var Senses: SYSINT; Option: Integer): IBody2; dispid 95;
    function CreateSheetFromFaces(FaceArr: OleVariant): IBody2; dispid 96;
    function ICreateSheetFromFaces(FaceCount: Integer; var FaceArr: IFace2): IBody2; dispid 97;
    function CreateSpring: ISpring; dispid 98;
    function GetBodyOutline(BodyVar: OleVariant; const Direction: IMathVector; Tolerance: Double; 
                            out CurvesOut: OleVariant; out TopolEntities: OleVariant; 
                            out Outline: OleVariant): Integer; dispid 99;
    function MergeCurves(CurveVar: OleVariant): ICurve; dispid 100;
    function IMergeCurves(CurveCount: Integer; var CurveArr: ICurve): ICurve; dispid 101;
    function CreateSweptBody(const PModDoc: IModelDoc2; Propagate: WordBool; Alignment: WordBool; 
                             TwistCtrlOption: Smallint; KeepTangency: WordBool; 
                             BAdvancedSmoothing: WordBool; StartMatchingType: Smallint; 
                             EndMatchingType: Smallint; IsThinBody: WordBool; Thickness1: Double; 
                             Thickness2: Double; ThinType: Smallint; PathAlign: Smallint; 
                             TwistAngle: Double; BMergeSmoothFaces: WordBool): IBody2; dispid 102;
    property GeneralTopology: WordBool dispid 103;
    function GetManifoldBodiesCount(const NonManifoldIn: IBody2): Integer; dispid 104;
    function MakeManifoldBodies(const NonManifoldIn: IBody2): OleVariant; dispid 105;
    function IMakeManifoldBodies(const NonManifoldIn: IBody2; Count: Integer): IBody2; dispid 106;
    function CreateCoonsBSurface(const UCurve0: ICurve; const UCurve1: ICurve; 
                                 const VCurve0: ICurve; const VCurve1: ICurve; 
                                 IgnoreClosureReqt: WordBool): ISurface; dispid 107;
    function ICreateLoftSurface(NCurves: Integer; var CurveArray: ICurve; BBlendClosed: WordBool; 
                                BForceCubic: WordBool; NGuides: Integer; var GuideCrvArray: ICurve; 
                                StartMatchingType: Integer; EndMatchingType: Integer; 
                                const NormalAtStartSection: IMathVector; 
                                const NormalAtEndSection: IMathVector; 
                                NStartMatchingFaces: Integer; var StartMatchingFaceList: IFace2; 
                                NEndMatchingFaces: Integer; var EndMatchingFaceList: IFace2; 
                                DegeneratedStart: WordBool; DegeneratedEnd: WordBool; 
                                const StartPointOfStartSection: IMathPoint; 
                                const StartPointOfEndSection: IMathPoint; 
                                SectionIndexStart: Integer; SectionIndexEnd: Integer; 
                                GuideIndexStart: Integer; GuideIndexEnd: Integer): ISurface; dispid 108;
    function CreateLoftSurface(CurveArray: OleVariant; BBlendClosed: WordBool; 
                               BForceCubic: WordBool; GuideCrvArray: OleVariant; 
                               StartMatchingType: Integer; EndMatchingType: Integer; 
                               const NormalAtStartSection: IDispatch; 
                               const NormalAtEndSection: IDispatch; 
                               StartMatchingFaceList: OleVariant; EndMatchingFaceList: OleVariant; 
                               DegeneratedStart: WordBool; DegeneratedEnd: WordBool; 
                               const StartPointOfStartSection: IDispatch; 
                               const StartPointOfEndSection: IDispatch; SectionIndexStart: Integer; 
                               SectionIndexEnd: Integer; GuideIndexStart: Integer; 
                               GuideIndexEnd: Integer): IDispatch; dispid 109;
    function ProjectCurveOnSurface(const CurveIn: ICurve; const SurfaceIn: ISurface; 
                                   const ProjDir: IMathVector): ICurve; dispid 110;
    function CreateExtrudedBody(const SheetBody: IBody2; const Direction: IMathVector; 
                                Length: Double): IBody2; dispid 111;
    function CreateBodiesFromSheets2(Sheets: OleVariant; Options: Integer; 
                                     KnittingTolerance: Double; var Error: Integer): OleVariant; dispid 112;
    function ICreateBodiesFromSheets2(NSheets: Integer; var Sheets: IBody2; Options: Integer; 
                                      KnittingTolerance: Double; var NResults: Integer; 
                                      var Results: IBody2): Integer; dispid 113;
    function CreateBodyFromBox3(BoxDimArray: OleVariant): IBody2; dispid 114;
    function CreateLoftBody(const PModDoc: IModelDoc2; IsBlendClosed: WordBool; 
                            KeepTangency: WordBool; ForceNonRational: WordBool; 
                            IsSolidBody: WordBool; TessTolFactor: Double; 
                            StartMatchingType: Smallint; EndMatchingType: Smallint): IBody2; dispid 115;
    function ThickenSheet(const Sheet: IBody2; Thickness: Double; Direction: Integer): IBody2; dispid 116;
  end;

// *********************************************************************//
// Interface: ISpring
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0F8F1B36-FABA-4552-82C3-5511CA5124E6}
// *********************************************************************//
  ISpring = interface(IDispatch)
    ['{0F8F1B36-FABA-4552-82C3-5511CA5124E6}']
    function Get_SpringType: Integer; safecall;
    procedure Set_SpringType(Type_: Integer); safecall;
    function Get_Revolution: Double; safecall;
    procedure Set_Revolution(Rev: Double); safecall;
    function Get_StartingEndLength: Double; safecall;
    procedure Set_StartingEndLength(Length: Double); safecall;
    function Get_EndingEndLength: Double; safecall;
    procedure Set_EndingEndLength(Length: Double); safecall;
    function Get_StartingRevolution: Double; safecall;
    procedure Set_StartingRevolution(Rev: Double); safecall;
    function Get_EndingRevolution: Double; safecall;
    procedure Set_EndingRevolution(Rev: Double); safecall;
    function Get_StartingPitch: Double; safecall;
    procedure Set_StartingPitch(Pitch: Double); safecall;
    function Get_EndingPitch: Double; safecall;
    procedure Set_EndingPitch(Pitch: Double); safecall;
    function Get_Tolerance: Double; safecall;
    procedure Set_Tolerance(Tolerance: Double); safecall;
    function Get_Pitch: Double; safecall;
    procedure Set_Pitch(Pitch: Double); safecall;
    function Get_ProfileType: Integer; safecall;
    procedure Set_ProfileType(Type_: Integer); safecall;
    function Get_ProfileParameters: OleVariant; safecall;
    procedure Set_ProfileParameters(Params: OleVariant); safecall;
    function Get_StartingEndType: Integer; safecall;
    procedure Set_StartingEndType(Type_: Integer); safecall;
    function Get_EndingEndType: Integer; safecall;
    procedure Set_EndingEndType(Type_: Integer); safecall;
    function Get_Clockwise: WordBool; safecall;
    procedure Set_Clockwise(Dir: WordBool); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(Dir: WordBool); safecall;
    function Get_GroundType: Integer; safecall;
    procedure Set_GroundType(Type_: Integer); safecall;
    function Get_BaseProfile: IBody2; safecall;
    procedure Set_BaseProfile(const Profile: IBody2); safecall;
    function Get_SectionProfile: IBody2; safecall;
    procedure Set_SectionProfile(const Profile: IBody2); safecall;
    function Get_TaperAngle: Double; safecall;
    procedure Set_TaperAngle(Ang: Double); safecall;
    function Get_TaperOutward: WordBool; safecall;
    procedure Set_TaperOutward(Outward: WordBool); safecall;
    function Get_SectionProfileCenter: IMathPoint; safecall;
    procedure Set_SectionProfileCenter(const Point: IMathPoint); safecall;
    function GetSpringBody: IBody2; safecall;
    function GetProfilePoints: OleVariant; safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_DefineType: Integer; safecall;
    procedure Set_DefineType(Type_: Integer); safecall;
    property SpringType: Integer read Get_SpringType write Set_SpringType;
    property Revolution: Double read Get_Revolution write Set_Revolution;
    property StartingEndLength: Double read Get_StartingEndLength write Set_StartingEndLength;
    property EndingEndLength: Double read Get_EndingEndLength write Set_EndingEndLength;
    property StartingRevolution: Double read Get_StartingRevolution write Set_StartingRevolution;
    property EndingRevolution: Double read Get_EndingRevolution write Set_EndingRevolution;
    property StartingPitch: Double read Get_StartingPitch write Set_StartingPitch;
    property EndingPitch: Double read Get_EndingPitch write Set_EndingPitch;
    property Tolerance: Double read Get_Tolerance write Set_Tolerance;
    property Pitch: Double read Get_Pitch write Set_Pitch;
    property ProfileType: Integer read Get_ProfileType write Set_ProfileType;
    property ProfileParameters: OleVariant read Get_ProfileParameters write Set_ProfileParameters;
    property StartingEndType: Integer read Get_StartingEndType write Set_StartingEndType;
    property EndingEndType: Integer read Get_EndingEndType write Set_EndingEndType;
    property Clockwise: WordBool read Get_Clockwise write Set_Clockwise;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property GroundType: Integer read Get_GroundType write Set_GroundType;
    property BaseProfile: IBody2 read Get_BaseProfile write Set_BaseProfile;
    property SectionProfile: IBody2 read Get_SectionProfile write Set_SectionProfile;
    property TaperAngle: Double read Get_TaperAngle write Set_TaperAngle;
    property TaperOutward: WordBool read Get_TaperOutward write Set_TaperOutward;
    property SectionProfileCenter: IMathPoint read Get_SectionProfileCenter write Set_SectionProfileCenter;
    property Height: Double read Get_Height write Set_Height;
    property DefineType: Integer read Get_DefineType write Set_DefineType;
  end;

// *********************************************************************//
// DispIntf:  ISpringDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0F8F1B36-FABA-4552-82C3-5511CA5124E6}
// *********************************************************************//
  ISpringDisp = dispinterface
    ['{0F8F1B36-FABA-4552-82C3-5511CA5124E6}']
    property SpringType: Integer dispid 1;
    property Revolution: Double dispid 2;
    property StartingEndLength: Double dispid 3;
    property EndingEndLength: Double dispid 4;
    property StartingRevolution: Double dispid 5;
    property EndingRevolution: Double dispid 6;
    property StartingPitch: Double dispid 7;
    property EndingPitch: Double dispid 8;
    property Tolerance: Double dispid 9;
    property Pitch: Double dispid 10;
    property ProfileType: Integer dispid 11;
    property ProfileParameters: OleVariant dispid 12;
    property StartingEndType: Integer dispid 13;
    property EndingEndType: Integer dispid 14;
    property Clockwise: WordBool dispid 15;
    property ReverseDirection: WordBool dispid 16;
    property GroundType: Integer dispid 17;
    property BaseProfile: IBody2 dispid 18;
    property SectionProfile: IBody2 dispid 19;
    property TaperAngle: Double dispid 20;
    property TaperOutward: WordBool dispid 21;
    property SectionProfileCenter: IMathPoint dispid 22;
    function GetSpringBody: IBody2; dispid 23;
    function GetProfilePoints: OleVariant; dispid 24;
    property Height: Double dispid 25;
    property DefineType: Integer dispid 26;
  end;

// *********************************************************************//
// Interface: IEnvironment
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D78-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnvironment = interface(IDispatch)
    ['{83A33D78-27C5-11CE-BFD4-00400513BB57}']
    function GetSymEdgeCounts(const SymId: WideString): OleVariant; safecall;
    function IGetSymEdgeCounts(const SymId: WideString): Smallint; safecall;
    function GetSymLines(const SymId: WideString): OleVariant; safecall;
    function IGetSymLines(const SymId: WideString): Double; safecall;
    function GetSymArcs(const SymId: WideString): OleVariant; safecall;
    function IGetSymArcs(const SymId: WideString): Double; safecall;
    function GetSymCircles(const SymId: WideString): OleVariant; safecall;
    function IGetSymCircles(const SymId: WideString): Double; safecall;
    function GetSymTextPoints(const SymId: WideString): OleVariant; safecall;
    function IGetSymTextPoints(const SymId: WideString): Double; safecall;
    function GetSymText(const SymId: WideString): OleVariant; safecall;
    function GetSymTriangles(const SymId: WideString): OleVariant; safecall;
    function IGetSymTriangles(const SymId: WideString): Double; safecall;
  end;

// *********************************************************************//
// DispIntf:  IEnvironmentDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D78-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnvironmentDisp = dispinterface
    ['{83A33D78-27C5-11CE-BFD4-00400513BB57}']
    function GetSymEdgeCounts(const SymId: WideString): OleVariant; dispid 1;
    function IGetSymEdgeCounts(const SymId: WideString): Smallint; dispid 2;
    function GetSymLines(const SymId: WideString): OleVariant; dispid 3;
    function IGetSymLines(const SymId: WideString): Double; dispid 4;
    function GetSymArcs(const SymId: WideString): OleVariant; dispid 5;
    function IGetSymArcs(const SymId: WideString): Double; dispid 6;
    function GetSymCircles(const SymId: WideString): OleVariant; dispid 7;
    function IGetSymCircles(const SymId: WideString): Double; dispid 8;
    function GetSymTextPoints(const SymId: WideString): OleVariant; dispid 9;
    function IGetSymTextPoints(const SymId: WideString): Double; dispid 10;
    function GetSymText(const SymId: WideString): OleVariant; dispid 11;
    function GetSymTriangles(const SymId: WideString): OleVariant; dispid 12;
    function IGetSymTriangles(const SymId: WideString): Double; dispid 13;
  end;

// *********************************************************************//
// Interface: IEnumDocuments
// Flags:     (272) Hidden OleAutomation
// GUID:      {83A33DB3-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IEnumDocuments = interface(IUnknown)
    ['{83A33DB3-27C5-11CE-BFD4-00400513BB57}']
    function Next(Celt: Integer; out Rgelt: IModelDoc; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumDocuments): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IMathUtility
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F80-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathUtility = interface(IDispatch)
    ['{F7D97F80-162E-11D4-AEAB-00C04FA0AC51}']
    function CreateTransform(ArrayDataIn: OleVariant): IDispatch; safecall;
    function ICreateTransform(var ArrayDataIn: Double): IMathTransform; safecall;
    function CreateTransformRotateAxis(const PointObjIn: IDispatch; const VectorObjIn: IDispatch; 
                                       Angle: Double): IDispatch; safecall;
    function ICreateTransformRotateAxis(const PointObjIn: IMathPoint; 
                                        const VectorObjIn: IMathVector; Angle: Double): IMathTransform; safecall;
    function CreatePoint(ArrayDataIn: OleVariant): IDispatch; safecall;
    function ICreatePoint(var ArrayDataIn: Double): IMathPoint; safecall;
    function CreateVector(ArrayDataIn: OleVariant): IDispatch; safecall;
    function ICreateVector(var ArrayDataIn: Double): IMathVector; safecall;
    function ComposeTransform(const XVec: IMathVector; const YVec: IMathVector; 
                              const ZVec: IMathVector; const TransVec: IMathVector; Scale: Double): IMathTransform; safecall;
  end;

// *********************************************************************//
// DispIntf:  IMathUtilityDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F7D97F80-162E-11D4-AEAB-00C04FA0AC51}
// *********************************************************************//
  IMathUtilityDisp = dispinterface
    ['{F7D97F80-162E-11D4-AEAB-00C04FA0AC51}']
    function CreateTransform(ArrayDataIn: OleVariant): IDispatch; dispid 1;
    function ICreateTransform(var ArrayDataIn: Double): IMathTransform; dispid 2;
    function CreateTransformRotateAxis(const PointObjIn: IDispatch; const VectorObjIn: IDispatch; 
                                       Angle: Double): IDispatch; dispid 3;
    function ICreateTransformRotateAxis(const PointObjIn: IMathPoint; 
                                        const VectorObjIn: IMathVector; Angle: Double): IMathTransform; dispid 4;
    function CreatePoint(ArrayDataIn: OleVariant): IDispatch; dispid 5;
    function ICreatePoint(var ArrayDataIn: Double): IMathPoint; dispid 6;
    function CreateVector(ArrayDataIn: OleVariant): IDispatch; dispid 7;
    function ICreateVector(var ArrayDataIn: Double): IMathVector; dispid 8;
    function ComposeTransform(const XVec: IMathVector; const YVec: IMathVector; 
                              const ZVec: IMathVector; const TransVec: IMathVector; Scale: Double): IMathTransform; dispid 9;
  end;

// *********************************************************************//
// Interface: IEnumDocuments2
// Flags:     (272) Hidden OleAutomation
// GUID:      {76D82D71-339A-4D1C-91A1-F6AC0CF9B625}
// *********************************************************************//
  IEnumDocuments2 = interface(IUnknown)
    ['{76D82D71-339A-4D1C-91A1-F6AC0CF9B625}']
    function Next(Celt: Integer; out Rgelt: IModelDoc2; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumDocuments2): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPage2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B92E624A-0DC3-11D5-AF1E-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPage2 = interface(IDispatch)
    ['{B92E624A-0DC3-11D5-AF1E-00C04F603FAF}']
    function SetTitleBitmap(ModuleHandle: Integer; Identifier: Integer): WordBool; safecall;
    function AddGroupBox(ID: Integer; const Caption: WideString; Options: Integer): IDispatch; safecall;
    function IAddGroupBox(ID: Integer; const Caption: WideString; Options: Integer): IPropertyManagerPageGroup; safecall;
    function AddControl(ID: Integer; ControlType: Smallint; const Caption: WideString; 
                        LeftAlign: Smallint; Options: Integer; const Tip: WideString): IDispatch; safecall;
    function IAddControl(ID: Integer; ControlType: Smallint; const Caption: WideString; 
                         LeftAlign: Smallint; Options: Integer; const Tip: WideString): IPropertyManagerPageControl; safecall;
    function SetMessage(const Message: WideString; Visibility: Integer): WordBool; safecall;
    function Show: Integer; safecall;
    procedure Close(Okay: WordBool); safecall;
    function EnableButton(WhichOne: Integer; Enable: WordBool): WordBool; safecall;
    function Get_Pinned: WordBool; safecall;
    procedure Set_Pinned(Pinned: WordBool); safecall;
    procedure SetTitleBitmap2(const FilePathName: WideString); safecall;
    function AddTab(ID: Integer; const Caption: WideString; const Bitmap: WideString; 
                    Options: Integer): IPropertyManagerPageTab; safecall;
    function Get_Title: WideString; safecall;
    procedure Set_Title(const PageTitle: WideString); safecall;
    function SetMessage2(const Message: WideString; Visibility: Integer; const Caption: WideString): WordBool; safecall;
    function Show2(Options: Integer): Integer; safecall;
    function AddMenuPopupItem(ID: Integer; const ItemText: WideString; DocumentType: Integer; 
                              const HintText: WideString): WordBool; safecall;
    function SetMessage3(const Message: WideString; Visibility: Integer; Expanded: Integer; 
                         const Caption: WideString): WordBool; safecall;
    property Pinned: WordBool read Get_Pinned write Set_Pinned;
    property Title: WideString read Get_Title write Set_Title;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPage2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B92E624A-0DC3-11D5-AF1E-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPage2Disp = dispinterface
    ['{B92E624A-0DC3-11D5-AF1E-00C04F603FAF}']
    function SetTitleBitmap(ModuleHandle: Integer; Identifier: Integer): WordBool; dispid 131073;
    function AddGroupBox(ID: Integer; const Caption: WideString; Options: Integer): IDispatch; dispid 131074;
    function IAddGroupBox(ID: Integer; const Caption: WideString; Options: Integer): IPropertyManagerPageGroup; dispid 131075;
    function AddControl(ID: Integer; ControlType: Smallint; const Caption: WideString; 
                        LeftAlign: Smallint; Options: Integer; const Tip: WideString): IDispatch; dispid 131076;
    function IAddControl(ID: Integer; ControlType: Smallint; const Caption: WideString; 
                         LeftAlign: Smallint; Options: Integer; const Tip: WideString): IPropertyManagerPageControl; dispid 131077;
    function SetMessage(const Message: WideString; Visibility: Integer): WordBool; dispid 131078;
    function Show: Integer; dispid 131079;
    procedure Close(Okay: WordBool); dispid 131080;
    function EnableButton(WhichOne: Integer; Enable: WordBool): WordBool; dispid 131081;
    property Pinned: WordBool dispid 131082;
    procedure SetTitleBitmap2(const FilePathName: WideString); dispid 131083;
    function AddTab(ID: Integer; const Caption: WideString; const Bitmap: WideString; 
                    Options: Integer): IPropertyManagerPageTab; dispid 131084;
    property Title: WideString dispid 131085;
    function SetMessage2(const Message: WideString; Visibility: Integer; const Caption: WideString): WordBool; dispid 131086;
    function Show2(Options: Integer): Integer; dispid 131087;
    function AddMenuPopupItem(ID: Integer; const ItemText: WideString; DocumentType: Integer; 
                              const HintText: WideString): WordBool; dispid 131088;
    function SetMessage3(const Message: WideString; Visibility: Integer; Expanded: Integer; 
                         const Caption: WideString): WordBool; dispid 131089;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageGroup
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2E23D2EE-0F57-11D5-AF1F-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageGroup = interface(IDispatch)
    ['{2E23D2EE-0F57-11D5-AF1F-00C04F603FAF}']
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(Visible: WordBool); safecall;
    function Get_Expanded: WordBool; safecall;
    procedure Set_Expanded(Expanded: WordBool); safecall;
    function AddControl(ID: Integer; ControlType: Smallint; const Caption: WideString; 
                        LeftAlign: Smallint; Options: Integer; const Tip: WideString): IDispatch; safecall;
    function IAddControl(ID: Integer; ControlType: Smallint; const Caption: WideString; 
                         LeftAlign: Smallint; Options: Integer; const Tip: WideString): IPropertyManagerPageControl; safecall;
    function Get_Checked: WordBool; safecall;
    procedure Set_Checked(Checked: WordBool); safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const Text: WideString); safecall;
    function Get_BackgroundColor: Integer; safecall;
    procedure Set_BackgroundColor(Color: Integer); safecall;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Expanded: WordBool read Get_Expanded write Set_Expanded;
    property Checked: WordBool read Get_Checked write Set_Checked;
    property Caption: WideString read Get_Caption write Set_Caption;
    property BackgroundColor: Integer read Get_BackgroundColor write Set_BackgroundColor;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageGroupDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2E23D2EE-0F57-11D5-AF1F-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageGroupDisp = dispinterface
    ['{2E23D2EE-0F57-11D5-AF1F-00C04F603FAF}']
    property Visible: WordBool dispid 131073;
    property Expanded: WordBool dispid 131074;
    function AddControl(ID: Integer; ControlType: Smallint; const Caption: WideString; 
                        LeftAlign: Smallint; Options: Integer; const Tip: WideString): IDispatch; dispid 131075;
    function IAddControl(ID: Integer; ControlType: Smallint; const Caption: WideString; 
                         LeftAlign: Smallint; Options: Integer; const Tip: WideString): IPropertyManagerPageControl; dispid 131076;
    property Checked: WordBool dispid 131077;
    property Caption: WideString dispid 131078;
    property BackgroundColor: Integer dispid 131079;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageControl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CED9CAF4-16FA-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageControl = interface(IDispatch)
    ['{CED9CAF4-16FA-11D5-AF24-00C04F603FAF}']
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(Visible: WordBool); safecall;
    function Get_Enabled: WordBool; safecall;
    procedure Set_Enabled(Enabled: WordBool); safecall;
    function SetStandardPictureLabel(Bitmap: Integer): WordBool; safecall;
    function SetPictureLabelByName(const ColorBitmap: WideString; const MaskBitmap: WideString): WordBool; safecall;
    function Get_Tip: WideString; safecall;
    procedure Set_Tip(const Tip: WideString); safecall;
    function Get_Left: Smallint; safecall;
    procedure Set_Left(X: Smallint); safecall;
    function Get_Width: Smallint; safecall;
    procedure Set_Width(Width: Smallint); safecall;
    function Get_Top: Smallint; safecall;
    procedure Set_Top(Y: Smallint); safecall;
    function Get_TextColor: Integer; safecall;
    procedure Set_TextColor(Color: Integer); safecall;
    function Get_BackgroundColor: Integer; safecall;
    procedure Set_BackgroundColor(Color: Integer); safecall;
    function GetGroupBox: IPropertyManagerPageGroup; safecall;
    function Get_OptionsForResize: Integer; safecall;
    procedure Set_OptionsForResize(Options: Integer); safecall;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Enabled: WordBool read Get_Enabled write Set_Enabled;
    property Tip: WideString read Get_Tip write Set_Tip;
    property Left: Smallint read Get_Left write Set_Left;
    property Width: Smallint read Get_Width write Set_Width;
    property Top: Smallint read Get_Top write Set_Top;
    property TextColor: Integer read Get_TextColor write Set_TextColor;
    property BackgroundColor: Integer read Get_BackgroundColor write Set_BackgroundColor;
    property OptionsForResize: Integer read Get_OptionsForResize write Set_OptionsForResize;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageControlDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CED9CAF4-16FA-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageControlDisp = dispinterface
    ['{CED9CAF4-16FA-11D5-AF24-00C04F603FAF}']
    property Visible: WordBool dispid 131073;
    property Enabled: WordBool dispid 131074;
    function SetStandardPictureLabel(Bitmap: Integer): WordBool; dispid 131075;
    function SetPictureLabelByName(const ColorBitmap: WideString; const MaskBitmap: WideString): WordBool; dispid 131076;
    property Tip: WideString dispid 131077;
    property Left: Smallint dispid 131078;
    property Width: Smallint dispid 131079;
    property Top: Smallint dispid 131080;
    property TextColor: Integer dispid 131081;
    property BackgroundColor: Integer dispid 131082;
    function GetGroupBox: IPropertyManagerPageGroup; dispid 131083;
    property OptionsForResize: Integer dispid 131084;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageTab
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {22BCFA78-D2BF-449C-88AB-99CBC4468BDB}
// *********************************************************************//
  IPropertyManagerPageTab = interface(IDispatch)
    ['{22BCFA78-D2BF-449C-88AB-99CBC4468BDB}']
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const Text: WideString); safecall;
    function AddGroupBox(ID: Integer; const Caption: WideString; Options: Integer): IDispatch; safecall;
    function IAddGroupBox(ID: Integer; const Caption: WideString; Options: Integer): IPropertyManagerPageGroup; safecall;
    function AddControl(ID: Integer; ControlType: Smallint; const Caption: WideString; 
                        LeftAlign: Smallint; Options: Integer; const Tip: WideString): IDispatch; safecall;
    function IAddControl(ID: Integer; ControlType: Smallint; const Caption: WideString; 
                         LeftAlign: Smallint; Options: Integer; const Tip: WideString): IPropertyManagerPageControl; safecall;
    property Caption: WideString read Get_Caption write Set_Caption;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageTabDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {22BCFA78-D2BF-449C-88AB-99CBC4468BDB}
// *********************************************************************//
  IPropertyManagerPageTabDisp = dispinterface
    ['{22BCFA78-D2BF-449C-88AB-99CBC4468BDB}']
    property Caption: WideString dispid 131073;
    function AddGroupBox(ID: Integer; const Caption: WideString; Options: Integer): IDispatch; dispid 131074;
    function IAddGroupBox(ID: Integer; const Caption: WideString; Options: Integer): IPropertyManagerPageGroup; dispid 131075;
    function AddControl(ID: Integer; ControlType: Smallint; const Caption: WideString; 
                        LeftAlign: Smallint; Options: Integer; const Tip: WideString): IDispatch; dispid 131076;
    function IAddControl(ID: Integer; ControlType: Smallint; const Caption: WideString; 
                         LeftAlign: Smallint; Options: Integer; const Tip: WideString): IPropertyManagerPageControl; dispid 131077;
  end;

// *********************************************************************//
// Interface: ITaskpaneView
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EDBBA0E9-B701-419E-A4AE-3409DBF12D40}
// *********************************************************************//
  ITaskpaneView = interface(IDispatch)
    ['{EDBBA0E9-B701-419E-A4AE-3409DBF12D40}']
    function GetTaskpaneViewWnd: Integer; safecall;
    function GetControl: IDispatch; safecall;
    function IGetControl: IUnknown; safecall;
    function AddControl(const ClassName: WideString; const LicKey: WideString): IUnknown; safecall;
    function ShowView: WordBool; safecall;
    function HideView: WordBool; safecall;
    function DeleteView: WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  ITaskpaneViewDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EDBBA0E9-B701-419E-A4AE-3409DBF12D40}
// *********************************************************************//
  ITaskpaneViewDisp = dispinterface
    ['{EDBBA0E9-B701-419E-A4AE-3409DBF12D40}']
    function GetTaskpaneViewWnd: Integer; dispid 1;
    function GetControl: IDispatch; dispid 2;
    function IGetControl: IUnknown; dispid 3;
    function AddControl(const ClassName: WideString; const LicKey: WideString): IUnknown; dispid 4;
    function ShowView: WordBool; dispid 5;
    function HideView: WordBool; dispid 6;
    function DeleteView: WordBool; dispid 7;
  end;

// *********************************************************************//
// Interface: IPtnrPMPage
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2A586331-A56D-44C9-AA32-2868A96F044D}
// *********************************************************************//
  IPtnrPMPage = interface(IDispatch)
    ['{2A586331-A56D-44C9-AA32-2868A96F044D}']
    function SetButtons(ButtonTypes: Integer): Integer; safecall;
    function SetGroupRange(FirstGroupId: Integer; FirstCheckId: Integer; GroupCount: Integer): Integer; safecall;
    function Show: Integer; safecall;
    function GetDialogWindow(var Status: Integer): Integer; safecall;
    function GetGroupVisible(GroupID: Integer; var Status: Integer): WordBool; safecall;
    function SetGroupVisible(GroupID: Integer; Visible: WordBool): Integer; safecall;
    function GetGroupExpanded(GroupID: Integer; var Status: Integer): WordBool; safecall;
    function SetGroupExpanded(GroupID: Integer; Expanded: WordBool): Integer; safecall;
    function SetToolTips(ControlAndToolTipCount: Integer; var ControlAndToolTips: Integer): Integer; safecall;
    function RecalculateVerticalSpacing: Integer; safecall;
    function ShowControl(ControlID: Integer; DividerID: Integer; Show: WordBool): Integer; safecall;
    function AddPage: Integer; safecall;
    function CreatePage(HHandle: Integer): Integer; safecall;
    function IsPageActive(out Active: WordBool): Integer; safecall;
    function SetControlTip(ControlID: Integer; const TipString: WideString): Integer; safecall;
    function GetControlTip(ControlID: Integer; out TipString: WideString): Integer; safecall;
    function SwitchPage(PageId: Integer): Integer; safecall;
    function GetTotalNumberOfPages(out NumberOfPages: Integer): Integer; safecall;
    function GetPageIndex(out PageIndex: Integer): Integer; safecall;
    function GetPageNumber(out PageNumber: Integer): Integer; safecall;
    function SetPageNumber(PageNumber: Integer): Integer; safecall;
    function GetCurrentPageNumber(out PageNumber: Integer): Integer; safecall;
    function SetButtonEnabled(ButtonType: Integer; BEnabled: WordBool): Integer; safecall;
    function Redraw: Integer; safecall;
    function GetDialogWindowx64(var Status: Integer): Int64; safecall;
  end;

// *********************************************************************//
// DispIntf:  IPtnrPMPageDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2A586331-A56D-44C9-AA32-2868A96F044D}
// *********************************************************************//
  IPtnrPMPageDisp = dispinterface
    ['{2A586331-A56D-44C9-AA32-2868A96F044D}']
    function SetButtons(ButtonTypes: Integer): Integer; dispid 131073;
    function SetGroupRange(FirstGroupId: Integer; FirstCheckId: Integer; GroupCount: Integer): Integer; dispid 131074;
    function Show: Integer; dispid 131075;
    function GetDialogWindow(var Status: Integer): Integer; dispid 131076;
    function GetGroupVisible(GroupID: Integer; var Status: Integer): WordBool; dispid 131077;
    function SetGroupVisible(GroupID: Integer; Visible: WordBool): Integer; dispid 131078;
    function GetGroupExpanded(GroupID: Integer; var Status: Integer): WordBool; dispid 131079;
    function SetGroupExpanded(GroupID: Integer; Expanded: WordBool): Integer; dispid 131080;
    function SetToolTips(ControlAndToolTipCount: Integer; var ControlAndToolTips: Integer): Integer; dispid 131081;
    function RecalculateVerticalSpacing: Integer; dispid 131082;
    function ShowControl(ControlID: Integer; DividerID: Integer; Show: WordBool): Integer; dispid 131083;
    function AddPage: Integer; dispid 131084;
    function CreatePage(HHandle: Integer): Integer; dispid 131085;
    function IsPageActive(out Active: WordBool): Integer; dispid 131086;
    function SetControlTip(ControlID: Integer; const TipString: WideString): Integer; dispid 131087;
    function GetControlTip(ControlID: Integer; out TipString: WideString): Integer; dispid 131088;
    function SwitchPage(PageId: Integer): Integer; dispid 131089;
    function GetTotalNumberOfPages(out NumberOfPages: Integer): Integer; dispid 131090;
    function GetPageIndex(out PageIndex: Integer): Integer; dispid 131091;
    function GetPageNumber(out PageNumber: Integer): Integer; dispid 131092;
    function SetPageNumber(PageNumber: Integer): Integer; dispid 131093;
    function GetCurrentPageNumber(out PageNumber: Integer): Integer; dispid 131094;
    function SetButtonEnabled(ButtonType: Integer; BEnabled: WordBool): Integer; dispid 131095;
    function Redraw: Integer; dispid 131096;
    function GetDialogWindowx64(var Status: Integer): {??Int64}OleVariant; dispid 131097;
  end;

// *********************************************************************//
// Interface: ICommandManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F61069CF-2E42-4AC4-A517-6A95B79E45EE}
// *********************************************************************//
  ICommandManager = interface(IDispatch)
    ['{F61069CF-2E42-4AC4-A517-6A95B79E45EE}']
    function CreateCommandGroup(UserID: Integer; const Title: WideString; 
                                const ToolTip: WideString; const Hint: WideString; Position: Integer): ICommandGroup; safecall;
    function RemoveCommandGroup(UserID: Integer): WordBool; safecall;
    function GetCommandGroup(UserID: Integer): ICommandGroup; safecall;
    function Get_NumberOfGroups: Integer; safecall;
    function IGetGroups(Count: Integer): PPUserType20; safecall;
    function GetGroups: OleVariant; safecall;
    function AddContextMenu(UserID: Integer; const Title: WideString): ICommandGroup; safecall;
    function GetCommandTabCount(DocumentType: Integer): Integer; safecall;
    function CommandTabs(DocumentType: Integer): OleVariant; safecall;
    function IGetCommandTabs(DocumentType: Integer; CommandTabCount: Integer): ICommandTab; safecall;
    function GetCommandTab(DocumentType: Integer; const TabName: WideString): ICommandTab; safecall;
    function AddCommandTab(DocumentType: Integer; const TabName: WideString): ICommandTab; safecall;
    function RemoveCommandTab(const TabToRemove: ICommandTab): WordBool; safecall;
    property NumberOfGroups: Integer read Get_NumberOfGroups;
  end;

// *********************************************************************//
// DispIntf:  ICommandManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F61069CF-2E42-4AC4-A517-6A95B79E45EE}
// *********************************************************************//
  ICommandManagerDisp = dispinterface
    ['{F61069CF-2E42-4AC4-A517-6A95B79E45EE}']
    function CreateCommandGroup(UserID: Integer; const Title: WideString; 
                                const ToolTip: WideString; const Hint: WideString; Position: Integer): ICommandGroup; dispid 1;
    function RemoveCommandGroup(UserID: Integer): WordBool; dispid 2;
    function GetCommandGroup(UserID: Integer): ICommandGroup; dispid 3;
    property NumberOfGroups: Integer readonly dispid 4;
    function IGetGroups(Count: Integer): {??PPUserType20}OleVariant; dispid 5;
    function GetGroups: OleVariant; dispid 6;
    function AddContextMenu(UserID: Integer; const Title: WideString): ICommandGroup; dispid 7;
    function GetCommandTabCount(DocumentType: Integer): Integer; dispid 8;
    function CommandTabs(DocumentType: Integer): OleVariant; dispid 9;
    function IGetCommandTabs(DocumentType: Integer; CommandTabCount: Integer): ICommandTab; dispid 10;
    function GetCommandTab(DocumentType: Integer; const TabName: WideString): ICommandTab; dispid 11;
    function AddCommandTab(DocumentType: Integer; const TabName: WideString): ICommandTab; dispid 12;
    function RemoveCommandTab(const TabToRemove: ICommandTab): WordBool; dispid 13;
  end;

// *********************************************************************//
// Interface: ICommandGroup
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FF545450-B559-400D-964C-A3811F209148}
// *********************************************************************//
  ICommandGroup = interface(IDispatch)
    ['{FF545450-B559-400D-964C-A3811F209148}']
    function AddCommandItem(const Name: WideString; Position: Integer; 
                            const HintString: WideString; const ToolTip: WideString; 
                            ImageListIndex: Integer; const CallbackFunction: WideString; 
                            const EnableMethod: WideString; UserID: Integer): Integer; safecall;
    function AddSpacer(Position: Integer): Integer; safecall;
    function Get_NumberOfGroupItems: Integer; safecall;
    function Activate: WordBool; safecall;
    function Get_LargeMainIcon: WideString; safecall;
    procedure Set_LargeMainIcon(const LargeMainIcon: WideString); safecall;
    function Get_SmallMainIcon: WideString; safecall;
    procedure Set_SmallMainIcon(const SmallMainIcon: WideString); safecall;
    function Get_LargeIconList: WideString; safecall;
    procedure Set_LargeIconList(const LargeIconList: WideString); safecall;
    function Get_SmallIconList: WideString; safecall;
    procedure Set_SmallIconList(const SmallIconList: WideString); safecall;
    function Get_ShowInDocumentType: Integer; safecall;
    procedure Set_ShowInDocumentType(ShowInDocumentType: Integer); safecall;
    function Get_SelectType: Integer; safecall;
    procedure Set_SelectType(SelectType: Integer); safecall;
    function Get_DockingState: Integer; safecall;
    procedure Set_CustomNames(const CustomNames: WideString); safecall;
    function Get_CustomNames: WideString; safecall;
    function Get_HasToolbar: WordBool; safecall;
    procedure Set_HasToolbar(HasToolbar: WordBool); safecall;
    function Get_HasMenu: WordBool; safecall;
    procedure Set_HasMenu(HasMenu: WordBool); safecall;
    function Get_Name: WideString; safecall;
    function Get_ToolbarId: Integer; safecall;
    procedure SetToolbarVisibility(Visible: WordBool; Mask: Integer); safecall;
    procedure Set_DockingState(DockingState: Integer); safecall;
    function AddCommandItem2(const Name: WideString; Position: Integer; 
                             const HintString: WideString; const ToolTip: WideString; 
                             ImageListIndex: Integer; const CallbackFunction: WideString; 
                             const EnableMethod: WideString; UserID: Integer; MenuTBOption: Integer): Integer; safecall;
    function AddSpacer2(Position: Integer; MenuTBOption: Integer): Integer; safecall;
    function Get_CommandID(CommandIndex: Integer): Integer; safecall;
    function Get_MenuPosition(Context: Integer): Integer; safecall;
    procedure Set_MenuPosition(Context: Integer; Position: Integer); safecall;
    function GetToolbarVisibility(SwContext: Integer): WordBool; safecall;
    property NumberOfGroupItems: Integer read Get_NumberOfGroupItems;
    property LargeMainIcon: WideString read Get_LargeMainIcon write Set_LargeMainIcon;
    property SmallMainIcon: WideString read Get_SmallMainIcon write Set_SmallMainIcon;
    property LargeIconList: WideString read Get_LargeIconList write Set_LargeIconList;
    property SmallIconList: WideString read Get_SmallIconList write Set_SmallIconList;
    property ShowInDocumentType: Integer read Get_ShowInDocumentType write Set_ShowInDocumentType;
    property SelectType: Integer read Get_SelectType write Set_SelectType;
    property DockingState: Integer read Get_DockingState write Set_DockingState;
    property CustomNames: WideString read Get_CustomNames write Set_CustomNames;
    property HasToolbar: WordBool read Get_HasToolbar write Set_HasToolbar;
    property HasMenu: WordBool read Get_HasMenu write Set_HasMenu;
    property Name: WideString read Get_Name;
    property ToolbarId: Integer read Get_ToolbarId;
    property CommandID[CommandIndex: Integer]: Integer read Get_CommandID;
    property MenuPosition[Context: Integer]: Integer read Get_MenuPosition write Set_MenuPosition;
  end;

// *********************************************************************//
// DispIntf:  ICommandGroupDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FF545450-B559-400D-964C-A3811F209148}
// *********************************************************************//
  ICommandGroupDisp = dispinterface
    ['{FF545450-B559-400D-964C-A3811F209148}']
    function AddCommandItem(const Name: WideString; Position: Integer; 
                            const HintString: WideString; const ToolTip: WideString; 
                            ImageListIndex: Integer; const CallbackFunction: WideString; 
                            const EnableMethod: WideString; UserID: Integer): Integer; dispid 1;
    function AddSpacer(Position: Integer): Integer; dispid 2;
    property NumberOfGroupItems: Integer readonly dispid 3;
    function Activate: WordBool; dispid 4;
    property LargeMainIcon: WideString dispid 5;
    property SmallMainIcon: WideString dispid 6;
    property LargeIconList: WideString dispid 7;
    property SmallIconList: WideString dispid 8;
    property ShowInDocumentType: Integer dispid 9;
    property SelectType: Integer dispid 10;
    property DockingState: Integer dispid 11;
    property CustomNames: WideString dispid 12;
    property HasToolbar: WordBool dispid 13;
    property HasMenu: WordBool dispid 14;
    property Name: WideString readonly dispid 15;
    property ToolbarId: Integer readonly dispid 16;
    procedure SetToolbarVisibility(Visible: WordBool; Mask: Integer); dispid 17;
    function AddCommandItem2(const Name: WideString; Position: Integer; 
                             const HintString: WideString; const ToolTip: WideString; 
                             ImageListIndex: Integer; const CallbackFunction: WideString; 
                             const EnableMethod: WideString; UserID: Integer; MenuTBOption: Integer): Integer; dispid 18;
    function AddSpacer2(Position: Integer; MenuTBOption: Integer): Integer; dispid 19;
    property CommandID[CommandIndex: Integer]: Integer readonly dispid 20;
    property MenuPosition[Context: Integer]: Integer dispid 21;
    function GetToolbarVisibility(SwContext: Integer): WordBool; dispid 22;
  end;

// *********************************************************************//
// Interface: ICommandTab
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FC248E07-607D-4429-960B-E4CE20AB55AB}
// *********************************************************************//
  ICommandTab = interface(IDispatch)
    ['{FC248E07-607D-4429-960B-E4CE20AB55AB}']
    function GetCommandTabBoxCount: Integer; safecall;
    function CommandTabBoxes: OleVariant; safecall;
    function IGetCommandTabBoxes(TabBoxCount: Integer): ICommandTabBox; safecall;
    function AddCommandTabBox: ICommandTabBox; safecall;
    procedure RemoveCommandTabBox(const CommandTabBox: ICommandTabBox); safecall;
    function Get_Visible: WordBool; safecall;
    procedure Set_Visible(TabVisible: WordBool); safecall;
    function Get_Active: WordBool; safecall;
    procedure Set_Active(TabActive: WordBool); safecall;
    function Get_Name: WideString; safecall;
    procedure Set_Name(const TabName: WideString); safecall;
    function AddSeparator(const CommandTabBoxIn: ICommandTabBox; CommandID: Integer): ICommandTabBox; safecall;
    property Visible: WordBool read Get_Visible write Set_Visible;
    property Active: WordBool read Get_Active write Set_Active;
    property Name: WideString read Get_Name write Set_Name;
  end;

// *********************************************************************//
// DispIntf:  ICommandTabDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FC248E07-607D-4429-960B-E4CE20AB55AB}
// *********************************************************************//
  ICommandTabDisp = dispinterface
    ['{FC248E07-607D-4429-960B-E4CE20AB55AB}']
    function GetCommandTabBoxCount: Integer; dispid 1;
    function CommandTabBoxes: OleVariant; dispid 2;
    function IGetCommandTabBoxes(TabBoxCount: Integer): ICommandTabBox; dispid 3;
    function AddCommandTabBox: ICommandTabBox; dispid 4;
    procedure RemoveCommandTabBox(const CommandTabBox: ICommandTabBox); dispid 5;
    property Visible: WordBool dispid 6;
    property Active: WordBool dispid 7;
    property Name: WideString dispid 8;
    function AddSeparator(const CommandTabBoxIn: ICommandTabBox; CommandID: Integer): ICommandTabBox; dispid 9;
  end;

// *********************************************************************//
// Interface: ICommandTabBox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1DBAAB20-9626-4CB8-A275-C346AC425362}
// *********************************************************************//
  ICommandTabBox = interface(IDispatch)
    ['{1DBAAB20-9626-4CB8-A275-C346AC425362}']
    function AddCommands(CommandIDs: OleVariant; TextDisplayStyles: OleVariant): WordBool; safecall;
    function IAddCommands(CommandIDCount: Integer; var CommandIDs: Integer; 
                          var TextDisplayStyles: Integer): WordBool; safecall;
    function RemoveCommands(CommandIDs: OleVariant): WordBool; safecall;
    function IRemoveCommands(CommandIDCount: Integer; var CommandIDs: Integer): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICommandTabBoxDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1DBAAB20-9626-4CB8-A275-C346AC425362}
// *********************************************************************//
  ICommandTabBoxDisp = dispinterface
    ['{1DBAAB20-9626-4CB8-A275-C346AC425362}']
    function AddCommands(CommandIDs: OleVariant; TextDisplayStyles: OleVariant): WordBool; dispid 1;
    function IAddCommands(CommandIDCount: Integer; var CommandIDs: Integer; 
                          var TextDisplayStyles: Integer): WordBool; dispid 2;
    function RemoveCommands(CommandIDs: OleVariant): WordBool; dispid 3;
    function IRemoveCommands(CommandIDCount: Integer; var CommandIDs: Integer): WordBool; dispid 4;
  end;

// *********************************************************************//
// Interface: IUserProgressBar
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {01E97594-34EB-46BD-9036-518C1B352245}
// *********************************************************************//
  IUserProgressBar = interface(IDispatch)
    ['{01E97594-34EB-46BD-9036-518C1B352245}']
    function Start(LowerBound: Integer; UpperBound: Integer; const ProgressBarTitle: WideString): WordBool; safecall;
    function UpdateProgress(Position: Integer): Integer; safecall;
    function UpdateTitle(const ProgressBarTitle: WideString): WordBool; safecall;
    function End_: WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IUserProgressBarDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {01E97594-34EB-46BD-9036-518C1B352245}
// *********************************************************************//
  IUserProgressBarDisp = dispinterface
    ['{01E97594-34EB-46BD-9036-518C1B352245}']
    function Start(LowerBound: Integer; UpperBound: Integer; const ProgressBarTitle: WideString): WordBool; dispid 1;
    function UpdateProgress(Position: Integer): Integer; dispid 2;
    function UpdateTitle(const ProgressBarTitle: WideString): WordBool; dispid 3;
    function End_: WordBool; dispid 4;
  end;

// *********************************************************************//
// Interface: IJournalManager
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {338D2790-A47F-45BC-AA03-E70B711CA811}
// *********************************************************************//
  IJournalManager = interface(IDispatch)
    ['{338D2790-A47F-45BC-AA03-E70B711CA811}']
    function RunCommand(CommandID: Integer; const NewTitle: WideString): WordBool; safecall;
    procedure RecordDialogControl(const DialogId: WideString; const ResourceID: WideString); safecall;
    procedure RecordDialogControlText(const DialogId: WideString; const ResourceID: WideString; 
                                      const Value: WideString); safecall;
    procedure RecordDialogButtonState(const DialogId: WideString; const ResourceID: WideString; 
                                      Value: Integer); safecall;
    procedure SetKeyBoardState(const KeyState: WideString); safecall;
    function ImportSwSettings(const FileName: WideString): WordBool; safecall;
    function ExportSwSettings(const FileName: WideString): WordBool; safecall;
    procedure ClickDialogControl(const DialogId: WideString; const ResourceID: WideString); safecall;
    function GetDialogControlText(const DialogId: WideString; const ResourceID: WideString): WideString; safecall;
    procedure SetDialogControlText(const DialogId: WideString; const ResourceID: WideString; 
                                   const Value: WideString); safecall;
    function GetDialogButtonState(const DialogId: WideString; const ResourceID: WideString): Integer; safecall;
    procedure SetDialogButtonState(const DialogId: WideString; const ResourceID: WideString; 
                                   Value: Integer); safecall;
    procedure FileDrop(const FilePath: WideString); safecall;
    procedure WriteToJournalFile(const JournalText: WideString); safecall;
  end;

// *********************************************************************//
// DispIntf:  IJournalManagerDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {338D2790-A47F-45BC-AA03-E70B711CA811}
// *********************************************************************//
  IJournalManagerDisp = dispinterface
    ['{338D2790-A47F-45BC-AA03-E70B711CA811}']
    function RunCommand(CommandID: Integer; const NewTitle: WideString): WordBool; dispid 1;
    procedure RecordDialogControl(const DialogId: WideString; const ResourceID: WideString); dispid 2;
    procedure RecordDialogControlText(const DialogId: WideString; const ResourceID: WideString; 
                                      const Value: WideString); dispid 3;
    procedure RecordDialogButtonState(const DialogId: WideString; const ResourceID: WideString; 
                                      Value: Integer); dispid 4;
    procedure SetKeyBoardState(const KeyState: WideString); dispid 5;
    function ImportSwSettings(const FileName: WideString): WordBool; dispid 6;
    function ExportSwSettings(const FileName: WideString): WordBool; dispid 7;
    procedure ClickDialogControl(const DialogId: WideString; const ResourceID: WideString); dispid 8;
    function GetDialogControlText(const DialogId: WideString; const ResourceID: WideString): WideString; dispid 9;
    procedure SetDialogControlText(const DialogId: WideString; const ResourceID: WideString; 
                                   const Value: WideString); dispid 10;
    function GetDialogButtonState(const DialogId: WideString; const ResourceID: WideString): Integer; dispid 11;
    procedure SetDialogButtonState(const DialogId: WideString; const ResourceID: WideString; 
                                   Value: Integer); dispid 12;
    procedure FileDrop(const FilePath: WideString); dispid 13;
    procedure WriteToJournalFile(const JournalText: WideString); dispid 14;
  end;

// *********************************************************************//
// Interface: IRefPoint
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {71520755-04D2-4075-B756-124495C591C5}
// *********************************************************************//
  IRefPoint = interface(IDispatch)
    ['{71520755-04D2-4075-B756-124495C591C5}']
    function GetRefPoint: IMathPoint; safecall;
  end;

// *********************************************************************//
// DispIntf:  IRefPointDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {71520755-04D2-4075-B756-124495C591C5}
// *********************************************************************//
  IRefPointDisp = dispinterface
    ['{71520755-04D2-4075-B756-124495C591C5}']
    function GetRefPoint: IMathPoint; dispid 1;
  end;

// *********************************************************************//
// Interface: IRefAxis
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D86-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IRefAxis = interface(IDispatch)
    ['{83A33D86-27C5-11CE-BFD4-00400513BB57}']
    function GetRefAxisParams: OleVariant; safecall;
    function IGetRefAxisParams: Double; safecall;
  end;

// *********************************************************************//
// DispIntf:  IRefAxisDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D86-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IRefAxisDisp = dispinterface
    ['{83A33D86-27C5-11CE-BFD4-00400513BB57}']
    function GetRefAxisParams: OleVariant; dispid 1;
    function IGetRefAxisParams: Double; dispid 2;
  end;

// *********************************************************************//
// Interface: IMate
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D8A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMate = interface(IDispatch)
    ['{83A33D8A-27C5-11CE-BFD4-00400513BB57}']
    function GetMateParams: OleVariant; safecall;
    procedure IGetMateParams(out MateType: Integer; out AlignFlag: Integer; 
                             out CanBeFlipped: Integer); safecall;
    function GetMateDimensionValue: OleVariant; safecall;
    function IGetMateDimensionValue: Double; safecall;
    function GetMateEntities: OleVariant; safecall;
    procedure IGetMateEntities(out Entity1: IMateEntity; out Entity2: IMateEntity); safecall;
    function GetEntity(WhichOne: SYSINT): IDispatch; safecall;
    function IGetEntity(WhichOne: SYSINT): IEntity; safecall;
  end;

// *********************************************************************//
// DispIntf:  IMateDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D8A-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMateDisp = dispinterface
    ['{83A33D8A-27C5-11CE-BFD4-00400513BB57}']
    function GetMateParams: OleVariant; dispid 1;
    procedure IGetMateParams(out MateType: Integer; out AlignFlag: Integer; 
                             out CanBeFlipped: Integer); dispid 2;
    function GetMateDimensionValue: OleVariant; dispid 3;
    function IGetMateDimensionValue: Double; dispid 4;
    function GetMateEntities: OleVariant; dispid 5;
    procedure IGetMateEntities(out Entity1: IMateEntity; out Entity2: IMateEntity); dispid 6;
    function GetEntity(WhichOne: SYSINT): IDispatch; dispid 7;
    function IGetEntity(WhichOne: SYSINT): IEntity; dispid 8;
  end;

// *********************************************************************//
// Interface: IMateEntity
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D8C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMateEntity = interface(IDispatch)
    ['{83A33D8C-27C5-11CE-BFD4-00400513BB57}']
    function GetMember: IDispatch; safecall;
    function IGetMember: IMember; safecall;
    function GetEntityType: Integer; safecall;
    function GetEntityParams: OleVariant; safecall;
    function IGetEntityParams: Double; safecall;
    function GetComponent: IDispatch; safecall;
    function IGetComponent: IComponent; safecall;
    function GetComponentName: WideString; safecall;
    function IGetComponent2: IComponent2; safecall;
  end;

// *********************************************************************//
// DispIntf:  IMateEntityDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33D8C-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IMateEntityDisp = dispinterface
    ['{83A33D8C-27C5-11CE-BFD4-00400513BB57}']
    function GetMember: IDispatch; dispid 1;
    function IGetMember: IMember; dispid 2;
    function GetEntityType: Integer; dispid 3;
    function GetEntityParams: OleVariant; dispid 4;
    function IGetEntityParams: Double; dispid 5;
    function GetComponent: IDispatch; dispid 6;
    function IGetComponent: IComponent; dispid 7;
    function GetComponentName: WideString; dispid 8;
    function IGetComponent2: IComponent2; dispid 9;
  end;

// *********************************************************************//
// Interface: ISWPropertySheet
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA7-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISWPropertySheet = interface(IDispatch)
    ['{83A33DA7-27C5-11CE-BFD4-00400513BB57}']
    function AddPage(Page: Integer): Integer; safecall;
    function RemovePage(Page: Integer): Integer; safecall;
    function AddActivePage(const Title: WideString; const ProgId: WideString; 
                           const LicenseKey: WideString): Integer; safecall;
    function GetControl(PageIndex: Integer): IUnknown; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISWPropertySheetDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DA7-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISWPropertySheetDisp = dispinterface
    ['{83A33DA7-27C5-11CE-BFD4-00400513BB57}']
    function AddPage(Page: Integer): Integer; dispid 1;
    function RemovePage(Page: Integer): Integer; dispid 2;
    function AddActivePage(const Title: WideString; const ProgId: WideString; 
                           const LicenseKey: WideString): Integer; dispid 3;
    function GetControl(PageIndex: Integer): IUnknown; dispid 4;
  end;

// *********************************************************************//
// Interface: IRibFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {83A33DAD-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IRibFeatureData = interface(IUnknown)
    ['{83A33DAD-27C5-11CE-BFD4-00400513BB57}']
    function Get_IsTwoSided: WordBool; safecall;
    procedure Set_IsTwoSided(TwoSided: WordBool); safecall;
    function Get_ReverseThicknessDir: WordBool; safecall;
    procedure Set_ReverseThicknessDir(Reverse: WordBool); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Get_RefSketchIndex: SYSINT; safecall;
    procedure Set_RefSketchIndex(Index: SYSINT); safecall;
    function NextReference: SYSINT; safecall;
    function Get_FlipSide: WordBool; safecall;
    procedure Set_FlipSide(FlipSide: WordBool); safecall;
    function Get_EnableDraft: WordBool; safecall;
    procedure Set_EnableDraft(EnableDraft: WordBool); safecall;
    function Get_DraftOutward: WordBool; safecall;
    procedure Set_DraftOutward(DraftOutward: WordBool); safecall;
    function Get_DraftAngle: Double; safecall;
    procedure Set_DraftAngle(Angle: Double); safecall;
    property IsTwoSided: WordBool read Get_IsTwoSided write Set_IsTwoSided;
    property ReverseThicknessDir: WordBool read Get_ReverseThicknessDir write Set_ReverseThicknessDir;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property RefSketchIndex: SYSINT read Get_RefSketchIndex write Set_RefSketchIndex;
    property FlipSide: WordBool read Get_FlipSide write Set_FlipSide;
    property EnableDraft: WordBool read Get_EnableDraft write Set_EnableDraft;
    property DraftOutward: WordBool read Get_DraftOutward write Set_DraftOutward;
    property DraftAngle: Double read Get_DraftAngle write Set_DraftAngle;
  end;

// *********************************************************************//
// DispIntf:  IRibFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {83A33DAD-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IRibFeatureDataDisp = dispinterface
    ['{83A33DAD-27C5-11CE-BFD4-00400513BB57}']
    property IsTwoSided: WordBool dispid 1;
    property ReverseThicknessDir: WordBool dispid 2;
    property Thickness: Double dispid 3;
    property RefSketchIndex: SYSINT dispid 4;
    function NextReference: SYSINT; dispid 5;
    property FlipSide: WordBool dispid 6;
    property EnableDraft: WordBool dispid 7;
    property DraftOutward: WordBool dispid 8;
    property DraftAngle: Double dispid 9;
  end;

// *********************************************************************//
// Interface: IDomeFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {83A33DAF-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDomeFeatureData = interface(IUnknown)
    ['{83A33DAF-27C5-11CE-BFD4-00400513BB57}']
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_ReverseDir: WordBool; safecall;
    procedure Set_ReverseDir(Reverse: WordBool); safecall;
    function Get_Elliptical: WordBool; safecall;
    procedure Set_Elliptical(Elliptical: WordBool); safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Face: IDispatch; safecall;
    procedure Set_Face(const Face: IDispatch); safecall;
    function Get_IFace: IFace; safecall;
    procedure Set_IFace(const Face: IFace); safecall;
    property Height: Double read Get_Height write Set_Height;
    property ReverseDir: WordBool read Get_ReverseDir write Set_ReverseDir;
    property Elliptical: WordBool read Get_Elliptical write Set_Elliptical;
    property Face: IDispatch read Get_Face write Set_Face;
    property IFace: IFace read Get_IFace write Set_IFace;
  end;

// *********************************************************************//
// DispIntf:  IDomeFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {83A33DAF-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  IDomeFeatureDataDisp = dispinterface
    ['{83A33DAF-27C5-11CE-BFD4-00400513BB57}']
    property Height: Double dispid 1;
    property ReverseDir: WordBool dispid 2;
    property Elliptical: WordBool dispid 3;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 4;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 5;
    procedure ReleaseSelectionAccess; dispid 6;
    property Face: IDispatch dispid 7;
    property IFace: IFace dispid 8;
  end;

// *********************************************************************//
// Interface: ISketchLine
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC1-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchLine = interface(IDispatch)
    ['{83A33DC1-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; safecall;
    function IGetStartPoint: Double; safecall;
    function GetEndPoint: OleVariant; safecall;
    function IGetEndPoint: Double; safecall;
    function GetStartPoint2: IDispatch; safecall;
    function IGetStartPoint2: ISketchPoint; safecall;
    function GetEndPoint2: IDispatch; safecall;
    function IGetEndPoint2: ISketchPoint; safecall;
    function Get_Infinite: WordBool; safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(AngleOut: Double); safecall;
    function MakeInfinite: WordBool; safecall;
    property Infinite: WordBool read Get_Infinite;
    property Angle: Double read Get_Angle write Set_Angle;
  end;

// *********************************************************************//
// DispIntf:  ISketchLineDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC1-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchLineDisp = dispinterface
    ['{83A33DC1-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; dispid 1;
    function IGetStartPoint: Double; dispid 2;
    function GetEndPoint: OleVariant; dispid 3;
    function IGetEndPoint: Double; dispid 4;
    function GetStartPoint2: IDispatch; dispid 5;
    function IGetStartPoint2: ISketchPoint; dispid 6;
    function GetEndPoint2: IDispatch; dispid 7;
    function IGetEndPoint2: ISketchPoint; dispid 8;
    property Infinite: WordBool readonly dispid 9;
    property Angle: Double dispid 10;
    function MakeInfinite: WordBool; dispid 11;
  end;

// *********************************************************************//
// Interface: ISketchArc
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC3-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchArc = interface(IDispatch)
    ['{83A33DC3-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; safecall;
    function IGetStartPoint: Double; safecall;
    function GetEndPoint: OleVariant; safecall;
    function IGetEndPoint: Double; safecall;
    function GetCenterPoint: OleVariant; safecall;
    function IGetCenterPoint: Double; safecall;
    function IsCircle: SYSINT; safecall;
    function GetRotationDir: SYSINT; safecall;
    function GetStartPoint2: IDispatch; safecall;
    function IGetStartPoint2: ISketchPoint; safecall;
    function GetEndPoint2: IDispatch; safecall;
    function IGetEndPoint2: ISketchPoint; safecall;
    function GetCenterPoint2: IDispatch; safecall;
    function IGetCenterPoint2: ISketchPoint; safecall;
    function GetRadius: Double; safecall;
    function SetRadius(Radius: Double): WordBool; safecall;
    function GetNormalVector: OleVariant; safecall;
    function IGetNormalVector: Double; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISketchArcDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC3-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchArcDisp = dispinterface
    ['{83A33DC3-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; dispid 1;
    function IGetStartPoint: Double; dispid 2;
    function GetEndPoint: OleVariant; dispid 3;
    function IGetEndPoint: Double; dispid 4;
    function GetCenterPoint: OleVariant; dispid 5;
    function IGetCenterPoint: Double; dispid 6;
    function IsCircle: SYSINT; dispid 7;
    function GetRotationDir: SYSINT; dispid 8;
    function GetStartPoint2: IDispatch; dispid 9;
    function IGetStartPoint2: ISketchPoint; dispid 10;
    function GetEndPoint2: IDispatch; dispid 11;
    function IGetEndPoint2: ISketchPoint; dispid 12;
    function GetCenterPoint2: IDispatch; dispid 13;
    function IGetCenterPoint2: ISketchPoint; dispid 14;
    function GetRadius: Double; dispid 15;
    function SetRadius(Radius: Double): WordBool; dispid 16;
    function GetNormalVector: OleVariant; dispid 17;
    function IGetNormalVector: Double; dispid 18;
  end;

// *********************************************************************//
// Interface: ISketchEllipse
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC7-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchEllipse = interface(IDispatch)
    ['{83A33DC7-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; safecall;
    function IGetStartPoint: Double; safecall;
    function GetEndPoint: OleVariant; safecall;
    function IGetEndPoint: Double; safecall;
    function GetCenterPoint: OleVariant; safecall;
    function IGetCenterPoint: Double; safecall;
    function GetMajorPoint: OleVariant; safecall;
    function IGetMajorPoint: Double; safecall;
    function GetMinorPoint: OleVariant; safecall;
    function IGetMinorPoint: Double; safecall;
    function GetStartPoint2: IDispatch; safecall;
    function IGetStartPoint2: ISketchPoint; safecall;
    function GetEndPoint2: IDispatch; safecall;
    function IGetEndPoint2: ISketchPoint; safecall;
    function GetCenterPoint2: IDispatch; safecall;
    function IGetCenterPoint2: ISketchPoint; safecall;
    function GetMajorPoint2: IDispatch; safecall;
    function IGetMajorPoint2: ISketchPoint; safecall;
    function GetMinorPoint2: IDispatch; safecall;
    function IGetMinorPoint2: ISketchPoint; safecall;
    function GetRotationDir: Integer; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISketchEllipseDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC7-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchEllipseDisp = dispinterface
    ['{83A33DC7-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; dispid 1;
    function IGetStartPoint: Double; dispid 2;
    function GetEndPoint: OleVariant; dispid 3;
    function IGetEndPoint: Double; dispid 4;
    function GetCenterPoint: OleVariant; dispid 5;
    function IGetCenterPoint: Double; dispid 6;
    function GetMajorPoint: OleVariant; dispid 7;
    function IGetMajorPoint: Double; dispid 8;
    function GetMinorPoint: OleVariant; dispid 9;
    function IGetMinorPoint: Double; dispid 10;
    function GetStartPoint2: IDispatch; dispid 11;
    function IGetStartPoint2: ISketchPoint; dispid 12;
    function GetEndPoint2: IDispatch; dispid 13;
    function IGetEndPoint2: ISketchPoint; dispid 14;
    function GetCenterPoint2: IDispatch; dispid 15;
    function IGetCenterPoint2: ISketchPoint; dispid 16;
    function GetMajorPoint2: IDispatch; dispid 17;
    function IGetMajorPoint2: ISketchPoint; dispid 18;
    function GetMinorPoint2: IDispatch; dispid 19;
    function IGetMinorPoint2: ISketchPoint; dispid 20;
    function GetRotationDir: Integer; dispid 21;
  end;

// *********************************************************************//
// Interface: ISketchParabola
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC9-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchParabola = interface(IDispatch)
    ['{83A33DC9-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; safecall;
    function IGetStartPoint: Double; safecall;
    function GetEndPoint: OleVariant; safecall;
    function IGetEndPoint: Double; safecall;
    function GetFocalPoint: OleVariant; safecall;
    function IGetFocalPoint: Double; safecall;
    function GetApexPoint: OleVariant; safecall;
    function IGetApexPoint: Double; safecall;
    function GetStartPoint2: IDispatch; safecall;
    function IGetStartPoint2: ISketchPoint; safecall;
    function GetEndPoint2: IDispatch; safecall;
    function IGetEndPoint2: ISketchPoint; safecall;
    function GetFocalPoint2: IDispatch; safecall;
    function IGetFocalPoint2: ISketchPoint; safecall;
    function GetApexPoint2: IDispatch; safecall;
    function IGetApexPoint2: ISketchPoint; safecall;
    function SetPoints(CenterX: Double; CenterY: Double; CenterZ: Double; ApexX: Double; 
                       ApexY: Double; ApexZ: Double; StartX: Double; StartY: Double; 
                       StartZ: Double; EndX: Double; EndY: Double; EndZ: Double): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISketchParabolaDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DC9-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchParabolaDisp = dispinterface
    ['{83A33DC9-27C5-11CE-BFD4-00400513BB57}']
    function GetStartPoint: OleVariant; dispid 1;
    function IGetStartPoint: Double; dispid 2;
    function GetEndPoint: OleVariant; dispid 3;
    function IGetEndPoint: Double; dispid 4;
    function GetFocalPoint: OleVariant; dispid 5;
    function IGetFocalPoint: Double; dispid 6;
    function GetApexPoint: OleVariant; dispid 7;
    function IGetApexPoint: Double; dispid 8;
    function GetStartPoint2: IDispatch; dispid 9;
    function IGetStartPoint2: ISketchPoint; dispid 10;
    function GetEndPoint2: IDispatch; dispid 11;
    function IGetEndPoint2: ISketchPoint; dispid 12;
    function GetFocalPoint2: IDispatch; dispid 13;
    function IGetFocalPoint2: ISketchPoint; dispid 14;
    function GetApexPoint2: IDispatch; dispid 15;
    function IGetApexPoint2: ISketchPoint; dispid 16;
    function SetPoints(CenterX: Double; CenterY: Double; CenterZ: Double; ApexX: Double; 
                       ApexY: Double; ApexZ: Double; StartX: Double; StartY: Double; 
                       StartZ: Double; EndX: Double; EndY: Double; EndZ: Double): WordBool; dispid 17;
  end;

// *********************************************************************//
// Interface: ISketchSpline
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DCB-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchSpline = interface(IDispatch)
    ['{83A33DCB-27C5-11CE-BFD4-00400513BB57}']
    function GetPointCount: Integer; safecall;
    function GetPoints: OleVariant; safecall;
    function IGetPoints: Double; safecall;
    function GetPoints2: OleVariant; safecall;
    function IEnumPoints: IEnumSketchPoints; safecall;
    function Get_ShowSplineHandles: WordBool; safecall;
    procedure Set_ShowSplineHandles(Value: WordBool); safecall;
    function Get_DisplayControlPolygon: WordBool; safecall;
    procedure Set_DisplayControlPolygon(Value: WordBool); safecall;
    function Get_ShowInflectionPoints: WordBool; safecall;
    procedure Set_ShowInflectionPoints(Value: WordBool); safecall;
    function Get_ShowMinimumRadius: WordBool; safecall;
    procedure Set_ShowMinimumRadius(Value: WordBool); safecall;
    function Get_ShowCurvatureCombs: WordBool; safecall;
    procedure Set_ShowCurvatureCombs(Value: WordBool); safecall;
    function AddTangencyControl(XPos: Double; YPos: Double; ZPos: Double): ISplineHandle; safecall;
    function AddCurvatureControl(XPos: Double; YPos: Double; ZPos: Double): ISplineHandle; safecall;
    function GetSplineHandles: OleVariant; safecall;
    function IGetSplineHandles(Count: Integer): ISplineHandle; safecall;
    procedure ResetAllHandles; safecall;
    procedure RelaxSpline; safecall;
    function Get_Proportional: WordBool; safecall;
    procedure Set_Proportional(Value: WordBool); safecall;
    procedure Simplify(ToleranceIn: Double); safecall;
    function GetSplineHandleCount: Integer; safecall;
    function InsertPoint(X: Double; Y: Double; Z: Double): WordBool; safecall;
    function DeletePoint(const Point: ISketchPoint): WordBool; safecall;
    property ShowSplineHandles: WordBool read Get_ShowSplineHandles write Set_ShowSplineHandles;
    property DisplayControlPolygon: WordBool read Get_DisplayControlPolygon write Set_DisplayControlPolygon;
    property ShowInflectionPoints: WordBool read Get_ShowInflectionPoints write Set_ShowInflectionPoints;
    property ShowMinimumRadius: WordBool read Get_ShowMinimumRadius write Set_ShowMinimumRadius;
    property ShowCurvatureCombs: WordBool read Get_ShowCurvatureCombs write Set_ShowCurvatureCombs;
    property Proportional: WordBool read Get_Proportional write Set_Proportional;
  end;

// *********************************************************************//
// DispIntf:  ISketchSplineDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DCB-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ISketchSplineDisp = dispinterface
    ['{83A33DCB-27C5-11CE-BFD4-00400513BB57}']
    function GetPointCount: Integer; dispid 1;
    function GetPoints: OleVariant; dispid 2;
    function IGetPoints: Double; dispid 3;
    function GetPoints2: OleVariant; dispid 4;
    function IEnumPoints: IEnumSketchPoints; dispid 5;
    property ShowSplineHandles: WordBool dispid 6;
    property DisplayControlPolygon: WordBool dispid 7;
    property ShowInflectionPoints: WordBool dispid 8;
    property ShowMinimumRadius: WordBool dispid 9;
    property ShowCurvatureCombs: WordBool dispid 10;
    function AddTangencyControl(XPos: Double; YPos: Double; ZPos: Double): ISplineHandle; dispid 11;
    function AddCurvatureControl(XPos: Double; YPos: Double; ZPos: Double): ISplineHandle; dispid 12;
    function GetSplineHandles: OleVariant; dispid 13;
    function IGetSplineHandles(Count: Integer): ISplineHandle; dispid 14;
    procedure ResetAllHandles; dispid 15;
    procedure RelaxSpline; dispid 16;
    property Proportional: WordBool dispid 17;
    procedure Simplify(ToleranceIn: Double); dispid 18;
    function GetSplineHandleCount: Integer; dispid 19;
    function InsertPoint(X: Double; Y: Double; Z: Double): WordBool; dispid 20;
    function DeletePoint(const Point: ISketchPoint): WordBool; dispid 21;
  end;

// *********************************************************************//
// Interface: ISplineHandle
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {41607756-57A8-4E03-9BAC-2444B5FABC9D}
// *********************************************************************//
  ISplineHandle = interface(IDispatch)
    ['{41607756-57A8-4E03-9BAC-2444B5FABC9D}']
    function Get_SplinePointNumber: Integer; safecall;
    function Get_X: Double; safecall;
    procedure Set_X(XPos: Double); safecall;
    function Get_Y: Double; safecall;
    procedure Set_Y(YPos: Double); safecall;
    function Get_Z: Double; safecall;
    procedure Set_Z(ZPos: Double); safecall;
    function Get_TangentMagnitude(WhichDirection: Integer): Double; safecall;
    procedure Set_TangentMagnitude(WhichDirection: Integer; Value: Double); safecall;
    function Get_TangentRadialDirection: Double; safecall;
    procedure Set_TangentRadialDirection(Value: Double); safecall;
    function Get_TangentPolarDirection: Double; safecall;
    procedure Set_TangentPolarDirection(Value: Double); safecall;
    function Get_Curvature: Double; safecall;
    procedure Set_Curvature(Value: Double); safecall;
    function Get_RadiusOfCurvature: Double; safecall;
    procedure Set_RadiusOfCurvature(Value: Double); safecall;
    function Get_TangentDriving: WordBool; safecall;
    procedure Set_TangentDriving(Value: WordBool); safecall;
    procedure Reset; safecall;
    function Get_CurvatureControlled: WordBool; safecall;
    procedure Set_CurvatureControlled(Retval: WordBool); safecall;
    function Select(AppendFlag: WordBool): WordBool; safecall;
    function Get_Parameter: Double; safecall;
    function Get_Editable: WordBool; safecall;
    procedure Set_Editable(Value: WordBool); safecall;
    property SplinePointNumber: Integer read Get_SplinePointNumber;
    property X: Double read Get_X write Set_X;
    property Y: Double read Get_Y write Set_Y;
    property Z: Double read Get_Z write Set_Z;
    property TangentMagnitude[WhichDirection: Integer]: Double read Get_TangentMagnitude write Set_TangentMagnitude;
    property TangentRadialDirection: Double read Get_TangentRadialDirection write Set_TangentRadialDirection;
    property TangentPolarDirection: Double read Get_TangentPolarDirection write Set_TangentPolarDirection;
    property Curvature: Double read Get_Curvature write Set_Curvature;
    property RadiusOfCurvature: Double read Get_RadiusOfCurvature write Set_RadiusOfCurvature;
    property TangentDriving: WordBool read Get_TangentDriving write Set_TangentDriving;
    property CurvatureControlled: WordBool read Get_CurvatureControlled write Set_CurvatureControlled;
    property Parameter: Double read Get_Parameter;
    property Editable: WordBool read Get_Editable write Set_Editable;
  end;

// *********************************************************************//
// DispIntf:  ISplineHandleDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {41607756-57A8-4E03-9BAC-2444B5FABC9D}
// *********************************************************************//
  ISplineHandleDisp = dispinterface
    ['{41607756-57A8-4E03-9BAC-2444B5FABC9D}']
    property SplinePointNumber: Integer readonly dispid 1;
    property X: Double dispid 2;
    property Y: Double dispid 3;
    property Z: Double dispid 4;
    property TangentMagnitude[WhichDirection: Integer]: Double dispid 5;
    property TangentRadialDirection: Double dispid 6;
    property TangentPolarDirection: Double dispid 7;
    property Curvature: Double dispid 8;
    property RadiusOfCurvature: Double dispid 9;
    property TangentDriving: WordBool dispid 10;
    procedure Reset; dispid 11;
    property CurvatureControlled: WordBool dispid 12;
    function Select(AppendFlag: WordBool): WordBool; dispid 13;
    property Parameter: Double readonly dispid 14;
    property Editable: WordBool dispid 15;
  end;

// *********************************************************************//
// Interface: ILightDialog
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DF1-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ILightDialog = interface(IDispatch)
    ['{83A33DF1-27C5-11CE-BFD4-00400513BB57}']
    function AddSubDialog(Page: Integer): WordBool; safecall;
    function GetLightId: Integer; safecall;
  end;

// *********************************************************************//
// DispIntf:  ILightDialogDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {83A33DF1-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  ILightDialogDisp = dispinterface
    ['{83A33DF1-27C5-11CE-BFD4-00400513BB57}']
    function AddSubDialog(Page: Integer): WordBool; dispid 1;
    function GetLightId: Integer; dispid 2;
  end;

// *********************************************************************//
// Interface: IEnumCurves
// Flags:     (272) Hidden OleAutomation
// GUID:      {5B57E3BC-7139-11D3-AEA2-00C04F683CBA}
// *********************************************************************//
  IEnumCurves = interface(IUnknown)
    ['{5B57E3BC-7139-11D3-AEA2-00C04F683CBA}']
    function Next(Celt: Integer; out Rgelt: ICurve; var PceltFetched: Integer): HResult; stdcall;
    function Skip(Celt: Integer): HResult; stdcall;
    function Reset: HResult; stdcall;
    function Clone(out Ppenum: IEnumCurves): HResult; stdcall;
  end;

// *********************************************************************//
// Interface: ISimpleHoleFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {1D06FD54-96DD-11D3-AEAA-00C04F683CBA}
// *********************************************************************//
  ISimpleHoleFeatureData = interface(IUnknown)
    ['{1D06FD54-96DD-11D3-AEAA-00C04F683CBA}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_DraftWhileExtruding: WordBool; safecall;
    procedure Set_DraftWhileExtruding(DraftWhileExtrude: WordBool); safecall;
    function Get_DraftOutward: WordBool; safecall;
    procedure Set_DraftOutward(DraftOutward: WordBool); safecall;
    function Get_ReverseOffset: WordBool; safecall;
    procedure Set_ReverseOffset(DraftOutward: WordBool); safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(Type_: SYSINT); safecall;
    function Get_Diameter: Double; safecall;
    procedure Set_Diameter(Diameter: Double); safecall;
    function Get_Depth: Double; safecall;
    procedure Set_Depth(Depth: Double); safecall;
    function Get_DraftAngle: Double; safecall;
    procedure Set_DraftAngle(DraftAngle: Double); safecall;
    function Get_SurfaceOffset: Double; safecall;
    procedure Set_SurfaceOffset(SurfaceOffset: Double); safecall;
    function Get_Face: IDispatch; safecall;
    procedure Set_Face(const Face: IDispatch); safecall;
    function Get_IFace: IFace; safecall;
    procedure Set_IFace(const Face: IFace); safecall;
    function Get_Vertex: IDispatch; safecall;
    procedure Set_Vertex(const Vertex: IDispatch); safecall;
    function Get_IVertex: IVertex; safecall;
    procedure Set_IVertex(const Vertex: IVertex); safecall;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property DraftWhileExtruding: WordBool read Get_DraftWhileExtruding write Set_DraftWhileExtruding;
    property DraftOutward: WordBool read Get_DraftOutward write Set_DraftOutward;
    property ReverseOffset: WordBool read Get_ReverseOffset write Set_ReverseOffset;
    property type_: SYSINT read Get_type_ write Set_type_;
    property Diameter: Double read Get_Diameter write Set_Diameter;
    property Depth: Double read Get_Depth write Set_Depth;
    property DraftAngle: Double read Get_DraftAngle write Set_DraftAngle;
    property SurfaceOffset: Double read Get_SurfaceOffset write Set_SurfaceOffset;
    property Face: IDispatch read Get_Face write Set_Face;
    property IFace: IFace read Get_IFace write Set_IFace;
    property Vertex: IDispatch read Get_Vertex write Set_Vertex;
    property IVertex: IVertex read Get_IVertex write Set_IVertex;
  end;

// *********************************************************************//
// DispIntf:  ISimpleHoleFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {1D06FD54-96DD-11D3-AEAA-00C04F683CBA}
// *********************************************************************//
  ISimpleHoleFeatureDataDisp = dispinterface
    ['{1D06FD54-96DD-11D3-AEAA-00C04F683CBA}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property ReverseDirection: WordBool dispid 4;
    property DraftWhileExtruding: WordBool dispid 5;
    property DraftOutward: WordBool dispid 6;
    property ReverseOffset: WordBool dispid 7;
    property type_: SYSINT dispid 8;
    property Diameter: Double dispid 9;
    property Depth: Double dispid 10;
    property DraftAngle: Double dispid 11;
    property SurfaceOffset: Double dispid 12;
    property Face: IDispatch dispid 13;
    property IFace: IFace dispid 14;
    property Vertex: IDispatch dispid 15;
    property IVertex: IVertex dispid 16;
  end;

// *********************************************************************//
// Interface: IWizardHoleFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {887AB457-A739-11D3-B97F-001083029A97}
// *********************************************************************//
  IWizardHoleFeatureData = interface(IUnknown)
    ['{887AB457-A739-11D3-B97F-001083029A97}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(Hole_type: SYSINT); safecall;
    function Get_Diameter: Double; safecall;
    procedure Set_Diameter(Diameter: Double); safecall;
    function Get_CounterBoreDiameter: Double; safecall;
    procedure Set_CounterBoreDiameter(Cbore_dia: Double); safecall;
    function Get_CounterDrillDiameter: Double; safecall;
    procedure Set_CounterDrillDiameter(Cdrill_dia: Double); safecall;
    function Get_CounterSinkDiameter: Double; safecall;
    procedure Set_CounterSinkDiameter(Csunk_dia: Double); safecall;
    function Get_MinorDiameter: Double; safecall;
    procedure Set_MinorDiameter(Minor_dia: Double); safecall;
    function Get_MajorDiameter: Double; safecall;
    procedure Set_MajorDiameter(Major_dia: Double); safecall;
    function Get_HoleDiameter: Double; safecall;
    procedure Set_HoleDiameter(Diameter: Double); safecall;
    function Get_ThruHoleDiameter: Double; safecall;
    procedure Set_ThruHoleDiameter(Diameter: Double); safecall;
    function Get_TapDrillDiameter: Double; safecall;
    procedure Set_TapDrillDiameter(Diameter: Double); safecall;
    function Get_ThruTapDrillDiameter: Double; safecall;
    procedure Set_ThruTapDrillDiameter(Diameter: Double); safecall;
    function Get_NearCounterSinkDiameter: Double; safecall;
    procedure Set_NearCounterSinkDiameter(Diameter: Double); safecall;
    function Get_MidCounterSinkDiameter: Double; safecall;
    procedure Set_MidCounterSinkDiameter(Diameter: Double); safecall;
    function Get_FarCounterSinkDiameter: Double; safecall;
    procedure Set_FarCounterSinkDiameter(Diameter: Double); safecall;
    function Get_ThreadDiameter: Double; safecall;
    procedure Set_ThreadDiameter(Diameter: Double); safecall;
    function Get_Depth: Double; safecall;
    procedure Set_Depth(Depth: Double); safecall;
    function Get_CounterBoreDepth: Double; safecall;
    procedure Set_CounterBoreDepth(Cbore_depth: Double); safecall;
    function Get_CounterDrillDepth: Double; safecall;
    procedure Set_CounterDrillDepth(Cdrill_depth: Double); safecall;
    function Get_HoleDepth: Double; safecall;
    procedure Set_HoleDepth(Depth: Double); safecall;
    function Get_ThruHoleDepth: Double; safecall;
    procedure Set_ThruHoleDepth(Depth: Double); safecall;
    function Get_TapDrillDepth: Double; safecall;
    procedure Set_TapDrillDepth(Depth: Double); safecall;
    function Get_ThruTapDrillDepth: Double; safecall;
    procedure Set_ThruTapDrillDepth(Depth: Double); safecall;
    function Get_ThreadDepth: Double; safecall;
    procedure Set_ThreadDepth(Depth: Double); safecall;
    function Get_CounterDrillAngle: Double; safecall;
    procedure Set_CounterDrillAngle(Cdrill_angle: Double); safecall;
    function Get_CounterSinkAngle: Double; safecall;
    procedure Set_CounterSinkAngle(Csunk_angle: Double); safecall;
    function Get_DrillAngle: Double; safecall;
    procedure Set_DrillAngle(Drill_angle: Double); safecall;
    function Get_NearCounterSinkAngle: Double; safecall;
    procedure Set_NearCounterSinkAngle(Angle: Double); safecall;
    function Get_MidCounterSinkAngle: Double; safecall;
    procedure Set_MidCounterSinkAngle(Angle: Double); safecall;
    function Get_FarCounterSinkAngle: Double; safecall;
    procedure Set_FarCounterSinkAngle(Angle: Double); safecall;
    function Get_ThreadAngle: Double; safecall;
    procedure Set_ThreadAngle(Angle: Double); safecall;
    function Get_HeadClearance: Double; safecall;
    procedure Set_HeadClearance(HeadClearance: Double); safecall;
    function Get_Face: IDispatch; safecall;
    procedure Set_Face(const Face: IDispatch); safecall;
    function Get_IFace: IFace; safecall;
    procedure Set_IFace(const Face: IFace); safecall;
    function Get_Vertex: IDispatch; safecall;
    procedure Set_Vertex(const Vertex: IDispatch); safecall;
    function Get_IVertex: IVertex; safecall;
    procedure Set_IVertex(const Vertex: IVertex); safecall;
    function Get_EndCondition: SYSINT; safecall;
    procedure Set_EndCondition(EndCondition: SYSINT); safecall;
    function Get_Standard: WideString; safecall;
    procedure Set_Standard(const Standard: WideString); safecall;
    function Get_FastenerType: WideString; safecall;
    procedure Set_FastenerType(const FastenerType: WideString); safecall;
    function Get_FastenerSize: WideString; safecall;
    procedure Set_FastenerSize(const FastenerSize: WideString); safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property Diameter: Double read Get_Diameter write Set_Diameter;
    property CounterBoreDiameter: Double read Get_CounterBoreDiameter write Set_CounterBoreDiameter;
    property CounterDrillDiameter: Double read Get_CounterDrillDiameter write Set_CounterDrillDiameter;
    property CounterSinkDiameter: Double read Get_CounterSinkDiameter write Set_CounterSinkDiameter;
    property MinorDiameter: Double read Get_MinorDiameter write Set_MinorDiameter;
    property MajorDiameter: Double read Get_MajorDiameter write Set_MajorDiameter;
    property HoleDiameter: Double read Get_HoleDiameter write Set_HoleDiameter;
    property ThruHoleDiameter: Double read Get_ThruHoleDiameter write Set_ThruHoleDiameter;
    property TapDrillDiameter: Double read Get_TapDrillDiameter write Set_TapDrillDiameter;
    property ThruTapDrillDiameter: Double read Get_ThruTapDrillDiameter write Set_ThruTapDrillDiameter;
    property NearCounterSinkDiameter: Double read Get_NearCounterSinkDiameter write Set_NearCounterSinkDiameter;
    property MidCounterSinkDiameter: Double read Get_MidCounterSinkDiameter write Set_MidCounterSinkDiameter;
    property FarCounterSinkDiameter: Double read Get_FarCounterSinkDiameter write Set_FarCounterSinkDiameter;
    property ThreadDiameter: Double read Get_ThreadDiameter write Set_ThreadDiameter;
    property Depth: Double read Get_Depth write Set_Depth;
    property CounterBoreDepth: Double read Get_CounterBoreDepth write Set_CounterBoreDepth;
    property CounterDrillDepth: Double read Get_CounterDrillDepth write Set_CounterDrillDepth;
    property HoleDepth: Double read Get_HoleDepth write Set_HoleDepth;
    property ThruHoleDepth: Double read Get_ThruHoleDepth write Set_ThruHoleDepth;
    property TapDrillDepth: Double read Get_TapDrillDepth write Set_TapDrillDepth;
    property ThruTapDrillDepth: Double read Get_ThruTapDrillDepth write Set_ThruTapDrillDepth;
    property ThreadDepth: Double read Get_ThreadDepth write Set_ThreadDepth;
    property CounterDrillAngle: Double read Get_CounterDrillAngle write Set_CounterDrillAngle;
    property CounterSinkAngle: Double read Get_CounterSinkAngle write Set_CounterSinkAngle;
    property DrillAngle: Double read Get_DrillAngle write Set_DrillAngle;
    property NearCounterSinkAngle: Double read Get_NearCounterSinkAngle write Set_NearCounterSinkAngle;
    property MidCounterSinkAngle: Double read Get_MidCounterSinkAngle write Set_MidCounterSinkAngle;
    property FarCounterSinkAngle: Double read Get_FarCounterSinkAngle write Set_FarCounterSinkAngle;
    property ThreadAngle: Double read Get_ThreadAngle write Set_ThreadAngle;
    property HeadClearance: Double read Get_HeadClearance write Set_HeadClearance;
    property Face: IDispatch read Get_Face write Set_Face;
    property IFace: IFace read Get_IFace write Set_IFace;
    property Vertex: IDispatch read Get_Vertex write Set_Vertex;
    property IVertex: IVertex read Get_IVertex write Set_IVertex;
    property EndCondition: SYSINT read Get_EndCondition write Set_EndCondition;
    property Standard: WideString read Get_Standard write Set_Standard;
    property FastenerType: WideString read Get_FastenerType write Set_FastenerType;
    property FastenerSize: WideString read Get_FastenerSize write Set_FastenerSize;
  end;

// *********************************************************************//
// DispIntf:  IWizardHoleFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {887AB457-A739-11D3-B97F-001083029A97}
// *********************************************************************//
  IWizardHoleFeatureDataDisp = dispinterface
    ['{887AB457-A739-11D3-B97F-001083029A97}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property type_: SYSINT dispid 4;
    property Diameter: Double dispid 5;
    property CounterBoreDiameter: Double dispid 6;
    property CounterDrillDiameter: Double dispid 7;
    property CounterSinkDiameter: Double dispid 8;
    property MinorDiameter: Double dispid 9;
    property MajorDiameter: Double dispid 10;
    property HoleDiameter: Double dispid 11;
    property ThruHoleDiameter: Double dispid 12;
    property TapDrillDiameter: Double dispid 13;
    property ThruTapDrillDiameter: Double dispid 14;
    property NearCounterSinkDiameter: Double dispid 15;
    property MidCounterSinkDiameter: Double dispid 16;
    property FarCounterSinkDiameter: Double dispid 17;
    property ThreadDiameter: Double dispid 18;
    property Depth: Double dispid 19;
    property CounterBoreDepth: Double dispid 20;
    property CounterDrillDepth: Double dispid 21;
    property HoleDepth: Double dispid 22;
    property ThruHoleDepth: Double dispid 23;
    property TapDrillDepth: Double dispid 24;
    property ThruTapDrillDepth: Double dispid 25;
    property ThreadDepth: Double dispid 26;
    property CounterDrillAngle: Double dispid 27;
    property CounterSinkAngle: Double dispid 28;
    property DrillAngle: Double dispid 29;
    property NearCounterSinkAngle: Double dispid 30;
    property MidCounterSinkAngle: Double dispid 31;
    property FarCounterSinkAngle: Double dispid 32;
    property ThreadAngle: Double dispid 33;
    property HeadClearance: Double dispid 34;
    property Face: IDispatch dispid 35;
    property IFace: IFace dispid 36;
    property Vertex: IDispatch dispid 37;
    property IVertex: IVertex dispid 38;
    property EndCondition: SYSINT dispid 39;
    property Standard: WideString dispid 40;
    property FastenerType: WideString dispid 41;
    property FastenerSize: WideString dispid 42;
  end;

// *********************************************************************//
// Interface: IHoleSeriesFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {B1EDF95C-E764-486A-A82E-8402D6553992}
// *********************************************************************//
  IHoleSeriesFeatureData = interface(IUnknown)
    ['{B1EDF95C-E764-486A-A82E-8402D6553992}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_FastenerDefaultUnits: WideString; safecall;
    function Get_FastenerTopHoleType: Smallint; safecall;
    function Get_FastenerBottomHoleType: Smallint; safecall;
    function Get_FastenerHoleCount: Integer; safecall;
    function GetHoleTopMateEntity(HoleInstance: Integer; HoleType: Smallint): IDispatch; safecall;
    function GetHoleBottomMateEntity(HoleInstance: Integer; HoleType: Smallint): IDispatch; safecall;
    function IGetHoleTopMateEntity(HoleInstance: Integer; HoleType: Smallint): IEntity; safecall;
    function IGetHoleBottomMateEntity(HoleInstance: Integer; HoleType: Smallint): IEntity; safecall;
    function Get_Standard: Integer; safecall;
    function Get_type_(HoleSeriesWhichPart: Integer): Integer; safecall;
    function Get_Size(HoleSeriesWhichPart: Integer): WideString; safecall;
    function Get_Material: WideString; safecall;
    function Get_BoltHeadDiameter: Double; safecall;
    function Get_BoltDiameter: Double; safecall;
    function Get_Preload: WideString; safecall;
    function Get_NutDiameter: Double; safecall;
    function Get_StartFace: IDispatch; safecall;
    function Get_EndFace: IDispatch; safecall;
    function GetSketchPointsCount: Integer; safecall;
    function GetSketchPoints: OleVariant; safecall;
    function IGetSketchPoints(NCount: Integer): ISketchPoint; safecall;
    function GetComponentsCount: Integer; safecall;
    function GetComponents: OleVariant; safecall;
    function IGetComponents(NCount: Integer): IComponent2; safecall;
    property FastenerDefaultUnits: WideString read Get_FastenerDefaultUnits;
    property FastenerTopHoleType: Smallint read Get_FastenerTopHoleType;
    property FastenerBottomHoleType: Smallint read Get_FastenerBottomHoleType;
    property FastenerHoleCount: Integer read Get_FastenerHoleCount;
    property Standard: Integer read Get_Standard;
    property type_[HoleSeriesWhichPart: Integer]: Integer read Get_type_;
    property Size[HoleSeriesWhichPart: Integer]: WideString read Get_Size;
    property Material: WideString read Get_Material;
    property BoltHeadDiameter: Double read Get_BoltHeadDiameter;
    property BoltDiameter: Double read Get_BoltDiameter;
    property Preload: WideString read Get_Preload;
    property NutDiameter: Double read Get_NutDiameter;
    property StartFace: IDispatch read Get_StartFace;
    property EndFace: IDispatch read Get_EndFace;
  end;

// *********************************************************************//
// DispIntf:  IHoleSeriesFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {B1EDF95C-E764-486A-A82E-8402D6553992}
// *********************************************************************//
  IHoleSeriesFeatureDataDisp = dispinterface
    ['{B1EDF95C-E764-486A-A82E-8402D6553992}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property FastenerDefaultUnits: WideString readonly dispid 4;
    property FastenerTopHoleType: Smallint readonly dispid 5;
    property FastenerBottomHoleType: Smallint readonly dispid 6;
    property FastenerHoleCount: Integer readonly dispid 7;
    function GetHoleTopMateEntity(HoleInstance: Integer; HoleType: Smallint): IDispatch; dispid 8;
    function GetHoleBottomMateEntity(HoleInstance: Integer; HoleType: Smallint): IDispatch; dispid 9;
    function IGetHoleTopMateEntity(HoleInstance: Integer; HoleType: Smallint): IEntity; dispid 10;
    function IGetHoleBottomMateEntity(HoleInstance: Integer; HoleType: Smallint): IEntity; dispid 11;
    property Standard: Integer readonly dispid 12;
    property type_[HoleSeriesWhichPart: Integer]: Integer readonly dispid 13;
    property Size[HoleSeriesWhichPart: Integer]: WideString readonly dispid 14;
    property Material: WideString readonly dispid 15;
    property BoltHeadDiameter: Double readonly dispid 16;
    property BoltDiameter: Double readonly dispid 17;
    property Preload: WideString readonly dispid 18;
    property NutDiameter: Double readonly dispid 19;
    property StartFace: IDispatch readonly dispid 20;
    property EndFace: IDispatch readonly dispid 21;
    function GetSketchPointsCount: Integer; dispid 22;
    function GetSketchPoints: OleVariant; dispid 23;
    function IGetSketchPoints(NCount: Integer): ISketchPoint; dispid 24;
    function GetComponentsCount: Integer; dispid 25;
    function GetComponents: OleVariant; dispid 26;
    function IGetComponents(NCount: Integer): IComponent2; dispid 27;
  end;

// *********************************************************************//
// Interface: IChamferFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {7271D7C7-ACC9-11D3-B97F-001083029A97}
// *********************************************************************//
  IChamferFeatureData = interface(IUnknown)
    ['{7271D7C7-ACC9-11D3-B97F-001083029A97}']
    function GetEdgeChamferDistance(Side: SYSINT): Double; safecall;
    procedure SetEdgeChamferDistance(Side: SYSINT; Distance: Double); safecall;
    function GetVertexChamferDistance(Side: SYSINT): Double; safecall;
    procedure SetVertexChamferDistance(Side: SYSINT; Distance: Double); safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(Chamfer_type: SYSINT); safecall;
    function Get_EdgeChamferAngle: Double; safecall;
    procedure Set_EdgeChamferAngle(Angle: Double); safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property EdgeChamferAngle: Double read Get_EdgeChamferAngle write Set_EdgeChamferAngle;
  end;

// *********************************************************************//
// DispIntf:  IChamferFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {7271D7C7-ACC9-11D3-B97F-001083029A97}
// *********************************************************************//
  IChamferFeatureDataDisp = dispinterface
    ['{7271D7C7-ACC9-11D3-B97F-001083029A97}']
    function GetEdgeChamferDistance(Side: SYSINT): Double; dispid 1;
    procedure SetEdgeChamferDistance(Side: SYSINT; Distance: Double); dispid 2;
    function GetVertexChamferDistance(Side: SYSINT): Double; dispid 3;
    procedure SetVertexChamferDistance(Side: SYSINT; Distance: Double); dispid 4;
    property type_: SYSINT dispid 5;
    property EdgeChamferAngle: Double dispid 6;
  end;

// *********************************************************************//
// Interface: IDraftFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {BC633CE1-B367-11D3-B981-001083029A97}
// *********************************************************************//
  IDraftFeatureData = interface(IUnknown)
    ['{BC633CE1-B367-11D3-B981-001083029A97}']
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(Type_: SYSINT); safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Angle: Double); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property Angle: Double read Get_Angle write Set_Angle;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
  end;

// *********************************************************************//
// DispIntf:  IDraftFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {BC633CE1-B367-11D3-B981-001083029A97}
// *********************************************************************//
  IDraftFeatureDataDisp = dispinterface
    ['{BC633CE1-B367-11D3-B981-001083029A97}']
    property type_: SYSINT dispid 1;
    property Angle: Double dispid 2;
    property ReverseDirection: WordBool dispid 3;
  end;

// *********************************************************************//
// Interface: ISimpleFilletFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {CC929F0B-B404-11D3-B981-001083029A97}
// *********************************************************************//
  ISimpleFilletFeatureData = interface(IUnknown)
    ['{CC929F0B-B404-11D3-B981-001083029A97}']
    function Get_type_: SYSINT; safecall;
    function Get_DefaultRadius: Double; safecall;
    procedure Set_DefaultRadius(Radius: Double); safecall;
    function Get_OverflowType: SYSINT; safecall;
    procedure Set_OverflowType(Overflow_type: SYSINT); safecall;
    function Get_IsMultipleRadius: WordBool; safecall;
    procedure Set_IsMultipleRadius(IsMultipleRadius: WordBool); safecall;
    function Get_RoundCorners: WordBool; safecall;
    procedure Set_RoundCorners(RoundCorners: WordBool); safecall;
    function Get_PropagateToTangentFaces: WordBool; safecall;
    procedure Set_PropagateToTangentFaces(PropTgtFaces: WordBool); safecall;
    function Get_FilletItemsCount: SYSINT; safecall;
    function GetFilletItemAtIndex(Index: SYSINT): IDispatch; safecall;
    function IGetFilletItemAtIndex(Index: SYSINT): IUnknown; safecall;
    function GetRadius(const PFilletItem: IDispatch): Double; safecall;
    function IGetRadius(const PFilletItem: IUnknown): Double; safecall;
    procedure SetRadius(const PFilletItem: IDispatch; Radius: Double); safecall;
    procedure ISetRadius(const PFilletItem: IUnknown; Radius: Double); safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    property type_: SYSINT read Get_type_;
    property DefaultRadius: Double read Get_DefaultRadius write Set_DefaultRadius;
    property OverflowType: SYSINT read Get_OverflowType write Set_OverflowType;
    property IsMultipleRadius: WordBool read Get_IsMultipleRadius write Set_IsMultipleRadius;
    property RoundCorners: WordBool read Get_RoundCorners write Set_RoundCorners;
    property PropagateToTangentFaces: WordBool read Get_PropagateToTangentFaces write Set_PropagateToTangentFaces;
    property FilletItemsCount: SYSINT read Get_FilletItemsCount;
  end;

// *********************************************************************//
// DispIntf:  ISimpleFilletFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {CC929F0B-B404-11D3-B981-001083029A97}
// *********************************************************************//
  ISimpleFilletFeatureDataDisp = dispinterface
    ['{CC929F0B-B404-11D3-B981-001083029A97}']
    property type_: SYSINT readonly dispid 1;
    property DefaultRadius: Double dispid 2;
    property OverflowType: SYSINT dispid 3;
    property IsMultipleRadius: WordBool dispid 4;
    property RoundCorners: WordBool dispid 5;
    property PropagateToTangentFaces: WordBool dispid 6;
    property FilletItemsCount: SYSINT readonly dispid 7;
    function GetFilletItemAtIndex(Index: SYSINT): IDispatch; dispid 8;
    function IGetFilletItemAtIndex(Index: SYSINT): IUnknown; dispid 9;
    function GetRadius(const PFilletItem: IDispatch): Double; dispid 10;
    function IGetRadius(const PFilletItem: IUnknown): Double; dispid 11;
    procedure SetRadius(const PFilletItem: IDispatch; Radius: Double); dispid 12;
    procedure ISetRadius(const PFilletItem: IUnknown; Radius: Double); dispid 13;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 14;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 15;
    procedure ReleaseSelectionAccess; dispid 16;
  end;

// *********************************************************************//
// Interface: IVariableFilletFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {CC929F0D-B404-11D3-B981-001083029A97}
// *********************************************************************//
  IVariableFilletFeatureData = interface(IUnknown)
    ['{CC929F0D-B404-11D3-B981-001083029A97}']
    function Get_DefaultRadius: Double; safecall;
    procedure Set_DefaultRadius(Radius: Double); safecall;
    function Get_OverflowType: SYSINT; safecall;
    procedure Set_OverflowType(Overflow_type: SYSINT); safecall;
    function Get_TransitionType: SYSINT; safecall;
    procedure Set_TransitionType(Transition_type: SYSINT); safecall;
    function Get_PropagateToTangentFaces: WordBool; safecall;
    procedure Set_PropagateToTangentFaces(PropTgtFaces: WordBool); safecall;
    function Get_FilletEdgeCount: SYSINT; safecall;
    function GetFilletEdgeAtIndex(Index: SYSINT): IDispatch; safecall;
    function IGetFilletEdgeAtIndex(Index: SYSINT): IEdge; safecall;
    function GetRadius(const PFilletItem: IDispatch): Double; safecall;
    function IGetRadius(const PFilletItem: IVertex): Double; safecall;
    procedure SetRadius(const PFilletItem: IDispatch; Radius: Double); safecall;
    procedure ISetRadius(const PFilletItem: IVertex; Radius: Double); safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    property DefaultRadius: Double read Get_DefaultRadius write Set_DefaultRadius;
    property OverflowType: SYSINT read Get_OverflowType write Set_OverflowType;
    property TransitionType: SYSINT read Get_TransitionType write Set_TransitionType;
    property PropagateToTangentFaces: WordBool read Get_PropagateToTangentFaces write Set_PropagateToTangentFaces;
    property FilletEdgeCount: SYSINT read Get_FilletEdgeCount;
  end;

// *********************************************************************//
// DispIntf:  IVariableFilletFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {CC929F0D-B404-11D3-B981-001083029A97}
// *********************************************************************//
  IVariableFilletFeatureDataDisp = dispinterface
    ['{CC929F0D-B404-11D3-B981-001083029A97}']
    property DefaultRadius: Double dispid 1;
    property OverflowType: SYSINT dispid 2;
    property TransitionType: SYSINT dispid 3;
    property PropagateToTangentFaces: WordBool dispid 4;
    property FilletEdgeCount: SYSINT readonly dispid 5;
    function GetFilletEdgeAtIndex(Index: SYSINT): IDispatch; dispid 6;
    function IGetFilletEdgeAtIndex(Index: SYSINT): IEdge; dispid 7;
    function GetRadius(const PFilletItem: IDispatch): Double; dispid 8;
    function IGetRadius(const PFilletItem: IVertex): Double; dispid 9;
    procedure SetRadius(const PFilletItem: IDispatch; Radius: Double); dispid 10;
    procedure ISetRadius(const PFilletItem: IVertex; Radius: Double); dispid 11;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 12;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 13;
    procedure ReleaseSelectionAccess; dispid 14;
  end;

// *********************************************************************//
// Interface: IExtrudeFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {908A7175-B72C-11D3-B981-001083029A97}
// *********************************************************************//
  IExtrudeFeatureData = interface(IUnknown)
    ['{908A7175-B72C-11D3-B981-001083029A97}']
    function GetEndCondition(Forward: WordBool): SYSINT; safecall;
    procedure SetEndCondition(Forward: WordBool; EndCondition: SYSINT); safecall;
    function GetDepth(Forward: WordBool): Double; safecall;
    procedure SetDepth(Forward: WordBool; Depth: Double); safecall;
    function GetWallThickness(Forward: WordBool): Double; safecall;
    procedure SetWallThickness(Forward: WordBool; WallThickness: Double); safecall;
    function GetDraftWhileExtruding(Forward: WordBool): WordBool; safecall;
    procedure SetDraftWhileExtruding(Forward: WordBool; DraftWhileExtrude: WordBool); safecall;
    function GetDraftOutward(Forward: WordBool): WordBool; safecall;
    procedure SetDraftOutward(Forward: WordBool; DraftOutward: WordBool); safecall;
    function GetDraftAngle(Forward: WordBool): Double; safecall;
    procedure SetDraftAngle(Forward: WordBool; DraftAngle: Double); safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetFace(Forward: WordBool): IDispatch; safecall;
    procedure SetFace(Forward: WordBool; const Face: IDispatch); safecall;
    function IGetFace(Forward: WordBool): IFace; safecall;
    procedure ISetFace(Forward: WordBool; const Face: IFace); safecall;
    function GetVertex(Forward: WordBool): IDispatch; safecall;
    procedure SetVertex(Forward: WordBool; const Face: IDispatch); safecall;
    function IGetVertex(Forward: WordBool): IVertex; safecall;
    procedure ISetVertex(Forward: WordBool; const Face: IVertex); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_BothDirections: WordBool; safecall;
    procedure Set_BothDirections(BothDirections: WordBool); safecall;
    function Get_FlipSideToCut: WordBool; safecall;
    procedure Set_FlipSideToCut(Flip: WordBool); safecall;
    function IsBossFeature: WordBool; safecall;
    function IsThinFeature: WordBool; safecall;
    function IsBaseExtrude: WordBool; safecall;
    function Get_ThinWallType: SYSINT; safecall;
    procedure Set_ThinWallType(ThinWallType: SYSINT); safecall;
    function Get_CapEnds: WordBool; safecall;
    procedure Set_CapEnds(CapEnds: WordBool); safecall;
    function Get_CapThickness: Double; safecall;
    procedure Set_CapThickness(CapThickness: Double); safecall;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property BothDirections: WordBool read Get_BothDirections write Set_BothDirections;
    property FlipSideToCut: WordBool read Get_FlipSideToCut write Set_FlipSideToCut;
    property ThinWallType: SYSINT read Get_ThinWallType write Set_ThinWallType;
    property CapEnds: WordBool read Get_CapEnds write Set_CapEnds;
    property CapThickness: Double read Get_CapThickness write Set_CapThickness;
  end;

// *********************************************************************//
// DispIntf:  IExtrudeFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {908A7175-B72C-11D3-B981-001083029A97}
// *********************************************************************//
  IExtrudeFeatureDataDisp = dispinterface
    ['{908A7175-B72C-11D3-B981-001083029A97}']
    function GetEndCondition(Forward: WordBool): SYSINT; dispid 1;
    procedure SetEndCondition(Forward: WordBool; EndCondition: SYSINT); dispid 2;
    function GetDepth(Forward: WordBool): Double; dispid 3;
    procedure SetDepth(Forward: WordBool; Depth: Double); dispid 4;
    function GetWallThickness(Forward: WordBool): Double; dispid 5;
    procedure SetWallThickness(Forward: WordBool; WallThickness: Double); dispid 6;
    function GetDraftWhileExtruding(Forward: WordBool): WordBool; dispid 7;
    procedure SetDraftWhileExtruding(Forward: WordBool; DraftWhileExtrude: WordBool); dispid 8;
    function GetDraftOutward(Forward: WordBool): WordBool; dispid 9;
    procedure SetDraftOutward(Forward: WordBool; DraftOutward: WordBool); dispid 10;
    function GetDraftAngle(Forward: WordBool): Double; dispid 11;
    procedure SetDraftAngle(Forward: WordBool; DraftAngle: Double); dispid 12;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 13;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 14;
    procedure ReleaseSelectionAccess; dispid 15;
    function GetFace(Forward: WordBool): IDispatch; dispid 16;
    procedure SetFace(Forward: WordBool; const Face: IDispatch); dispid 17;
    function IGetFace(Forward: WordBool): IFace; dispid 18;
    procedure ISetFace(Forward: WordBool; const Face: IFace); dispid 19;
    function GetVertex(Forward: WordBool): IDispatch; dispid 20;
    procedure SetVertex(Forward: WordBool; const Face: IDispatch); dispid 21;
    function IGetVertex(Forward: WordBool): IVertex; dispid 22;
    procedure ISetVertex(Forward: WordBool; const Face: IVertex); dispid 23;
    property ReverseDirection: WordBool dispid 24;
    property BothDirections: WordBool dispid 25;
    property FlipSideToCut: WordBool dispid 26;
    function IsBossFeature: WordBool; dispid 27;
    function IsThinFeature: WordBool; dispid 28;
    function IsBaseExtrude: WordBool; dispid 29;
    property ThinWallType: SYSINT dispid 30;
    property CapEnds: WordBool dispid 31;
    property CapThickness: Double dispid 32;
  end;

// *********************************************************************//
// Interface: IRevolveFeatureData
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {B7FFF613-B735-11D3-B981-001083029A97}
// *********************************************************************//
  IRevolveFeatureData = interface(IUnknown)
    ['{B7FFF613-B735-11D3-B981-001083029A97}']
    function GetRevolutionAngle(Forward: WordBool): Double; safecall;
    procedure SetRevolutionAngle(Forward: WordBool; Angle: Double); safecall;
    function GetWallThickness(Forward: WordBool): Double; safecall;
    procedure SetWallThickness(Forward: WordBool; WallThickness: Double); safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(RevolveCut_type: SYSINT); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function IsBossFeature: WordBool; safecall;
    function IsThinFeature: WordBool; safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
  end;

// *********************************************************************//
// DispIntf:  IRevolveFeatureDataDisp
// Flags:     (336) Hidden Dual OleAutomation
// GUID:      {B7FFF613-B735-11D3-B981-001083029A97}
// *********************************************************************//
  IRevolveFeatureDataDisp = dispinterface
    ['{B7FFF613-B735-11D3-B981-001083029A97}']
    function GetRevolutionAngle(Forward: WordBool): Double; dispid 1;
    procedure SetRevolutionAngle(Forward: WordBool; Angle: Double); dispid 2;
    function GetWallThickness(Forward: WordBool): Double; dispid 3;
    procedure SetWallThickness(Forward: WordBool; WallThickness: Double); dispid 4;
    property type_: SYSINT dispid 5;
    property ReverseDirection: WordBool dispid 6;
    function IsBossFeature: WordBool; dispid 7;
    function IsThinFeature: WordBool; dispid 8;
  end;

// *********************************************************************//
// Interface: IMirrorPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {414F4F1E-30EC-11D4-AEEB-00C04F683CBA}
// *********************************************************************//
  IMirrorPatternFeatureData = interface(IDispatch)
    ['{414F4F1E-30EC-11D4-AEEB-00C04F683CBA}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Plane: IDispatch; safecall;
    procedure Set_Plane(const RefPlane: IDispatch); safecall;
    function GetMirrorPlaneType: Integer; safecall;
    function Get_PatternFeatureArray: OleVariant; safecall;
    procedure Set_PatternFeatureArray(ArrayOut: OleVariant); safecall;
    function GetPatternFeatureCount: Integer; safecall;
    function IGetPatternFeatureArray: IDispatch; safecall;
    procedure ISetPatternFeatureArray(FeatCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_GeometryPattern: WordBool; safecall;
    procedure Set_GeometryPattern(Geometry: WordBool); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function Get_MirrorFaceArray: OleVariant; safecall;
    procedure Set_MirrorFaceArray(ArrayOut: OleVariant); safecall;
    function GetMirrorFaceCount: Integer; safecall;
    function IGetMirrorFaceArray: IDispatch; safecall;
    procedure ISetMirrorFaceArray(FaceCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_PropagateVisualProperty: WordBool; safecall;
    procedure Set_PropagateVisualProperty(PropVisProp: WordBool); safecall;
    function Get_FeatureScope: Integer; safecall;
    procedure Set_FeatureScope(Option: Integer); safecall;
    function Get_FeatureScopeBodies: OleVariant; safecall;
    procedure Set_FeatureScopeBodies(BodyVar: OleVariant); safecall;
    function GetFeatureScopeBodiesCount: Integer; safecall;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; safecall;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); safecall;
    property Plane: IDispatch read Get_Plane write Set_Plane;
    property PatternFeatureArray: OleVariant read Get_PatternFeatureArray write Set_PatternFeatureArray;
    property GeometryPattern: WordBool read Get_GeometryPattern write Set_GeometryPattern;
    property MirrorFaceArray: OleVariant read Get_MirrorFaceArray write Set_MirrorFaceArray;
    property PropagateVisualProperty: WordBool read Get_PropagateVisualProperty write Set_PropagateVisualProperty;
    property FeatureScope: Integer read Get_FeatureScope write Set_FeatureScope;
    property FeatureScopeBodies: OleVariant read Get_FeatureScopeBodies write Set_FeatureScopeBodies;
  end;

// *********************************************************************//
// DispIntf:  IMirrorPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {414F4F1E-30EC-11D4-AEEB-00C04F683CBA}
// *********************************************************************//
  IMirrorPatternFeatureDataDisp = dispinterface
    ['{414F4F1E-30EC-11D4-AEEB-00C04F683CBA}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Plane: IDispatch dispid 4;
    function GetMirrorPlaneType: Integer; dispid 5;
    property PatternFeatureArray: OleVariant dispid 6;
    function GetPatternFeatureCount: Integer; dispid 7;
    function IGetPatternFeatureArray: IDispatch; dispid 8;
    procedure ISetPatternFeatureArray(FeatCount: Integer; var ArrayDataIn: IDispatch); dispid 9;
    property GeometryPattern: WordBool dispid 10;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 11;
    property MirrorFaceArray: OleVariant dispid 12;
    function GetMirrorFaceCount: Integer; dispid 13;
    function IGetMirrorFaceArray: IDispatch; dispid 14;
    procedure ISetMirrorFaceArray(FaceCount: Integer; var ArrayDataIn: IDispatch); dispid 15;
    property PropagateVisualProperty: WordBool dispid 16;
    property FeatureScope: Integer dispid 17;
    property FeatureScopeBodies: OleVariant dispid 18;
    function GetFeatureScopeBodiesCount: Integer; dispid 19;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; dispid 20;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); dispid 21;
  end;

// *********************************************************************//
// Interface: ICircularPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DBBF39DE-7AB5-11D4-AEB6-00C04FA0AC51}
// *********************************************************************//
  ICircularPatternFeatureData = interface(IDispatch)
    ['{DBBF39DE-7AB5-11D4-AEB6-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Axis: IDispatch; safecall;
    procedure Set_Axis(const RefAxis: IDispatch); safecall;
    function GetAxisType: Integer; safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_Spacing: Double; safecall;
    procedure Set_Spacing(Distance: Double); safecall;
    function Get_TotalInstances: Integer; safecall;
    procedure Set_TotalInstances(Count: Integer); safecall;
    function Get_EqualSpacing: WordBool; safecall;
    procedure Set_EqualSpacing(EqualSpacing: WordBool); safecall;
    function Get_VarySketch: WordBool; safecall;
    procedure Set_VarySketch(VarySketch: WordBool); safecall;
    function Get_GeometryPattern: WordBool; safecall;
    procedure Set_GeometryPattern(Geometry: WordBool); safecall;
    function Get_PatternFeatureArray: OleVariant; safecall;
    procedure Set_PatternFeatureArray(ArrayOut: OleVariant); safecall;
    function GetPatternFeatureCount: Integer; safecall;
    function IGetPatternFeatureArray: IDispatch; safecall;
    procedure ISetPatternFeatureArray(FeatCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_SkippedItemArray: OleVariant; safecall;
    procedure Set_SkippedItemArray(ArrayOut: OleVariant); safecall;
    function GetSkippedItemCount: Integer; safecall;
    function IGetSkippedItemArray: Integer; safecall;
    procedure ISetSkippedItemArray(FeatCount: Integer; var ArrayDataIn: Integer); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function Get_PatternFaceArray: OleVariant; safecall;
    procedure Set_PatternFaceArray(ArrayOut: OleVariant); safecall;
    function GetPatternFaceCount: Integer; safecall;
    function IGetPatternFaceArray: IDispatch; safecall;
    procedure ISetPatternFaceArray(FaceCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_PatternBodyArray: OleVariant; safecall;
    procedure Set_PatternBodyArray(ArrayOut: OleVariant); safecall;
    function GetPatternBodyCount: Integer; safecall;
    function IGetPatternBodyArray: IBody2; safecall;
    procedure ISetPatternBodyArray(BodyCount: Integer; var ArrayDataIn: IBody2); safecall;
    function Get_PropagateVisualProperty: WordBool; safecall;
    procedure Set_PropagateVisualProperty(PropVisProp: WordBool); safecall;
    property Axis: IDispatch read Get_Axis write Set_Axis;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property Spacing: Double read Get_Spacing write Set_Spacing;
    property TotalInstances: Integer read Get_TotalInstances write Set_TotalInstances;
    property EqualSpacing: WordBool read Get_EqualSpacing write Set_EqualSpacing;
    property VarySketch: WordBool read Get_VarySketch write Set_VarySketch;
    property GeometryPattern: WordBool read Get_GeometryPattern write Set_GeometryPattern;
    property PatternFeatureArray: OleVariant read Get_PatternFeatureArray write Set_PatternFeatureArray;
    property SkippedItemArray: OleVariant read Get_SkippedItemArray write Set_SkippedItemArray;
    property PatternFaceArray: OleVariant read Get_PatternFaceArray write Set_PatternFaceArray;
    property PatternBodyArray: OleVariant read Get_PatternBodyArray write Set_PatternBodyArray;
    property PropagateVisualProperty: WordBool read Get_PropagateVisualProperty write Set_PropagateVisualProperty;
  end;

// *********************************************************************//
// DispIntf:  ICircularPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DBBF39DE-7AB5-11D4-AEB6-00C04FA0AC51}
// *********************************************************************//
  ICircularPatternFeatureDataDisp = dispinterface
    ['{DBBF39DE-7AB5-11D4-AEB6-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Axis: IDispatch dispid 4;
    function GetAxisType: Integer; dispid 5;
    property ReverseDirection: WordBool dispid 6;
    property Spacing: Double dispid 7;
    property TotalInstances: Integer dispid 8;
    property EqualSpacing: WordBool dispid 9;
    property VarySketch: WordBool dispid 10;
    property GeometryPattern: WordBool dispid 11;
    property PatternFeatureArray: OleVariant dispid 12;
    function GetPatternFeatureCount: Integer; dispid 13;
    function IGetPatternFeatureArray: IDispatch; dispid 14;
    procedure ISetPatternFeatureArray(FeatCount: Integer; var ArrayDataIn: IDispatch); dispid 15;
    property SkippedItemArray: OleVariant dispid 16;
    function GetSkippedItemCount: Integer; dispid 17;
    function IGetSkippedItemArray: Integer; dispid 18;
    procedure ISetSkippedItemArray(FeatCount: Integer; var ArrayDataIn: Integer); dispid 19;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 20;
    property PatternFaceArray: OleVariant dispid 21;
    function GetPatternFaceCount: Integer; dispid 22;
    function IGetPatternFaceArray: IDispatch; dispid 23;
    procedure ISetPatternFaceArray(FaceCount: Integer; var ArrayDataIn: IDispatch); dispid 24;
    property PatternBodyArray: OleVariant dispid 25;
    function GetPatternBodyCount: Integer; dispid 26;
    function IGetPatternBodyArray: IBody2; dispid 27;
    procedure ISetPatternBodyArray(BodyCount: Integer; var ArrayDataIn: IBody2); dispid 28;
    property PropagateVisualProperty: WordBool dispid 29;
  end;

// *********************************************************************//
// Interface: ILinearPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F86D1E94-7DE8-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  ILinearPatternFeatureData = interface(IDispatch)
    ['{F86D1E94-7DE8-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_D1Axis: IDispatch; safecall;
    procedure Set_D1Axis(const RefAxis: IDispatch); safecall;
    function Get_D2Axis: IDispatch; safecall;
    procedure Set_D2Axis(const RefAxis: IDispatch); safecall;
    function GetD1AxisType: Integer; safecall;
    function GetD2AxisType: Integer; safecall;
    function Get_D1ReverseDirection: WordBool; safecall;
    procedure Set_D1ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_D2ReverseDirection: WordBool; safecall;
    procedure Set_D2ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_D1Spacing: Double; safecall;
    procedure Set_D1Spacing(Distance: Double); safecall;
    function Get_D2Spacing: Double; safecall;
    procedure Set_D2Spacing(Distance: Double); safecall;
    function Get_D1TotalInstances: Integer; safecall;
    procedure Set_D1TotalInstances(Count: Integer); safecall;
    function Get_D2TotalInstances: Integer; safecall;
    procedure Set_D2TotalInstances(Count: Integer); safecall;
    function Get_VarySketch: WordBool; safecall;
    procedure Set_VarySketch(VarySketch: WordBool); safecall;
    function Get_GeometryPattern: WordBool; safecall;
    procedure Set_GeometryPattern(Geometry: WordBool); safecall;
    function Get_PatternFeatureArray: OleVariant; safecall;
    procedure Set_PatternFeatureArray(ArrayOut: OleVariant); safecall;
    function GetPatternFeatureCount: Integer; safecall;
    function IGetPatternFeatureArray: IDispatch; safecall;
    procedure ISetPatternFeatureArray(FeatCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_SkippedItemArray: OleVariant; safecall;
    procedure Set_SkippedItemArray(ArrayOut: OleVariant); safecall;
    function GetSkippedItemCount: Integer; safecall;
    function IGetSkippedItemArray: Integer; safecall;
    procedure ISetSkippedItemArray(FeatCount: Integer; var ArrayDataIn: Integer); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function Get_PatternFaceArray: OleVariant; safecall;
    procedure Set_PatternFaceArray(ArrayOut: OleVariant); safecall;
    function GetPatternFaceCount: Integer; safecall;
    function IGetPatternFaceArray: IDispatch; safecall;
    procedure ISetPatternFaceArray(FaceCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_D2PatternSeedOnly: WordBool; safecall;
    procedure Set_D2PatternSeedOnly(SeedOnly: WordBool); safecall;
    function IsDirection2Specified: WordBool; safecall;
    function Get_PatternBodyArray: OleVariant; safecall;
    procedure Set_PatternBodyArray(ArrayOut: OleVariant); safecall;
    function GetPatternBodyCount: Integer; safecall;
    function IGetPatternBodyArray: IBody2; safecall;
    procedure ISetPatternBodyArray(BodyCount: Integer; var ArrayDataIn: IBody2); safecall;
    function Get_PropagateVisualProperty: WordBool; safecall;
    procedure Set_PropagateVisualProperty(PropVisProp: WordBool); safecall;
    property D1Axis: IDispatch read Get_D1Axis write Set_D1Axis;
    property D2Axis: IDispatch read Get_D2Axis write Set_D2Axis;
    property D1ReverseDirection: WordBool read Get_D1ReverseDirection write Set_D1ReverseDirection;
    property D2ReverseDirection: WordBool read Get_D2ReverseDirection write Set_D2ReverseDirection;
    property D1Spacing: Double read Get_D1Spacing write Set_D1Spacing;
    property D2Spacing: Double read Get_D2Spacing write Set_D2Spacing;
    property D1TotalInstances: Integer read Get_D1TotalInstances write Set_D1TotalInstances;
    property D2TotalInstances: Integer read Get_D2TotalInstances write Set_D2TotalInstances;
    property VarySketch: WordBool read Get_VarySketch write Set_VarySketch;
    property GeometryPattern: WordBool read Get_GeometryPattern write Set_GeometryPattern;
    property PatternFeatureArray: OleVariant read Get_PatternFeatureArray write Set_PatternFeatureArray;
    property SkippedItemArray: OleVariant read Get_SkippedItemArray write Set_SkippedItemArray;
    property PatternFaceArray: OleVariant read Get_PatternFaceArray write Set_PatternFaceArray;
    property D2PatternSeedOnly: WordBool read Get_D2PatternSeedOnly write Set_D2PatternSeedOnly;
    property PatternBodyArray: OleVariant read Get_PatternBodyArray write Set_PatternBodyArray;
    property PropagateVisualProperty: WordBool read Get_PropagateVisualProperty write Set_PropagateVisualProperty;
  end;

// *********************************************************************//
// DispIntf:  ILinearPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F86D1E94-7DE8-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  ILinearPatternFeatureDataDisp = dispinterface
    ['{F86D1E94-7DE8-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property D1Axis: IDispatch dispid 4;
    property D2Axis: IDispatch dispid 5;
    function GetD1AxisType: Integer; dispid 6;
    function GetD2AxisType: Integer; dispid 7;
    property D1ReverseDirection: WordBool dispid 8;
    property D2ReverseDirection: WordBool dispid 9;
    property D1Spacing: Double dispid 10;
    property D2Spacing: Double dispid 11;
    property D1TotalInstances: Integer dispid 12;
    property D2TotalInstances: Integer dispid 13;
    property VarySketch: WordBool dispid 14;
    property GeometryPattern: WordBool dispid 15;
    property PatternFeatureArray: OleVariant dispid 16;
    function GetPatternFeatureCount: Integer; dispid 17;
    function IGetPatternFeatureArray: IDispatch; dispid 18;
    procedure ISetPatternFeatureArray(FeatCount: Integer; var ArrayDataIn: IDispatch); dispid 19;
    property SkippedItemArray: OleVariant dispid 20;
    function GetSkippedItemCount: Integer; dispid 21;
    function IGetSkippedItemArray: Integer; dispid 22;
    procedure ISetSkippedItemArray(FeatCount: Integer; var ArrayDataIn: Integer); dispid 23;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 24;
    property PatternFaceArray: OleVariant dispid 25;
    function GetPatternFaceCount: Integer; dispid 26;
    function IGetPatternFaceArray: IDispatch; dispid 27;
    procedure ISetPatternFaceArray(FaceCount: Integer; var ArrayDataIn: IDispatch); dispid 28;
    property D2PatternSeedOnly: WordBool dispid 29;
    function IsDirection2Specified: WordBool; dispid 30;
    property PatternBodyArray: OleVariant dispid 31;
    function GetPatternBodyCount: Integer; dispid 32;
    function IGetPatternBodyArray: IBody2; dispid 33;
    procedure ISetPatternBodyArray(BodyCount: Integer; var ArrayDataIn: IBody2); dispid 34;
    property PropagateVisualProperty: WordBool dispid 35;
  end;

// *********************************************************************//
// Interface: ITablePatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E5D1AF7C-7F5D-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  ITablePatternFeatureData = interface(IDispatch)
    ['{E5D1AF7C-7F5D-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_CoordinateSystem: IDispatch; safecall;
    procedure Set_CoordinateSystem(const RefCoord: IDispatch); safecall;
    function Get_ReferencePoint: IDispatch; safecall;
    procedure Set_ReferencePoint(const RefPoint: IDispatch); safecall;
    function GetReferencePointType: Integer; safecall;
    function Get_UseCentroid: WordBool; safecall;
    procedure Set_UseCentroid(UseCentroid: WordBool); safecall;
    function SavePointsToFile(const FileName: WideString): WordBool; safecall;
    function LoadPointsFromFile(const FileName: WideString): WordBool; safecall;
    function GetBasePoint: OleVariant; safecall;
    function IGetBasePoint: Double; safecall;
    function Get_GeometryPattern: WordBool; safecall;
    procedure Set_GeometryPattern(Geometry: WordBool); safecall;
    function Get_PatternFeatureArray: OleVariant; safecall;
    procedure Set_PatternFeatureArray(ArrayOut: OleVariant); safecall;
    function GetPatternFeatureCount: Integer; safecall;
    function IGetPatternFeatureArray: IDispatch; safecall;
    procedure ISetPatternFeatureArray(FeatCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_PointArray: OleVariant; safecall;
    procedure Set_PointArray(ArrayOut: OleVariant); safecall;
    function GetPointCount: Integer; safecall;
    function IGetPointArray: Double; safecall;
    procedure ISetPointArray(FeatCount: Integer; var ArrayDataIn: Double); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function Get_PatternFaceArray: OleVariant; safecall;
    procedure Set_PatternFaceArray(ArrayOut: OleVariant); safecall;
    function GetPatternFaceCount: Integer; safecall;
    function IGetPatternFaceArray: IDispatch; safecall;
    procedure ISetPatternFaceArray(FaceCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_PatternBodyArray: OleVariant; safecall;
    procedure Set_PatternBodyArray(ArrayOut: OleVariant); safecall;
    function GetPatternBodyCount: Integer; safecall;
    function IGetPatternBodyArray: IBody2; safecall;
    procedure ISetPatternBodyArray(BodyCount: Integer; var ArrayDataIn: IBody2); safecall;
    function Get_SkippedItemArray: OleVariant; safecall;
    procedure Set_SkippedItemArray(ArrayOut: OleVariant); safecall;
    function GetSkippedItemCount: Integer; safecall;
    function IGetSkippedItemArray(Count: Integer): Integer; safecall;
    procedure ISetSkippedItemArray(Count: Integer; var ArrayDataIn: Integer); safecall;
    function Get_PropagateVisualProperty: WordBool; safecall;
    procedure Set_PropagateVisualProperty(PropVisProp: WordBool); safecall;
    property CoordinateSystem: IDispatch read Get_CoordinateSystem write Set_CoordinateSystem;
    property ReferencePoint: IDispatch read Get_ReferencePoint write Set_ReferencePoint;
    property UseCentroid: WordBool read Get_UseCentroid write Set_UseCentroid;
    property GeometryPattern: WordBool read Get_GeometryPattern write Set_GeometryPattern;
    property PatternFeatureArray: OleVariant read Get_PatternFeatureArray write Set_PatternFeatureArray;
    property PointArray: OleVariant read Get_PointArray write Set_PointArray;
    property PatternFaceArray: OleVariant read Get_PatternFaceArray write Set_PatternFaceArray;
    property PatternBodyArray: OleVariant read Get_PatternBodyArray write Set_PatternBodyArray;
    property SkippedItemArray: OleVariant read Get_SkippedItemArray write Set_SkippedItemArray;
    property PropagateVisualProperty: WordBool read Get_PropagateVisualProperty write Set_PropagateVisualProperty;
  end;

// *********************************************************************//
// DispIntf:  ITablePatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E5D1AF7C-7F5D-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  ITablePatternFeatureDataDisp = dispinterface
    ['{E5D1AF7C-7F5D-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property CoordinateSystem: IDispatch dispid 4;
    property ReferencePoint: IDispatch dispid 5;
    function GetReferencePointType: Integer; dispid 6;
    property UseCentroid: WordBool dispid 7;
    function SavePointsToFile(const FileName: WideString): WordBool; dispid 8;
    function LoadPointsFromFile(const FileName: WideString): WordBool; dispid 9;
    function GetBasePoint: OleVariant; dispid 10;
    function IGetBasePoint: Double; dispid 11;
    property GeometryPattern: WordBool dispid 12;
    property PatternFeatureArray: OleVariant dispid 13;
    function GetPatternFeatureCount: Integer; dispid 14;
    function IGetPatternFeatureArray: IDispatch; dispid 15;
    procedure ISetPatternFeatureArray(FeatCount: Integer; var ArrayDataIn: IDispatch); dispid 16;
    property PointArray: OleVariant dispid 17;
    function GetPointCount: Integer; dispid 18;
    function IGetPointArray: Double; dispid 19;
    procedure ISetPointArray(FeatCount: Integer; var ArrayDataIn: Double); dispid 20;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 21;
    property PatternFaceArray: OleVariant dispid 22;
    function GetPatternFaceCount: Integer; dispid 23;
    function IGetPatternFaceArray: IDispatch; dispid 24;
    procedure ISetPatternFaceArray(FaceCount: Integer; var ArrayDataIn: IDispatch); dispid 25;
    property PatternBodyArray: OleVariant dispid 26;
    function GetPatternBodyCount: Integer; dispid 27;
    function IGetPatternBodyArray: IBody2; dispid 28;
    procedure ISetPatternBodyArray(BodyCount: Integer; var ArrayDataIn: IBody2); dispid 29;
    property SkippedItemArray: OleVariant dispid 30;
    function GetSkippedItemCount: Integer; dispid 31;
    function IGetSkippedItemArray(Count: Integer): Integer; dispid 32;
    procedure ISetSkippedItemArray(Count: Integer; var ArrayDataIn: Integer); dispid 33;
    property PropagateVisualProperty: WordBool dispid 34;
  end;

// *********************************************************************//
// Interface: ISketchPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AE998464-8050-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  ISketchPatternFeatureData = interface(IDispatch)
    ['{AE998464-8050-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Sketch: IDispatch; safecall;
    procedure Set_Sketch(const Sketch: IDispatch); safecall;
    function Get_ReferencePoint: IDispatch; safecall;
    procedure Set_ReferencePoint(const RefPoint: IDispatch); safecall;
    function GetReferencePointType: Integer; safecall;
    function Get_UseCentroid: WordBool; safecall;
    procedure Set_UseCentroid(UseCentroid: WordBool); safecall;
    function GetBasePoint: OleVariant; safecall;
    function IGetBasePoint: Double; safecall;
    function Get_GeometryPattern: WordBool; safecall;
    procedure Set_GeometryPattern(Geometry: WordBool); safecall;
    function Get_PatternFeatureArray: OleVariant; safecall;
    procedure Set_PatternFeatureArray(ArrayOut: OleVariant); safecall;
    function GetPatternFeatureCount: Integer; safecall;
    function IGetPatternFeatureArray: IDispatch; safecall;
    procedure ISetPatternFeatureArray(FeatCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function Get_PatternFaceArray: OleVariant; safecall;
    procedure Set_PatternFaceArray(ArrayOut: OleVariant); safecall;
    function GetPatternFaceCount: Integer; safecall;
    function IGetPatternFaceArray: IDispatch; safecall;
    procedure ISetPatternFaceArray(FaceCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_PatternBodyArray: OleVariant; safecall;
    procedure Set_PatternBodyArray(ArrayOut: OleVariant); safecall;
    function GetPatternBodyCount: Integer; safecall;
    function IGetPatternBodyArray: IBody2; safecall;
    procedure ISetPatternBodyArray(BodyCount: Integer; var ArrayDataIn: IBody2); safecall;
    function Get_PropagateVisualProperty: WordBool; safecall;
    procedure Set_PropagateVisualProperty(PropVisProp: WordBool); safecall;
    property Sketch: IDispatch read Get_Sketch write Set_Sketch;
    property ReferencePoint: IDispatch read Get_ReferencePoint write Set_ReferencePoint;
    property UseCentroid: WordBool read Get_UseCentroid write Set_UseCentroid;
    property GeometryPattern: WordBool read Get_GeometryPattern write Set_GeometryPattern;
    property PatternFeatureArray: OleVariant read Get_PatternFeatureArray write Set_PatternFeatureArray;
    property PatternFaceArray: OleVariant read Get_PatternFaceArray write Set_PatternFaceArray;
    property PatternBodyArray: OleVariant read Get_PatternBodyArray write Set_PatternBodyArray;
    property PropagateVisualProperty: WordBool read Get_PropagateVisualProperty write Set_PropagateVisualProperty;
  end;

// *********************************************************************//
// DispIntf:  ISketchPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AE998464-8050-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  ISketchPatternFeatureDataDisp = dispinterface
    ['{AE998464-8050-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Sketch: IDispatch dispid 4;
    property ReferencePoint: IDispatch dispid 5;
    function GetReferencePointType: Integer; dispid 6;
    property UseCentroid: WordBool dispid 7;
    function GetBasePoint: OleVariant; dispid 8;
    function IGetBasePoint: Double; dispid 9;
    property GeometryPattern: WordBool dispid 10;
    property PatternFeatureArray: OleVariant dispid 11;
    function GetPatternFeatureCount: Integer; dispid 12;
    function IGetPatternFeatureArray: IDispatch; dispid 13;
    procedure ISetPatternFeatureArray(FeatCount: Integer; var ArrayDataIn: IDispatch); dispid 14;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 15;
    property PatternFaceArray: OleVariant dispid 16;
    function GetPatternFaceCount: Integer; dispid 17;
    function IGetPatternFaceArray: IDispatch; dispid 18;
    procedure ISetPatternFaceArray(FaceCount: Integer; var ArrayDataIn: IDispatch); dispid 19;
    property PatternBodyArray: OleVariant dispid 20;
    function GetPatternBodyCount: Integer; dispid 21;
    function IGetPatternBodyArray: IBody2; dispid 22;
    procedure ISetPatternBodyArray(BodyCount: Integer; var ArrayDataIn: IBody2); dispid 23;
    property PropagateVisualProperty: WordBool dispid 24;
  end;

// *********************************************************************//
// Interface: IMirrorSolidFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E9172718-836B-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  IMirrorSolidFeatureData = interface(IDispatch)
    ['{E9172718-836B-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Face: IDispatch; safecall;
    procedure Set_Face(const RefFace: IDispatch); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function Get_PatternBodyArray: OleVariant; safecall;
    procedure Set_PatternBodyArray(ArrayOut: OleVariant); safecall;
    function GetPatternBodyCount: Integer; safecall;
    function IGetPatternBodyArray: IBody2; safecall;
    procedure ISetPatternBodyArray(BodyCount: Integer; var ArrayDataIn: IBody2); safecall;
    function Get_Merge: WordBool; safecall;
    procedure Set_Merge(BMerge: WordBool); safecall;
    function Get_KnitSurface: WordBool; safecall;
    procedure Set_KnitSurface(BKnit: WordBool); safecall;
    function Get_PropagateVisualProperty: WordBool; safecall;
    procedure Set_PropagateVisualProperty(PropVisProp: WordBool); safecall;
    property Face: IDispatch read Get_Face write Set_Face;
    property PatternBodyArray: OleVariant read Get_PatternBodyArray write Set_PatternBodyArray;
    property Merge: WordBool read Get_Merge write Set_Merge;
    property KnitSurface: WordBool read Get_KnitSurface write Set_KnitSurface;
    property PropagateVisualProperty: WordBool read Get_PropagateVisualProperty write Set_PropagateVisualProperty;
  end;

// *********************************************************************//
// DispIntf:  IMirrorSolidFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E9172718-836B-11D4-AEB7-00C04FA0AC51}
// *********************************************************************//
  IMirrorSolidFeatureDataDisp = dispinterface
    ['{E9172718-836B-11D4-AEB7-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Face: IDispatch dispid 4;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 5;
    property PatternBodyArray: OleVariant dispid 6;
    function GetPatternBodyCount: Integer; dispid 7;
    function IGetPatternBodyArray: IBody2; dispid 8;
    procedure ISetPatternBodyArray(BodyCount: Integer; var ArrayDataIn: IBody2); dispid 9;
    property Merge: WordBool dispid 10;
    property KnitSurface: WordBool dispid 11;
    property PropagateVisualProperty: WordBool dispid 12;
  end;

// *********************************************************************//
// Interface: ISheetMetalFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2F6C1E88-F2D6-11D4-AED5-00C04FA0AC51}
// *********************************************************************//
  ISheetMetalFeatureData = interface(IDispatch)
    ['{2F6C1E88-F2D6-11D4-AED5-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(Radius: Double); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Get_FixedReference: IDispatch; safecall;
    procedure Set_FixedReference(const FixedReference: IDispatch); safecall;
    function Get_BendAllowanceType: Integer; safecall;
    procedure Set_BendAllowanceType(BendAllowanceType: Integer); safecall;
    function Get_BendTableFile: WideString; safecall;
    procedure Set_BendTableFile(const BendTableFile: WideString); safecall;
    function Get_KFactor: Double; safecall;
    procedure Set_KFactor(KFactor: Double); safecall;
    function Get_BendAllowance: Double; safecall;
    procedure Set_BendAllowance(BendAllowance: Double); safecall;
    function Get_UseAutoRelief: WordBool; safecall;
    procedure Set_UseAutoRelief(AutoRelief: WordBool); safecall;
    function Get_AutoReliefType: Integer; safecall;
    procedure Set_AutoReliefType(AutoReliefType: Integer); safecall;
    function Get_ReliefRatio: Double; safecall;
    procedure Set_ReliefRatio(ReliefRatio: Double); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); safecall;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property FixedReference: IDispatch read Get_FixedReference write Set_FixedReference;
    property BendAllowanceType: Integer read Get_BendAllowanceType write Set_BendAllowanceType;
    property BendTableFile: WideString read Get_BendTableFile write Set_BendTableFile;
    property KFactor: Double read Get_KFactor write Set_KFactor;
    property BendAllowance: Double read Get_BendAllowance write Set_BendAllowance;
    property UseAutoRelief: WordBool read Get_UseAutoRelief write Set_UseAutoRelief;
    property AutoReliefType: Integer read Get_AutoReliefType write Set_AutoReliefType;
    property ReliefRatio: Double read Get_ReliefRatio write Set_ReliefRatio;
  end;

// *********************************************************************//
// DispIntf:  ISheetMetalFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2F6C1E88-F2D6-11D4-AED5-00C04FA0AC51}
// *********************************************************************//
  ISheetMetalFeatureDataDisp = dispinterface
    ['{2F6C1E88-F2D6-11D4-AED5-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property BendRadius: Double dispid 4;
    property Thickness: Double dispid 5;
    property FixedReference: IDispatch dispid 6;
    property BendAllowanceType: Integer dispid 7;
    property BendTableFile: WideString dispid 8;
    property KFactor: Double dispid 9;
    property BendAllowance: Double dispid 10;
    property UseAutoRelief: WordBool dispid 11;
    property AutoReliefType: Integer dispid 12;
    property ReliefRatio: Double dispid 13;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 14;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 15;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); dispid 16;
  end;

// *********************************************************************//
// Interface: IOneBendFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0C02AD40-F6E6-11D4-AED6-00C04FA0AC51}
// *********************************************************************//
  IOneBendFeatureData = interface(IDispatch)
    ['{0C02AD40-F6E6-11D4-AED6-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(Radius: Double); safecall;
    function Get_BendAllowanceType: Integer; safecall;
    procedure Set_BendAllowanceType(BendAllowanceType: Integer); safecall;
    function Get_BendTableFile: WideString; safecall;
    procedure Set_BendTableFile(const BendTableFile: WideString); safecall;
    function Get_KFactor: Double; safecall;
    procedure Set_KFactor(KFactor: Double); safecall;
    function Get_BendAllowance: Double; safecall;
    procedure Set_BendAllowance(BendAllowance: Double); safecall;
    function Get_UseAutoRelief: WordBool; safecall;
    procedure Set_UseAutoRelief(AutoRelief: WordBool); safecall;
    function Get_AutoReliefType: Integer; safecall;
    procedure Set_AutoReliefType(AutoReliefType: Integer); safecall;
    function Get_UseDefaultBendRadius: WordBool; safecall;
    procedure Set_UseDefaultBendRadius(UseDefaultBendRadius: WordBool); safecall;
    function Get_UseDefaultBendAllowance: WordBool; safecall;
    procedure Set_UseDefaultBendAllowance(UseDefaultBendAllowance: WordBool); safecall;
    function Get_UseDefaultBendRelief: WordBool; safecall;
    procedure Set_UseDefaultBendRelief(UseDefaultBendRelief: WordBool); safecall;
    function Get_BendDown: WordBool; safecall;
    procedure Set_BendDown(BendDown: WordBool); safecall;
    function Get_BendAngle: Double; safecall;
    procedure Set_BendAngle(BendAngle: Double); safecall;
    function Get_BendOrder: Integer; safecall;
    procedure Set_BendOrder(BendOrder: Integer); safecall;
    function Get_ReliefWidth: Double; safecall;
    procedure Set_ReliefWidth(ReliefWidth: Double); safecall;
    function Get_ReliefDepth: Double; safecall;
    procedure Set_ReliefDepth(ReliefDepth: Double); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function GetType: Integer; safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); safecall;
    function Get_SimplifyGeometry: WordBool; safecall;
    procedure Set_SimplifyGeometry(Retval: WordBool); safecall;
    function Get_UseReliefRatio: WordBool; safecall;
    procedure Set_UseReliefRatio(Retval: WordBool); safecall;
    function Get_ReliefRatio: Double; safecall;
    procedure Set_ReliefRatio(Retval: Double); safecall;
    function Get_FlatPatternSketchSegment: ISketchSegment; safecall;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property BendAllowanceType: Integer read Get_BendAllowanceType write Set_BendAllowanceType;
    property BendTableFile: WideString read Get_BendTableFile write Set_BendTableFile;
    property KFactor: Double read Get_KFactor write Set_KFactor;
    property BendAllowance: Double read Get_BendAllowance write Set_BendAllowance;
    property UseAutoRelief: WordBool read Get_UseAutoRelief write Set_UseAutoRelief;
    property AutoReliefType: Integer read Get_AutoReliefType write Set_AutoReliefType;
    property UseDefaultBendRadius: WordBool read Get_UseDefaultBendRadius write Set_UseDefaultBendRadius;
    property UseDefaultBendAllowance: WordBool read Get_UseDefaultBendAllowance write Set_UseDefaultBendAllowance;
    property UseDefaultBendRelief: WordBool read Get_UseDefaultBendRelief write Set_UseDefaultBendRelief;
    property BendDown: WordBool read Get_BendDown write Set_BendDown;
    property BendAngle: Double read Get_BendAngle write Set_BendAngle;
    property BendOrder: Integer read Get_BendOrder write Set_BendOrder;
    property ReliefWidth: Double read Get_ReliefWidth write Set_ReliefWidth;
    property ReliefDepth: Double read Get_ReliefDepth write Set_ReliefDepth;
    property SimplifyGeometry: WordBool read Get_SimplifyGeometry write Set_SimplifyGeometry;
    property UseReliefRatio: WordBool read Get_UseReliefRatio write Set_UseReliefRatio;
    property ReliefRatio: Double read Get_ReliefRatio write Set_ReliefRatio;
    property FlatPatternSketchSegment: ISketchSegment read Get_FlatPatternSketchSegment;
  end;

// *********************************************************************//
// DispIntf:  IOneBendFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0C02AD40-F6E6-11D4-AED6-00C04FA0AC51}
// *********************************************************************//
  IOneBendFeatureDataDisp = dispinterface
    ['{0C02AD40-F6E6-11D4-AED6-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property BendRadius: Double dispid 4;
    property BendAllowanceType: Integer dispid 5;
    property BendTableFile: WideString dispid 6;
    property KFactor: Double dispid 7;
    property BendAllowance: Double dispid 8;
    property UseAutoRelief: WordBool dispid 9;
    property AutoReliefType: Integer dispid 10;
    property UseDefaultBendRadius: WordBool dispid 11;
    property UseDefaultBendAllowance: WordBool dispid 12;
    property UseDefaultBendRelief: WordBool dispid 13;
    property BendDown: WordBool dispid 14;
    property BendAngle: Double dispid 15;
    property BendOrder: Integer dispid 16;
    property ReliefWidth: Double dispid 17;
    property ReliefDepth: Double dispid 18;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 19;
    function GetType: Integer; dispid 20;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 21;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); dispid 22;
    property SimplifyGeometry: WordBool dispid 23;
    property UseReliefRatio: WordBool dispid 24;
    property ReliefRatio: Double dispid 25;
    property FlatPatternSketchSegment: ISketchSegment readonly dispid 26;
  end;

// *********************************************************************//
// Interface: IBendsFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F3BDB64E-F7C6-11D4-AED6-00C04FA0AC51}
// *********************************************************************//
  IBendsFeatureData = interface(IDispatch)
    ['{F3BDB64E-F7C6-11D4-AED6-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(Radius: Double); safecall;
    function Get_BendAllowanceType: Integer; safecall;
    procedure Set_BendAllowanceType(BendAllowanceType: Integer); safecall;
    function Get_BendTableFile: WideString; safecall;
    procedure Set_BendTableFile(const BendTableFile: WideString); safecall;
    function Get_KFactor: Double; safecall;
    procedure Set_KFactor(KFactor: Double); safecall;
    function Get_BendAllowance: Double; safecall;
    procedure Set_BendAllowance(BendAllowance: Double); safecall;
    function Get_UseDefaultBendRadius: WordBool; safecall;
    procedure Set_UseDefaultBendRadius(UseDefaultBendRadius: WordBool); safecall;
    function Get_UseDefaultBendAllowance: WordBool; safecall;
    procedure Set_UseDefaultBendAllowance(UseDefaultBendAllowance: WordBool); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); safecall;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property BendAllowanceType: Integer read Get_BendAllowanceType write Set_BendAllowanceType;
    property BendTableFile: WideString read Get_BendTableFile write Set_BendTableFile;
    property KFactor: Double read Get_KFactor write Set_KFactor;
    property BendAllowance: Double read Get_BendAllowance write Set_BendAllowance;
    property UseDefaultBendRadius: WordBool read Get_UseDefaultBendRadius write Set_UseDefaultBendRadius;
    property UseDefaultBendAllowance: WordBool read Get_UseDefaultBendAllowance write Set_UseDefaultBendAllowance;
  end;

// *********************************************************************//
// DispIntf:  IBendsFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F3BDB64E-F7C6-11D4-AED6-00C04FA0AC51}
// *********************************************************************//
  IBendsFeatureDataDisp = dispinterface
    ['{F3BDB64E-F7C6-11D4-AED6-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property BendRadius: Double dispid 4;
    property BendAllowanceType: Integer dispid 5;
    property BendTableFile: WideString dispid 6;
    property KFactor: Double dispid 7;
    property BendAllowance: Double dispid 8;
    property UseDefaultBendRadius: WordBool dispid 9;
    property UseDefaultBendAllowance: WordBool dispid 10;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 11;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 12;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); dispid 13;
  end;

// *********************************************************************//
// Interface: IBaseFlangeFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C61E9DD6-0813-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IBaseFlangeFeatureData = interface(IDispatch)
    ['{C61E9DD6-0813-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_OffsetDirections: Integer; safecall;
    procedure Set_OffsetDirections(Count: Integer); safecall;
    function Get_D1OffsetType: Integer; safecall;
    procedure Set_D1OffsetType(OffsetType: Integer); safecall;
    function Get_D2OffsetType: Integer; safecall;
    procedure Set_D2OffsetType(OffsetType: Integer); safecall;
    function GetD1OffsetReferenceType: Integer; safecall;
    function GetD2OffsetReferenceType: Integer; safecall;
    function Get_D1OffsetReference: IDispatch; safecall;
    procedure Set_D1OffsetReference(const OffsetReference: IDispatch); safecall;
    function Get_D2OffsetReference: IDispatch; safecall;
    procedure Set_D2OffsetReference(const OffsetReference: IDispatch); safecall;
    function Get_D1OffsetDistance: Double; safecall;
    procedure Set_D1OffsetDistance(OffsetDistance: Double); safecall;
    function Get_D2OffsetDistance: Double; safecall;
    procedure Set_D2OffsetDistance(OffsetDistance: Double); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Get_ReverseThickness: WordBool; safecall;
    procedure Set_ReverseThickness(ReverseThickness: WordBool); safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(Radius: Double); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function Get_D1ReverseOffset: WordBool; safecall;
    procedure Set_D1ReverseOffset(RevOffset: WordBool); safecall;
    function Get_D2ReverseOffset: WordBool; safecall;
    procedure Set_D2ReverseOffset(RevOffset: WordBool); safecall;
    function Get_UseGaugeTable: WordBool; safecall;
    procedure Set_UseGaugeTable(Retval: WordBool); safecall;
    function Get_GaugeTablePath: WideString; safecall;
    procedure Set_GaugeTablePath(const Path: WideString); safecall;
    function Get_ThicknessTableName: WideString; safecall;
    procedure Set_ThicknessTableName(const TableName: WideString); safecall;
    function Get_TableThickness: Double; safecall;
    procedure Set_TableThickness(Thickness: Double); safecall;
    function Get_OverrideThickness: WordBool; safecall;
    procedure Set_OverrideThickness(Retval: WordBool); safecall;
    function Get_TableRadius: Double; safecall;
    procedure Set_TableRadius(Radius: Double); safecall;
    function Get_OverrideRadius: WordBool; safecall;
    procedure Set_OverrideRadius(Retval: WordBool); safecall;
    function Get_KFactor: Double; safecall;
    procedure Set_KFactor(Retval: Double); safecall;
    function Get_OverrideKFactor: WordBool; safecall;
    procedure Set_OverrideKFactor(Retval: WordBool); safecall;
    function GetTableThicknessesCount: Integer; safecall;
    function GetTableThicknesses: OleVariant; safecall;
    function IGetTableThicknesses(NCount: Integer): WideString; safecall;
    function GetTableRadiiCount(const ThicknessTableName: WideString): Integer; safecall;
    function GetTableRadii(const ThicknessTableName: WideString): OleVariant; safecall;
    function IGetTableRadii(const ThicknessTableName: WideString; NCount: Integer): Double; safecall;
    function Get_TableKFactor: Double; safecall;
    property OffsetDirections: Integer read Get_OffsetDirections write Set_OffsetDirections;
    property D1OffsetType: Integer read Get_D1OffsetType write Set_D1OffsetType;
    property D2OffsetType: Integer read Get_D2OffsetType write Set_D2OffsetType;
    property D1OffsetReference: IDispatch read Get_D1OffsetReference write Set_D1OffsetReference;
    property D2OffsetReference: IDispatch read Get_D2OffsetReference write Set_D2OffsetReference;
    property D1OffsetDistance: Double read Get_D1OffsetDistance write Set_D1OffsetDistance;
    property D2OffsetDistance: Double read Get_D2OffsetDistance write Set_D2OffsetDistance;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property ReverseThickness: WordBool read Get_ReverseThickness write Set_ReverseThickness;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property D1ReverseOffset: WordBool read Get_D1ReverseOffset write Set_D1ReverseOffset;
    property D2ReverseOffset: WordBool read Get_D2ReverseOffset write Set_D2ReverseOffset;
    property UseGaugeTable: WordBool read Get_UseGaugeTable write Set_UseGaugeTable;
    property GaugeTablePath: WideString read Get_GaugeTablePath write Set_GaugeTablePath;
    property ThicknessTableName: WideString read Get_ThicknessTableName write Set_ThicknessTableName;
    property TableThickness: Double read Get_TableThickness write Set_TableThickness;
    property OverrideThickness: WordBool read Get_OverrideThickness write Set_OverrideThickness;
    property TableRadius: Double read Get_TableRadius write Set_TableRadius;
    property OverrideRadius: WordBool read Get_OverrideRadius write Set_OverrideRadius;
    property KFactor: Double read Get_KFactor write Set_KFactor;
    property OverrideKFactor: WordBool read Get_OverrideKFactor write Set_OverrideKFactor;
    property TableKFactor: Double read Get_TableKFactor;
  end;

// *********************************************************************//
// DispIntf:  IBaseFlangeFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C61E9DD6-0813-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IBaseFlangeFeatureDataDisp = dispinterface
    ['{C61E9DD6-0813-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property OffsetDirections: Integer dispid 4;
    property D1OffsetType: Integer dispid 5;
    property D2OffsetType: Integer dispid 6;
    function GetD1OffsetReferenceType: Integer; dispid 7;
    function GetD2OffsetReferenceType: Integer; dispid 8;
    property D1OffsetReference: IDispatch dispid 9;
    property D2OffsetReference: IDispatch dispid 10;
    property D1OffsetDistance: Double dispid 11;
    property D2OffsetDistance: Double dispid 12;
    property Thickness: Double dispid 13;
    property ReverseThickness: WordBool dispid 14;
    property BendRadius: Double dispid 15;
    property ReverseDirection: WordBool dispid 16;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 17;
    property D1ReverseOffset: WordBool dispid 18;
    property D2ReverseOffset: WordBool dispid 19;
    property UseGaugeTable: WordBool dispid 20;
    property GaugeTablePath: WideString dispid 21;
    property ThicknessTableName: WideString dispid 22;
    property TableThickness: Double dispid 23;
    property OverrideThickness: WordBool dispid 24;
    property TableRadius: Double dispid 25;
    property OverrideRadius: WordBool dispid 26;
    property KFactor: Double dispid 27;
    property OverrideKFactor: WordBool dispid 28;
    function GetTableThicknessesCount: Integer; dispid 29;
    function GetTableThicknesses: OleVariant; dispid 30;
    function IGetTableThicknesses(NCount: Integer): WideString; dispid 31;
    function GetTableRadiiCount(const ThicknessTableName: WideString): Integer; dispid 32;
    function GetTableRadii(const ThicknessTableName: WideString): OleVariant; dispid 33;
    function IGetTableRadii(const ThicknessTableName: WideString; NCount: Integer): Double; dispid 34;
    property TableKFactor: Double readonly dispid 35;
  end;

// *********************************************************************//
// Interface: IEdgeFlangeFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B58E432A-09C8-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IEdgeFlangeFeatureData = interface(IDispatch)
    ['{B58E432A-09C8-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Edge: IDispatch; safecall;
    procedure Set_Edge(const Edge: IDispatch); safecall;
    function Get_UseDefaultBendRadius: WordBool; safecall;
    procedure Set_UseDefaultBendRadius(UseDefaultBendRadius: WordBool); safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(Radius: Double); safecall;
    function Get_BendAngle: Double; safecall;
    procedure Set_BendAngle(BendAngle: Double); safecall;
    function Get_OffsetType: Integer; safecall;
    procedure Set_OffsetType(OffsetType: Integer); safecall;
    function Get_OffsetReference: IDispatch; safecall;
    procedure Set_OffsetReference(const OffsetReference: IDispatch); safecall;
    function Get_ReverseOffset: WordBool; safecall;
    procedure Set_ReverseOffset(Reverse: WordBool); safecall;
    function Get_OffsetDistance: Double; safecall;
    procedure Set_OffsetDistance(OffsetDistance: Double); safecall;
    function Get_OffsetDimType: Integer; safecall;
    procedure Set_OffsetDimType(OffsetDimType: Integer); safecall;
    function Get_PositionType: Integer; safecall;
    procedure Set_PositionType(PositionType: Integer); safecall;
    function Get_UsePositionTrimSideBends: WordBool; safecall;
    procedure Set_UsePositionTrimSideBends(TrimSideBends: WordBool); safecall;
    function Get_UsePositionOffset: WordBool; safecall;
    procedure Set_UsePositionOffset(PositionOffset: WordBool); safecall;
    function Get_PositionOffsetType: Integer; safecall;
    procedure Set_PositionOffsetType(OffsetType: Integer); safecall;
    function GetPositionReferenceType: Integer; safecall;
    function Get_PositionOffsetReference: IDispatch; safecall;
    procedure Set_PositionOffsetReference(const OffsetReference: IDispatch); safecall;
    function Get_PositionOffsetDistance: Double; safecall;
    procedure Set_PositionOffsetDistance(OffsetDistance: Double); safecall;
    function Get_ReversePositionOffset: WordBool; safecall;
    procedure Set_ReversePositionOffset(Reverse: WordBool); safecall;
    function Get_AutoReliefType: Integer; safecall;
    procedure Set_AutoReliefType(AutoReliefType: Integer); safecall;
    function Get_UseReliefRatio: WordBool; safecall;
    procedure Set_UseReliefRatio(UseReliefRatio: WordBool); safecall;
    function Get_ReliefRatio: Double; safecall;
    procedure Set_ReliefRatio(ReliefRatio: Double); safecall;
    function Get_ReliefWidth: Double; safecall;
    procedure Set_ReliefWidth(ReliefWidth: Double); safecall;
    function Get_ReliefDepth: Double; safecall;
    procedure Set_ReliefDepth(ReliefDepth: Double); safecall;
    function Get_ReliefTearType: Integer; safecall;
    procedure Set_ReliefTearType(ReliefTearType: Integer); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); safecall;
    function Get_UseDefaultBendAllowance: WordBool; safecall;
    procedure Set_UseDefaultBendAllowance(UseDefaultBendAllowance: WordBool); safecall;
    function Get_UseDefaultBendRelief: WordBool; safecall;
    procedure Set_UseDefaultBendRelief(UseDefaultBendRelief: WordBool); safecall;
    function Get_Edges: OleVariant; safecall;
    procedure Set_Edges(EdgeArray: OleVariant); safecall;
    function GetEdgeCount: Integer; safecall;
    function IGetEdges(EdgeCount: Integer): IDispatch; safecall;
    procedure ISetEdges(EdgeCount: Integer; var EdgeArray: IDispatch); safecall;
    function Get_GapDistance: Double; safecall;
    procedure Set_GapDistance(GapDistance: Double); safecall;
    property Edge: IDispatch read Get_Edge write Set_Edge;
    property UseDefaultBendRadius: WordBool read Get_UseDefaultBendRadius write Set_UseDefaultBendRadius;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property BendAngle: Double read Get_BendAngle write Set_BendAngle;
    property OffsetType: Integer read Get_OffsetType write Set_OffsetType;
    property OffsetReference: IDispatch read Get_OffsetReference write Set_OffsetReference;
    property ReverseOffset: WordBool read Get_ReverseOffset write Set_ReverseOffset;
    property OffsetDistance: Double read Get_OffsetDistance write Set_OffsetDistance;
    property OffsetDimType: Integer read Get_OffsetDimType write Set_OffsetDimType;
    property PositionType: Integer read Get_PositionType write Set_PositionType;
    property UsePositionTrimSideBends: WordBool read Get_UsePositionTrimSideBends write Set_UsePositionTrimSideBends;
    property UsePositionOffset: WordBool read Get_UsePositionOffset write Set_UsePositionOffset;
    property PositionOffsetType: Integer read Get_PositionOffsetType write Set_PositionOffsetType;
    property PositionOffsetReference: IDispatch read Get_PositionOffsetReference write Set_PositionOffsetReference;
    property PositionOffsetDistance: Double read Get_PositionOffsetDistance write Set_PositionOffsetDistance;
    property ReversePositionOffset: WordBool read Get_ReversePositionOffset write Set_ReversePositionOffset;
    property AutoReliefType: Integer read Get_AutoReliefType write Set_AutoReliefType;
    property UseReliefRatio: WordBool read Get_UseReliefRatio write Set_UseReliefRatio;
    property ReliefRatio: Double read Get_ReliefRatio write Set_ReliefRatio;
    property ReliefWidth: Double read Get_ReliefWidth write Set_ReliefWidth;
    property ReliefDepth: Double read Get_ReliefDepth write Set_ReliefDepth;
    property ReliefTearType: Integer read Get_ReliefTearType write Set_ReliefTearType;
    property UseDefaultBendAllowance: WordBool read Get_UseDefaultBendAllowance write Set_UseDefaultBendAllowance;
    property UseDefaultBendRelief: WordBool read Get_UseDefaultBendRelief write Set_UseDefaultBendRelief;
    property Edges: OleVariant read Get_Edges write Set_Edges;
    property GapDistance: Double read Get_GapDistance write Set_GapDistance;
  end;

// *********************************************************************//
// DispIntf:  IEdgeFlangeFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B58E432A-09C8-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IEdgeFlangeFeatureDataDisp = dispinterface
    ['{B58E432A-09C8-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Edge: IDispatch dispid 4;
    property UseDefaultBendRadius: WordBool dispid 5;
    property BendRadius: Double dispid 6;
    property BendAngle: Double dispid 7;
    property OffsetType: Integer dispid 8;
    property OffsetReference: IDispatch dispid 9;
    property ReverseOffset: WordBool dispid 10;
    property OffsetDistance: Double dispid 11;
    property OffsetDimType: Integer dispid 12;
    property PositionType: Integer dispid 13;
    property UsePositionTrimSideBends: WordBool dispid 14;
    property UsePositionOffset: WordBool dispid 15;
    property PositionOffsetType: Integer dispid 16;
    function GetPositionReferenceType: Integer; dispid 17;
    property PositionOffsetReference: IDispatch dispid 18;
    property PositionOffsetDistance: Double dispid 19;
    property ReversePositionOffset: WordBool dispid 20;
    property AutoReliefType: Integer dispid 21;
    property UseReliefRatio: WordBool dispid 22;
    property ReliefRatio: Double dispid 23;
    property ReliefWidth: Double dispid 24;
    property ReliefDepth: Double dispid 25;
    property ReliefTearType: Integer dispid 26;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 27;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 28;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); dispid 29;
    property UseDefaultBendAllowance: WordBool dispid 30;
    property UseDefaultBendRelief: WordBool dispid 31;
    property Edges: OleVariant dispid 32;
    function GetEdgeCount: Integer; dispid 33;
    function IGetEdges(EdgeCount: Integer): IDispatch; dispid 34;
    procedure ISetEdges(EdgeCount: Integer; var EdgeArray: IDispatch); dispid 35;
    property GapDistance: Double dispid 36;
  end;

// *********************************************************************//
// Interface: IMiterFlangeFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E6194F72-0CEC-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IMiterFlangeFeatureData = interface(IDispatch)
    ['{E6194F72-0CEC-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Edges: OleVariant; safecall;
    procedure Set_Edges(EdgeArray: OleVariant); safecall;
    function IGetEdgesCount: Integer; safecall;
    function IGetEdges: IDispatch; safecall;
    procedure ISetEdges(EdgeCount: Integer; var EdgeArray: IDispatch); safecall;
    function Get_UseDefaultBendRadius: WordBool; safecall;
    procedure Set_UseDefaultBendRadius(UseDefaultBendRadius: WordBool); safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(Radius: Double); safecall;
    function Get_PositionType: Integer; safecall;
    procedure Set_PositionType(PositionType: Integer); safecall;
    function Get_UsePositionTrimSideBends: WordBool; safecall;
    procedure Set_UsePositionTrimSideBends(TrimSideBends: WordBool); safecall;
    function Get_GapDistance: Double; safecall;
    procedure Set_GapDistance(GapDistance: Double); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function Get_StartOffset: Double; safecall;
    procedure Set_StartOffset(Offset: Double); safecall;
    function Get_EndOffset: Double; safecall;
    procedure Set_EndOffset(Offset: Double); safecall;
    function Get_ReliefType: Integer; safecall;
    procedure Set_ReliefType(ReliefType: Integer); safecall;
    function Get_UseReliefRatio: WordBool; safecall;
    procedure Set_UseReliefRatio(UseReliefRatio: WordBool); safecall;
    function Get_ReliefRatio: Double; safecall;
    procedure Set_ReliefRatio(Ratio: Double); safecall;
    function Get_ReliefWidth: Double; safecall;
    procedure Set_ReliefWidth(Width: Double); safecall;
    function Get_ReliefDepth: Double; safecall;
    procedure Set_ReliefDepth(Depth: Double); safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); safecall;
    function Get_UseDefaultBendAllowance: WordBool; safecall;
    procedure Set_UseDefaultBendAllowance(UseDefaultBendAllowance: WordBool); safecall;
    function Get_UseDefaultBendRelief: WordBool; safecall;
    procedure Set_UseDefaultBendRelief(UseDefaultBendRelief: WordBool); safecall;
    property Edges: OleVariant read Get_Edges write Set_Edges;
    property UseDefaultBendRadius: WordBool read Get_UseDefaultBendRadius write Set_UseDefaultBendRadius;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property PositionType: Integer read Get_PositionType write Set_PositionType;
    property UsePositionTrimSideBends: WordBool read Get_UsePositionTrimSideBends write Set_UsePositionTrimSideBends;
    property GapDistance: Double read Get_GapDistance write Set_GapDistance;
    property StartOffset: Double read Get_StartOffset write Set_StartOffset;
    property EndOffset: Double read Get_EndOffset write Set_EndOffset;
    property ReliefType: Integer read Get_ReliefType write Set_ReliefType;
    property UseReliefRatio: WordBool read Get_UseReliefRatio write Set_UseReliefRatio;
    property ReliefRatio: Double read Get_ReliefRatio write Set_ReliefRatio;
    property ReliefWidth: Double read Get_ReliefWidth write Set_ReliefWidth;
    property ReliefDepth: Double read Get_ReliefDepth write Set_ReliefDepth;
    property UseDefaultBendAllowance: WordBool read Get_UseDefaultBendAllowance write Set_UseDefaultBendAllowance;
    property UseDefaultBendRelief: WordBool read Get_UseDefaultBendRelief write Set_UseDefaultBendRelief;
  end;

// *********************************************************************//
// DispIntf:  IMiterFlangeFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E6194F72-0CEC-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IMiterFlangeFeatureDataDisp = dispinterface
    ['{E6194F72-0CEC-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Edges: OleVariant dispid 4;
    function IGetEdgesCount: Integer; dispid 5;
    function IGetEdges: IDispatch; dispid 6;
    procedure ISetEdges(EdgeCount: Integer; var EdgeArray: IDispatch); dispid 7;
    property UseDefaultBendRadius: WordBool dispid 8;
    property BendRadius: Double dispid 9;
    property PositionType: Integer dispid 10;
    property UsePositionTrimSideBends: WordBool dispid 11;
    property GapDistance: Double dispid 12;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 13;
    property StartOffset: Double dispid 14;
    property EndOffset: Double dispid 15;
    property ReliefType: Integer dispid 16;
    property UseReliefRatio: WordBool dispid 17;
    property ReliefRatio: Double dispid 18;
    property ReliefWidth: Double dispid 19;
    property ReliefDepth: Double dispid 20;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 21;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); dispid 22;
    property UseDefaultBendAllowance: WordBool dispid 23;
    property UseDefaultBendRelief: WordBool dispid 24;
  end;

// *********************************************************************//
// Interface: ISketchedBendFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A4D90A70-0DA5-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  ISketchedBendFeatureData = interface(IDispatch)
    ['{A4D90A70-0DA5-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetFixedFace(out X: Double; out Y: Double; out Z: Double): IDispatch; safecall;
    procedure SetFixedFace(X: Double; Y: Double; Z: Double; const EdgeArray: IDispatch); safecall;
    function Get_PositionType: Integer; safecall;
    procedure Set_PositionType(PositionType: Integer); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_BendAngle: Double; safecall;
    procedure Set_BendAngle(BendAngle: Double); safecall;
    function Get_UseDefaultBendRadius: WordBool; safecall;
    procedure Set_UseDefaultBendRadius(UseDefaultBendRadius: WordBool); safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(Radius: Double); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); safecall;
    function Get_UseDefaultBendAllowance: WordBool; safecall;
    procedure Set_UseDefaultBendAllowance(UseDefaultBendAllowance: WordBool); safecall;
    property PositionType: Integer read Get_PositionType write Set_PositionType;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property BendAngle: Double read Get_BendAngle write Set_BendAngle;
    property UseDefaultBendRadius: WordBool read Get_UseDefaultBendRadius write Set_UseDefaultBendRadius;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property UseDefaultBendAllowance: WordBool read Get_UseDefaultBendAllowance write Set_UseDefaultBendAllowance;
  end;

// *********************************************************************//
// DispIntf:  ISketchedBendFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A4D90A70-0DA5-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  ISketchedBendFeatureDataDisp = dispinterface
    ['{A4D90A70-0DA5-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetFixedFace(out X: Double; out Y: Double; out Z: Double): IDispatch; dispid 4;
    procedure SetFixedFace(X: Double; Y: Double; Z: Double; const EdgeArray: IDispatch); dispid 5;
    property PositionType: Integer dispid 6;
    property ReverseDirection: WordBool dispid 7;
    property BendAngle: Double dispid 8;
    property UseDefaultBendRadius: WordBool dispid 9;
    property BendRadius: Double dispid 10;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 11;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 12;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); dispid 13;
    property UseDefaultBendAllowance: WordBool dispid 14;
  end;

// *********************************************************************//
// Interface: IClosedCornerFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2134CBFC-0DDA-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IClosedCornerFeatureData = interface(IDispatch)
    ['{2134CBFC-0DDA-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Faces: OleVariant; safecall;
    procedure Set_Faces(FaceArray: OleVariant); safecall;
    function IGetFacesCount: Integer; safecall;
    function IGetFaces: IDispatch; safecall;
    procedure ISetFaces(FaceCount: Integer; var FaceArray: IDispatch); safecall;
    function Get_CornerType: Integer; safecall;
    procedure Set_CornerType(CornerType: Integer); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function Get_GapDistance: Double; safecall;
    procedure Set_GapDistance(GapDistance: Double); safecall;
    function Get_OverlapUnderlapRatio: Double; safecall;
    procedure Set_OverlapUnderlapRatio(Ratio: Double); safecall;
    function Get_OpenBendRegion: WordBool; safecall;
    procedure Set_OpenBendRegion(OpenBendRegion: WordBool); safecall;
    property Faces: OleVariant read Get_Faces write Set_Faces;
    property CornerType: Integer read Get_CornerType write Set_CornerType;
    property GapDistance: Double read Get_GapDistance write Set_GapDistance;
    property OverlapUnderlapRatio: Double read Get_OverlapUnderlapRatio write Set_OverlapUnderlapRatio;
    property OpenBendRegion: WordBool read Get_OpenBendRegion write Set_OpenBendRegion;
  end;

// *********************************************************************//
// DispIntf:  IClosedCornerFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2134CBFC-0DDA-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IClosedCornerFeatureDataDisp = dispinterface
    ['{2134CBFC-0DDA-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Faces: OleVariant dispid 4;
    function IGetFacesCount: Integer; dispid 5;
    function IGetFaces: IDispatch; dispid 6;
    procedure ISetFaces(FaceCount: Integer; var FaceArray: IDispatch); dispid 7;
    property CornerType: Integer dispid 8;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 9;
    property GapDistance: Double dispid 10;
    property OverlapUnderlapRatio: Double dispid 11;
    property OpenBendRegion: WordBool dispid 12;
  end;

// *********************************************************************//
// Interface: IFoldsFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {32700A62-0E5C-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IFoldsFeatureData = interface(IDispatch)
    ['{32700A62-0E5C-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_FixedFace: IDispatch; safecall;
    procedure Set_FixedFace(const OffsetReference: IDispatch); safecall;
    function Get_Bends: OleVariant; safecall;
    procedure Set_Bends(FaceArray: OleVariant); safecall;
    function IGetBendsCount: Integer; safecall;
    function IGetBends: IDispatch; safecall;
    procedure ISetBends(FaceCount: Integer; var FaceArray: IDispatch); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    property FixedFace: IDispatch read Get_FixedFace write Set_FixedFace;
    property Bends: OleVariant read Get_Bends write Set_Bends;
  end;

// *********************************************************************//
// DispIntf:  IFoldsFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {32700A62-0E5C-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IFoldsFeatureDataDisp = dispinterface
    ['{32700A62-0E5C-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property FixedFace: IDispatch dispid 4;
    property Bends: OleVariant dispid 5;
    function IGetBendsCount: Integer; dispid 6;
    function IGetBends: IDispatch; dispid 7;
    procedure ISetBends(FaceCount: Integer; var FaceArray: IDispatch); dispid 8;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 9;
  end;

// *********************************************************************//
// Interface: IFlatPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {00644208-0E6C-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IFlatPatternFeatureData = interface(IDispatch)
    ['{00644208-0E6C-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_FixedFace: IDispatch; safecall;
    procedure Set_FixedFace(const OffsetReference: IDispatch); safecall;
    function Get_MergeFace: WordBool; safecall;
    procedure Set_MergeFace(MergeFace: WordBool); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function Get_CornerTreatment: WordBool; safecall;
    procedure Set_CornerTreatment(BCT: WordBool); safecall;
    function Get_CornerTrimReliefType: Integer; safecall;
    procedure Set_CornerTrimReliefType(ReliefType: Integer); safecall;
    function Get_CornerTrimReliefDistance: Double; safecall;
    procedure Set_CornerTrimReliefDistance(ReliefDistance: Double); safecall;
    function Get_BreakCornerType: Integer; safecall;
    procedure Set_BreakCornerType(Type_: Integer); safecall;
    function Get_BreakCornerRadius: Double; safecall;
    procedure Set_BreakCornerRadius(Rad: Double); safecall;
    function GetAddCornerTrim(out PFeat: IFeature): WordBool; safecall;
    procedure SetAddCornerTrim(BCT: WordBool); safecall;
    function GetBreakCorners(out PFeat: IFeature): WordBool; safecall;
    procedure SetBreakCorners(BBreakCorner: WordBool); safecall;
    function Get_CornerTrimRatioToThickness: Double; safecall;
    procedure Set_CornerTrimRatioToThickness(Ratio: Double); safecall;
    function Get_UseRatioToThickness: WordBool; safecall;
    procedure Set_UseRatioToThickness(Ratio: WordBool); safecall;
    function Get_SimplifyBends: WordBool; safecall;
    procedure Set_SimplifyBends(BSimplify: WordBool); safecall;
    property FixedFace: IDispatch read Get_FixedFace write Set_FixedFace;
    property MergeFace: WordBool read Get_MergeFace write Set_MergeFace;
    property CornerTreatment: WordBool read Get_CornerTreatment write Set_CornerTreatment;
    property CornerTrimReliefType: Integer read Get_CornerTrimReliefType write Set_CornerTrimReliefType;
    property CornerTrimReliefDistance: Double read Get_CornerTrimReliefDistance write Set_CornerTrimReliefDistance;
    property BreakCornerType: Integer read Get_BreakCornerType write Set_BreakCornerType;
    property BreakCornerRadius: Double read Get_BreakCornerRadius write Set_BreakCornerRadius;
    property CornerTrimRatioToThickness: Double read Get_CornerTrimRatioToThickness write Set_CornerTrimRatioToThickness;
    property UseRatioToThickness: WordBool read Get_UseRatioToThickness write Set_UseRatioToThickness;
    property SimplifyBends: WordBool read Get_SimplifyBends write Set_SimplifyBends;
  end;

// *********************************************************************//
// DispIntf:  IFlatPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {00644208-0E6C-11D5-AEDD-00C04FA0AC51}
// *********************************************************************//
  IFlatPatternFeatureDataDisp = dispinterface
    ['{00644208-0E6C-11D5-AEDD-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property FixedFace: IDispatch dispid 4;
    property MergeFace: WordBool dispid 5;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 6;
    property CornerTreatment: WordBool dispid 7;
    property CornerTrimReliefType: Integer dispid 8;
    property CornerTrimReliefDistance: Double dispid 9;
    property BreakCornerType: Integer dispid 10;
    property BreakCornerRadius: Double dispid 11;
    function GetAddCornerTrim(out PFeat: IFeature): WordBool; dispid 12;
    procedure SetAddCornerTrim(BCT: WordBool); dispid 13;
    function GetBreakCorners(out PFeat: IFeature): WordBool; dispid 14;
    procedure SetBreakCorners(BBreakCorner: WordBool); dispid 15;
    property CornerTrimRatioToThickness: Double dispid 16;
    property UseRatioToThickness: WordBool dispid 17;
    property SimplifyBends: WordBool dispid 18;
  end;

// *********************************************************************//
// Interface: ILocalLinearPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9890C04C-1196-11D5-AEDE-00C04FA0AC51}
// *********************************************************************//
  ILocalLinearPatternFeatureData = interface(IDispatch)
    ['{9890C04C-1196-11D5-AEDE-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_D1Axis: IDispatch; safecall;
    procedure Set_D1Axis(const RefAxis: IDispatch); safecall;
    function Get_D2Axis: IDispatch; safecall;
    procedure Set_D2Axis(const RefAxis: IDispatch); safecall;
    function GetD1AxisType: Integer; safecall;
    function GetD2AxisType: Integer; safecall;
    function Get_D1ReverseDirection: WordBool; safecall;
    procedure Set_D1ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_D2ReverseDirection: WordBool; safecall;
    procedure Set_D2ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_D1Spacing: Double; safecall;
    procedure Set_D1Spacing(Distance: Double); safecall;
    function Get_D2Spacing: Double; safecall;
    procedure Set_D2Spacing(Distance: Double); safecall;
    function Get_D1TotalInstances: Integer; safecall;
    procedure Set_D1TotalInstances(Count: Integer); safecall;
    function Get_D2TotalInstances: Integer; safecall;
    procedure Set_D2TotalInstances(Count: Integer); safecall;
    function Get_SeedComponentArray: OleVariant; safecall;
    procedure Set_SeedComponentArray(ArrayOut: OleVariant); safecall;
    function GetSeedComponentCount: Integer; safecall;
    function IGetSeedComponentArray: IDispatch; safecall;
    procedure ISetSeedComponentArray(FeatCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_SkippedItemArray: OleVariant; safecall;
    procedure Set_SkippedItemArray(ArrayOut: OleVariant); safecall;
    function GetSkippedItemCount: Integer; safecall;
    function IGetSkippedItemArray: Integer; safecall;
    procedure ISetSkippedItemArray(FeatCount: Integer; var ArrayDataIn: Integer); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    property D1Axis: IDispatch read Get_D1Axis write Set_D1Axis;
    property D2Axis: IDispatch read Get_D2Axis write Set_D2Axis;
    property D1ReverseDirection: WordBool read Get_D1ReverseDirection write Set_D1ReverseDirection;
    property D2ReverseDirection: WordBool read Get_D2ReverseDirection write Set_D2ReverseDirection;
    property D1Spacing: Double read Get_D1Spacing write Set_D1Spacing;
    property D2Spacing: Double read Get_D2Spacing write Set_D2Spacing;
    property D1TotalInstances: Integer read Get_D1TotalInstances write Set_D1TotalInstances;
    property D2TotalInstances: Integer read Get_D2TotalInstances write Set_D2TotalInstances;
    property SeedComponentArray: OleVariant read Get_SeedComponentArray write Set_SeedComponentArray;
    property SkippedItemArray: OleVariant read Get_SkippedItemArray write Set_SkippedItemArray;
  end;

// *********************************************************************//
// DispIntf:  ILocalLinearPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9890C04C-1196-11D5-AEDE-00C04FA0AC51}
// *********************************************************************//
  ILocalLinearPatternFeatureDataDisp = dispinterface
    ['{9890C04C-1196-11D5-AEDE-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property D1Axis: IDispatch dispid 4;
    property D2Axis: IDispatch dispid 5;
    function GetD1AxisType: Integer; dispid 6;
    function GetD2AxisType: Integer; dispid 7;
    property D1ReverseDirection: WordBool dispid 8;
    property D2ReverseDirection: WordBool dispid 9;
    property D1Spacing: Double dispid 10;
    property D2Spacing: Double dispid 11;
    property D1TotalInstances: Integer dispid 12;
    property D2TotalInstances: Integer dispid 13;
    property SeedComponentArray: OleVariant dispid 14;
    function GetSeedComponentCount: Integer; dispid 15;
    function IGetSeedComponentArray: IDispatch; dispid 16;
    procedure ISetSeedComponentArray(FeatCount: Integer; var ArrayDataIn: IDispatch); dispid 17;
    property SkippedItemArray: OleVariant dispid 18;
    function GetSkippedItemCount: Integer; dispid 19;
    function IGetSkippedItemArray: Integer; dispid 20;
    procedure ISetSkippedItemArray(FeatCount: Integer; var ArrayDataIn: Integer); dispid 21;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 22;
  end;

// *********************************************************************//
// Interface: ILocalCircularPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F2E81434-13FB-11D5-AEDE-00C04FA0AC51}
// *********************************************************************//
  ILocalCircularPatternFeatureData = interface(IDispatch)
    ['{F2E81434-13FB-11D5-AEDE-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Axis: IDispatch; safecall;
    procedure Set_Axis(const RefAxis: IDispatch); safecall;
    function GetAxisType: Integer; safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_Spacing: Double; safecall;
    procedure Set_Spacing(Distance: Double); safecall;
    function Get_TotalInstances: Integer; safecall;
    procedure Set_TotalInstances(Count: Integer); safecall;
    function Get_SeedComponentArray: OleVariant; safecall;
    procedure Set_SeedComponentArray(ArrayOut: OleVariant); safecall;
    function GetSeedComponentCount: Integer; safecall;
    function IGetSeedComponentArray: IDispatch; safecall;
    procedure ISetSeedComponentArray(FeatCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_SkippedItemArray: OleVariant; safecall;
    procedure Set_SkippedItemArray(ArrayOut: OleVariant); safecall;
    function GetSkippedItemCount: Integer; safecall;
    function IGetSkippedItemArray: Integer; safecall;
    procedure ISetSkippedItemArray(FeatCount: Integer; var ArrayDataIn: Integer); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    property Axis: IDispatch read Get_Axis write Set_Axis;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property Spacing: Double read Get_Spacing write Set_Spacing;
    property TotalInstances: Integer read Get_TotalInstances write Set_TotalInstances;
    property SeedComponentArray: OleVariant read Get_SeedComponentArray write Set_SeedComponentArray;
    property SkippedItemArray: OleVariant read Get_SkippedItemArray write Set_SkippedItemArray;
  end;

// *********************************************************************//
// DispIntf:  ILocalCircularPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F2E81434-13FB-11D5-AEDE-00C04FA0AC51}
// *********************************************************************//
  ILocalCircularPatternFeatureDataDisp = dispinterface
    ['{F2E81434-13FB-11D5-AEDE-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Axis: IDispatch dispid 4;
    function GetAxisType: Integer; dispid 5;
    property ReverseDirection: WordBool dispid 6;
    property Spacing: Double dispid 7;
    property TotalInstances: Integer dispid 8;
    property SeedComponentArray: OleVariant dispid 9;
    function GetSeedComponentCount: Integer; dispid 10;
    function IGetSeedComponentArray: IDispatch; dispid 11;
    procedure ISetSeedComponentArray(FeatCount: Integer; var ArrayDataIn: IDispatch); dispid 12;
    property SkippedItemArray: OleVariant dispid 13;
    function GetSkippedItemCount: Integer; dispid 14;
    function IGetSkippedItemArray: Integer; dispid 15;
    procedure ISetSkippedItemArray(FeatCount: Integer; var ArrayDataIn: Integer); dispid 16;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 17;
  end;

// *********************************************************************//
// Interface: IDerivedPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {98EADB32-141A-11D5-AEDE-00C04FA0AC51}
// *********************************************************************//
  IDerivedPatternFeatureData = interface(IDispatch)
    ['{98EADB32-141A-11D5-AEDE-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_PatternFeature: IDispatch; safecall;
    procedure Set_PatternFeature(const Feature: IDispatch); safecall;
    function Get_SeedComponentArray: OleVariant; safecall;
    procedure Set_SeedComponentArray(ArrayOut: OleVariant); safecall;
    function GetSeedComponentCount: Integer; safecall;
    function IGetSeedComponentArray: IDispatch; safecall;
    procedure ISetSeedComponentArray(FeatCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_SkippedItemArray: OleVariant; safecall;
    procedure Set_SkippedItemArray(ArrayOut: OleVariant); safecall;
    function GetSkippedItemCount: Integer; safecall;
    function IGetSkippedItemArray: Integer; safecall;
    procedure ISetSkippedItemArray(FeatCount: Integer; var ArrayDataIn: Integer); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    property PatternFeature: IDispatch read Get_PatternFeature write Set_PatternFeature;
    property SeedComponentArray: OleVariant read Get_SeedComponentArray write Set_SeedComponentArray;
    property SkippedItemArray: OleVariant read Get_SkippedItemArray write Set_SkippedItemArray;
  end;

// *********************************************************************//
// DispIntf:  IDerivedPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {98EADB32-141A-11D5-AEDE-00C04FA0AC51}
// *********************************************************************//
  IDerivedPatternFeatureDataDisp = dispinterface
    ['{98EADB32-141A-11D5-AEDE-00C04FA0AC51}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property PatternFeature: IDispatch dispid 4;
    property SeedComponentArray: OleVariant dispid 5;
    function GetSeedComponentCount: Integer; dispid 6;
    function IGetSeedComponentArray: IDispatch; dispid 7;
    procedure ISetSeedComponentArray(FeatCount: Integer; var ArrayDataIn: IDispatch); dispid 8;
    property SkippedItemArray: OleVariant dispid 9;
    function GetSkippedItemCount: Integer; dispid 10;
    function IGetSkippedItemArray: Integer; dispid 11;
    procedure ISetSkippedItemArray(FeatCount: Integer; var ArrayDataIn: Integer); dispid 12;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 13;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageLabel
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EBBD7B58-170D-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageLabel = interface(IDispatch)
    ['{EBBD7B58-170D-11D5-AF24-00C04F603FAF}']
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const Text: WideString); safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Style: Integer); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(Height: Smallint); safecall;
    function Get_Bold(StartChar: Smallint; EndChar: Smallint): WordBool; safecall;
    procedure Set_Bold(StartChar: Smallint; EndChar: Smallint; Bold: WordBool); safecall;
    function Get_Italic(StartChar: Smallint; EndChar: Smallint): WordBool; safecall;
    procedure Set_Italic(StartChar: Smallint; EndChar: Smallint; Italic: WordBool); safecall;
    function Get_Underline(StartChar: Smallint; EndChar: Smallint): Integer; safecall;
    procedure Set_Underline(StartChar: Smallint; EndChar: Smallint; Underline: Integer); safecall;
    function Get_Font(StartChar: Smallint; EndChar: Smallint): WideString; safecall;
    procedure Set_Font(StartChar: Smallint; EndChar: Smallint; const FontName: WideString); safecall;
    function Get_SizeRatio(StartChar: Smallint; EndChar: Smallint): Double; safecall;
    procedure Set_SizeRatio(StartChar: Smallint; EndChar: Smallint; Size: Double); safecall;
    function Get_LineOffset(StartChar: Smallint; EndChar: Smallint): Double; safecall;
    procedure Set_LineOffset(StartChar: Smallint; EndChar: Smallint; Offset: Double); safecall;
    function Get_CharacterColor(StartChar: Smallint; EndChar: Smallint): Integer; safecall;
    procedure Set_CharacterColor(StartChar: Smallint; EndChar: Smallint; Color: Integer); safecall;
    function Get_CharacterBackgroundColor(StartChar: Smallint; EndChar: Smallint): Integer; safecall;
    procedure Set_CharacterBackgroundColor(StartChar: Smallint; EndChar: Smallint; Color: Integer); safecall;
    property Caption: WideString read Get_Caption write Set_Caption;
    property Style: Integer read Get_Style write Set_Style;
    property Height: Smallint read Get_Height write Set_Height;
    property Bold[StartChar: Smallint; EndChar: Smallint]: WordBool read Get_Bold write Set_Bold;
    property Italic[StartChar: Smallint; EndChar: Smallint]: WordBool read Get_Italic write Set_Italic;
    property Underline[StartChar: Smallint; EndChar: Smallint]: Integer read Get_Underline write Set_Underline;
    property Font[StartChar: Smallint; EndChar: Smallint]: WideString read Get_Font write Set_Font;
    property SizeRatio[StartChar: Smallint; EndChar: Smallint]: Double read Get_SizeRatio write Set_SizeRatio;
    property LineOffset[StartChar: Smallint; EndChar: Smallint]: Double read Get_LineOffset write Set_LineOffset;
    property CharacterColor[StartChar: Smallint; EndChar: Smallint]: Integer read Get_CharacterColor write Set_CharacterColor;
    property CharacterBackgroundColor[StartChar: Smallint; EndChar: Smallint]: Integer read Get_CharacterBackgroundColor write Set_CharacterBackgroundColor;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageLabelDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EBBD7B58-170D-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageLabelDisp = dispinterface
    ['{EBBD7B58-170D-11D5-AF24-00C04F603FAF}']
    property Caption: WideString dispid 196609;
    property Style: Integer dispid 196610;
    property Height: Smallint dispid 196611;
    property Bold[StartChar: Smallint; EndChar: Smallint]: WordBool dispid 196612;
    property Italic[StartChar: Smallint; EndChar: Smallint]: WordBool dispid 196613;
    property Underline[StartChar: Smallint; EndChar: Smallint]: Integer dispid 196614;
    property Font[StartChar: Smallint; EndChar: Smallint]: WideString dispid 196615;
    property SizeRatio[StartChar: Smallint; EndChar: Smallint]: Double dispid 196616;
    property LineOffset[StartChar: Smallint; EndChar: Smallint]: Double dispid 196617;
    property CharacterColor[StartChar: Smallint; EndChar: Smallint]: Integer dispid 196618;
    property CharacterBackgroundColor[StartChar: Smallint; EndChar: Smallint]: Integer dispid 196619;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageCheckbox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EBBD7B5A-170D-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageCheckbox = interface(IDispatch)
    ['{EBBD7B5A-170D-11D5-AF24-00C04F603FAF}']
    function Get_Checked: WordBool; safecall;
    procedure Set_Checked(Checked: WordBool); safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const Text: WideString); safecall;
    property Checked: WordBool read Get_Checked write Set_Checked;
    property Caption: WideString read Get_Caption write Set_Caption;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageCheckboxDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EBBD7B5A-170D-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageCheckboxDisp = dispinterface
    ['{EBBD7B5A-170D-11D5-AF24-00C04F603FAF}']
    property Checked: WordBool dispid 196609;
    property Caption: WideString dispid 196610;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A66C294-17CE-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageButton = interface(IDispatch)
    ['{3A66C294-17CE-11D5-AF24-00C04F603FAF}']
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const Text: WideString); safecall;
    property Caption: WideString read Get_Caption write Set_Caption;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageButtonDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A66C294-17CE-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageButtonDisp = dispinterface
    ['{3A66C294-17CE-11D5-AF24-00C04F603FAF}']
    property Caption: WideString dispid 196609;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageOption
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A66C296-17CE-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageOption = interface(IDispatch)
    ['{3A66C296-17CE-11D5-AF24-00C04F603FAF}']
    function Get_Checked: WordBool; safecall;
    procedure Set_Checked(Checked: WordBool); safecall;
    function Get_Caption: WideString; safecall;
    procedure Set_Caption(const Text: WideString); safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Style: Integer); safecall;
    property Checked: WordBool read Get_Checked write Set_Checked;
    property Caption: WideString read Get_Caption write Set_Caption;
    property Style: Integer read Get_Style write Set_Style;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageOptionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3A66C296-17CE-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageOptionDisp = dispinterface
    ['{3A66C296-17CE-11D5-AF24-00C04F603FAF}']
    property Checked: WordBool dispid 196609;
    property Caption: WideString dispid 196610;
    property Style: Integer dispid 196611;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageTextbox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EB18A468-1800-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageTextbox = interface(IDispatch)
    ['{EB18A468-1800-11D5-AF24-00C04F603FAF}']
    function Get_Text: WideString; safecall;
    procedure Set_Text(const Text: WideString); safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Style: Integer); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(Height: Smallint); safecall;
    property Text: WideString read Get_Text write Set_Text;
    property Style: Integer read Get_Style write Set_Style;
    property Height: Smallint read Get_Height write Set_Height;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageTextboxDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EB18A468-1800-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageTextboxDisp = dispinterface
    ['{EB18A468-1800-11D5-AF24-00C04F603FAF}']
    property Text: WideString dispid 196609;
    property Style: Integer dispid 196610;
    property Height: Smallint dispid 196611;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageCombobox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0BD2BA62-18C5-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageCombobox = interface(IDispatch)
    ['{0BD2BA62-18C5-11D5-AF24-00C04F603FAF}']
    procedure AddItems(Texts: OleVariant); safecall;
    procedure IAddItems(TextCount: Smallint; var Texts: WideString); safecall;
    procedure Clear; safecall;
    function Get_CurrentSelection: Smallint; safecall;
    procedure Set_CurrentSelection(Item: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(Height: Smallint); safecall;
    function Get_ItemText(Item: Smallint): WideString; safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Style: Integer); safecall;
    function Get_EditText: WideString; safecall;
    procedure Set_EditText(const Text: WideString); safecall;
    function InsertItem(Item: Smallint; const Text: WideString): Smallint; safecall;
    function DeleteItem(Item: Smallint): Smallint; safecall;
    property CurrentSelection: Smallint read Get_CurrentSelection write Set_CurrentSelection;
    property Height: Smallint read Get_Height write Set_Height;
    property ItemText[Item: Smallint]: WideString read Get_ItemText;
    property Style: Integer read Get_Style write Set_Style;
    property EditText: WideString read Get_EditText write Set_EditText;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageComboboxDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {0BD2BA62-18C5-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageComboboxDisp = dispinterface
    ['{0BD2BA62-18C5-11D5-AF24-00C04F603FAF}']
    procedure AddItems(Texts: OleVariant); dispid 196609;
    procedure IAddItems(TextCount: Smallint; var Texts: WideString); dispid 196610;
    procedure Clear; dispid 196611;
    property CurrentSelection: Smallint dispid 196612;
    property Height: Smallint dispid 196613;
    property ItemText[Item: Smallint]: WideString readonly dispid 196614;
    property Style: Integer dispid 196615;
    property EditText: WideString dispid 196616;
    function InsertItem(Item: Smallint; const Text: WideString): Smallint; dispid 196617;
    function DeleteItem(Item: Smallint): Smallint; dispid 196618;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageActiveX
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FF956369-AE71-4643-AFA8-83D7548F758A}
// *********************************************************************//
  IPropertyManagerPageActiveX = interface(IDispatch)
    ['{FF956369-AE71-4643-AFA8-83D7548F758A}']
    function Get_Height: Smallint; safecall;
    procedure Set_Height(Height: Smallint); safecall;
    function SetClass(const ClassID: WideString; const LicenseKey: WideString): WordBool; safecall;
    function GetControl: IDispatch; safecall;
    function IGetControl: IUnknown; safecall;
    property Height: Smallint read Get_Height write Set_Height;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageActiveXDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FF956369-AE71-4643-AFA8-83D7548F758A}
// *********************************************************************//
  IPropertyManagerPageActiveXDisp = dispinterface
    ['{FF956369-AE71-4643-AFA8-83D7548F758A}']
    property Height: Smallint dispid 196609;
    function SetClass(const ClassID: WideString; const LicenseKey: WideString): WordBool; dispid 196610;
    function GetControl: IDispatch; dispid 196611;
    function IGetControl: IUnknown; dispid 196612;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageBitmapButton
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E508CE7D-0439-4C3D-A61F-A7C9ECDC78BD}
// *********************************************************************//
  IPropertyManagerPageBitmapButton = interface(IDispatch)
    ['{E508CE7D-0439-4C3D-A61F-A7C9ECDC78BD}']
    function Get_Checked: WordBool; safecall;
    procedure Set_Checked(Checked: WordBool); safecall;
    function Get_IsCheckable: WordBool; safecall;
    procedure Set_IsCheckable(Checkable: WordBool); safecall;
    function SetBitmaps(ModuleHandle: Integer; BitmapUp: Integer; BitmapDown: Integer; 
                        BitmapDisabled: Integer): WordBool; safecall;
    function SetStandardBitmaps(Bitmap: Integer): WordBool; safecall;
    function SetBitmapsByName(const BitmapUp: WideString; const BitmapDown: WideString; 
                              const BitmapDisabled: WideString): WordBool; safecall;
    function SetBitmapsByName2(const BitmapOrig: WideString; const BitmapMaskOrig: WideString): WordBool; safecall;
    property Checked: WordBool read Get_Checked write Set_Checked;
    property IsCheckable: WordBool read Get_IsCheckable write Set_IsCheckable;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageBitmapButtonDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E508CE7D-0439-4C3D-A61F-A7C9ECDC78BD}
// *********************************************************************//
  IPropertyManagerPageBitmapButtonDisp = dispinterface
    ['{E508CE7D-0439-4C3D-A61F-A7C9ECDC78BD}']
    property Checked: WordBool dispid 196609;
    property IsCheckable: WordBool dispid 196610;
    function SetBitmaps(ModuleHandle: Integer; BitmapUp: Integer; BitmapDown: Integer; 
                        BitmapDisabled: Integer): WordBool; dispid 196611;
    function SetStandardBitmaps(Bitmap: Integer): WordBool; dispid 196612;
    function SetBitmapsByName(const BitmapUp: WideString; const BitmapDown: WideString; 
                              const BitmapDisabled: WideString): WordBool; dispid 196613;
    function SetBitmapsByName2(const BitmapOrig: WideString; const BitmapMaskOrig: WideString): WordBool; dispid 196614;
  end;

// *********************************************************************//
// Interface: IProjectionCurveFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {459F4B5C-7F8C-4A7E-8AA0-FCFB6ED2D286}
// *********************************************************************//
  IProjectionCurveFeatureData = interface(IDispatch)
    ['{459F4B5C-7F8C-4A7E-8AA0-FCFB6ED2D286}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Reverse: WordBool; safecall;
    procedure Set_Reverse(RevDir: WordBool); safecall;
    function Get_FaceArray: OleVariant; safecall;
    procedure Set_FaceArray(ArrayData: OleVariant); safecall;
    function GetFaceArrayCount: Integer; safecall;
    function IGetFaceArray(FaceCount: Integer): IDispatch; safecall;
    procedure ISetFaceArray(FaceCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_Sketch: IDispatch; safecall;
    procedure Set_Sketch(const Sketch: IDispatch); safecall;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    property Reverse: WordBool read Get_Reverse write Set_Reverse;
    property FaceArray: OleVariant read Get_FaceArray write Set_FaceArray;
    property Sketch: IDispatch read Get_Sketch write Set_Sketch;
  end;

// *********************************************************************//
// DispIntf:  IProjectionCurveFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {459F4B5C-7F8C-4A7E-8AA0-FCFB6ED2D286}
// *********************************************************************//
  IProjectionCurveFeatureDataDisp = dispinterface
    ['{459F4B5C-7F8C-4A7E-8AA0-FCFB6ED2D286}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc; const Component: IComponent): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Reverse: WordBool dispid 4;
    property FaceArray: OleVariant dispid 5;
    function GetFaceArrayCount: Integer; dispid 6;
    function IGetFaceArray(FaceCount: Integer): IDispatch; dispid 7;
    procedure ISetFaceArray(FaceCount: Integer; var ArrayDataIn: IDispatch); dispid 8;
    property Sketch: IDispatch dispid 9;
    function IAccessSelections2(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 10;
  end;

// *********************************************************************//
// Interface: IScaleFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E7631115-F299-4852-9D37-FC9508A00BC1}
// *********************************************************************//
  IScaleFeatureData = interface(IDispatch)
    ['{E7631115-F299-4852-9D37-FC9508A00BC1}']
    procedure GetScale(out X: Double; out Y: Double; out Z: Double; out Uniform: WordBool); safecall;
    procedure SetScale(X: Double; Y: Double; Z: Double; Uniform: WordBool); safecall;
    function Get_ScaleX: Double; safecall;
    procedure Set_ScaleX(ScaleX: Double); safecall;
    function Get_ScaleY: Double; safecall;
    procedure Set_ScaleY(ScaleY: Double); safecall;
    function Get_ScaleZ: Double; safecall;
    procedure Set_ScaleZ(ScaleZ: Double); safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(Type_: Integer); safecall;
    function Get_IsUniform: WordBool; safecall;
    procedure Set_IsUniform(IsUnif: WordBool); safecall;
    function Get_CoordinateSystem: IDispatch; safecall;
    procedure Set_CoordinateSystem(const RefCoord: IDispatch); safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetBodiesCount: Integer; safecall;
    function Get_Bodies: OleVariant; safecall;
    procedure Set_Bodies(BodyVar: OleVariant); safecall;
    function IGetBodies(Count: Integer): IBody2; safecall;
    procedure ISetBodies(Count: Integer; var BodyArr: IBody2); safecall;
    function Get_ScaleUniform: Double; safecall;
    procedure Set_ScaleUniform(Scale: Double); safecall;
    property ScaleX: Double read Get_ScaleX write Set_ScaleX;
    property ScaleY: Double read Get_ScaleY write Set_ScaleY;
    property ScaleZ: Double read Get_ScaleZ write Set_ScaleZ;
    property type_: Integer read Get_type_ write Set_type_;
    property IsUniform: WordBool read Get_IsUniform write Set_IsUniform;
    property CoordinateSystem: IDispatch read Get_CoordinateSystem write Set_CoordinateSystem;
    property Bodies: OleVariant read Get_Bodies write Set_Bodies;
    property ScaleUniform: Double read Get_ScaleUniform write Set_ScaleUniform;
  end;

// *********************************************************************//
// DispIntf:  IScaleFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E7631115-F299-4852-9D37-FC9508A00BC1}
// *********************************************************************//
  IScaleFeatureDataDisp = dispinterface
    ['{E7631115-F299-4852-9D37-FC9508A00BC1}']
    procedure GetScale(out X: Double; out Y: Double; out Z: Double; out Uniform: WordBool); dispid 1;
    procedure SetScale(X: Double; Y: Double; Z: Double; Uniform: WordBool); dispid 2;
    property ScaleX: Double dispid 3;
    property ScaleY: Double dispid 4;
    property ScaleZ: Double dispid 5;
    property type_: Integer dispid 6;
    property IsUniform: WordBool dispid 7;
    property CoordinateSystem: IDispatch dispid 8;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 9;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 10;
    procedure ReleaseSelectionAccess; dispid 11;
    function GetBodiesCount: Integer; dispid 12;
    property Bodies: OleVariant dispid 13;
    function IGetBodies(Count: Integer): IBody2; dispid 14;
    procedure ISetBodies(Count: Integer; var BodyArr: IBody2); dispid 15;
    property ScaleUniform: Double dispid 16;
  end;

// *********************************************************************//
// Interface: IShellFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {58252A5A-82AF-49EF-A2FE-E8C995132F84}
// *********************************************************************//
  IShellFeatureData = interface(IDispatch)
    ['{58252A5A-82AF-49EF-A2FE-E8C995132F84}']
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Get_Direction: Integer; safecall;
    procedure Set_Direction(Direction: Integer); safecall;
    function Get_FacesRemovedCount: Integer; safecall;
    function IGetFacesRemoved(Count: SYSINT): IDispatch; safecall;
    procedure ISetFacesRemoved(Count: Integer; var FaceArray: IDispatch); safecall;
    function Get_FacesRemoved: OleVariant; safecall;
    procedure Set_FacesRemoved(FaceArray: OleVariant); safecall;
    function GetMultipleThicknessFacesCount: Integer; safecall;
    function IGetMultipleThicknessFaces(Count: SYSINT): IDispatch; safecall;
    procedure ISetMultipleThicknessFaces(Count: Integer; var FaceArray: IDispatch); safecall;
    function Get_MultipleThicknessFaces: OleVariant; safecall;
    procedure Set_MultipleThicknessFaces(FaceArray: OleVariant); safecall;
    function GetMultipleThicknessAtIndex(Index: SYSINT): Double; safecall;
    procedure SetMultipleThicknessAtIndex(Index: SYSINT; Thickness: Double); safecall;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property Direction: Integer read Get_Direction write Set_Direction;
    property FacesRemovedCount: Integer read Get_FacesRemovedCount;
    property FacesRemoved: OleVariant read Get_FacesRemoved write Set_FacesRemoved;
    property MultipleThicknessFaces: OleVariant read Get_MultipleThicknessFaces write Set_MultipleThicknessFaces;
  end;

// *********************************************************************//
// DispIntf:  IShellFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {58252A5A-82AF-49EF-A2FE-E8C995132F84}
// *********************************************************************//
  IShellFeatureDataDisp = dispinterface
    ['{58252A5A-82AF-49EF-A2FE-E8C995132F84}']
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Thickness: Double dispid 4;
    property Direction: Integer dispid 5;
    property FacesRemovedCount: Integer readonly dispid 6;
    function IGetFacesRemoved(Count: SYSINT): IDispatch; dispid 7;
    procedure ISetFacesRemoved(Count: Integer; var FaceArray: IDispatch); dispid 8;
    property FacesRemoved: OleVariant dispid 9;
    function GetMultipleThicknessFacesCount: Integer; dispid 10;
    function IGetMultipleThicknessFaces(Count: SYSINT): IDispatch; dispid 11;
    procedure ISetMultipleThicknessFaces(Count: Integer; var FaceArray: IDispatch); dispid 12;
    property MultipleThicknessFaces: OleVariant dispid 13;
    function GetMultipleThicknessAtIndex(Index: SYSINT): Double; dispid 14;
    procedure SetMultipleThicknessAtIndex(Index: SYSINT; Thickness: Double); dispid 15;
  end;

// *********************************************************************//
// Interface: ISweepFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {07799F9D-7E4F-40DE-87AE-AEBAABA6A3BC}
// *********************************************************************//
  ISweepFeatureData = interface(IDispatch)
    ['{07799F9D-7E4F-40DE-87AE-AEBAABA6A3BC}']
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Profile: IDispatch; safecall;
    procedure Set_Profile(const PDisp: IDispatch); safecall;
    function Get_Path: IDispatch; safecall;
    procedure Set_Path(const PDisp: IDispatch); safecall;
    function Get_TwistControlType: Smallint; safecall;
    procedure Set_TwistControlType(TwistType: Smallint); safecall;
    function Get_MaintainTangency: WordBool; safecall;
    procedure Set_MaintainTangency(Tangency: WordBool); safecall;
    function Get_AdvancedSmoothing: WordBool; safecall;
    procedure Set_AdvancedSmoothing(Smoothing: WordBool); safecall;
    function Get_AlignWithEndFaces: WordBool; safecall;
    procedure Set_AlignWithEndFaces(AlignEndFaces: WordBool); safecall;
    function IGetGuideCurves(Count: Smallint): IDispatch; safecall;
    procedure ISetGuideCurves(Count: Smallint; var PDisp: IDispatch); safecall;
    function Get_GuideCurves: OleVariant; safecall;
    procedure Set_GuideCurves(ArrayIn: OleVariant); safecall;
    function Get_StartTangencyType: Smallint; safecall;
    procedure Set_StartTangencyType(TangencyType: Smallint); safecall;
    function Get_EndTangencyType: Smallint; safecall;
    procedure Set_EndTangencyType(TangencyType: Smallint); safecall;
    function IsThinFeature: WordBool; safecall;
    function Get_ThinWallType: Smallint; safecall;
    procedure Set_ThinWallType(ThinType: Smallint); safecall;
    function GetWallThickness(Forward: WordBool): Double; safecall;
    procedure SetWallThickness(Forward: WordBool; WallThickness: Double); safecall;
    function GetGuideCurvesCount: Smallint; safecall;
    function IsBossFeature: WordBool; safecall;
    function Get_StartDirectionVector: IDispatch; safecall;
    procedure Set_StartDirectionVector(const PDisp: IDispatch); safecall;
    function Get_EndDirectionVector: IDispatch; safecall;
    procedure Set_EndDirectionVector(const PDisp: IDispatch); safecall;
    function Get_TangentPropagation: WordBool; safecall;
    procedure Set_TangentPropagation(TangentPropagation: WordBool); safecall;
    function GetPathType: Integer; safecall;
    function GetGuideCurvesType: OleVariant; safecall;
    function IGetGuideCurvesType(Count: Integer): Integer; safecall;
    function Get_Merge: WordBool; safecall;
    procedure Set_Merge(Merge: WordBool); safecall;
    function Get_FeatureScope: WordBool; safecall;
    procedure Set_FeatureScope(FeatScope: WordBool); safecall;
    function Get_AutoSelect: WordBool; safecall;
    procedure Set_AutoSelect(AutoSel: WordBool); safecall;
    function Get_FeatureScopeBodies: OleVariant; safecall;
    procedure Set_FeatureScopeBodies(BodyVar: OleVariant); safecall;
    function GetFeatureScopeBodiesCount: Integer; safecall;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; safecall;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); safecall;
    function Get_MergeSmoothFaces: WordBool; safecall;
    procedure Set_MergeSmoothFaces(BMerge: WordBool); safecall;
    function GetTwistAngle: Double; safecall;
    procedure SetTwistAngle(Angle: Double); safecall;
    function Get_PathAlignmentType: Integer; safecall;
    procedure Set_PathAlignmentType(Type_: Integer); safecall;
    function GetPathAlignmentDirectionVector(out Type_: Integer): IDispatch; safecall;
    procedure SetPathAlignmentDirectionVector(const Dir: IDispatch); safecall;
    property Profile: IDispatch read Get_Profile write Set_Profile;
    property Path: IDispatch read Get_Path write Set_Path;
    property TwistControlType: Smallint read Get_TwistControlType write Set_TwistControlType;
    property MaintainTangency: WordBool read Get_MaintainTangency write Set_MaintainTangency;
    property AdvancedSmoothing: WordBool read Get_AdvancedSmoothing write Set_AdvancedSmoothing;
    property AlignWithEndFaces: WordBool read Get_AlignWithEndFaces write Set_AlignWithEndFaces;
    property GuideCurves: OleVariant read Get_GuideCurves write Set_GuideCurves;
    property StartTangencyType: Smallint read Get_StartTangencyType write Set_StartTangencyType;
    property EndTangencyType: Smallint read Get_EndTangencyType write Set_EndTangencyType;
    property ThinWallType: Smallint read Get_ThinWallType write Set_ThinWallType;
    property StartDirectionVector: IDispatch read Get_StartDirectionVector write Set_StartDirectionVector;
    property EndDirectionVector: IDispatch read Get_EndDirectionVector write Set_EndDirectionVector;
    property TangentPropagation: WordBool read Get_TangentPropagation write Set_TangentPropagation;
    property Merge: WordBool read Get_Merge write Set_Merge;
    property FeatureScope: WordBool read Get_FeatureScope write Set_FeatureScope;
    property AutoSelect: WordBool read Get_AutoSelect write Set_AutoSelect;
    property FeatureScopeBodies: OleVariant read Get_FeatureScopeBodies write Set_FeatureScopeBodies;
    property MergeSmoothFaces: WordBool read Get_MergeSmoothFaces write Set_MergeSmoothFaces;
    property PathAlignmentType: Integer read Get_PathAlignmentType write Set_PathAlignmentType;
  end;

// *********************************************************************//
// DispIntf:  ISweepFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {07799F9D-7E4F-40DE-87AE-AEBAABA6A3BC}
// *********************************************************************//
  ISweepFeatureDataDisp = dispinterface
    ['{07799F9D-7E4F-40DE-87AE-AEBAABA6A3BC}']
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Profile: IDispatch dispid 4;
    property Path: IDispatch dispid 5;
    property TwistControlType: Smallint dispid 6;
    property MaintainTangency: WordBool dispid 7;
    property AdvancedSmoothing: WordBool dispid 8;
    property AlignWithEndFaces: WordBool dispid 9;
    function IGetGuideCurves(Count: Smallint): IDispatch; dispid 10;
    procedure ISetGuideCurves(Count: Smallint; var PDisp: IDispatch); dispid 11;
    property GuideCurves: OleVariant dispid 12;
    property StartTangencyType: Smallint dispid 13;
    property EndTangencyType: Smallint dispid 14;
    function IsThinFeature: WordBool; dispid 15;
    property ThinWallType: Smallint dispid 16;
    function GetWallThickness(Forward: WordBool): Double; dispid 17;
    procedure SetWallThickness(Forward: WordBool; WallThickness: Double); dispid 18;
    function GetGuideCurvesCount: Smallint; dispid 19;
    function IsBossFeature: WordBool; dispid 20;
    property StartDirectionVector: IDispatch dispid 21;
    property EndDirectionVector: IDispatch dispid 22;
    property TangentPropagation: WordBool dispid 23;
    function GetPathType: Integer; dispid 24;
    function GetGuideCurvesType: OleVariant; dispid 25;
    function IGetGuideCurvesType(Count: Integer): Integer; dispid 26;
    property Merge: WordBool dispid 27;
    property FeatureScope: WordBool dispid 28;
    property AutoSelect: WordBool dispid 29;
    property FeatureScopeBodies: OleVariant dispid 30;
    function GetFeatureScopeBodiesCount: Integer; dispid 31;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; dispid 32;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); dispid 33;
    property MergeSmoothFaces: WordBool dispid 34;
    function GetTwistAngle: Double; dispid 35;
    procedure SetTwistAngle(Angle: Double); dispid 36;
    property PathAlignmentType: Integer dispid 37;
    function GetPathAlignmentDirectionVector(out Type_: Integer): IDispatch; dispid 38;
    procedure SetPathAlignmentDirectionVector(const Dir: IDispatch); dispid 39;
  end;

// *********************************************************************//
// Interface: ILoftFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EE8D87FE-5202-45E9-8E5C-91084C134168}
// *********************************************************************//
  ILoftFeatureData = interface(IDispatch)
    ['{EE8D87FE-5202-45E9-8E5C-91084C134168}']
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetProfileCount: Smallint; safecall;
    function IGetProfiles(Count: Smallint): IDispatch; safecall;
    procedure ISetProfiles(Count: Smallint; var PDisp: IDispatch); safecall;
    function Get_Profiles: OleVariant; safecall;
    procedure Set_Profiles(PDisp: OleVariant); safecall;
    function GetGuideTangencyType(GuideIndex: Smallint): Smallint; safecall;
    procedure SetGuideTangencyType(GuideIndex: Smallint; TangType: Smallint); safecall;
    function Get_MaintainTangency: WordBool; safecall;
    procedure Set_MaintainTangency(Tangency: WordBool); safecall;
    function Get_AdvancedSmoothing: WordBool; safecall;
    procedure Set_AdvancedSmoothing(Smoothing: WordBool); safecall;
    function Get_Close: WordBool; safecall;
    procedure Set_Close(IsClosed: WordBool); safecall;
    function GetGuideCurvesCount: Smallint; safecall;
    function IGetGuideCurves(Count: Smallint): IDispatch; safecall;
    procedure ISetGuideCurves(Count: Smallint; var PDisp: IDispatch); safecall;
    function Get_GuideCurves: OleVariant; safecall;
    procedure Set_GuideCurves(ArrayIn: OleVariant); safecall;
    function Get_StartTangencyType: Smallint; safecall;
    procedure Set_StartTangencyType(TangencyType: Smallint); safecall;
    function Get_EndTangencyType: Smallint; safecall;
    procedure Set_EndTangencyType(TangencyType: Smallint); safecall;
    function IsThinFeature: WordBool; safecall;
    function Get_ThinWallType: Smallint; safecall;
    procedure Set_ThinWallType(ThinType: Smallint); safecall;
    function GetWallThickness(Forward: WordBool): Double; safecall;
    procedure SetWallThickness(Forward: WordBool; WallThickness: Double); safecall;
    function IsBossFeature: WordBool; safecall;
    function Get_StartDirectionVector: IDispatch; safecall;
    procedure Set_StartDirectionVector(const PDisp: IDispatch); safecall;
    function Get_StartTangentLength: Double; safecall;
    procedure Set_StartTangentLength(Length: Double); safecall;
    function Get_ReverseStartTangentDirection: WordBool; safecall;
    procedure Set_ReverseStartTangentDirection(Direction: WordBool); safecall;
    function Get_EndDirectionVector: IDispatch; safecall;
    procedure Set_EndDirectionVector(const PDisp: IDispatch); safecall;
    function Get_EndTangentLength: Double; safecall;
    procedure Set_EndTangentLength(Length: Double); safecall;
    function Get_ReverseEndTangentDirection: WordBool; safecall;
    procedure Set_ReverseEndTangentDirection(Direction: WordBool); safecall;
    function Get_CenterLine: IDispatch; safecall;
    procedure Set_CenterLine(const PDisp: IDispatch); safecall;
    function GetGuideCurvesType: OleVariant; safecall;
    function IGetGuideCurvesType(Count: Integer): Integer; safecall;
    function Get_Merge: WordBool; safecall;
    procedure Set_Merge(IsMerge: WordBool); safecall;
    function Get_FeatureScope: WordBool; safecall;
    procedure Set_FeatureScope(FeatScope: WordBool); safecall;
    function Get_AutoSelect: WordBool; safecall;
    procedure Set_AutoSelect(AutoSel: WordBool); safecall;
    function Get_FeatureScopeBodies: OleVariant; safecall;
    procedure Set_FeatureScopeBodies(BodyVar: OleVariant); safecall;
    function GetFeatureScopeBodiesCount: Integer; safecall;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; safecall;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); safecall;
    function Get_NumberOfSections: Double; safecall;
    procedure Set_NumberOfSections(Num: Double); safecall;
    function Get_StartConstraintApplyToAll: WordBool; safecall;
    procedure Set_StartConstraintApplyToAll(BApplyAll: WordBool); safecall;
    function Get_EndConstraintApplyToAll: WordBool; safecall;
    procedure Set_EndConstraintApplyToAll(BApplyAll: WordBool); safecall;
    function Get_GuideCurveInfluence: Integer; safecall;
    procedure Set_GuideCurveInfluence(Type_: Integer); safecall;
    function Get_StartConstraintDraftAngle: Double; safecall;
    procedure Set_StartConstraintDraftAngle(DraftAngle: Double); safecall;
    function Get_StartConstraintDraftAngleDirection: WordBool; safecall;
    procedure Set_StartConstraintDraftAngleDirection(BReverse: WordBool); safecall;
    function Get_EndConstraintDraftAngle: Double; safecall;
    procedure Set_EndConstraintDraftAngle(DraftAngle: Double); safecall;
    function Get_EndConstraintDraftAngleDirection: WordBool; safecall;
    procedure Set_EndConstraintDraftAngleDirection(BReverse: WordBool); safecall;
    property Profiles: OleVariant read Get_Profiles write Set_Profiles;
    property MaintainTangency: WordBool read Get_MaintainTangency write Set_MaintainTangency;
    property AdvancedSmoothing: WordBool read Get_AdvancedSmoothing write Set_AdvancedSmoothing;
    property Close: WordBool read Get_Close write Set_Close;
    property GuideCurves: OleVariant read Get_GuideCurves write Set_GuideCurves;
    property StartTangencyType: Smallint read Get_StartTangencyType write Set_StartTangencyType;
    property EndTangencyType: Smallint read Get_EndTangencyType write Set_EndTangencyType;
    property ThinWallType: Smallint read Get_ThinWallType write Set_ThinWallType;
    property StartDirectionVector: IDispatch read Get_StartDirectionVector write Set_StartDirectionVector;
    property StartTangentLength: Double read Get_StartTangentLength write Set_StartTangentLength;
    property ReverseStartTangentDirection: WordBool read Get_ReverseStartTangentDirection write Set_ReverseStartTangentDirection;
    property EndDirectionVector: IDispatch read Get_EndDirectionVector write Set_EndDirectionVector;
    property EndTangentLength: Double read Get_EndTangentLength write Set_EndTangentLength;
    property ReverseEndTangentDirection: WordBool read Get_ReverseEndTangentDirection write Set_ReverseEndTangentDirection;
    property CenterLine: IDispatch read Get_CenterLine write Set_CenterLine;
    property Merge: WordBool read Get_Merge write Set_Merge;
    property FeatureScope: WordBool read Get_FeatureScope write Set_FeatureScope;
    property AutoSelect: WordBool read Get_AutoSelect write Set_AutoSelect;
    property FeatureScopeBodies: OleVariant read Get_FeatureScopeBodies write Set_FeatureScopeBodies;
    property NumberOfSections: Double read Get_NumberOfSections write Set_NumberOfSections;
    property StartConstraintApplyToAll: WordBool read Get_StartConstraintApplyToAll write Set_StartConstraintApplyToAll;
    property EndConstraintApplyToAll: WordBool read Get_EndConstraintApplyToAll write Set_EndConstraintApplyToAll;
    property GuideCurveInfluence: Integer read Get_GuideCurveInfluence write Set_GuideCurveInfluence;
    property StartConstraintDraftAngle: Double read Get_StartConstraintDraftAngle write Set_StartConstraintDraftAngle;
    property StartConstraintDraftAngleDirection: WordBool read Get_StartConstraintDraftAngleDirection write Set_StartConstraintDraftAngleDirection;
    property EndConstraintDraftAngle: Double read Get_EndConstraintDraftAngle write Set_EndConstraintDraftAngle;
    property EndConstraintDraftAngleDirection: WordBool read Get_EndConstraintDraftAngleDirection write Set_EndConstraintDraftAngleDirection;
  end;

// *********************************************************************//
// DispIntf:  ILoftFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EE8D87FE-5202-45E9-8E5C-91084C134168}
// *********************************************************************//
  ILoftFeatureDataDisp = dispinterface
    ['{EE8D87FE-5202-45E9-8E5C-91084C134168}']
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetProfileCount: Smallint; dispid 4;
    function IGetProfiles(Count: Smallint): IDispatch; dispid 5;
    procedure ISetProfiles(Count: Smallint; var PDisp: IDispatch); dispid 6;
    property Profiles: OleVariant dispid 7;
    function GetGuideTangencyType(GuideIndex: Smallint): Smallint; dispid 8;
    procedure SetGuideTangencyType(GuideIndex: Smallint; TangType: Smallint); dispid 9;
    property MaintainTangency: WordBool dispid 10;
    property AdvancedSmoothing: WordBool dispid 11;
    property Close: WordBool dispid 12;
    function GetGuideCurvesCount: Smallint; dispid 13;
    function IGetGuideCurves(Count: Smallint): IDispatch; dispid 14;
    procedure ISetGuideCurves(Count: Smallint; var PDisp: IDispatch); dispid 15;
    property GuideCurves: OleVariant dispid 16;
    property StartTangencyType: Smallint dispid 17;
    property EndTangencyType: Smallint dispid 18;
    function IsThinFeature: WordBool; dispid 19;
    property ThinWallType: Smallint dispid 20;
    function GetWallThickness(Forward: WordBool): Double; dispid 21;
    procedure SetWallThickness(Forward: WordBool; WallThickness: Double); dispid 22;
    function IsBossFeature: WordBool; dispid 23;
    property StartDirectionVector: IDispatch dispid 24;
    property StartTangentLength: Double dispid 25;
    property ReverseStartTangentDirection: WordBool dispid 26;
    property EndDirectionVector: IDispatch dispid 27;
    property EndTangentLength: Double dispid 28;
    property ReverseEndTangentDirection: WordBool dispid 29;
    property CenterLine: IDispatch dispid 30;
    function GetGuideCurvesType: OleVariant; dispid 31;
    function IGetGuideCurvesType(Count: Integer): Integer; dispid 32;
    property Merge: WordBool dispid 33;
    property FeatureScope: WordBool dispid 34;
    property AutoSelect: WordBool dispid 35;
    property FeatureScopeBodies: OleVariant dispid 36;
    function GetFeatureScopeBodiesCount: Integer; dispid 37;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; dispid 38;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); dispid 39;
    property NumberOfSections: Double dispid 40;
    property StartConstraintApplyToAll: WordBool dispid 41;
    property EndConstraintApplyToAll: WordBool dispid 42;
    property GuideCurveInfluence: Integer dispid 43;
    property StartConstraintDraftAngle: Double dispid 44;
    property StartConstraintDraftAngleDirection: WordBool dispid 45;
    property EndConstraintDraftAngle: Double dispid 46;
    property EndConstraintDraftAngleDirection: WordBool dispid 47;
  end;

// *********************************************************************//
// Interface: IThickenFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {85F4DD78-9430-4937-8504-55D24F2CEE41}
// *********************************************************************//
  IThickenFeatureData = interface(IDispatch)
    ['{85F4DD78-9430-4937-8504-55D24F2CEE41}']
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Surface: IDispatch; safecall;
    procedure Set_Surface(const PDispSurf: IDispatch); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Get_ThicknessSide: Smallint; safecall;
    procedure Set_ThicknessSide(Side: Smallint); safecall;
    function Get_FillVolume: WordBool; safecall;
    procedure Set_FillVolume(IsFill: WordBool); safecall;
    function Get_Merge: WordBool; safecall;
    procedure Set_Merge(IsMerge: WordBool); safecall;
    function Get_FeatureScope: WordBool; safecall;
    procedure Set_FeatureScope(FeatScope: WordBool); safecall;
    function Get_AutoSelect: WordBool; safecall;
    procedure Set_AutoSelect(AutoSel: WordBool); safecall;
    function Get_FeatureScopeBodies: OleVariant; safecall;
    procedure Set_FeatureScopeBodies(BodyVar: OleVariant); safecall;
    function GetFeatureScopeBodiesCount: Integer; safecall;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; safecall;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); safecall;
    function IsBossFeature: WordBool; safecall;
    property Surface: IDispatch read Get_Surface write Set_Surface;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property ThicknessSide: Smallint read Get_ThicknessSide write Set_ThicknessSide;
    property FillVolume: WordBool read Get_FillVolume write Set_FillVolume;
    property Merge: WordBool read Get_Merge write Set_Merge;
    property FeatureScope: WordBool read Get_FeatureScope write Set_FeatureScope;
    property AutoSelect: WordBool read Get_AutoSelect write Set_AutoSelect;
    property FeatureScopeBodies: OleVariant read Get_FeatureScopeBodies write Set_FeatureScopeBodies;
  end;

// *********************************************************************//
// DispIntf:  IThickenFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {85F4DD78-9430-4937-8504-55D24F2CEE41}
// *********************************************************************//
  IThickenFeatureDataDisp = dispinterface
    ['{85F4DD78-9430-4937-8504-55D24F2CEE41}']
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Surface: IDispatch dispid 4;
    property Thickness: Double dispid 5;
    property ThicknessSide: Smallint dispid 6;
    property FillVolume: WordBool dispid 7;
    property Merge: WordBool dispid 8;
    property FeatureScope: WordBool dispid 9;
    property AutoSelect: WordBool dispid 10;
    property FeatureScopeBodies: OleVariant dispid 11;
    function GetFeatureScopeBodiesCount: Integer; dispid 12;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; dispid 13;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); dispid 14;
    function IsBossFeature: WordBool; dispid 15;
  end;

// *********************************************************************//
// Interface: ISurfaceCutFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DFB6C63B-287C-4141-A610-08D94CECE976}
// *********************************************************************//
  ISurfaceCutFeatureData = interface(IDispatch)
    ['{DFB6C63B-287C-4141-A610-08D94CECE976}']
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_SurfaceForCut: IDispatch; safecall;
    procedure Set_SurfaceForCut(const SurfDisp: IDispatch); safecall;
    function Get_Flip: WordBool; safecall;
    procedure Set_Flip(Flip: WordBool); safecall;
    function GetBodyIndexKept: Smallint; safecall;
    property SurfaceForCut: IDispatch read Get_SurfaceForCut write Set_SurfaceForCut;
    property Flip: WordBool read Get_Flip write Set_Flip;
  end;

// *********************************************************************//
// DispIntf:  ISurfaceCutFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DFB6C63B-287C-4141-A610-08D94CECE976}
// *********************************************************************//
  ISurfaceCutFeatureDataDisp = dispinterface
    ['{DFB6C63B-287C-4141-A610-08D94CECE976}']
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property SurfaceForCut: IDispatch dispid 4;
    property Flip: WordBool dispid 5;
    function GetBodyIndexKept: Smallint; dispid 6;
  end;

// *********************************************************************//
// Interface: IReplaceFaceFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D7792E79-5983-45C7-AE7D-966FCB6604D8}
// *********************************************************************//
  IReplaceFaceFeatureData = interface(IDispatch)
    ['{D7792E79-5983-45C7-AE7D-966FCB6604D8}']
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetReplacementSurfacesCount: Integer; safecall;
    function IGetReplacementSurfaces(Count: Integer): IFeature; safecall;
    procedure ISetReplacementSurfaces(Count: Integer; var SurfDisp: IFeature); safecall;
    function Get_ReplacementSurfaces: OleVariant; safecall;
    procedure Set_ReplacementSurfaces(SurfDisp: OleVariant); safecall;
    function GetFacesForReplacementCount: Integer; safecall;
    function IGetFacesForReplacement(Count: Integer): IFace2; safecall;
    procedure ISetFacesForReplacement(Count: Integer; var SurfDisp: IFace2); safecall;
    function Get_FacesForReplacement: OleVariant; safecall;
    procedure Set_FacesForReplacement(SurfDisp: OleVariant); safecall;
    property ReplacementSurfaces: OleVariant read Get_ReplacementSurfaces write Set_ReplacementSurfaces;
    property FacesForReplacement: OleVariant read Get_FacesForReplacement write Set_FacesForReplacement;
  end;

// *********************************************************************//
// DispIntf:  IReplaceFaceFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D7792E79-5983-45C7-AE7D-966FCB6604D8}
// *********************************************************************//
  IReplaceFaceFeatureDataDisp = dispinterface
    ['{D7792E79-5983-45C7-AE7D-966FCB6604D8}']
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetReplacementSurfacesCount: Integer; dispid 4;
    function IGetReplacementSurfaces(Count: Integer): IFeature; dispid 5;
    procedure ISetReplacementSurfaces(Count: Integer; var SurfDisp: IFeature); dispid 6;
    property ReplacementSurfaces: OleVariant dispid 7;
    function GetFacesForReplacementCount: Integer; dispid 8;
    function IGetFacesForReplacement(Count: Integer): IFace2; dispid 9;
    procedure ISetFacesForReplacement(Count: Integer; var SurfDisp: IFace2); dispid 10;
    property FacesForReplacement: OleVariant dispid 11;
  end;

// *********************************************************************//
// Interface: IMacroFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {739AC7CE-9017-11D5-AF07-0002B34143E5}
// *********************************************************************//
  IMacroFeatureData = interface(IDispatch)
    ['{739AC7CE-9017-11D5-AF07-0002B34143E5}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_MacroFileName: WideString; safecall;
    procedure Set_MacroFileName(const FileName: WideString); safecall;
    function Get_ModuleName: WideString; safecall;
    procedure Set_ModuleName(const ModuleName: WideString); safecall;
    function Get_ProcedureName: WideString; safecall;
    procedure Set_ProcedureName(const ProcedureName: WideString); safecall;
    function GetModuleNames: OleVariant; safecall;
    function GetModuleCount: Integer; safecall;
    procedure IGetModuleNames(ModuleCount: Integer; out ModuleNames: WideString); safecall;
    function GetProcedureNames(const ModuleName: WideString): OleVariant; safecall;
    function GetProcedureCount(const ModuleName: WideString): Integer; safecall;
    procedure IGetProcedureNames(const ModuleName: WideString; ProcedureCount: Integer; 
                                 out ProcedureNames: WideString); safecall;
    function Get_PropertyManagerHandleMacroFileName: WideString; safecall;
    procedure Set_PropertyManagerHandleMacroFileName(const FileName: WideString); safecall;
    function Get_PropertyManagerHandleModuleName: WideString; safecall;
    procedure Set_PropertyManagerHandleModuleName(const ModuleName: WideString); safecall;
    function Get_PropertyManagerHandleProcedureName: WideString; safecall;
    procedure Set_PropertyManagerHandleProcedureName(const ProcedureName: WideString); safecall;
    function GetPropertyManagerHandleModuleNames: OleVariant; safecall;
    function GetPropertyManagerHandleModuleCount: Integer; safecall;
    procedure IGetPropertyManagerHandleModuleNames(ModuleCount: Integer; out ModuleNames: WideString); safecall;
    function GetPropertyManagerHandleProcedureNames(const ModuleName: WideString): OleVariant; safecall;
    function GetPropertyManagerHandleProcedureCount(const ModuleName: WideString): Integer; safecall;
    procedure IGetPropertyManagerHandleProcedureNames(const ModuleName: WideString; 
                                                      ProcedureCount: Integer; 
                                                      out ProcedureNames: WideString); safecall;
    procedure GetSelections(out Objects: OleVariant; out ObjectTypes: OleVariant; 
                            out SelMarks: OleVariant); safecall;
    procedure SetSelections(Objects: OleVariant; SelMarks: OleVariant); safecall;
    function GetSelectionCount: Integer; safecall;
    procedure IGetSelections(SelCount: Integer; out Objects: IDispatch; out ObjectTypes: Integer; 
                             out SelMarks: Integer); safecall;
    procedure ISetSelections(SelCount: Integer; var Objects: IDispatch; var SelMarks: Integer); safecall;
    procedure GetParameters(out ParamNames: OleVariant; out ParamTypes: OleVariant; 
                            out ParamValues: OleVariant); safecall;
    procedure SetParameters(ParamNames: OleVariant; ParamTypes: OleVariant; ParamValues: OleVariant); safecall;
    function GetParameterCount: Integer; safecall;
    procedure IGetParameters(ParamCount: Integer; out ParamNames: WideString; 
                             out ParamTypes: Integer; out ParamValues: WideString); safecall;
    procedure ISetParameters(ParamCount: Integer; var ParamNames: WideString; 
                             var ParamTypes: Integer; var ParamValues: WideString); safecall;
    procedure GetIntegerByName(const ParamName: WideString; out ParamValue: Integer); safecall;
    procedure SetIntegerByName(const ParamName: WideString; ParamValue: Integer); safecall;
    procedure GetDoubleByName(const ParamName: WideString; out ParamValue: Double); safecall;
    procedure SetDoubleByName(const ParamName: WideString; ParamValue: Double); safecall;
    procedure GetStringByName(const ParamName: WideString; out ParamValue: WideString); safecall;
    procedure SetStringByName(const ParamName: WideString; const ParamValue: WideString); safecall;
    function Get_EditBody: IBody2; safecall;
    procedure Set_EditBody(const EditBody: IBody2); safecall;
    function GetFaceUserId(const Face: IFace2; out Id1: Integer; out Id2: Integer): WordBool; safecall;
    function SetFaceUserId(const Face: IFace2; Id1: Integer; Id2: Integer): WordBool; safecall;
    function GetEdgeUserId(const Edge: IEdge; out Id1: Integer; out Id2: Integer): WordBool; safecall;
    function SetEdgeUserId(const Edge: IEdge; Id1: Integer; Id2: Integer): WordBool; safecall;
    procedure GetSelections2(out Objects: OleVariant; out ObjectTypes: OleVariant; 
                             out SelMarks: OleVariant; out DrViews: OleVariant); safecall;
    procedure SetSelections2(Objects: OleVariant; SelMarks: OleVariant; DrViews: OleVariant); safecall;
    procedure IGetSelections2(SelCount: Integer; out Objects: IDispatch; out ObjectTypes: Integer; 
                              out SelMarks: Integer; out DrViews: IView); safecall;
    procedure ISetSelections2(SelCount: Integer; var Objects: IDispatch; var SelMarks: Integer; 
                              var DrViews: IView); safecall;
    function GetFaceIdType(const Face: IFace2): Integer; safecall;
    function GetEdgeIdType(const Edge: IEdge): Integer; safecall;
    procedure GetEntitiesNeedUserId(const Body: IDispatch; out Faces: OleVariant; 
                                    out Edges: OleVariant); safecall;
    procedure GetEntitiesNeedUserIdCount(const Body: IBody2; out FaceCount: Integer; 
                                         out EdgeCount: Integer); safecall;
    procedure IGetEntitiesNeedUserId(const Body: IBody2; FaceCount: Integer; out Faces: IFace2; 
                                     EdgeCount: Integer; out Edges: IEdge); safecall;
    function IsCOMFeature: WordBool; safecall;
    function GetProgId: WideString; safecall;
    function Get_SecurityHandleMacroFileName: WideString; safecall;
    procedure Set_SecurityHandleMacroFileName(const FileName: WideString); safecall;
    function Get_SecurityHandleModuleName: WideString; safecall;
    procedure Set_SecurityHandleModuleName(const ModuleName: WideString); safecall;
    function Get_SecurityHandleProcedureName: WideString; safecall;
    procedure Set_SecurityHandleProcedureName(const ProcedureName: WideString); safecall;
    function GetBaseName: WideString; safecall;
    function GetDisplayDimensions: OleVariant; safecall;
    function GetDisplayDimensionCount: Integer; safecall;
    procedure IGetDisplayDimensions(DimCount: Integer; out Dims: IDisplayDimension); safecall;
    function Get_IconFiles: OleVariant; safecall;
    procedure Set_IconFiles(IconFiles: OleVariant); safecall;
    function GetIconFileCount: Integer; safecall;
    procedure IGetIconFiles(IconCount: Integer; out IconFiles: WideString); safecall;
    procedure ISetIconFiles(IconCount: Integer; var IconFiles: WideString); safecall;
    function Get_PatternTransform: IMathTransform; safecall;
    procedure GetSelections3(out Objects: OleVariant; out ObjectTypes: OleVariant; 
                             out SelMarks: OleVariant; out DrViews: OleVariant; 
                             out ComponentXForms: OleVariant); safecall;
    procedure IGetSelections3(SelCount: Integer; out Objects: IDispatch; out ObjectTypes: Integer; 
                              out SelMarks: Integer; out DrViews: IView; 
                              out ComponentXForms: IMathTransform); safecall;
    function GetEditTargetTransform: IMathTransform; safecall;
    function Get_FeatureTransform: IMathTransform; safecall;
    procedure Set_FeatureTransform(const Xform: IMathTransform); safecall;
    function Get_Parents: OleVariant; safecall;
    procedure Set_Parents(PFeatures: OleVariant); safecall;
    function GetParentsCount: Integer; safecall;
    procedure IGetParents(ParentCount: Integer; out PFeatures: IFeature); safecall;
    procedure ISetParents(ParentCount: Integer; var PFeatures: IFeature); safecall;
    function Get_CurrentConfiguration: IConfiguration; safecall;
    procedure SetProgId(const ProgId: WideString); safecall;
    function Get_MacroFileEmbedded: WordBool; safecall;
    function EmbedMacroFile: WordBool; safecall;
    function Get_EditBodies: OleVariant; safecall;
    procedure Set_EditBodies(PBodies: OleVariant); safecall;
    function GetEditBodiesCount: Integer; safecall;
    procedure IGetEditBodies(BodiesCount: Integer; out PBodies: IBody2); safecall;
    procedure ISetEditBodies(BodiesCount: Integer; var PBodies: IBody2); safecall;
    property MacroFileName: WideString read Get_MacroFileName write Set_MacroFileName;
    property ModuleName: WideString read Get_ModuleName write Set_ModuleName;
    property ProcedureName: WideString read Get_ProcedureName write Set_ProcedureName;
    property PropertyManagerHandleMacroFileName: WideString read Get_PropertyManagerHandleMacroFileName write Set_PropertyManagerHandleMacroFileName;
    property PropertyManagerHandleModuleName: WideString read Get_PropertyManagerHandleModuleName write Set_PropertyManagerHandleModuleName;
    property PropertyManagerHandleProcedureName: WideString read Get_PropertyManagerHandleProcedureName write Set_PropertyManagerHandleProcedureName;
    property EditBody: IBody2 read Get_EditBody write Set_EditBody;
    property SecurityHandleMacroFileName: WideString read Get_SecurityHandleMacroFileName write Set_SecurityHandleMacroFileName;
    property SecurityHandleModuleName: WideString read Get_SecurityHandleModuleName write Set_SecurityHandleModuleName;
    property SecurityHandleProcedureName: WideString read Get_SecurityHandleProcedureName write Set_SecurityHandleProcedureName;
    property IconFiles: OleVariant read Get_IconFiles write Set_IconFiles;
    property PatternTransform: IMathTransform read Get_PatternTransform;
    property FeatureTransform: IMathTransform read Get_FeatureTransform write Set_FeatureTransform;
    property Parents: OleVariant read Get_Parents write Set_Parents;
    property CurrentConfiguration: IConfiguration read Get_CurrentConfiguration;
    property MacroFileEmbedded: WordBool read Get_MacroFileEmbedded;
    property EditBodies: OleVariant read Get_EditBodies write Set_EditBodies;
  end;

// *********************************************************************//
// DispIntf:  IMacroFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {739AC7CE-9017-11D5-AF07-0002B34143E5}
// *********************************************************************//
  IMacroFeatureDataDisp = dispinterface
    ['{739AC7CE-9017-11D5-AF07-0002B34143E5}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property MacroFileName: WideString dispid 4;
    property ModuleName: WideString dispid 5;
    property ProcedureName: WideString dispid 6;
    function GetModuleNames: OleVariant; dispid 7;
    function GetModuleCount: Integer; dispid 8;
    procedure IGetModuleNames(ModuleCount: Integer; out ModuleNames: WideString); dispid 9;
    function GetProcedureNames(const ModuleName: WideString): OleVariant; dispid 10;
    function GetProcedureCount(const ModuleName: WideString): Integer; dispid 11;
    procedure IGetProcedureNames(const ModuleName: WideString; ProcedureCount: Integer; 
                                 out ProcedureNames: WideString); dispid 12;
    property PropertyManagerHandleMacroFileName: WideString dispid 13;
    property PropertyManagerHandleModuleName: WideString dispid 14;
    property PropertyManagerHandleProcedureName: WideString dispid 15;
    function GetPropertyManagerHandleModuleNames: OleVariant; dispid 16;
    function GetPropertyManagerHandleModuleCount: Integer; dispid 17;
    procedure IGetPropertyManagerHandleModuleNames(ModuleCount: Integer; out ModuleNames: WideString); dispid 18;
    function GetPropertyManagerHandleProcedureNames(const ModuleName: WideString): OleVariant; dispid 19;
    function GetPropertyManagerHandleProcedureCount(const ModuleName: WideString): Integer; dispid 20;
    procedure IGetPropertyManagerHandleProcedureNames(const ModuleName: WideString; 
                                                      ProcedureCount: Integer; 
                                                      out ProcedureNames: WideString); dispid 21;
    procedure GetSelections(out Objects: OleVariant; out ObjectTypes: OleVariant; 
                            out SelMarks: OleVariant); dispid 22;
    procedure SetSelections(Objects: OleVariant; SelMarks: OleVariant); dispid 23;
    function GetSelectionCount: Integer; dispid 24;
    procedure IGetSelections(SelCount: Integer; out Objects: IDispatch; out ObjectTypes: Integer; 
                             out SelMarks: Integer); dispid 25;
    procedure ISetSelections(SelCount: Integer; var Objects: IDispatch; var SelMarks: Integer); dispid 26;
    procedure GetParameters(out ParamNames: OleVariant; out ParamTypes: OleVariant; 
                            out ParamValues: OleVariant); dispid 27;
    procedure SetParameters(ParamNames: OleVariant; ParamTypes: OleVariant; ParamValues: OleVariant); dispid 28;
    function GetParameterCount: Integer; dispid 29;
    procedure IGetParameters(ParamCount: Integer; out ParamNames: WideString; 
                             out ParamTypes: Integer; out ParamValues: WideString); dispid 30;
    procedure ISetParameters(ParamCount: Integer; var ParamNames: WideString; 
                             var ParamTypes: Integer; var ParamValues: WideString); dispid 31;
    procedure GetIntegerByName(const ParamName: WideString; out ParamValue: Integer); dispid 32;
    procedure SetIntegerByName(const ParamName: WideString; ParamValue: Integer); dispid 33;
    procedure GetDoubleByName(const ParamName: WideString; out ParamValue: Double); dispid 34;
    procedure SetDoubleByName(const ParamName: WideString; ParamValue: Double); dispid 35;
    procedure GetStringByName(const ParamName: WideString; out ParamValue: WideString); dispid 36;
    procedure SetStringByName(const ParamName: WideString; const ParamValue: WideString); dispid 37;
    property EditBody: IBody2 dispid 38;
    function GetFaceUserId(const Face: IFace2; out Id1: Integer; out Id2: Integer): WordBool; dispid 39;
    function SetFaceUserId(const Face: IFace2; Id1: Integer; Id2: Integer): WordBool; dispid 40;
    function GetEdgeUserId(const Edge: IEdge; out Id1: Integer; out Id2: Integer): WordBool; dispid 41;
    function SetEdgeUserId(const Edge: IEdge; Id1: Integer; Id2: Integer): WordBool; dispid 42;
    procedure GetSelections2(out Objects: OleVariant; out ObjectTypes: OleVariant; 
                             out SelMarks: OleVariant; out DrViews: OleVariant); dispid 43;
    procedure SetSelections2(Objects: OleVariant; SelMarks: OleVariant; DrViews: OleVariant); dispid 44;
    procedure IGetSelections2(SelCount: Integer; out Objects: IDispatch; out ObjectTypes: Integer; 
                              out SelMarks: Integer; out DrViews: IView); dispid 45;
    procedure ISetSelections2(SelCount: Integer; var Objects: IDispatch; var SelMarks: Integer; 
                              var DrViews: IView); dispid 46;
    function GetFaceIdType(const Face: IFace2): Integer; dispid 47;
    function GetEdgeIdType(const Edge: IEdge): Integer; dispid 48;
    procedure GetEntitiesNeedUserId(const Body: IDispatch; out Faces: OleVariant; 
                                    out Edges: OleVariant); dispid 49;
    procedure GetEntitiesNeedUserIdCount(const Body: IBody2; out FaceCount: Integer; 
                                         out EdgeCount: Integer); dispid 50;
    procedure IGetEntitiesNeedUserId(const Body: IBody2; FaceCount: Integer; out Faces: IFace2; 
                                     EdgeCount: Integer; out Edges: IEdge); dispid 51;
    function IsCOMFeature: WordBool; dispid 52;
    function GetProgId: WideString; dispid 53;
    property SecurityHandleMacroFileName: WideString dispid 54;
    property SecurityHandleModuleName: WideString dispid 55;
    property SecurityHandleProcedureName: WideString dispid 56;
    function GetBaseName: WideString; dispid 57;
    function GetDisplayDimensions: OleVariant; dispid 58;
    function GetDisplayDimensionCount: Integer; dispid 59;
    procedure IGetDisplayDimensions(DimCount: Integer; out Dims: IDisplayDimension); dispid 60;
    property IconFiles: OleVariant dispid 61;
    function GetIconFileCount: Integer; dispid 62;
    procedure IGetIconFiles(IconCount: Integer; out IconFiles: WideString); dispid 63;
    procedure ISetIconFiles(IconCount: Integer; var IconFiles: WideString); dispid 64;
    property PatternTransform: IMathTransform readonly dispid 65;
    procedure GetSelections3(out Objects: OleVariant; out ObjectTypes: OleVariant; 
                             out SelMarks: OleVariant; out DrViews: OleVariant; 
                             out ComponentXForms: OleVariant); dispid 66;
    procedure IGetSelections3(SelCount: Integer; out Objects: IDispatch; out ObjectTypes: Integer; 
                              out SelMarks: Integer; out DrViews: IView; 
                              out ComponentXForms: IMathTransform); dispid 67;
    function GetEditTargetTransform: IMathTransform; dispid 68;
    property FeatureTransform: IMathTransform dispid 69;
    property Parents: OleVariant dispid 70;
    function GetParentsCount: Integer; dispid 71;
    procedure IGetParents(ParentCount: Integer; out PFeatures: IFeature); dispid 72;
    procedure ISetParents(ParentCount: Integer; var PFeatures: IFeature); dispid 73;
    property CurrentConfiguration: IConfiguration readonly dispid 74;
    procedure SetProgId(const ProgId: WideString); dispid 75;
    property MacroFileEmbedded: WordBool readonly dispid 76;
    function EmbedMacroFile: WordBool; dispid 77;
    property EditBodies: OleVariant dispid 78;
    function GetEditBodiesCount: Integer; dispid 79;
    procedure IGetEditBodies(BodiesCount: Integer; out PBodies: IBody2); dispid 80;
    procedure ISetEditBodies(BodiesCount: Integer; var PBodies: IBody2); dispid 81;
  end;

// *********************************************************************//
// Interface: ICurveDrivenPatternFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {496A6D86-2180-46D8-A973-7885554EFAF3}
// *********************************************************************//
  ICurveDrivenPatternFeatureData = interface(IDispatch)
    ['{496A6D86-2180-46D8-A973-7885554EFAF3}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_D1Direction: IDispatch; safecall;
    procedure Set_D1Direction(const Dir: IDispatch); safecall;
    function Get_D2Direction: IDispatch; safecall;
    procedure Set_D2Direction(const Dir: IDispatch); safecall;
    function Get_D1ReverseDirection: WordBool; safecall;
    procedure Set_D1ReverseDirection(IsRev: WordBool); safecall;
    function Get_D2ReverseDirection: WordBool; safecall;
    procedure Set_D2ReverseDirection(IsRev: WordBool); safecall;
    function Get_D1InstanceCount: Integer; safecall;
    procedure Set_D1InstanceCount(InstCount: Integer); safecall;
    function Get_D2InstanceCount: Integer; safecall;
    procedure Set_D2InstanceCount(InstCount: Integer); safecall;
    function Get_D1IsEqualSpaced: WordBool; safecall;
    procedure Set_D1IsEqualSpaced(IsEq: WordBool); safecall;
    function Get_D2IsEqualSpaced: WordBool; safecall;
    procedure Set_D2IsEqualSpaced(IsEq: WordBool); safecall;
    function Get_D1Spacing: Double; safecall;
    procedure Set_D1Spacing(Spacing: Double); safecall;
    function Get_D2Spacing: Double; safecall;
    procedure Set_D2Spacing(Spacing: Double); safecall;
    function Get_Dir2Specified: WordBool; safecall;
    procedure Set_Dir2Specified(Is2Dir: WordBool); safecall;
    function Get_D2PatternSeedOnly: WordBool; safecall;
    procedure Set_D2PatternSeedOnly(SeedOnly: WordBool); safecall;
    function Get_D1CurveMethod: Integer; safecall;
    procedure Set_D1CurveMethod(CurveMethod: Integer); safecall;
    function Get_D1AlignmentMethod: Integer; safecall;
    procedure Set_D1AlignmentMethod(AlignMethod: Integer); safecall;
    function Get_SkippedItemArray: OleVariant; safecall;
    procedure Set_SkippedItemArray(ArrayOut: OleVariant); safecall;
    function GetSkippedItemCount: Integer; safecall;
    function IGetSkippedItemArray: Integer; safecall;
    procedure ISetSkippedItemArray(FeatCount: Integer; var ArrayDataIn: Integer); safecall;
    function Get_PatternFeatureArray: OleVariant; safecall;
    procedure Set_PatternFeatureArray(ArrayOut: OleVariant); safecall;
    function GetPatternFeatureCount: Integer; safecall;
    function IGetPatternFeatureArray: IDispatch; safecall;
    procedure ISetPatternFeatureArray(FeatCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_GeometryPattern: WordBool; safecall;
    procedure Set_GeometryPattern(Geometry: WordBool); safecall;
    function Get_VarySketch: WordBool; safecall;
    procedure Set_VarySketch(VarySketch: WordBool); safecall;
    function Get_PatternFaceArray: OleVariant; safecall;
    procedure Set_PatternFaceArray(ArrayOut: OleVariant); safecall;
    function GetPatternFaceCount: Integer; safecall;
    function IGetPatternFaceArray: IDispatch; safecall;
    procedure ISetPatternFaceArray(FaceCount: Integer; var ArrayDataIn: IDispatch); safecall;
    function Get_PatternBodyArray: OleVariant; safecall;
    procedure Set_PatternBodyArray(ArrayOut: OleVariant); safecall;
    function GetPatternBodyCount: Integer; safecall;
    function IGetPatternBodyArray: IBody2; safecall;
    procedure ISetPatternBodyArray(BodyCount: Integer; var ArrayDataIn: IBody2); safecall;
    function Get_PropagateVisualProperty: WordBool; safecall;
    procedure Set_PropagateVisualProperty(PropVisProp: WordBool); safecall;
    property D1Direction: IDispatch read Get_D1Direction write Set_D1Direction;
    property D2Direction: IDispatch read Get_D2Direction write Set_D2Direction;
    property D1ReverseDirection: WordBool read Get_D1ReverseDirection write Set_D1ReverseDirection;
    property D2ReverseDirection: WordBool read Get_D2ReverseDirection write Set_D2ReverseDirection;
    property D1InstanceCount: Integer read Get_D1InstanceCount write Set_D1InstanceCount;
    property D2InstanceCount: Integer read Get_D2InstanceCount write Set_D2InstanceCount;
    property D1IsEqualSpaced: WordBool read Get_D1IsEqualSpaced write Set_D1IsEqualSpaced;
    property D2IsEqualSpaced: WordBool read Get_D2IsEqualSpaced write Set_D2IsEqualSpaced;
    property D1Spacing: Double read Get_D1Spacing write Set_D1Spacing;
    property D2Spacing: Double read Get_D2Spacing write Set_D2Spacing;
    property Dir2Specified: WordBool read Get_Dir2Specified write Set_Dir2Specified;
    property D2PatternSeedOnly: WordBool read Get_D2PatternSeedOnly write Set_D2PatternSeedOnly;
    property D1CurveMethod: Integer read Get_D1CurveMethod write Set_D1CurveMethod;
    property D1AlignmentMethod: Integer read Get_D1AlignmentMethod write Set_D1AlignmentMethod;
    property SkippedItemArray: OleVariant read Get_SkippedItemArray write Set_SkippedItemArray;
    property PatternFeatureArray: OleVariant read Get_PatternFeatureArray write Set_PatternFeatureArray;
    property GeometryPattern: WordBool read Get_GeometryPattern write Set_GeometryPattern;
    property VarySketch: WordBool read Get_VarySketch write Set_VarySketch;
    property PatternFaceArray: OleVariant read Get_PatternFaceArray write Set_PatternFaceArray;
    property PatternBodyArray: OleVariant read Get_PatternBodyArray write Set_PatternBodyArray;
    property PropagateVisualProperty: WordBool read Get_PropagateVisualProperty write Set_PropagateVisualProperty;
  end;

// *********************************************************************//
// DispIntf:  ICurveDrivenPatternFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {496A6D86-2180-46D8-A973-7885554EFAF3}
// *********************************************************************//
  ICurveDrivenPatternFeatureDataDisp = dispinterface
    ['{496A6D86-2180-46D8-A973-7885554EFAF3}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property D1Direction: IDispatch dispid 4;
    property D2Direction: IDispatch dispid 5;
    property D1ReverseDirection: WordBool dispid 6;
    property D2ReverseDirection: WordBool dispid 7;
    property D1InstanceCount: Integer dispid 8;
    property D2InstanceCount: Integer dispid 9;
    property D1IsEqualSpaced: WordBool dispid 10;
    property D2IsEqualSpaced: WordBool dispid 11;
    property D1Spacing: Double dispid 12;
    property D2Spacing: Double dispid 13;
    property Dir2Specified: WordBool dispid 14;
    property D2PatternSeedOnly: WordBool dispid 15;
    property D1CurveMethod: Integer dispid 16;
    property D1AlignmentMethod: Integer dispid 17;
    property SkippedItemArray: OleVariant dispid 18;
    function GetSkippedItemCount: Integer; dispid 19;
    function IGetSkippedItemArray: Integer; dispid 20;
    procedure ISetSkippedItemArray(FeatCount: Integer; var ArrayDataIn: Integer); dispid 21;
    property PatternFeatureArray: OleVariant dispid 22;
    function GetPatternFeatureCount: Integer; dispid 23;
    function IGetPatternFeatureArray: IDispatch; dispid 24;
    procedure ISetPatternFeatureArray(FeatCount: Integer; var ArrayDataIn: IDispatch); dispid 25;
    property GeometryPattern: WordBool dispid 26;
    property VarySketch: WordBool dispid 27;
    property PatternFaceArray: OleVariant dispid 28;
    function GetPatternFaceCount: Integer; dispid 29;
    function IGetPatternFaceArray: IDispatch; dispid 30;
    procedure ISetPatternFaceArray(FaceCount: Integer; var ArrayDataIn: IDispatch); dispid 31;
    property PatternBodyArray: OleVariant dispid 32;
    function GetPatternBodyCount: Integer; dispid 33;
    function IGetPatternBodyArray: IBody2; dispid 34;
    procedure ISetPatternBodyArray(BodyCount: Integer; var ArrayDataIn: IBody2); dispid 35;
    property PropagateVisualProperty: WordBool dispid 36;
  end;

// *********************************************************************//
// Interface: IRipFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D3352F26-3333-455E-910B-E0F3A44E76FD}
// *********************************************************************//
  IRipFeatureData = interface(IDispatch)
    ['{D3352F26-3333-455E-910B-E0F3A44E76FD}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetEdgesCount: Integer; safecall;
    function Get_Edges: OleVariant; safecall;
    procedure Set_Edges(EdgeArr: OleVariant); safecall;
    function IGetEdges(EdgeCount: Integer): IDispatch; safecall;
    procedure ISetEdges(EdgeCount: Integer; var EdgeArr: IDispatch); safecall;
    function Get_Gap: Double; safecall;
    procedure Set_Gap(Gap: Double); safecall;
    function GetDirection(const Edge: IDispatch): Integer; safecall;
    procedure SetDirection(const Edge: IDispatch; Dir: Integer); safecall;
    property Edges: OleVariant read Get_Edges write Set_Edges;
    property Gap: Double read Get_Gap write Set_Gap;
  end;

// *********************************************************************//
// DispIntf:  IRipFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D3352F26-3333-455E-910B-E0F3A44E76FD}
// *********************************************************************//
  IRipFeatureDataDisp = dispinterface
    ['{D3352F26-3333-455E-910B-E0F3A44E76FD}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetEdgesCount: Integer; dispid 4;
    property Edges: OleVariant dispid 5;
    function IGetEdges(EdgeCount: Integer): IDispatch; dispid 6;
    procedure ISetEdges(EdgeCount: Integer; var EdgeArr: IDispatch); dispid 7;
    property Gap: Double dispid 8;
    function GetDirection(const Edge: IDispatch): Integer; dispid 9;
    procedure SetDirection(const Edge: IDispatch; Dir: Integer); dispid 10;
  end;

// *********************************************************************//
// Interface: IHemFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D1E54427-2421-413F-9EB3-F568A6BF826D}
// *********************************************************************//
  IHemFeatureData = interface(IDispatch)
    ['{D1E54427-2421-413F-9EB3-F568A6BF826D}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetEdgesCount: Integer; safecall;
    function Get_Edges: OleVariant; safecall;
    procedure Set_Edges(EdgeArr: OleVariant); safecall;
    function IGetEdges(EdgeCount: Integer): IDispatch; safecall;
    procedure ISetEdges(EdgeCount: Integer; var EdgeArr: IDispatch); safecall;
    function Get_MiterGap: Double; safecall;
    procedure Set_MiterGap(Gap: Double); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(Rev: WordBool); safecall;
    function Get_BendPosition: Integer; safecall;
    procedure Set_BendPosition(Pos: Integer); safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(Type_: Integer); safecall;
    function Get_Length: Double; safecall;
    procedure Set_Length(Len: Double); safecall;
    function Get_GapDistance: Double; safecall;
    procedure Set_GapDistance(Dist: Double); safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Ang: Double); safecall;
    function Get_Radius: Double; safecall;
    procedure Set_Radius(Rad: Double); safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); safecall;
    function Get_UseDefaultBendAllowance: WordBool; safecall;
    procedure Set_UseDefaultBendAllowance(UseDefaultBendAllowance: WordBool); safecall;
    property Edges: OleVariant read Get_Edges write Set_Edges;
    property MiterGap: Double read Get_MiterGap write Set_MiterGap;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property BendPosition: Integer read Get_BendPosition write Set_BendPosition;
    property type_: Integer read Get_type_ write Set_type_;
    property Length: Double read Get_Length write Set_Length;
    property GapDistance: Double read Get_GapDistance write Set_GapDistance;
    property Angle: Double read Get_Angle write Set_Angle;
    property Radius: Double read Get_Radius write Set_Radius;
    property UseDefaultBendAllowance: WordBool read Get_UseDefaultBendAllowance write Set_UseDefaultBendAllowance;
  end;

// *********************************************************************//
// DispIntf:  IHemFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D1E54427-2421-413F-9EB3-F568A6BF826D}
// *********************************************************************//
  IHemFeatureDataDisp = dispinterface
    ['{D1E54427-2421-413F-9EB3-F568A6BF826D}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetEdgesCount: Integer; dispid 4;
    property Edges: OleVariant dispid 5;
    function IGetEdges(EdgeCount: Integer): IDispatch; dispid 6;
    procedure ISetEdges(EdgeCount: Integer; var EdgeArr: IDispatch); dispid 7;
    property MiterGap: Double dispid 8;
    property ReverseDirection: WordBool dispid 9;
    property BendPosition: Integer dispid 10;
    property type_: Integer dispid 11;
    property Length: Double dispid 12;
    property GapDistance: Double dispid 13;
    property Angle: Double dispid 14;
    property Radius: Double dispid 15;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 16;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); dispid 17;
    property UseDefaultBendAllowance: WordBool dispid 18;
  end;

// *********************************************************************//
// Interface: IBreakCornerFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DF91CD7F-F4D5-471A-831B-E201B2C02090}
// *********************************************************************//
  IBreakCornerFeatureData = interface(IDispatch)
    ['{DF91CD7F-F4D5-471A-831B-E201B2C02090}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Entities: OleVariant; safecall;
    procedure Set_Entities(EntArray: OleVariant); safecall;
    function GetEntitiesCount: Integer; safecall;
    function IGetEntities(Count: Integer): IDispatch; safecall;
    procedure ISetEntities(EntCount: Integer; var EntArray: IDispatch); safecall;
    function Get_BreakType: Integer; safecall;
    procedure Set_BreakType(Type_: Integer); safecall;
    function Get_Distance: Double; safecall;
    procedure Set_Distance(Dist: Double); safecall;
    function Get_CenteredOnBendLines: WordBool; safecall;
    procedure Set_CenteredOnBendLines(CenteredOnBendLines: WordBool); safecall;
    function Get_InternalCornersOnly: WordBool; safecall;
    procedure Set_InternalCornersOnly(InternalCornersOnly: WordBool); safecall;
    property Entities: OleVariant read Get_Entities write Set_Entities;
    property BreakType: Integer read Get_BreakType write Set_BreakType;
    property Distance: Double read Get_Distance write Set_Distance;
    property CenteredOnBendLines: WordBool read Get_CenteredOnBendLines write Set_CenteredOnBendLines;
    property InternalCornersOnly: WordBool read Get_InternalCornersOnly write Set_InternalCornersOnly;
  end;

// *********************************************************************//
// DispIntf:  IBreakCornerFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DF91CD7F-F4D5-471A-831B-E201B2C02090}
// *********************************************************************//
  IBreakCornerFeatureDataDisp = dispinterface
    ['{DF91CD7F-F4D5-471A-831B-E201B2C02090}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property Entities: OleVariant dispid 4;
    function GetEntitiesCount: Integer; dispid 5;
    function IGetEntities(Count: Integer): IDispatch; dispid 6;
    procedure ISetEntities(EntCount: Integer; var EntArray: IDispatch); dispid 7;
    property BreakType: Integer dispid 8;
    property Distance: Double dispid 9;
    property CenteredOnBendLines: WordBool dispid 10;
    property InternalCornersOnly: WordBool dispid 11;
  end;

// *********************************************************************//
// Interface: IJogFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C75CA537-4ABA-44F3-AC3B-73D5DCD0C834}
// *********************************************************************//
  IJogFeatureData = interface(IDispatch)
    ['{C75CA537-4ABA-44F3-AC3B-73D5DCD0C834}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_FixedFace: IDispatch; safecall;
    procedure Set_FixedFace(const Face: IDispatch); safecall;
    function Get_UseDefaultBendRadius: WordBool; safecall;
    procedure Set_UseDefaultBendRadius(UseDefaultBendRadius: WordBool); safecall;
    function Get_BendRadius: Double; safecall;
    procedure Set_BendRadius(Radius: Double); safecall;
    function Get_JogAngle: Double; safecall;
    procedure Set_JogAngle(Angle: Double); safecall;
    function Get_OffsetType: Integer; safecall;
    procedure Set_OffsetType(OffsetType: Integer); safecall;
    function Get_OffsetReference: IDispatch; safecall;
    procedure Set_OffsetReference(const OffsetReference: IDispatch); safecall;
    function Get_ReverseOffset: WordBool; safecall;
    procedure Set_ReverseOffset(Reverse: WordBool); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(Reverse: WordBool); safecall;
    function Get_OffsetDistance: Double; safecall;
    procedure Set_OffsetDistance(OffsetDistance: Double); safecall;
    function Get_DimensionPositionType: Integer; safecall;
    procedure Set_DimensionPositionType(PositionType: Integer); safecall;
    function Get_FixProjectedLength: WordBool; safecall;
    procedure Set_FixProjectedLength(Fix: WordBool); safecall;
    function Get_JogPositionType: Integer; safecall;
    procedure Set_JogPositionType(Type_: Integer); safecall;
    function Get_FixedPoint: OleVariant; safecall;
    procedure Set_FixedPoint(Point: OleVariant); safecall;
    function IGetFixedPoint: Double; safecall;
    procedure ISetFixedPoint(var Point: Double); safecall;
    function GetOffsetReferenceType: Integer; safecall;
    function GetCustomBendAllowance: ICustomBendAllowance; safecall;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); safecall;
    function Get_UseDefaultBendAllowance: WordBool; safecall;
    procedure Set_UseDefaultBendAllowance(UseDefaultBendAllowance: WordBool); safecall;
    property FixedFace: IDispatch read Get_FixedFace write Set_FixedFace;
    property UseDefaultBendRadius: WordBool read Get_UseDefaultBendRadius write Set_UseDefaultBendRadius;
    property BendRadius: Double read Get_BendRadius write Set_BendRadius;
    property JogAngle: Double read Get_JogAngle write Set_JogAngle;
    property OffsetType: Integer read Get_OffsetType write Set_OffsetType;
    property OffsetReference: IDispatch read Get_OffsetReference write Set_OffsetReference;
    property ReverseOffset: WordBool read Get_ReverseOffset write Set_ReverseOffset;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property OffsetDistance: Double read Get_OffsetDistance write Set_OffsetDistance;
    property DimensionPositionType: Integer read Get_DimensionPositionType write Set_DimensionPositionType;
    property FixProjectedLength: WordBool read Get_FixProjectedLength write Set_FixProjectedLength;
    property JogPositionType: Integer read Get_JogPositionType write Set_JogPositionType;
    property FixedPoint: OleVariant read Get_FixedPoint write Set_FixedPoint;
    property UseDefaultBendAllowance: WordBool read Get_UseDefaultBendAllowance write Set_UseDefaultBendAllowance;
  end;

// *********************************************************************//
// DispIntf:  IJogFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C75CA537-4ABA-44F3-AC3B-73D5DCD0C834}
// *********************************************************************//
  IJogFeatureDataDisp = dispinterface
    ['{C75CA537-4ABA-44F3-AC3B-73D5DCD0C834}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property FixedFace: IDispatch dispid 4;
    property UseDefaultBendRadius: WordBool dispid 5;
    property BendRadius: Double dispid 6;
    property JogAngle: Double dispid 7;
    property OffsetType: Integer dispid 8;
    property OffsetReference: IDispatch dispid 9;
    property ReverseOffset: WordBool dispid 10;
    property ReverseDirection: WordBool dispid 11;
    property OffsetDistance: Double dispid 12;
    property DimensionPositionType: Integer dispid 13;
    property FixProjectedLength: WordBool dispid 14;
    property JogPositionType: Integer dispid 15;
    property FixedPoint: OleVariant dispid 16;
    function IGetFixedPoint: Double; dispid 17;
    procedure ISetFixedPoint(var Point: Double); dispid 18;
    function GetOffsetReferenceType: Integer; dispid 19;
    function GetCustomBendAllowance: ICustomBendAllowance; dispid 20;
    procedure SetCustomBendAllowance(const PBendData: ICustomBendAllowance); dispid 21;
    property UseDefaultBendAllowance: WordBool dispid 22;
  end;

// *********************************************************************//
// Interface: ISurfExtrudeFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {157CE6B0-16BC-49A3-B207-95159B02306C}
// *********************************************************************//
  ISurfExtrudeFeatureData = interface(IDispatch)
    ['{157CE6B0-16BC-49A3-B207-95159B02306C}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetEndCondition(Forward: WordBool): SYSINT; safecall;
    procedure SetEndCondition(Forward: WordBool; EndCondition: SYSINT); safecall;
    function GetDepth(Forward: WordBool): Double; safecall;
    procedure SetDepth(Forward: WordBool; Depth: Double); safecall;
    function GetFace(Forward: WordBool): IDispatch; safecall;
    procedure SetFace(Forward: WordBool; const Face: IDispatch); safecall;
    function IGetFace(Forward: WordBool): IFace2; safecall;
    procedure ISetFace(Forward: WordBool; const Face: IFace2); safecall;
    function GetVertex(Forward: WordBool): IDispatch; safecall;
    procedure SetVertex(Forward: WordBool; const Vtx: IDispatch); safecall;
    function IGetVertex(Forward: WordBool): IVertex; safecall;
    procedure ISetVertex(Forward: WordBool; const Vtx: IVertex); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_BothDirections: WordBool; safecall;
    procedure Set_BothDirections(BothDirections: WordBool); safecall;
    function GetReverseOffset(Fwd: WordBool): WordBool; safecall;
    procedure SetReverseOffset(Fwd: WordBool; RevOffset: WordBool); safecall;
    function GetTranslateSurface(Fwd: WordBool): WordBool; safecall;
    procedure SetTranslateSurface(Fwd: WordBool; Trans: WordBool); safecall;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property BothDirections: WordBool read Get_BothDirections write Set_BothDirections;
  end;

// *********************************************************************//
// DispIntf:  ISurfExtrudeFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {157CE6B0-16BC-49A3-B207-95159B02306C}
// *********************************************************************//
  ISurfExtrudeFeatureDataDisp = dispinterface
    ['{157CE6B0-16BC-49A3-B207-95159B02306C}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetEndCondition(Forward: WordBool): SYSINT; dispid 4;
    procedure SetEndCondition(Forward: WordBool; EndCondition: SYSINT); dispid 5;
    function GetDepth(Forward: WordBool): Double; dispid 6;
    procedure SetDepth(Forward: WordBool; Depth: Double); dispid 7;
    function GetFace(Forward: WordBool): IDispatch; dispid 8;
    procedure SetFace(Forward: WordBool; const Face: IDispatch); dispid 9;
    function IGetFace(Forward: WordBool): IFace2; dispid 10;
    procedure ISetFace(Forward: WordBool; const Face: IFace2); dispid 11;
    function GetVertex(Forward: WordBool): IDispatch; dispid 12;
    procedure SetVertex(Forward: WordBool; const Vtx: IDispatch); dispid 13;
    function IGetVertex(Forward: WordBool): IVertex; dispid 14;
    procedure ISetVertex(Forward: WordBool; const Vtx: IVertex); dispid 15;
    property ReverseDirection: WordBool dispid 16;
    property BothDirections: WordBool dispid 17;
    function GetReverseOffset(Fwd: WordBool): WordBool; dispid 18;
    procedure SetReverseOffset(Fwd: WordBool; RevOffset: WordBool); dispid 19;
    function GetTranslateSurface(Fwd: WordBool): WordBool; dispid 20;
    procedure SetTranslateSurface(Fwd: WordBool; Trans: WordBool); dispid 21;
  end;

// *********************************************************************//
// Interface: ISurfRevolveFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {38D7F138-4403-4EB0-8E9E-7DAF6BA385CF}
// *********************************************************************//
  ISurfRevolveFeatureData = interface(IDispatch)
    ['{38D7F138-4403-4EB0-8E9E-7DAF6BA385CF}']
    function GetRevolutionAngle(Forward: WordBool): Double; safecall;
    procedure SetRevolutionAngle(Forward: WordBool; Angle: Double); safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(Type_: SYSINT); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
  end;

// *********************************************************************//
// DispIntf:  ISurfRevolveFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {38D7F138-4403-4EB0-8E9E-7DAF6BA385CF}
// *********************************************************************//
  ISurfRevolveFeatureDataDisp = dispinterface
    ['{38D7F138-4403-4EB0-8E9E-7DAF6BA385CF}']
    function GetRevolutionAngle(Forward: WordBool): Double; dispid 1;
    procedure SetRevolutionAngle(Forward: WordBool; Angle: Double); dispid 2;
    property type_: SYSINT dispid 3;
    property ReverseDirection: WordBool dispid 4;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 5;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 6;
    procedure ReleaseSelectionAccess; dispid 7;
  end;

// *********************************************************************//
// Interface: ISurfaceOffsetFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {214152E2-2F73-42E3-AB88-690C2ED9910D}
// *********************************************************************//
  ISurfaceOffsetFeatureData = interface(IDispatch)
    ['{214152E2-2F73-42E3-AB88-690C2ED9910D}']
    function Get_Faces: OleVariant; safecall;
    procedure Set_Faces(FaceArray: OleVariant); safecall;
    function GetFacesCount: Integer; safecall;
    function IGetFaces(Count: Integer): IFace2; safecall;
    procedure ISetFaces(Count: Integer; var FaceArr: IFace2); safecall;
    function Get_Distance: Double; safecall;
    procedure Set_Distance(Dist: Double); safecall;
    function Get_Flip: WordBool; safecall;
    procedure Set_Flip(Flip: WordBool); safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    property Faces: OleVariant read Get_Faces write Set_Faces;
    property Distance: Double read Get_Distance write Set_Distance;
    property Flip: WordBool read Get_Flip write Set_Flip;
  end;

// *********************************************************************//
// DispIntf:  ISurfaceOffsetFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {214152E2-2F73-42E3-AB88-690C2ED9910D}
// *********************************************************************//
  ISurfaceOffsetFeatureDataDisp = dispinterface
    ['{214152E2-2F73-42E3-AB88-690C2ED9910D}']
    property Faces: OleVariant dispid 1;
    function GetFacesCount: Integer; dispid 2;
    function IGetFaces(Count: Integer): IFace2; dispid 3;
    procedure ISetFaces(Count: Integer; var FaceArr: IFace2); dispid 4;
    property Distance: Double dispid 5;
    property Flip: WordBool dispid 6;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 7;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 8;
    procedure ReleaseSelectionAccess; dispid 9;
  end;

// *********************************************************************//
// Interface: ISurfaceKnitFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6CE5BD99-0769-4DAF-8206-07513B6C0005}
// *********************************************************************//
  ISurfaceKnitFeatureData = interface(IDispatch)
    ['{6CE5BD99-0769-4DAF-8206-07513B6C0005}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetEntitiesCount: Integer; safecall;
    function Get_Entities: OleVariant; safecall;
    procedure Set_Entities(OutArr: OleVariant); safecall;
    function IGetEntities(Count: Integer): IDispatch; safecall;
    procedure ISetEntities(Count: Integer; var FaceArr: IDispatch); safecall;
    function Get_SeedFace: IDispatch; safecall;
    procedure Set_SeedFace(const SeedFace: IDispatch); safecall;
    property Entities: OleVariant read Get_Entities write Set_Entities;
    property SeedFace: IDispatch read Get_SeedFace write Set_SeedFace;
  end;

// *********************************************************************//
// DispIntf:  ISurfaceKnitFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6CE5BD99-0769-4DAF-8206-07513B6C0005}
// *********************************************************************//
  ISurfaceKnitFeatureDataDisp = dispinterface
    ['{6CE5BD99-0769-4DAF-8206-07513B6C0005}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetEntitiesCount: Integer; dispid 4;
    property Entities: OleVariant dispid 5;
    function IGetEntities(Count: Integer): IDispatch; dispid 6;
    procedure ISetEntities(Count: Integer; var FaceArr: IDispatch); dispid 7;
    property SeedFace: IDispatch dispid 8;
  end;

// *********************************************************************//
// Interface: ISurfaceExtendFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {72249E3D-B571-416D-9034-DE3BE1D9937C}
// *********************************************************************//
  ISurfaceExtendFeatureData = interface(IDispatch)
    ['{72249E3D-B571-416D-9034-DE3BE1D9937C}']
    function GetItemsCount: Integer; safecall;
    function Get_Items: OleVariant; safecall;
    procedure Set_Items(OutArr: OleVariant); safecall;
    function IGetItems(Count: Integer): IDispatch; safecall;
    procedure ISetItems(Count: Integer; var ItemArr: IDispatch); safecall;
    function Get_EndCondition: Integer; safecall;
    procedure Set_EndCondition(EndCond: Integer); safecall;
    function Get_Face: IDispatch; safecall;
    procedure Set_Face(const Face: IDispatch); safecall;
    function Get_IFace: IFace2; safecall;
    procedure Set_IFace(const Face: IFace2); safecall;
    function Get_Vertex: IDispatch; safecall;
    procedure Set_Vertex(const Vtx: IDispatch); safecall;
    function Get_IVertex: IVertex; safecall;
    procedure Set_IVertex(const Vtx: IVertex); safecall;
    function Get_Distance: Double; safecall;
    procedure Set_Distance(Dist: Double); safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(Type_: Integer); safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetPropagatingEdgesCount: Integer; safecall;
    function Get_PropagatingEdges: OleVariant; safecall;
    procedure Set_PropagatingEdges(OutArr: OleVariant); safecall;
    function IGetPropagatingEdges(Count: Integer): IEdge; safecall;
    procedure ISetPropagatingEdges(Count: Integer; var EdgeArr: IEdge); safecall;
    property Items: OleVariant read Get_Items write Set_Items;
    property EndCondition: Integer read Get_EndCondition write Set_EndCondition;
    property Face: IDispatch read Get_Face write Set_Face;
    property IFace: IFace2 read Get_IFace write Set_IFace;
    property Vertex: IDispatch read Get_Vertex write Set_Vertex;
    property IVertex: IVertex read Get_IVertex write Set_IVertex;
    property Distance: Double read Get_Distance write Set_Distance;
    property type_: Integer read Get_type_ write Set_type_;
    property PropagatingEdges: OleVariant read Get_PropagatingEdges write Set_PropagatingEdges;
  end;

// *********************************************************************//
// DispIntf:  ISurfaceExtendFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {72249E3D-B571-416D-9034-DE3BE1D9937C}
// *********************************************************************//
  ISurfaceExtendFeatureDataDisp = dispinterface
    ['{72249E3D-B571-416D-9034-DE3BE1D9937C}']
    function GetItemsCount: Integer; dispid 1;
    property Items: OleVariant dispid 2;
    function IGetItems(Count: Integer): IDispatch; dispid 3;
    procedure ISetItems(Count: Integer; var ItemArr: IDispatch); dispid 4;
    property EndCondition: Integer dispid 5;
    property Face: IDispatch dispid 6;
    property IFace: IFace2 dispid 7;
    property Vertex: IDispatch dispid 8;
    property IVertex: IVertex dispid 9;
    property Distance: Double dispid 10;
    property type_: Integer dispid 11;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 12;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 13;
    procedure ReleaseSelectionAccess; dispid 14;
    function GetPropagatingEdgesCount: Integer; dispid 15;
    property PropagatingEdges: OleVariant dispid 16;
    function IGetPropagatingEdges(Count: Integer): IEdge; dispid 17;
    procedure ISetPropagatingEdges(Count: Integer; var EdgeArr: IEdge); dispid 18;
  end;

// *********************************************************************//
// Interface: ISurfacePlanarFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6A0860DC-BC79-4DFD-8A06-252EFCCFCD37}
// *********************************************************************//
  ISurfacePlanarFeatureData = interface(IDispatch)
    ['{6A0860DC-BC79-4DFD-8A06-252EFCCFCD37}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetBoundingEntitiesCount: Integer; safecall;
    function IGetBoundingEntities(Count: Integer): IDispatch; safecall;
    function ISetBoundingEntities(Count: Integer): IDispatch; safecall;
    function Get_BoundingEntities: OleVariant; safecall;
    procedure Set_BoundingEntities(EntVar: OleVariant); safecall;
    property BoundingEntities: OleVariant read Get_BoundingEntities write Set_BoundingEntities;
  end;

// *********************************************************************//
// DispIntf:  ISurfacePlanarFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6A0860DC-BC79-4DFD-8A06-252EFCCFCD37}
// *********************************************************************//
  ISurfacePlanarFeatureDataDisp = dispinterface
    ['{6A0860DC-BC79-4DFD-8A06-252EFCCFCD37}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetBoundingEntitiesCount: Integer; dispid 4;
    function IGetBoundingEntities(Count: Integer): IDispatch; dispid 5;
    function ISetBoundingEntities(Count: Integer): IDispatch; dispid 6;
    property BoundingEntities: OleVariant dispid 7;
  end;

// *********************************************************************//
// Interface: ISurfaceTrimFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C9943DEE-40DE-4EB9-A3C5-7D5CABEE3E85}
// *********************************************************************//
  ISurfaceTrimFeatureData = interface(IDispatch)
    ['{C9943DEE-40DE-4EB9-A3C5-7D5CABEE3E85}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetType: Integer; safecall;
    function GetTrimToolsCount: Integer; safecall;
    function IGetTrimTools(Count: Integer): IDispatch; safecall;
    procedure ISetTrimTools(Count: Integer; var DispArr: IDispatch); safecall;
    function Get_TrimTools: OleVariant; safecall;
    procedure Set_TrimTools(ToolVar: OleVariant); safecall;
    function GetPiecesToKeepCount: Integer; safecall;
    function IGetPiecesToKeep(Count: Integer): IBody2; safecall;
    procedure ISetPiecesToKeep(Count: Integer; var BodyArr: IBody2); safecall;
    function Get_PiecesToKeep: OleVariant; safecall;
    procedure Set_PiecesToKeep(ToolVar: OleVariant); safecall;
    property TrimTools: OleVariant read Get_TrimTools write Set_TrimTools;
    property PiecesToKeep: OleVariant read Get_PiecesToKeep write Set_PiecesToKeep;
  end;

// *********************************************************************//
// DispIntf:  ISurfaceTrimFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C9943DEE-40DE-4EB9-A3C5-7D5CABEE3E85}
// *********************************************************************//
  ISurfaceTrimFeatureDataDisp = dispinterface
    ['{C9943DEE-40DE-4EB9-A3C5-7D5CABEE3E85}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetType: Integer; dispid 4;
    function GetTrimToolsCount: Integer; dispid 5;
    function IGetTrimTools(Count: Integer): IDispatch; dispid 6;
    procedure ISetTrimTools(Count: Integer; var DispArr: IDispatch); dispid 7;
    property TrimTools: OleVariant dispid 8;
    function GetPiecesToKeepCount: Integer; dispid 9;
    function IGetPiecesToKeep(Count: Integer): IBody2; dispid 10;
    procedure ISetPiecesToKeep(Count: Integer; var BodyArr: IBody2); dispid 11;
    property PiecesToKeep: OleVariant dispid 12;
  end;

// *********************************************************************//
// Interface: ISurfaceRadiateFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {82F0509D-402B-4D79-AB6B-AA2888FC1E81}
// *********************************************************************//
  ISurfaceRadiateFeatureData = interface(IDispatch)
    ['{82F0509D-402B-4D79-AB6B-AA2888FC1E81}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_DirectionReference: IDispatch; safecall;
    procedure Set_DirectionReference(const Disp: IDispatch); safecall;
    function Get_Flip: WordBool; safecall;
    procedure Set_Flip(Flip: WordBool); safecall;
    function Get_PropagateToTangentFaces: WordBool; safecall;
    procedure Set_PropagateToTangentFaces(Prop: WordBool); safecall;
    function Get_Distance: Double; safecall;
    procedure Set_Distance(Dist: Double); safecall;
    function GetRadiatedEntitiesCount: Integer; safecall;
    function IGetRadiatedEntities(Count: Integer): IDispatch; safecall;
    procedure ISetRadiatedEntities(Count: Integer; var DispArr: IDispatch); safecall;
    function Get_RadiatedEntities: OleVariant; safecall;
    procedure Set_RadiatedEntities(EntVar: OleVariant); safecall;
    property DirectionReference: IDispatch read Get_DirectionReference write Set_DirectionReference;
    property Flip: WordBool read Get_Flip write Set_Flip;
    property PropagateToTangentFaces: WordBool read Get_PropagateToTangentFaces write Set_PropagateToTangentFaces;
    property Distance: Double read Get_Distance write Set_Distance;
    property RadiatedEntities: OleVariant read Get_RadiatedEntities write Set_RadiatedEntities;
  end;

// *********************************************************************//
// DispIntf:  ISurfaceRadiateFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {82F0509D-402B-4D79-AB6B-AA2888FC1E81}
// *********************************************************************//
  ISurfaceRadiateFeatureDataDisp = dispinterface
    ['{82F0509D-402B-4D79-AB6B-AA2888FC1E81}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property DirectionReference: IDispatch dispid 4;
    property Flip: WordBool dispid 5;
    property PropagateToTangentFaces: WordBool dispid 6;
    property Distance: Double dispid 7;
    function GetRadiatedEntitiesCount: Integer; dispid 8;
    function IGetRadiatedEntities(Count: Integer): IDispatch; dispid 9;
    procedure ISetRadiatedEntities(Count: Integer; var DispArr: IDispatch); dispid 10;
    property RadiatedEntities: OleVariant dispid 11;
  end;

// *********************************************************************//
// Interface: IRefPlaneFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {02B5CBF8-5104-41F7-901D-A4DCBA547029}
// *********************************************************************//
  IRefPlaneFeatureData = interface(IDispatch)
    ['{02B5CBF8-5104-41F7-901D-A4DCBA547029}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(Type_: Integer); safecall;
    function Get_AutoSize: WordBool; safecall;
    procedure Set_AutoSize(AutoSize: WordBool); safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Angle: Double); safecall;
    function Get_Distance: Double; safecall;
    procedure Set_Distance(Dist: Double); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(Flip: WordBool); safecall;
    function Get_OriginOnCurve: WordBool; safecall;
    procedure Set_OriginOnCurve(Dist: WordBool); safecall;
    function Get_Selections: OleVariant; safecall;
    procedure Set_Selections(Entities: OleVariant); safecall;
    function GetSelectionsCount: Integer; safecall;
    function IGetSelections(Count: Integer): IDispatch; safecall;
    procedure ISetSelections(Count: Integer; var Entities: IDispatch); safecall;
    function Get_ProjectionType: Integer; safecall;
    procedure Set_ProjectionType(Type_: Integer); safecall;
    function Get_UseNormalPlane: WordBool; safecall;
    procedure Set_UseNormalPlane(NormalPlane: WordBool); safecall;
    function Get_SolutionIndex: Integer; safecall;
    procedure Set_SolutionIndex(Index: Integer); safecall;
    property type_: Integer read Get_type_ write Set_type_;
    property AutoSize: WordBool read Get_AutoSize write Set_AutoSize;
    property Angle: Double read Get_Angle write Set_Angle;
    property Distance: Double read Get_Distance write Set_Distance;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property OriginOnCurve: WordBool read Get_OriginOnCurve write Set_OriginOnCurve;
    property Selections: OleVariant read Get_Selections write Set_Selections;
    property ProjectionType: Integer read Get_ProjectionType write Set_ProjectionType;
    property UseNormalPlane: WordBool read Get_UseNormalPlane write Set_UseNormalPlane;
    property SolutionIndex: Integer read Get_SolutionIndex write Set_SolutionIndex;
  end;

// *********************************************************************//
// DispIntf:  IRefPlaneFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {02B5CBF8-5104-41F7-901D-A4DCBA547029}
// *********************************************************************//
  IRefPlaneFeatureDataDisp = dispinterface
    ['{02B5CBF8-5104-41F7-901D-A4DCBA547029}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property type_: Integer dispid 4;
    property AutoSize: WordBool dispid 5;
    property Angle: Double dispid 6;
    property Distance: Double dispid 7;
    property ReverseDirection: WordBool dispid 8;
    property OriginOnCurve: WordBool dispid 9;
    property Selections: OleVariant dispid 10;
    function GetSelectionsCount: Integer; dispid 11;
    function IGetSelections(Count: Integer): IDispatch; dispid 12;
    procedure ISetSelections(Count: Integer; var Entities: IDispatch); dispid 13;
    property ProjectionType: Integer dispid 14;
    property UseNormalPlane: WordBool dispid 15;
    property SolutionIndex: Integer dispid 16;
  end;

// *********************************************************************//
// Interface: IRefPointFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {887A2421-50F5-443F-ACD9-62E9832AB519}
// *********************************************************************//
  IRefPointFeatureData = interface(IDispatch)
    ['{887A2421-50F5-443F-ACD9-62E9832AB519}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(Type_: Integer); safecall;
    function Get_AlongCurveOption: Integer; safecall;
    procedure Set_AlongCurveOption(Option: Integer); safecall;
    function Get_Distance: Double; safecall;
    procedure Set_Distance(Dist: Double); safecall;
    function Get_Selections: OleVariant; safecall;
    procedure Set_Selections(Entities: OleVariant); safecall;
    function GetSelectionsCount: Integer; safecall;
    function IGetSelections(Count: Integer): IDispatch; safecall;
    procedure ISetSelections(Count: Integer; var Entities: IDispatch); safecall;
    property type_: Integer read Get_type_ write Set_type_;
    property AlongCurveOption: Integer read Get_AlongCurveOption write Set_AlongCurveOption;
    property Distance: Double read Get_Distance write Set_Distance;
    property Selections: OleVariant read Get_Selections write Set_Selections;
  end;

// *********************************************************************//
// DispIntf:  IRefPointFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {887A2421-50F5-443F-ACD9-62E9832AB519}
// *********************************************************************//
  IRefPointFeatureDataDisp = dispinterface
    ['{887A2421-50F5-443F-ACD9-62E9832AB519}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property type_: Integer dispid 4;
    property AlongCurveOption: Integer dispid 5;
    property Distance: Double dispid 6;
    property Selections: OleVariant dispid 7;
    function GetSelectionsCount: Integer; dispid 8;
    function IGetSelections(Count: Integer): IDispatch; dispid 9;
    procedure ISetSelections(Count: Integer; var Entities: IDispatch); dispid 10;
  end;

// *********************************************************************//
// Interface: IRuledSurfaceFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4010A7F4-B516-4E35-B9B9-6E871355DB9E}
// *********************************************************************//
  IRuledSurfaceFeatureData = interface(IDispatch)
    ['{4010A7F4-B516-4E35-B9B9-6E871355DB9E}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(Type_: Integer); safecall;
    function Get_Distance: Double; safecall;
    procedure Set_Distance(Dist: Double); safecall;
    function GetDirectionReference(out Ref1: IDispatch; out Type1: Integer; out Ref2: IDispatch; 
                                   out Type2: Integer): Integer; safecall;
    procedure SetDirectionReference(const Ref1: IDispatch; const Ref2: IDispatch); safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Angle: Double); safecall;
    function Get_UseVector: WordBool; safecall;
    procedure Set_UseVector(UseVector: WordBool); safecall;
    procedure GetEdges(out Edges: OleVariant; out SideFlags: OleVariant); safecall;
    procedure SetEdges(Edges: OleVariant; SideFlags: OleVariant); safecall;
    function GetEdgesCount: Integer; safecall;
    procedure IGetEdges(Count: Integer; out Entities: IDispatch; out SideFlags: Integer); safecall;
    procedure ISetEdges(Count: Integer; var Entities: IDispatch; var SideFlags: Integer); safecall;
    function Get_TrimAndKnit: WordBool; safecall;
    procedure Set_TrimAndKnit(TrimAndKnit: WordBool); safecall;
    function Get_Connect: WordBool; safecall;
    procedure Set_Connect(Connect: WordBool); safecall;
    function Get_DirectionVector: IMathVector; safecall;
    procedure Set_DirectionVector(const LpVectorObjOut: IMathVector); safecall;
    property type_: Integer read Get_type_ write Set_type_;
    property Distance: Double read Get_Distance write Set_Distance;
    property Angle: Double read Get_Angle write Set_Angle;
    property UseVector: WordBool read Get_UseVector write Set_UseVector;
    property TrimAndKnit: WordBool read Get_TrimAndKnit write Set_TrimAndKnit;
    property Connect: WordBool read Get_Connect write Set_Connect;
    property DirectionVector: IMathVector read Get_DirectionVector write Set_DirectionVector;
  end;

// *********************************************************************//
// DispIntf:  IRuledSurfaceFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4010A7F4-B516-4E35-B9B9-6E871355DB9E}
// *********************************************************************//
  IRuledSurfaceFeatureDataDisp = dispinterface
    ['{4010A7F4-B516-4E35-B9B9-6E871355DB9E}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property type_: Integer dispid 3;
    property Distance: Double dispid 4;
    function GetDirectionReference(out Ref1: IDispatch; out Type1: Integer; out Ref2: IDispatch; 
                                   out Type2: Integer): Integer; dispid 5;
    procedure SetDirectionReference(const Ref1: IDispatch; const Ref2: IDispatch); dispid 6;
    property Angle: Double dispid 7;
    property UseVector: WordBool dispid 8;
    procedure GetEdges(out Edges: OleVariant; out SideFlags: OleVariant); dispid 9;
    procedure SetEdges(Edges: OleVariant; SideFlags: OleVariant); dispid 10;
    function GetEdgesCount: Integer; dispid 11;
    procedure IGetEdges(Count: Integer; out Entities: IDispatch; out SideFlags: Integer); dispid 12;
    procedure ISetEdges(Count: Integer; var Entities: IDispatch; var SideFlags: Integer); dispid 13;
    property TrimAndKnit: WordBool dispid 14;
    property Connect: WordBool dispid 15;
    property DirectionVector: IMathVector dispid 16;
  end;

// *********************************************************************//
// Interface: ICavityFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A72BEB28-2C74-4BCF-880C-6496AC9005FA}
// *********************************************************************//
  ICavityFeatureData = interface(IDispatch)
    ['{A72BEB28-2C74-4BCF-880C-6496AC9005FA}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_ScaleType: Integer; safecall;
    procedure Set_ScaleType(Type_: Integer); safecall;
    function Get_UniformScale: Double; safecall;
    procedure Set_UniformScale(Scale: Double); safecall;
    function Get_UseUniformScale: WordBool; safecall;
    procedure Set_UseUniformScale(Scale: WordBool); safecall;
    procedure GetScale(out Xscale: Double; out YScale: Double; out ZScale: Double); safecall;
    procedure SetScale(Xscale: Double; YScale: Double; ZScale: Double); safecall;
    function Get_Components: OleVariant; safecall;
    procedure Set_Components(Components: OleVariant); safecall;
    function GetComponentsCount: Integer; safecall;
    procedure IGetComponents(Count: Integer; out Comps: IComponent2); safecall;
    procedure ISetComponents(Count: Integer; var Comps: IComponent2); safecall;
    property ScaleType: Integer read Get_ScaleType write Set_ScaleType;
    property UniformScale: Double read Get_UniformScale write Set_UniformScale;
    property UseUniformScale: WordBool read Get_UseUniformScale write Set_UseUniformScale;
    property Components: OleVariant read Get_Components write Set_Components;
  end;

// *********************************************************************//
// DispIntf:  ICavityFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A72BEB28-2C74-4BCF-880C-6496AC9005FA}
// *********************************************************************//
  ICavityFeatureDataDisp = dispinterface
    ['{A72BEB28-2C74-4BCF-880C-6496AC9005FA}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property ScaleType: Integer dispid 3;
    property UniformScale: Double dispid 4;
    property UseUniformScale: WordBool dispid 5;
    procedure GetScale(out Xscale: Double; out YScale: Double; out ZScale: Double); dispid 6;
    procedure SetScale(Xscale: Double; YScale: Double; ZScale: Double); dispid 7;
    property Components: OleVariant dispid 8;
    function GetComponentsCount: Integer; dispid 9;
    procedure IGetComponents(Count: Integer; out Comps: IComponent2); dispid 10;
    procedure ISetComponents(Count: Integer; var Comps: IComponent2); dispid 11;
  end;

// *********************************************************************//
// Interface: ILoftedBendsFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {619DEE3D-3398-48FE-8818-EDD4169FDDB8}
// *********************************************************************//
  ILoftedBendsFeatureData = interface(IDispatch)
    ['{619DEE3D-3398-48FE-8818-EDD4169FDDB8}']
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetProfileCount: Integer; safecall;
    function IGetProfiles(Count: Integer): IDispatch; safecall;
    procedure ISetProfiles(Count: Integer; var PDisp: IDispatch); safecall;
    function Get_Profiles: OleVariant; safecall;
    procedure Set_Profiles(PDisp: OleVariant); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Get_Direction: WordBool; safecall;
    procedure Set_Direction(Direction: WordBool); safecall;
    function Get_BendLineControlOption: Integer; safecall;
    procedure Set_BendLineControlOption(Option: Integer); safecall;
    function Get_NumberOfBendLines: Integer; safecall;
    procedure Set_NumberOfBendLines(BendLines: Integer); safecall;
    function Get_MaximumDeviation: Double; safecall;
    procedure Set_MaximumDeviation(Deviation: Double); safecall;
    function CanCreateBendLines: WordBool; safecall;
    property Profiles: OleVariant read Get_Profiles write Set_Profiles;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property Direction: WordBool read Get_Direction write Set_Direction;
    property BendLineControlOption: Integer read Get_BendLineControlOption write Set_BendLineControlOption;
    property NumberOfBendLines: Integer read Get_NumberOfBendLines write Set_NumberOfBendLines;
    property MaximumDeviation: Double read Get_MaximumDeviation write Set_MaximumDeviation;
  end;

// *********************************************************************//
// DispIntf:  ILoftedBendsFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {619DEE3D-3398-48FE-8818-EDD4169FDDB8}
// *********************************************************************//
  ILoftedBendsFeatureDataDisp = dispinterface
    ['{619DEE3D-3398-48FE-8818-EDD4169FDDB8}']
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    function GetProfileCount: Integer; dispid 4;
    function IGetProfiles(Count: Integer): IDispatch; dispid 5;
    procedure ISetProfiles(Count: Integer; var PDisp: IDispatch); dispid 6;
    property Profiles: OleVariant dispid 7;
    property Thickness: Double dispid 8;
    property Direction: WordBool dispid 9;
    property BendLineControlOption: Integer dispid 10;
    property NumberOfBendLines: Integer dispid 11;
    property MaximumDeviation: Double dispid 12;
    function CanCreateBendLines: WordBool; dispid 13;
  end;

// *********************************************************************//
// Interface: IReferencePointCurveFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8066432C-1376-4D6B-AA64-46B2D3CC5D60}
// *********************************************************************//
  IReferencePointCurveFeatureData = interface(IDispatch)
    ['{8066432C-1376-4D6B-AA64-46B2D3CC5D60}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_ClosedCurve: WordBool; safecall;
    procedure Set_ClosedCurve(Ret: WordBool); safecall;
    function GetThroughPointCount: Integer; safecall;
    function GetThroughPoints(out Type_: OleVariant): OleVariant; safecall;
    procedure SetThroughPoints(Pts: OleVariant); safecall;
    function IGetThroughPoints(Count: Integer; out Type_: Integer): IDispatch; safecall;
    procedure ISetThroughPoints(Count: Integer; var Pts: IDispatch); safecall;
    property ClosedCurve: WordBool read Get_ClosedCurve write Set_ClosedCurve;
  end;

// *********************************************************************//
// DispIntf:  IReferencePointCurveFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8066432C-1376-4D6B-AA64-46B2D3CC5D60}
// *********************************************************************//
  IReferencePointCurveFeatureDataDisp = dispinterface
    ['{8066432C-1376-4D6B-AA64-46B2D3CC5D60}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property ClosedCurve: WordBool dispid 3;
    function GetThroughPointCount: Integer; dispid 4;
    function GetThroughPoints(out Type_: OleVariant): OleVariant; dispid 5;
    procedure SetThroughPoints(Pts: OleVariant); dispid 6;
    function IGetThroughPoints(Count: Integer; out Type_: Integer): IDispatch; dispid 7;
    procedure ISetThroughPoints(Count: Integer; var Pts: IDispatch); dispid 8;
  end;

// *********************************************************************//
// Interface: IFreePointCurveFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C11527FA-E833-4453-80DD-229F6BACC5D9}
// *********************************************************************//
  IFreePointCurveFeatureData = interface(IDispatch)
    ['{C11527FA-E833-4453-80DD-229F6BACC5D9}']
    function Get_PointArray: OleVariant; safecall;
    procedure Set_PointArray(ArrayOut: OleVariant); safecall;
    function GetPointCount: Integer; safecall;
    function IGetPointArray: Double; safecall;
    procedure ISetPointArray(FeatCount: Integer; var ArrayDataIn: Double); safecall;
    function SavePointsToFile(const FileName: WideString): WordBool; safecall;
    function LoadPointsFromFile(const FileName: WideString): WordBool; safecall;
    property PointArray: OleVariant read Get_PointArray write Set_PointArray;
  end;

// *********************************************************************//
// DispIntf:  IFreePointCurveFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {C11527FA-E833-4453-80DD-229F6BACC5D9}
// *********************************************************************//
  IFreePointCurveFeatureDataDisp = dispinterface
    ['{C11527FA-E833-4453-80DD-229F6BACC5D9}']
    property PointArray: OleVariant dispid 1;
    function GetPointCount: Integer; dispid 2;
    function IGetPointArray: Double; dispid 3;
    procedure ISetPointArray(FeatCount: Integer; var ArrayDataIn: Double); dispid 4;
    function SavePointsToFile(const FileName: WideString): WordBool; dispid 5;
    function LoadPointsFromFile(const FileName: WideString): WordBool; dispid 6;
  end;

// *********************************************************************//
// Interface: ICompositeCurveFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8D5CFAB8-A9F9-4B7F-9275-27E2062C324E}
// *********************************************************************//
  ICompositeCurveFeatureData = interface(IDispatch)
    ['{8D5CFAB8-A9F9-4B7F-9275-27E2062C324E}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetEntitiesToJoinCount: Integer; safecall;
    function GetEntitiesToJoin(out Type_: OleVariant): OleVariant; safecall;
    procedure SetEntitiesToJoin(EntVar: OleVariant); safecall;
    function IGetEntitiesToJoin(Count: Integer; out Type_: Integer): IDispatch; safecall;
    procedure ISetEntitiesToJoin(Count: Integer; var Ents: IDispatch); safecall;
  end;

// *********************************************************************//
// DispIntf:  ICompositeCurveFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8D5CFAB8-A9F9-4B7F-9275-27E2062C324E}
// *********************************************************************//
  ICompositeCurveFeatureDataDisp = dispinterface
    ['{8D5CFAB8-A9F9-4B7F-9275-27E2062C324E}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    function GetEntitiesToJoinCount: Integer; dispid 3;
    function GetEntitiesToJoin(out Type_: OleVariant): OleVariant; dispid 4;
    procedure SetEntitiesToJoin(EntVar: OleVariant); dispid 5;
    function IGetEntitiesToJoin(Count: Integer; out Type_: Integer): IDispatch; dispid 6;
    procedure ISetEntitiesToJoin(Count: Integer; var Ents: IDispatch); dispid 7;
  end;

// *********************************************************************//
// Interface: IHelixFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {70E634EE-890A-421F-ABCE-5208A563423C}
// *********************************************************************//
  IHelixFeatureData = interface(IDispatch)
    ['{70E634EE-890A-421F-ABCE-5208A563423C}']
    function Get_DefinedBy: Integer; safecall;
    procedure Set_DefinedBy(Type_: Integer); safecall;
    function Get_Height: Double; safecall;
    procedure Set_Height(Ht: Double); safecall;
    function Get_Pitch: Double; safecall;
    procedure Set_Pitch(Pitch: Double); safecall;
    function Get_Revolution: Double; safecall;
    procedure Set_Revolution(Rev: Double); safecall;
    function Get_StartingAngle: Double; safecall;
    procedure Set_StartingAngle(Ang: Double); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(Dir: WordBool); safecall;
    function Get_Clockwise: WordBool; safecall;
    procedure Set_Clockwise(Dir: WordBool); safecall;
    function Get_Taper: WordBool; safecall;
    procedure Set_Taper(Taper: WordBool); safecall;
    function Get_TaperAngle: Double; safecall;
    procedure Set_TaperAngle(Ang: Double); safecall;
    function Get_TaperOutward: WordBool; safecall;
    procedure Set_TaperOutward(Outward: WordBool); safecall;
    property DefinedBy: Integer read Get_DefinedBy write Set_DefinedBy;
    property Height: Double read Get_Height write Set_Height;
    property Pitch: Double read Get_Pitch write Set_Pitch;
    property Revolution: Double read Get_Revolution write Set_Revolution;
    property StartingAngle: Double read Get_StartingAngle write Set_StartingAngle;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property Clockwise: WordBool read Get_Clockwise write Set_Clockwise;
    property Taper: WordBool read Get_Taper write Set_Taper;
    property TaperAngle: Double read Get_TaperAngle write Set_TaperAngle;
    property TaperOutward: WordBool read Get_TaperOutward write Set_TaperOutward;
  end;

// *********************************************************************//
// DispIntf:  IHelixFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {70E634EE-890A-421F-ABCE-5208A563423C}
// *********************************************************************//
  IHelixFeatureDataDisp = dispinterface
    ['{70E634EE-890A-421F-ABCE-5208A563423C}']
    property DefinedBy: Integer dispid 1;
    property Height: Double dispid 2;
    property Pitch: Double dispid 3;
    property Revolution: Double dispid 4;
    property StartingAngle: Double dispid 5;
    property ReverseDirection: WordBool dispid 6;
    property Clockwise: WordBool dispid 7;
    property Taper: WordBool dispid 8;
    property TaperAngle: Double dispid 9;
    property TaperOutward: WordBool dispid 10;
  end;

// *********************************************************************//
// Interface: IImportedCurveFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6DC71EC8-09F6-4D6F-AC3F-19D8EA258E0B}
// *********************************************************************//
  IImportedCurveFeatureData = interface(IDispatch)
    ['{6DC71EC8-09F6-4D6F-AC3F-19D8EA258E0B}']
    function Get_Curves: OleVariant; safecall;
    procedure Set_Curves(CurveVar: OleVariant); safecall;
    function GetCurveCount: Integer; safecall;
    function IGetCurves(Count: Integer): IDispatch; safecall;
    procedure ISetCurves(Count: Integer; var DispArr: IDispatch); safecall;
    procedure SetBody(const DispBody: IBody2); safecall;
    property Curves: OleVariant read Get_Curves write Set_Curves;
  end;

// *********************************************************************//
// DispIntf:  IImportedCurveFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6DC71EC8-09F6-4D6F-AC3F-19D8EA258E0B}
// *********************************************************************//
  IImportedCurveFeatureDataDisp = dispinterface
    ['{6DC71EC8-09F6-4D6F-AC3F-19D8EA258E0B}']
    property Curves: OleVariant dispid 1;
    function GetCurveCount: Integer; dispid 2;
    function IGetCurves(Count: Integer): IDispatch; dispid 3;
    procedure ISetCurves(Count: Integer; var DispArr: IDispatch); dispid 4;
    procedure SetBody(const DispBody: IBody2); dispid 5;
  end;

// *********************************************************************//
// Interface: ICosmeticThreadFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DAE93BE3-B9DC-4748-AD03-94CA1D644E59}
// *********************************************************************//
  ICosmeticThreadFeatureData = interface(IDispatch)
    ['{DAE93BE3-B9DC-4748-AD03-94CA1D644E59}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_ApplyThread: Integer; safecall;
    procedure Set_ApplyThread(Apply: Integer); safecall;
    function Get_BlindDepth: Double; safecall;
    procedure Set_BlindDepth(Depth: Double); safecall;
    function Get_Diameter: Double; safecall;
    procedure Set_Diameter(Diameter: Double); safecall;
    function Get_DiameterType: Integer; safecall;
    function Get_ThreadCallout: WideString; safecall;
    procedure Set_ThreadCallout(const Callout: WideString); safecall;
    function Get_Edge: IEdge; safecall;
    procedure Set_Edge(const Edge: IEdge); safecall;
    function Get_PatternedTransforms: OleVariant; safecall;
    function GetPatternedTransformsCount: Integer; safecall;
    function IGetPatternedTransforms(Count: Integer): IMathTransform; safecall;
    property ApplyThread: Integer read Get_ApplyThread write Set_ApplyThread;
    property BlindDepth: Double read Get_BlindDepth write Set_BlindDepth;
    property Diameter: Double read Get_Diameter write Set_Diameter;
    property DiameterType: Integer read Get_DiameterType;
    property ThreadCallout: WideString read Get_ThreadCallout write Set_ThreadCallout;
    property Edge: IEdge read Get_Edge write Set_Edge;
    property PatternedTransforms: OleVariant read Get_PatternedTransforms;
  end;

// *********************************************************************//
// DispIntf:  ICosmeticThreadFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DAE93BE3-B9DC-4748-AD03-94CA1D644E59}
// *********************************************************************//
  ICosmeticThreadFeatureDataDisp = dispinterface
    ['{DAE93BE3-B9DC-4748-AD03-94CA1D644E59}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property ApplyThread: Integer dispid 4;
    property BlindDepth: Double dispid 5;
    property Diameter: Double dispid 6;
    property DiameterType: Integer readonly dispid 7;
    property ThreadCallout: WideString dispid 8;
    property Edge: IEdge dispid 9;
    property PatternedTransforms: OleVariant readonly dispid 10;
    function GetPatternedTransformsCount: Integer; dispid 11;
    function IGetPatternedTransforms(Count: Integer): IMathTransform; dispid 12;
  end;

// *********************************************************************//
// Interface: ISketchRegion
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EB53B511-E23D-4B6A-B48D-21828AF5F151}
// *********************************************************************//
  ISketchRegion = interface(IDispatch)
    ['{EB53B511-E23D-4B6A-B48D-21828AF5F151}']
    function Get_Sketch: ISketch; safecall;
    function GetEdgesCount: Integer; safecall;
    function GetEdges: OleVariant; safecall;
    function IGetEdges(Count: Integer): IEdge; safecall;
    function Select(Append: WordBool; Mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function Select2(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    property Sketch: ISketch read Get_Sketch;
  end;

// *********************************************************************//
// DispIntf:  ISketchRegionDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EB53B511-E23D-4B6A-B48D-21828AF5F151}
// *********************************************************************//
  ISketchRegionDisp = dispinterface
    ['{EB53B511-E23D-4B6A-B48D-21828AF5F151}']
    property Sketch: ISketch readonly dispid 1;
    function GetEdgesCount: Integer; dispid 2;
    function GetEdges: OleVariant; dispid 3;
    function IGetEdges(Count: Integer): IEdge; dispid 4;
    function Select(Append: WordBool; Mark: Integer): WordBool; dispid 5;
    function DeSelect: WordBool; dispid 6;
    function Select2(Append: WordBool; const Data: ISelectData): WordBool; dispid 7;
  end;

// *********************************************************************//
// Interface: ISketchContour
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EB53B513-E23D-4B6A-B48D-21828AF5F151}
// *********************************************************************//
  ISketchContour = interface(IDispatch)
    ['{EB53B513-E23D-4B6A-B48D-21828AF5F151}']
    function Get_Sketch: ISketch; safecall;
    function GetEdgesCount: Integer; safecall;
    function GetEdges: OleVariant; safecall;
    function IGetEdges(Count: Integer): IEdge; safecall;
    function GetSketchSegmentsCount: Integer; safecall;
    function GetSketchSegments: OleVariant; safecall;
    function IGetSketchSegments(Count: Integer): ISketchSegment; safecall;
    function Select(Append: WordBool; Mark: Integer): WordBool; safecall;
    function DeSelect: WordBool; safecall;
    function Select2(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    property Sketch: ISketch read Get_Sketch;
  end;

// *********************************************************************//
// DispIntf:  ISketchContourDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EB53B513-E23D-4B6A-B48D-21828AF5F151}
// *********************************************************************//
  ISketchContourDisp = dispinterface
    ['{EB53B513-E23D-4B6A-B48D-21828AF5F151}']
    property Sketch: ISketch readonly dispid 1;
    function GetEdgesCount: Integer; dispid 2;
    function GetEdges: OleVariant; dispid 3;
    function IGetEdges(Count: Integer): IEdge; dispid 4;
    function GetSketchSegmentsCount: Integer; dispid 5;
    function GetSketchSegments: OleVariant; dispid 6;
    function IGetSketchSegments(Count: Integer): ISketchSegment; dispid 7;
    function Select(Append: WordBool; Mark: Integer): WordBool; dispid 8;
    function DeSelect: WordBool; dispid 9;
    function Select2(Append: WordBool; const Data: ISelectData): WordBool; dispid 10;
  end;

// *********************************************************************//
// Interface: IMateInPlace
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1C4BC27B-4B76-4390-AE66-4A21A96C0C9C}
// *********************************************************************//
  IMateInPlace = interface(IDispatch)
    ['{1C4BC27B-4B76-4390-AE66-4A21A96C0C9C}']
    function GetMateEntityCount: Integer; safecall;
    function Get_MateEntity(NIndex: Integer): IDispatch; safecall;
    function Get_MateEntityType(NIndex: Integer): Integer; safecall;
    function Get_MateComponentName(NIndex: Integer): WideString; safecall;
    function Get_Component: IComponent2; safecall;
    property MateEntity[NIndex: Integer]: IDispatch read Get_MateEntity;
    property MateEntityType[NIndex: Integer]: Integer read Get_MateEntityType;
    property MateComponentName[NIndex: Integer]: WideString read Get_MateComponentName;
    property Component: IComponent2 read Get_Component;
  end;

// *********************************************************************//
// DispIntf:  IMateInPlaceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {1C4BC27B-4B76-4390-AE66-4A21A96C0C9C}
// *********************************************************************//
  IMateInPlaceDisp = dispinterface
    ['{1C4BC27B-4B76-4390-AE66-4A21A96C0C9C}']
    function GetMateEntityCount: Integer; dispid 1;
    property MateEntity[NIndex: Integer]: IDispatch readonly dispid 2;
    property MateEntityType[NIndex: Integer]: Integer readonly dispid 3;
    property MateComponentName[NIndex: Integer]: WideString readonly dispid 4;
    property Component: IComponent2 readonly dispid 5;
  end;

// *********************************************************************//
// Interface: IRefAxisFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3ADB2157-CF50-46AD-B1F6-0E8DB36C29B0}
// *********************************************************************//
  IRefAxisFeatureData = interface(IDispatch)
    ['{3ADB2157-CF50-46AD-B1F6-0E8DB36C29B0}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(Type_: Integer); safecall;
    function GetSelections(out EntitiesTypeVar: OleVariant): OleVariant; safecall;
    function SetSelections(EntitiesVar: OleVariant): WordBool; safecall;
    function GetSelectionsCount: Integer; safecall;
    function IGetSelections(Count: Integer; out TypeArr: Integer): IDispatch; safecall;
    function ISetSelections(Count: Integer; var EntArr: IDispatch): WordBool; safecall;
    property type_: Integer read Get_type_ write Set_type_;
  end;

// *********************************************************************//
// DispIntf:  IRefAxisFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3ADB2157-CF50-46AD-B1F6-0E8DB36C29B0}
// *********************************************************************//
  IRefAxisFeatureDataDisp = dispinterface
    ['{3ADB2157-CF50-46AD-B1F6-0E8DB36C29B0}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property type_: Integer dispid 4;
    function GetSelections(out EntitiesTypeVar: OleVariant): OleVariant; dispid 5;
    function SetSelections(EntitiesVar: OleVariant): WordBool; dispid 6;
    function GetSelectionsCount: Integer; dispid 7;
    function IGetSelections(Count: Integer; out TypeArr: Integer): IDispatch; dispid 8;
    function ISetSelections(Count: Integer; var EntArr: IDispatch): WordBool; dispid 9;
  end;

// *********************************************************************//
// Interface: IEdgePoint
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CCB5966E-03D5-4169-A303-AD49265A7B36}
// *********************************************************************//
  IEdgePoint = interface(IDispatch)
    ['{CCB5966E-03D5-4169-A303-AD49265A7B36}']
    function Get_Position: Double; safecall;
    procedure Set_Position(EndVal: Double); safecall;
    function Select(BAppend: WordBool; SelMark: Integer): WordBool; safecall;
    procedure GetPointCoordinates(out X: Double; out Y: Double; out Z: Double); safecall;
    function Get_Entity: IDispatch; safecall;
    procedure Set_Entity(const Ent: IDispatch); safecall;
    property Position: Double read Get_Position write Set_Position;
    property Entity: IDispatch read Get_Entity write Set_Entity;
  end;

// *********************************************************************//
// DispIntf:  IEdgePointDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CCB5966E-03D5-4169-A303-AD49265A7B36}
// *********************************************************************//
  IEdgePointDisp = dispinterface
    ['{CCB5966E-03D5-4169-A303-AD49265A7B36}']
    property Position: Double dispid 1;
    function Select(BAppend: WordBool; SelMark: Integer): WordBool; dispid 2;
    procedure GetPointCoordinates(out X: Double; out Y: Double; out Z: Double); dispid 3;
    property Entity: IDispatch dispid 4;
  end;

// *********************************************************************//
// Interface: IMateReference
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2C1BF8EE-6886-4E8E-9EF2-1C48AE94958B}
// *********************************************************************//
  IMateReference = interface(IDispatch)
    ['{2C1BF8EE-6886-4E8E-9EF2-1C48AE94958B}']
    function Get_Name: WideString; safecall;
    function Get_ReferenceEntityCount: Integer; safecall;
    function Get_ReferenceEntity(Index: Integer): IEntity; safecall;
    function Get_ReferenceType(Index: Integer): Integer; safecall;
    function Get_ReferenceAlignment(Index: Integer): Integer; safecall;
    function Edit(const BstrMateReferenceName: WideString; const PrimaryReferenceEntity: IEntity; 
                  PrimaryReferenceType: Integer; PrimaryReferenceAlignment: Integer; 
                  const SecondaryReferenceEntity: IEntity; SecondaryReferenceType: Integer; 
                  SecondaryReferenceAlignment: Integer; const TertiaryReferenceEntity: IEntity; 
                  TertiaryReferenceType: Integer; TertiaryReferenceAlignment: Integer): WordBool; safecall;
    property Name: WideString read Get_Name;
    property ReferenceEntityCount: Integer read Get_ReferenceEntityCount;
    property ReferenceEntity[Index: Integer]: IEntity read Get_ReferenceEntity;
    property ReferenceType[Index: Integer]: Integer read Get_ReferenceType;
    property ReferenceAlignment[Index: Integer]: Integer read Get_ReferenceAlignment;
  end;

// *********************************************************************//
// DispIntf:  IMateReferenceDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2C1BF8EE-6886-4E8E-9EF2-1C48AE94958B}
// *********************************************************************//
  IMateReferenceDisp = dispinterface
    ['{2C1BF8EE-6886-4E8E-9EF2-1C48AE94958B}']
    property Name: WideString readonly dispid 1;
    property ReferenceEntityCount: Integer readonly dispid 2;
    property ReferenceEntity[Index: Integer]: IEntity readonly dispid 3;
    property ReferenceType[Index: Integer]: Integer readonly dispid 4;
    property ReferenceAlignment[Index: Integer]: Integer readonly dispid 5;
    function Edit(const BstrMateReferenceName: WideString; const PrimaryReferenceEntity: IEntity; 
                  PrimaryReferenceType: Integer; PrimaryReferenceAlignment: Integer; 
                  const SecondaryReferenceEntity: IEntity; SecondaryReferenceType: Integer; 
                  SecondaryReferenceAlignment: Integer; const TertiaryReferenceEntity: IEntity; 
                  TertiaryReferenceType: Integer; TertiaryReferenceAlignment: Integer): WordBool; dispid 6;
  end;

// *********************************************************************//
// Interface: IPartingLineFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {76C0E8B6-0F1B-4DA1-9812-C46C0E6AD9C0}
// *********************************************************************//
  IPartingLineFeatureData = interface(IDispatch)
    ['{76C0E8B6-0F1B-4DA1-9812-C46C0E6AD9C0}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_PullDirectionBase: IDispatch; safecall;
    procedure Set_PullDirectionBase(const PEnt: IDispatch); safecall;
    function Get_PullDirectionType: Integer; safecall;
    function Get_PullDirection: WordBool; safecall;
    procedure Set_PullDirection(BRev: WordBool); safecall;
    function Get_PartingLines: OleVariant; safecall;
    procedure Set_PartingLines(PVar: OleVariant); safecall;
    function GetPartingLinesCount: Integer; safecall;
    function IGetPartingLines(Count: Integer): IEdge; safecall;
    procedure ISetPartingLines(Count: Integer; var EntIn: IEdge); safecall;
    function DraftAnalysis(Angle: Double): WordBool; safecall;
    function GetFacesByTypeCount(Type_: Integer): Integer; safecall;
    function GetFacesByType(Type_: Integer): OleVariant; safecall;
    function IGetFacesByType(Type_: Integer; Count: Integer): IFace2; safecall;
    function Status: Integer; safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(PVar: Double); safecall;
    function Get_SplitFaces: WordBool; safecall;
    procedure Set_SplitFaces(BSplitFaces: WordBool); safecall;
    function GetEntitiesToSplit(out TypeArr: OleVariant): OleVariant; safecall;
    procedure SetEntitiesToSplit(PVar: OleVariant); safecall;
    function GetEntitiesToSplitCount: Integer; safecall;
    function IGetEntitiesToSplit(Count: Integer; out TypeArr: Integer): IDispatch; safecall;
    procedure ISetEntitiesToSplit(Count: Integer; var EntIn: IDispatch); safecall;
    function Get_CoreCavitySplit: WordBool; safecall;
    procedure Set_CoreCavitySplit(BCoreCavitySplit: WordBool); safecall;
    function Get_SplitFacesOption: Integer; safecall;
    procedure Set_SplitFacesOption(SplitOption: Integer); safecall;
    property PullDirectionBase: IDispatch read Get_PullDirectionBase write Set_PullDirectionBase;
    property PullDirectionType: Integer read Get_PullDirectionType;
    property PullDirection: WordBool read Get_PullDirection write Set_PullDirection;
    property PartingLines: OleVariant read Get_PartingLines write Set_PartingLines;
    property Angle: Double read Get_Angle write Set_Angle;
    property SplitFaces: WordBool read Get_SplitFaces write Set_SplitFaces;
    property CoreCavitySplit: WordBool read Get_CoreCavitySplit write Set_CoreCavitySplit;
    property SplitFacesOption: Integer read Get_SplitFacesOption write Set_SplitFacesOption;
  end;

// *********************************************************************//
// DispIntf:  IPartingLineFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {76C0E8B6-0F1B-4DA1-9812-C46C0E6AD9C0}
// *********************************************************************//
  IPartingLineFeatureDataDisp = dispinterface
    ['{76C0E8B6-0F1B-4DA1-9812-C46C0E6AD9C0}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property PullDirectionBase: IDispatch dispid 3;
    property PullDirectionType: Integer readonly dispid 4;
    property PullDirection: WordBool dispid 5;
    property PartingLines: OleVariant dispid 6;
    function GetPartingLinesCount: Integer; dispid 7;
    function IGetPartingLines(Count: Integer): IEdge; dispid 8;
    procedure ISetPartingLines(Count: Integer; var EntIn: IEdge); dispid 9;
    function DraftAnalysis(Angle: Double): WordBool; dispid 10;
    function GetFacesByTypeCount(Type_: Integer): Integer; dispid 11;
    function GetFacesByType(Type_: Integer): OleVariant; dispid 12;
    function IGetFacesByType(Type_: Integer; Count: Integer): IFace2; dispid 13;
    function Status: Integer; dispid 14;
    property Angle: Double dispid 15;
    property SplitFaces: WordBool dispid 16;
    function GetEntitiesToSplit(out TypeArr: OleVariant): OleVariant; dispid 17;
    procedure SetEntitiesToSplit(PVar: OleVariant); dispid 18;
    function GetEntitiesToSplitCount: Integer; dispid 19;
    function IGetEntitiesToSplit(Count: Integer; out TypeArr: Integer): IDispatch; dispid 20;
    procedure ISetEntitiesToSplit(Count: Integer; var EntIn: IDispatch); dispid 21;
    property CoreCavitySplit: WordBool dispid 22;
    property SplitFacesOption: Integer dispid 23;
  end;

// *********************************************************************//
// Interface: IPartingSurfaceFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {243D4C1D-6A24-4FF9-83B7-D409EC6B5185}
// *********************************************************************//
  IPartingSurfaceFeatureData = interface(IDispatch)
    ['{243D4C1D-6A24-4FF9-83B7-D409EC6B5185}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_PullDirectionBase: IDispatch; safecall;
    procedure Set_PullDirectionBase(const PEnt: IDispatch); safecall;
    function Get_PullDirectionType: Integer; safecall;
    function Get_ReverseAlignment: WordBool; safecall;
    procedure Set_ReverseAlignment(BRev: WordBool); safecall;
    function Get_PartingLines: OleVariant; safecall;
    procedure Set_PartingLines(PVar: OleVariant); safecall;
    function GetPartingLinesType: Integer; safecall;
    function GetPartingLinesCount: Integer; safecall;
    function IGetPartingLines(Count: Integer): IDispatch; safecall;
    procedure ISetPartingLines(Count: Integer; var EntIn: IDispatch); safecall;
    function Get_PartingType: Integer; safecall;
    procedure Set_PartingType(Type_: Integer); safecall;
    function Get_OffsetDistance: Double; safecall;
    procedure Set_OffsetDistance(Dist: Double); safecall;
    function Get_ReverseOffsetDirection: WordBool; safecall;
    procedure Set_ReverseOffsetDirection(Dir: WordBool); safecall;
    function Get_OffsetAngle: Double; safecall;
    procedure Set_OffsetAngle(Dist: Double); safecall;
    function Get_TransitionType: Integer; safecall;
    procedure Set_TransitionType(Type_: Integer); safecall;
    function Get_TransitionDistance: Double; safecall;
    procedure Set_TransitionDistance(Dist: Double); safecall;
    function Get_Knit: WordBool; safecall;
    procedure Set_Knit(BKnitAll: WordBool); safecall;
    property PullDirectionBase: IDispatch read Get_PullDirectionBase write Set_PullDirectionBase;
    property PullDirectionType: Integer read Get_PullDirectionType;
    property ReverseAlignment: WordBool read Get_ReverseAlignment write Set_ReverseAlignment;
    property PartingLines: OleVariant read Get_PartingLines write Set_PartingLines;
    property PartingType: Integer read Get_PartingType write Set_PartingType;
    property OffsetDistance: Double read Get_OffsetDistance write Set_OffsetDistance;
    property ReverseOffsetDirection: WordBool read Get_ReverseOffsetDirection write Set_ReverseOffsetDirection;
    property OffsetAngle: Double read Get_OffsetAngle write Set_OffsetAngle;
    property TransitionType: Integer read Get_TransitionType write Set_TransitionType;
    property TransitionDistance: Double read Get_TransitionDistance write Set_TransitionDistance;
    property Knit: WordBool read Get_Knit write Set_Knit;
  end;

// *********************************************************************//
// DispIntf:  IPartingSurfaceFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {243D4C1D-6A24-4FF9-83B7-D409EC6B5185}
// *********************************************************************//
  IPartingSurfaceFeatureDataDisp = dispinterface
    ['{243D4C1D-6A24-4FF9-83B7-D409EC6B5185}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property PullDirectionBase: IDispatch dispid 3;
    property PullDirectionType: Integer readonly dispid 4;
    property ReverseAlignment: WordBool dispid 5;
    property PartingLines: OleVariant dispid 6;
    function GetPartingLinesType: Integer; dispid 7;
    function GetPartingLinesCount: Integer; dispid 8;
    function IGetPartingLines(Count: Integer): IDispatch; dispid 9;
    procedure ISetPartingLines(Count: Integer; var EntIn: IDispatch); dispid 10;
    property PartingType: Integer dispid 11;
    property OffsetDistance: Double dispid 12;
    property ReverseOffsetDirection: WordBool dispid 13;
    property OffsetAngle: Double dispid 14;
    property TransitionType: Integer dispid 15;
    property TransitionDistance: Double dispid 16;
    property Knit: WordBool dispid 17;
  end;

// *********************************************************************//
// Interface: IDeleteBodyFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5F20A7B3-ED48-4103-8D00-4CA38B1A7C73}
// *********************************************************************//
  IDeleteBodyFeatureData = interface(IDispatch)
    ['{5F20A7B3-ED48-4103-8D00-4CA38B1A7C73}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetBodiesCount: Integer; safecall;
    function Get_Bodies: OleVariant; safecall;
    procedure Set_Bodies(EntVar: OleVariant); safecall;
    function IGetBodies(Count: Integer): IBody2; safecall;
    procedure ISetBodies(Count: Integer; var Bodies: IBody2); safecall;
    property Bodies: OleVariant read Get_Bodies write Set_Bodies;
  end;

// *********************************************************************//
// DispIntf:  IDeleteBodyFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {5F20A7B3-ED48-4103-8D00-4CA38B1A7C73}
// *********************************************************************//
  IDeleteBodyFeatureDataDisp = dispinterface
    ['{5F20A7B3-ED48-4103-8D00-4CA38B1A7C73}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    function GetBodiesCount: Integer; dispid 3;
    property Bodies: OleVariant dispid 4;
    function IGetBodies(Count: Integer): IBody2; dispid 5;
    procedure ISetBodies(Count: Integer; var Bodies: IBody2); dispid 6;
  end;

// *********************************************************************//
// Interface: IShutOffSurfaceFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DBE5BCC6-FAF5-441A-ABE5-53BF2BBA90D0}
// *********************************************************************//
  IShutOffSurfaceFeatureData = interface(IDispatch)
    ['{DBE5BCC6-FAF5-441A-ABE5-53BF2BBA90D0}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Edges: OleVariant; safecall;
    procedure Set_Edges(EdgeVar: OleVariant); safecall;
    function GetEdgeCount: Integer; safecall;
    function IGetEdges(Count: Integer): IEdge; safecall;
    procedure ISetEdges(Count: Integer; var EdgeArr: IEdge); safecall;
    function GetLoopCount: Integer; safecall;
    function Get_LoopEdges(Index: Integer): OleVariant; safecall;
    function GetLoopEdgeCount(Index: Integer): Integer; safecall;
    function IGetLoopEdges(Index: Integer; Count: Integer): IEdge; safecall;
    function Get_LoopPatchType(Index: Integer): Integer; safecall;
    procedure Set_LoopPatchType(Index: Integer; PatchType: Integer); safecall;
    function GetFaceTangentTo(Index: Integer): IFace2; safecall;
    procedure FlipFaceTangentTo(Index: Integer); safecall;
    function Status: Integer; safecall;
    procedure SetAllPatchTypes(Type_: Integer); safecall;
    function Get_Knit: WordBool; safecall;
    procedure Set_Knit(BKnit: WordBool); safecall;
    property Edges: OleVariant read Get_Edges write Set_Edges;
    property LoopEdges[Index: Integer]: OleVariant read Get_LoopEdges;
    property LoopPatchType[Index: Integer]: Integer read Get_LoopPatchType write Set_LoopPatchType;
    property Knit: WordBool read Get_Knit write Set_Knit;
  end;

// *********************************************************************//
// DispIntf:  IShutOffSurfaceFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {DBE5BCC6-FAF5-441A-ABE5-53BF2BBA90D0}
// *********************************************************************//
  IShutOffSurfaceFeatureDataDisp = dispinterface
    ['{DBE5BCC6-FAF5-441A-ABE5-53BF2BBA90D0}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property Edges: OleVariant dispid 3;
    function GetEdgeCount: Integer; dispid 4;
    function IGetEdges(Count: Integer): IEdge; dispid 5;
    procedure ISetEdges(Count: Integer; var EdgeArr: IEdge); dispid 6;
    function GetLoopCount: Integer; dispid 7;
    property LoopEdges[Index: Integer]: OleVariant readonly dispid 8;
    function GetLoopEdgeCount(Index: Integer): Integer; dispid 9;
    function IGetLoopEdges(Index: Integer; Count: Integer): IEdge; dispid 10;
    property LoopPatchType[Index: Integer]: Integer dispid 11;
    function GetFaceTangentTo(Index: Integer): IFace2; dispid 12;
    procedure FlipFaceTangentTo(Index: Integer); dispid 13;
    function Status: Integer; dispid 14;
    procedure SetAllPatchTypes(Type_: Integer); dispid 15;
    property Knit: WordBool dispid 16;
  end;

// *********************************************************************//
// Interface: IToolingSplitFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E6FA7AEE-8F47-4187-9C15-75549645016F}
// *********************************************************************//
  IToolingSplitFeatureData = interface(IDispatch)
    ['{E6FA7AEE-8F47-4187-9C15-75549645016F}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Depth(Dir: Integer): Double; safecall;
    procedure Set_Depth(Dir: Integer; Depth: Double); safecall;
    function Get_InterlockSurface: WordBool; safecall;
    procedure Set_InterlockSurface(BInterLock: WordBool); safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Ang: Double); safecall;
    function Get_CoreSurfaces: OleVariant; safecall;
    procedure Set_CoreSurfaces(SurfVar: OleVariant); safecall;
    function Get_CavitySurfaces: OleVariant; safecall;
    procedure Set_CavitySurfaces(SurfVar: OleVariant); safecall;
    function Get_PartingSurfaces: OleVariant; safecall;
    procedure Set_PartingSurfaces(SurfVar: OleVariant); safecall;
    function GetCoreSurfacesCount: Integer; safecall;
    function IGetCoreSurfaces(Count: Integer): IBody2; safecall;
    procedure ISetCoreSurfaces(Count: Integer; var BodyArr: IBody2); safecall;
    function GetCavitySurfacesCount: Integer; safecall;
    function IGetCavitySurfaces(Count: Integer): IBody2; safecall;
    procedure ISetCavitySurfaces(Count: Integer; var BodyArr: IBody2); safecall;
    function GetPartingSurfacesCount: Integer; safecall;
    function IGetPartingSurfaces(Count: Integer): IBody2; safecall;
    procedure ISetPartingSurfaces(Count: Integer; var BodyArr: IBody2); safecall;
    property Depth[Dir: Integer]: Double read Get_Depth write Set_Depth;
    property InterlockSurface: WordBool read Get_InterlockSurface write Set_InterlockSurface;
    property Angle: Double read Get_Angle write Set_Angle;
    property CoreSurfaces: OleVariant read Get_CoreSurfaces write Set_CoreSurfaces;
    property CavitySurfaces: OleVariant read Get_CavitySurfaces write Set_CavitySurfaces;
    property PartingSurfaces: OleVariant read Get_PartingSurfaces write Set_PartingSurfaces;
  end;

// *********************************************************************//
// DispIntf:  IToolingSplitFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E6FA7AEE-8F47-4187-9C15-75549645016F}
// *********************************************************************//
  IToolingSplitFeatureDataDisp = dispinterface
    ['{E6FA7AEE-8F47-4187-9C15-75549645016F}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property Depth[Dir: Integer]: Double dispid 3;
    property InterlockSurface: WordBool dispid 4;
    property Angle: Double dispid 5;
    property CoreSurfaces: OleVariant dispid 6;
    property CavitySurfaces: OleVariant dispid 7;
    property PartingSurfaces: OleVariant dispid 8;
    function GetCoreSurfacesCount: Integer; dispid 9;
    function IGetCoreSurfaces(Count: Integer): IBody2; dispid 10;
    procedure ISetCoreSurfaces(Count: Integer; var BodyArr: IBody2); dispid 11;
    function GetCavitySurfacesCount: Integer; dispid 12;
    function IGetCavitySurfaces(Count: Integer): IBody2; dispid 13;
    procedure ISetCavitySurfaces(Count: Integer; var BodyArr: IBody2); dispid 14;
    function GetPartingSurfacesCount: Integer; dispid 15;
    function IGetPartingSurfaces(Count: Integer): IBody2; dispid 16;
    procedure ISetPartingSurfaces(Count: Integer; var BodyArr: IBody2); dispid 17;
  end;

// *********************************************************************//
// Interface: ISplitBodyFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4AFD6AD9-AF35-44EB-8E9B-E15007FBDA62}
// *********************************************************************//
  ISplitBodyFeatureData = interface(IDispatch)
    ['{4AFD6AD9-AF35-44EB-8E9B-E15007FBDA62}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_TrimTools: OleVariant; safecall;
    procedure Set_TrimTools(ToolVar: OleVariant); safecall;
    function GetTrimToolsCount: Integer; safecall;
    function IGetTrimTools(Count: Integer): IDispatch; safecall;
    procedure ISetTrimTools(Count: Integer; var DispArr: IDispatch); safecall;
    procedure GetSplitBodies(out BodyVar: OleVariant; out PathVar: OleVariant; 
                             out FlagVar: OleVariant); safecall;
    procedure SetSplitBodies(PathVar: OleVariant; FlagVar: OleVariant); safecall;
    function GetSplitBodiesCount: Integer; safecall;
    procedure IGetSplitBodies(Count: Integer; out BodyArr: IBody2; out PathArr: WideString; 
                              out FlagArr: WordBool); safecall;
    procedure ISetSplitBodies(Count: Integer; var PathArr: WideString; var FlagArr: WordBool); safecall;
    function Get_State: Integer; safecall;
    procedure Set_State(State: Integer); safecall;
    function Get_Consume: WordBool; safecall;
    procedure Set_Consume(BConsume: WordBool); safecall;
    property TrimTools: OleVariant read Get_TrimTools write Set_TrimTools;
    property State: Integer read Get_State write Set_State;
    property Consume: WordBool read Get_Consume write Set_Consume;
  end;

// *********************************************************************//
// DispIntf:  ISplitBodyFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4AFD6AD9-AF35-44EB-8E9B-E15007FBDA62}
// *********************************************************************//
  ISplitBodyFeatureDataDisp = dispinterface
    ['{4AFD6AD9-AF35-44EB-8E9B-E15007FBDA62}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property TrimTools: OleVariant dispid 3;
    function GetTrimToolsCount: Integer; dispid 4;
    function IGetTrimTools(Count: Integer): IDispatch; dispid 5;
    procedure ISetTrimTools(Count: Integer; var DispArr: IDispatch); dispid 6;
    procedure GetSplitBodies(out BodyVar: OleVariant; out PathVar: OleVariant; 
                             out FlagVar: OleVariant); dispid 7;
    procedure SetSplitBodies(PathVar: OleVariant; FlagVar: OleVariant); dispid 8;
    function GetSplitBodiesCount: Integer; dispid 9;
    procedure IGetSplitBodies(Count: Integer; out BodyArr: IBody2; out PathArr: WideString; 
                              out FlagArr: WordBool); dispid 10;
    procedure ISetSplitBodies(Count: Integer; var PathArr: WideString; var FlagArr: WordBool); dispid 11;
    property State: Integer dispid 12;
    property Consume: WordBool dispid 13;
  end;

// *********************************************************************//
// Interface: ITriadManipulator
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {173137B4-84AC-428C-8F04-EC0E9FCEA390}
// *********************************************************************//
  ITriadManipulator = interface(IDispatch)
    ['{173137B4-84AC-428C-8F04-EC0E9FCEA390}']
    function Get_DoNotShow: Integer; safecall;
    procedure Set_DoNotShow(Flags: Integer); safecall;
    function Get_Origin: IMathPoint; safecall;
    procedure Set_Origin(const PPt: IMathPoint); safecall;
    function Get_XAxis: IMathVector; safecall;
    procedure Set_XAxis(const PVector: IMathVector); safecall;
    function Get_YAxis: IMathVector; safecall;
    procedure Set_YAxis(const PVector: IMathVector); safecall;
    function Get_ZAxis: IMathVector; safecall;
    procedure Set_ZAxis(const PVector: IMathVector); safecall;
    procedure UpdateScale(Scale: Double); safecall;
    function UpdatePosition: WordBool; safecall;
    procedure Set_Cursor(Param1: Integer); safecall;
    function Get_PreviousDragPoint: IMathPoint; safecall;
    procedure SetColorRefAtIndex(Index: Integer; ColorRef: Integer); safecall;
    property DoNotShow: Integer read Get_DoNotShow write Set_DoNotShow;
    property Origin: IMathPoint read Get_Origin write Set_Origin;
    property XAxis: IMathVector read Get_XAxis write Set_XAxis;
    property YAxis: IMathVector read Get_YAxis write Set_YAxis;
    property ZAxis: IMathVector read Get_ZAxis write Set_ZAxis;
    property Cursor: Integer write Set_Cursor;
    property PreviousDragPoint: IMathPoint read Get_PreviousDragPoint;
  end;

// *********************************************************************//
// DispIntf:  ITriadManipulatorDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {173137B4-84AC-428C-8F04-EC0E9FCEA390}
// *********************************************************************//
  ITriadManipulatorDisp = dispinterface
    ['{173137B4-84AC-428C-8F04-EC0E9FCEA390}']
    property DoNotShow: Integer dispid 196609;
    property Origin: IMathPoint dispid 196610;
    property XAxis: IMathVector dispid 196611;
    property YAxis: IMathVector dispid 196612;
    property ZAxis: IMathVector dispid 196613;
    procedure UpdateScale(Scale: Double); dispid 196614;
    function UpdatePosition: WordBool; dispid 196615;
    property Cursor: Integer writeonly dispid 196616;
    property PreviousDragPoint: IMathPoint readonly dispid 196617;
    procedure SetColorRefAtIndex(Index: Integer; ColorRef: Integer); dispid 196618;
  end;

// *********************************************************************//
// Interface: IJoinFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A4E370F5-9BFB-4E7D-880C-94DA7EA2440D}
// *********************************************************************//
  IJoinFeatureData = interface(IDispatch)
    ['{A4E370F5-9BFB-4E7D-880C-94DA7EA2440D}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetJoinedPartsCount: Integer; safecall;
    function Get_JoinedParts: OleVariant; safecall;
    procedure Set_JoinedParts(VParts: OleVariant); safecall;
    function IGetJoinedParts(Count: Integer): IComponent2; safecall;
    procedure ISetJoinedParts(Count: Integer; var Parts: IComponent2); safecall;
    function Get_HideParts: WordBool; safecall;
    procedure Set_HideParts(VbHide: WordBool); safecall;
    function Get_ForceSurfaceContact: WordBool; safecall;
    procedure Set_ForceSurfaceContact(VbForce: WordBool); safecall;
    property JoinedParts: OleVariant read Get_JoinedParts write Set_JoinedParts;
    property HideParts: WordBool read Get_HideParts write Set_HideParts;
    property ForceSurfaceContact: WordBool read Get_ForceSurfaceContact write Set_ForceSurfaceContact;
  end;

// *********************************************************************//
// DispIntf:  IJoinFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A4E370F5-9BFB-4E7D-880C-94DA7EA2440D}
// *********************************************************************//
  IJoinFeatureDataDisp = dispinterface
    ['{A4E370F5-9BFB-4E7D-880C-94DA7EA2440D}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    function GetJoinedPartsCount: Integer; dispid 3;
    property JoinedParts: OleVariant dispid 4;
    function IGetJoinedParts(Count: Integer): IComponent2; dispid 5;
    procedure ISetJoinedParts(Count: Integer; var Parts: IComponent2); dispid 6;
    property HideParts: WordBool dispid 7;
    property ForceSurfaceContact: WordBool dispid 8;
  end;

// *********************************************************************//
// Interface: IFillSurfaceFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {57EB6A78-6E88-4CE9-BAAB-897CCC74A899}
// *********************************************************************//
  IFillSurfaceFeatureData = interface(IDispatch)
    ['{57EB6A78-6E88-4CE9-BAAB-897CCC74A899}']
    function GetPatchBoundary(out EntType: OleVariant): OleVariant; safecall;
    function SetPatchBoundary(PatchVar: OleVariant): WordBool; safecall;
    function GetPatchBoundaryCount: Integer; safecall;
    function IGetPatchBoundary(Count: Integer; out EntType: Integer): IDispatch; safecall;
    function ISetPatchBoundary(Count: Integer; var DispArr: IDispatch): WordBool; safecall;
    function GetAlternateFace: IFace2; safecall;
    function ToggleAlternateFace: IFace2; safecall;
    function GetCurvatureControl(const EntityIn: IDispatch): Integer; safecall;
    function SetCurvatureControl(const EntityIn: IDispatch; ControlType: Integer; BAll: WordBool): WordBool; safecall;
    function Get_ReverseSurface: WordBool; safecall;
    procedure Set_ReverseSurface(BRev: WordBool); safecall;
    function Get_OptimizeSurface: WordBool; safecall;
    procedure Set_OptimizeSurface(BOpt: WordBool); safecall;
    function GetConstraintCurves(out TypeArr: OleVariant): OleVariant; safecall;
    procedure SetConstraintCurves(ConstraintVar: OleVariant); safecall;
    function GetConstraintCurvesCount: Integer; safecall;
    function IGetConstraintCurves(Count: Integer; out TypeArr: Integer): IDispatch; safecall;
    procedure ISetConstraintCurves(Count: Integer; var DispArr: IDispatch); safecall;
    function Get_ResolutionControl: Integer; safecall;
    procedure Set_ResolutionControl(Val: Integer); safecall;
    function Get_Merge: WordBool; safecall;
    procedure Set_Merge(BMerge: WordBool); safecall;
    function Get_TryToFormSolid: WordBool; safecall;
    procedure Set_TryToFormSolid(BFormSolid: WordBool); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(BRev: WordBool); safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    property ReverseSurface: WordBool read Get_ReverseSurface write Set_ReverseSurface;
    property OptimizeSurface: WordBool read Get_OptimizeSurface write Set_OptimizeSurface;
    property ResolutionControl: Integer read Get_ResolutionControl write Set_ResolutionControl;
    property Merge: WordBool read Get_Merge write Set_Merge;
    property TryToFormSolid: WordBool read Get_TryToFormSolid write Set_TryToFormSolid;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
  end;

// *********************************************************************//
// DispIntf:  IFillSurfaceFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {57EB6A78-6E88-4CE9-BAAB-897CCC74A899}
// *********************************************************************//
  IFillSurfaceFeatureDataDisp = dispinterface
    ['{57EB6A78-6E88-4CE9-BAAB-897CCC74A899}']
    function GetPatchBoundary(out EntType: OleVariant): OleVariant; dispid 1;
    function SetPatchBoundary(PatchVar: OleVariant): WordBool; dispid 2;
    function GetPatchBoundaryCount: Integer; dispid 3;
    function IGetPatchBoundary(Count: Integer; out EntType: Integer): IDispatch; dispid 4;
    function ISetPatchBoundary(Count: Integer; var DispArr: IDispatch): WordBool; dispid 5;
    function GetAlternateFace: IFace2; dispid 6;
    function ToggleAlternateFace: IFace2; dispid 7;
    function GetCurvatureControl(const EntityIn: IDispatch): Integer; dispid 8;
    function SetCurvatureControl(const EntityIn: IDispatch; ControlType: Integer; BAll: WordBool): WordBool; dispid 9;
    property ReverseSurface: WordBool dispid 10;
    property OptimizeSurface: WordBool dispid 11;
    function GetConstraintCurves(out TypeArr: OleVariant): OleVariant; dispid 12;
    procedure SetConstraintCurves(ConstraintVar: OleVariant); dispid 13;
    function GetConstraintCurvesCount: Integer; dispid 14;
    function IGetConstraintCurves(Count: Integer; out TypeArr: Integer): IDispatch; dispid 15;
    procedure ISetConstraintCurves(Count: Integer; var DispArr: IDispatch); dispid 16;
    property ResolutionControl: Integer dispid 17;
    property Merge: WordBool dispid 18;
    property TryToFormSolid: WordBool dispid 19;
    property ReverseDirection: WordBool dispid 20;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 21;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 22;
    procedure ReleaseSelectionAccess; dispid 23;
  end;

// *********************************************************************//
// Interface: IMoveCopyBodyFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6D5845F5-68F8-4492-9220-58EA193A7B24}
// *********************************************************************//
  IMoveCopyBodyFeatureData = interface(IDispatch)
    ['{6D5845F5-68F8-4492-9220-58EA193A7B24}']
    function AccessSelections(const PTopDoc: IModelDoc2; const PComponent: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetBodiesCount: Integer; safecall;
    function Get_Bodies: OleVariant; safecall;
    procedure Set_Bodies(VBodies: OleVariant); safecall;
    function IGetBodies(NCount: Integer): IBody2; safecall;
    procedure ISetBodies(NCount: Integer; var PBodies: IBody2); safecall;
    function Get_TransformType: Integer; safecall;
    procedure Set_TransformType(NTransformType: Integer); safecall;
    function Get_Copy: WordBool; safecall;
    procedure Set_Copy(VbCopy: WordBool); safecall;
    function Get_NumberOfCopies: Integer; safecall;
    procedure Set_NumberOfCopies(NNumberOfCopies: Integer); safecall;
    function Get_TransformReferenceEntity: IDispatch; safecall;
    procedure Set_TransformReferenceEntity(const LpRefEntity: IDispatch); safecall;
    function Get_TranslateToVertex: IDispatch; safecall;
    procedure Set_TranslateToVertex(const LpDispatch: IDispatch); safecall;
    function Get_TransformValue: Double; safecall;
    procedure Set_TransformValue(DValue: Double); safecall;
    function Get_RotationOriginX: Double; safecall;
    procedure Set_RotationOriginX(DValue: Double); safecall;
    function Get_RotationOriginY: Double; safecall;
    procedure Set_RotationOriginY(DValue: Double); safecall;
    function Get_RotationOriginZ: Double; safecall;
    procedure Set_RotationOriginZ(DValue: Double); safecall;
    function Get_TransformX: Double; safecall;
    procedure Set_TransformX(DValue: Double); safecall;
    function Get_TransformY: Double; safecall;
    procedure Set_TransformY(DValue: Double); safecall;
    function Get_TransformZ: Double; safecall;
    procedure Set_TransformZ(DValue: Double); safecall;
    function AddMate(MateEntVar: OleVariant; MateTypeFromEnum: Integer; AlignFromEnum: Integer; 
                     Distance: Double; Angle: Double; out ErrorStatus: Integer): IMate2; safecall;
    function IAddMate(Nsize: Integer; var MateEntArr: IDispatch; MateTypeFromEnum: Integer; 
                      AlignFromEnum: Integer; Distance: Double; Angle: Double; 
                      out ErrorStatus: Integer): IMate2; safecall;
    property Bodies: OleVariant read Get_Bodies write Set_Bodies;
    property TransformType: Integer read Get_TransformType write Set_TransformType;
    property Copy: WordBool read Get_Copy write Set_Copy;
    property NumberOfCopies: Integer read Get_NumberOfCopies write Set_NumberOfCopies;
    property TransformReferenceEntity: IDispatch read Get_TransformReferenceEntity write Set_TransformReferenceEntity;
    property TranslateToVertex: IDispatch read Get_TranslateToVertex write Set_TranslateToVertex;
    property TransformValue: Double read Get_TransformValue write Set_TransformValue;
    property RotationOriginX: Double read Get_RotationOriginX write Set_RotationOriginX;
    property RotationOriginY: Double read Get_RotationOriginY write Set_RotationOriginY;
    property RotationOriginZ: Double read Get_RotationOriginZ write Set_RotationOriginZ;
    property TransformX: Double read Get_TransformX write Set_TransformX;
    property TransformY: Double read Get_TransformY write Set_TransformY;
    property TransformZ: Double read Get_TransformZ write Set_TransformZ;
  end;

// *********************************************************************//
// DispIntf:  IMoveCopyBodyFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6D5845F5-68F8-4492-9220-58EA193A7B24}
// *********************************************************************//
  IMoveCopyBodyFeatureDataDisp = dispinterface
    ['{6D5845F5-68F8-4492-9220-58EA193A7B24}']
    function AccessSelections(const PTopDoc: IModelDoc2; const PComponent: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    function GetBodiesCount: Integer; dispid 3;
    property Bodies: OleVariant dispid 4;
    function IGetBodies(NCount: Integer): IBody2; dispid 5;
    procedure ISetBodies(NCount: Integer; var PBodies: IBody2); dispid 6;
    property TransformType: Integer dispid 7;
    property Copy: WordBool dispid 8;
    property NumberOfCopies: Integer dispid 9;
    property TransformReferenceEntity: IDispatch dispid 10;
    property TranslateToVertex: IDispatch dispid 11;
    property TransformValue: Double dispid 12;
    property RotationOriginX: Double dispid 13;
    property RotationOriginY: Double dispid 14;
    property RotationOriginZ: Double dispid 15;
    property TransformX: Double dispid 16;
    property TransformY: Double dispid 17;
    property TransformZ: Double dispid 18;
    function AddMate(MateEntVar: OleVariant; MateTypeFromEnum: Integer; AlignFromEnum: Integer; 
                     Distance: Double; Angle: Double; out ErrorStatus: Integer): IMate2; dispid 19;
    function IAddMate(Nsize: Integer; var MateEntArr: IDispatch; MateTypeFromEnum: Integer; 
                      AlignFromEnum: Integer; Distance: Double; Angle: Double; 
                      out ErrorStatus: Integer): IMate2; dispid 20;
  end;

// *********************************************************************//
// Interface: ISplitLineFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {215B0BEC-DDCD-4ECE-BD49-B22C8AED9E7D}
// *********************************************************************//
  ISplitLineFeatureData = interface(IDispatch)
    ['{215B0BEC-DDCD-4ECE-BD49-B22C8AED9E7D}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetType: Integer; safecall;
    function Get_PullDirectionBase: IDispatch; safecall;
    procedure Set_PullDirectionBase(const PEnt: IDispatch); safecall;
    function Get_PullDirectionType: Integer; safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(BRev: WordBool); safecall;
    function Get_SingleDirection: WordBool; safecall;
    procedure Set_SingleDirection(BRev: WordBool); safecall;
    function Get_Faces: OleVariant; safecall;
    procedure Set_Faces(PVar: OleVariant); safecall;
    function GetFacesCount: Integer; safecall;
    function IGetFaces(Count: Integer): IFace2; safecall;
    procedure ISetFaces(Count: Integer; var EntIn: IFace2); safecall;
    function Get_Sketch: ISketch; safecall;
    procedure Set_Sketch(const Sketch: ISketch); safecall;
    function Get_Contours: OleVariant; safecall;
    procedure Set_Contours(Contours: OleVariant); safecall;
    function GetContoursCount: Integer; safecall;
    function IGetContours(Count: Integer): IDispatch; safecall;
    procedure ISetContours(Count: Integer; var Contours: IDispatch); safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Angle: Double); safecall;
    function Get_SplitTools: OleVariant; safecall;
    procedure Set_SplitTools(ToolVar: OleVariant); safecall;
    function GetSplitToolsCount: Integer; safecall;
    function IGetSplitTools(Count: Integer): IDispatch; safecall;
    procedure ISetSplitTools(Count: Integer; var DispArr: IDispatch); safecall;
    function Get_SplitAll: WordBool; safecall;
    procedure Set_SplitAll(Option: WordBool); safecall;
    function Get_SplitType: Integer; safecall;
    procedure Set_SplitType(SplitType: Integer); safecall;
    function Get_SplitTargets: OleVariant; safecall;
    procedure Set_SplitTargets(ToolVar: OleVariant); safecall;
    function GetSplitTargetsCount: Integer; safecall;
    function IGetSplitTargets(Count: Integer): IDispatch; safecall;
    procedure ISetSplitTargets(Count: Integer; var DispArr: IDispatch); safecall;
    property PullDirectionBase: IDispatch read Get_PullDirectionBase write Set_PullDirectionBase;
    property PullDirectionType: Integer read Get_PullDirectionType;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property SingleDirection: WordBool read Get_SingleDirection write Set_SingleDirection;
    property Faces: OleVariant read Get_Faces write Set_Faces;
    property Sketch: ISketch read Get_Sketch write Set_Sketch;
    property Contours: OleVariant read Get_Contours write Set_Contours;
    property Angle: Double read Get_Angle write Set_Angle;
    property SplitTools: OleVariant read Get_SplitTools write Set_SplitTools;
    property SplitAll: WordBool read Get_SplitAll write Set_SplitAll;
    property SplitType: Integer read Get_SplitType write Set_SplitType;
    property SplitTargets: OleVariant read Get_SplitTargets write Set_SplitTargets;
  end;

// *********************************************************************//
// DispIntf:  ISplitLineFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {215B0BEC-DDCD-4ECE-BD49-B22C8AED9E7D}
// *********************************************************************//
  ISplitLineFeatureDataDisp = dispinterface
    ['{215B0BEC-DDCD-4ECE-BD49-B22C8AED9E7D}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    function GetType: Integer; dispid 3;
    property PullDirectionBase: IDispatch dispid 4;
    property PullDirectionType: Integer readonly dispid 5;
    property ReverseDirection: WordBool dispid 6;
    property SingleDirection: WordBool dispid 7;
    property Faces: OleVariant dispid 8;
    function GetFacesCount: Integer; dispid 9;
    function IGetFaces(Count: Integer): IFace2; dispid 10;
    procedure ISetFaces(Count: Integer; var EntIn: IFace2); dispid 11;
    property Sketch: ISketch dispid 12;
    property Contours: OleVariant dispid 13;
    function GetContoursCount: Integer; dispid 14;
    function IGetContours(Count: Integer): IDispatch; dispid 15;
    procedure ISetContours(Count: Integer; var Contours: IDispatch); dispid 16;
    property Angle: Double dispid 17;
    property SplitTools: OleVariant dispid 18;
    function GetSplitToolsCount: Integer; dispid 19;
    function IGetSplitTools(Count: Integer): IDispatch; dispid 20;
    procedure ISetSplitTools(Count: Integer; var DispArr: IDispatch); dispid 21;
    property SplitAll: WordBool dispid 22;
    property SplitType: Integer dispid 23;
    property SplitTargets: OleVariant dispid 24;
    function GetSplitTargetsCount: Integer; dispid 25;
    function IGetSplitTargets(Count: Integer): IDispatch; dispid 26;
    procedure ISetSplitTargets(Count: Integer; var DispArr: IDispatch); dispid 27;
  end;

// *********************************************************************//
// Interface: IWrapSketchFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {ED645449-BD48-47E6-9A7F-A8782E849B09}
// *********************************************************************//
  IWrapSketchFeatureData = interface(IDispatch)
    ['{ED645449-BD48-47E6-9A7F-A8782E849B09}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(Type_: Integer); safecall;
    function Get_Face: IFace2; safecall;
    procedure Set_Face(const LpFace: IFace2); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(VbReverseDir: WordBool); safecall;
    function Get_PullDirection: IDispatch; safecall;
    procedure Set_PullDirection(const LpPullDir: IDispatch); safecall;
    function Get_SourceSketch: ISketch; safecall;
    procedure Set_SourceSketch(const LpSketch: ISketch); safecall;
    property type_: Integer read Get_type_ write Set_type_;
    property Face: IFace2 read Get_Face write Set_Face;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property PullDirection: IDispatch read Get_PullDirection write Set_PullDirection;
    property SourceSketch: ISketch read Get_SourceSketch write Set_SourceSketch;
  end;

// *********************************************************************//
// DispIntf:  IWrapSketchFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {ED645449-BD48-47E6-9A7F-A8782E849B09}
// *********************************************************************//
  IWrapSketchFeatureDataDisp = dispinterface
    ['{ED645449-BD48-47E6-9A7F-A8782E849B09}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property type_: Integer dispid 3;
    property Face: IFace2 dispid 4;
    property Thickness: Double dispid 5;
    property ReverseDirection: WordBool dispid 6;
    property PullDirection: IDispatch dispid 7;
    property SourceSketch: ISketch dispid 8;
  end;

// *********************************************************************//
// Interface: IStructuralMemberFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F3F83396-6439-46BD-9927-2449083ECDC2}
// *********************************************************************//
  IStructuralMemberFeatureData = interface(IDispatch)
    ['{F3F83396-6439-46BD-9927-2449083ECDC2}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_PathSegments: OleVariant; safecall;
    procedure Set_PathSegments(SegArr: OleVariant); safecall;
    function GetPathSegmentsCount: Integer; safecall;
    function IGetPathSegments(Count: Integer): ISketchSegment; safecall;
    procedure ISetPathSegments(Count: Integer; var SegArr: ISketchSegment); safecall;
    function Get_ApplyCornerTreatment: WordBool; safecall;
    procedure Set_ApplyCornerTreatment(BApply: WordBool); safecall;
    function Get_CornerTreatmentType: Integer; safecall;
    procedure Set_CornerTreatmentType(Type_: Integer); safecall;
    function Get_RotationAngle: Double; safecall;
    procedure Set_RotationAngle(Ang: Double); safecall;
    function Get_LocateProfilePoint: ISketchPoint; safecall;
    procedure Set_LocateProfilePoint(const Point: ISketchPoint); safecall;
    function GetConnectionPoints: OleVariant; safecall;
    function GetConnectionPointsCount: Integer; safecall;
    function IGetConnectionPoints(Count: Integer): ISketchPoint; safecall;
    function Get_ConnectionType(const AtPoint: ISketchPoint): Integer; safecall;
    procedure Set_ConnectionType(const AtPoint: ISketchPoint; Type_: Integer); safecall;
    function Get_WeldmentProfilePath: WideString; safecall;
    procedure Set_WeldmentProfilePath(const FileName: WideString); safecall;
    function GetPathSegmentAt(const PBodyIn: IBody2): ISketchSegment; safecall;
    property PathSegments: OleVariant read Get_PathSegments write Set_PathSegments;
    property ApplyCornerTreatment: WordBool read Get_ApplyCornerTreatment write Set_ApplyCornerTreatment;
    property CornerTreatmentType: Integer read Get_CornerTreatmentType write Set_CornerTreatmentType;
    property RotationAngle: Double read Get_RotationAngle write Set_RotationAngle;
    property LocateProfilePoint: ISketchPoint read Get_LocateProfilePoint write Set_LocateProfilePoint;
    property ConnectionType[const AtPoint: ISketchPoint]: Integer read Get_ConnectionType write Set_ConnectionType;
    property WeldmentProfilePath: WideString read Get_WeldmentProfilePath write Set_WeldmentProfilePath;
  end;

// *********************************************************************//
// DispIntf:  IStructuralMemberFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {F3F83396-6439-46BD-9927-2449083ECDC2}
// *********************************************************************//
  IStructuralMemberFeatureDataDisp = dispinterface
    ['{F3F83396-6439-46BD-9927-2449083ECDC2}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property PathSegments: OleVariant dispid 3;
    function GetPathSegmentsCount: Integer; dispid 4;
    function IGetPathSegments(Count: Integer): ISketchSegment; dispid 5;
    procedure ISetPathSegments(Count: Integer; var SegArr: ISketchSegment); dispid 6;
    property ApplyCornerTreatment: WordBool dispid 7;
    property CornerTreatmentType: Integer dispid 8;
    property RotationAngle: Double dispid 9;
    property LocateProfilePoint: ISketchPoint dispid 10;
    function GetConnectionPoints: OleVariant; dispid 11;
    function GetConnectionPointsCount: Integer; dispid 12;
    function IGetConnectionPoints(Count: Integer): ISketchPoint; dispid 13;
    property ConnectionType[const AtPoint: ISketchPoint]: Integer dispid 14;
    property WeldmentProfilePath: WideString dispid 15;
    function GetPathSegmentAt(const PBodyIn: IBody2): ISketchSegment; dispid 16;
  end;

// *********************************************************************//
// Interface: IEndCapFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9DB80806-EDB1-4463-B0F3-D3F3BEAE465E}
// *********************************************************************//
  IEndCapFeatureData = interface(IDispatch)
    ['{9DB80806-EDB1-4463-B0F3-D3F3BEAE465E}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Face: IFace2; safecall;
    procedure Set_Face(const PFace: IFace2); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Get_UseThicknessRatioForOffset: WordBool; safecall;
    procedure Set_UseThicknessRatioForOffset(UseRatio: WordBool); safecall;
    function Get_ThicknessRatioForOffset: Double; safecall;
    procedure Set_ThicknessRatioForOffset(Ratio: Double); safecall;
    function Get_OffsetDistance: Double; safecall;
    procedure Set_OffsetDistance(Dist: Double); safecall;
    function Get_UseChamferCorners: WordBool; safecall;
    procedure Set_UseChamferCorners(BUse: WordBool); safecall;
    function Get_ChamferDistance: Double; safecall;
    procedure Set_ChamferDistance(Dist: Double); safecall;
    property Face: IFace2 read Get_Face write Set_Face;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property UseThicknessRatioForOffset: WordBool read Get_UseThicknessRatioForOffset write Set_UseThicknessRatioForOffset;
    property ThicknessRatioForOffset: Double read Get_ThicknessRatioForOffset write Set_ThicknessRatioForOffset;
    property OffsetDistance: Double read Get_OffsetDistance write Set_OffsetDistance;
    property UseChamferCorners: WordBool read Get_UseChamferCorners write Set_UseChamferCorners;
    property ChamferDistance: Double read Get_ChamferDistance write Set_ChamferDistance;
  end;

// *********************************************************************//
// DispIntf:  IEndCapFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9DB80806-EDB1-4463-B0F3-D3F3BEAE465E}
// *********************************************************************//
  IEndCapFeatureDataDisp = dispinterface
    ['{9DB80806-EDB1-4463-B0F3-D3F3BEAE465E}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property Face: IFace2 dispid 3;
    property Thickness: Double dispid 4;
    property UseThicknessRatioForOffset: WordBool dispid 5;
    property ThicknessRatioForOffset: Double dispid 6;
    property OffsetDistance: Double dispid 7;
    property UseChamferCorners: WordBool dispid 8;
    property ChamferDistance: Double dispid 9;
  end;

// *********************************************************************//
// Interface: IGussetFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AE327CE4-CAEE-42C6-9820-121001113E06}
// *********************************************************************//
  IGussetFeatureData = interface(IDispatch)
    ['{AE327CE4-CAEE-42C6-9820-121001113E06}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetSupportingFaces(out PFace1: IFace2; out PFace2: IFace2): WordBool; safecall;
    function SetSupportingFaces(const PFace1: IFace2; const PFace2: IFace2): WordBool; safecall;
    function Get_FlipProfileDistanceParameters: WordBool; safecall;
    procedure Set_FlipProfileDistanceParameters(BRet: WordBool); safecall;
    function Get_ProfileType: Integer; safecall;
    procedure Set_ProfileType(Type_: Integer); safecall;
    function Get_ProfileDistance1: Double; safecall;
    procedure Set_ProfileDistance1(Dist: Double); safecall;
    function Get_ProfileDistance2: Double; safecall;
    procedure Set_ProfileDistance2(Dist: Double); safecall;
    function Get_ProfileDistance3: Double; safecall;
    procedure Set_ProfileDistance3(Dist: Double); safecall;
    function Get_ProfileDistance4: Double; safecall;
    procedure Set_ProfileDistance4(Dist: Double); safecall;
    function Get_ProfileAngle: Double; safecall;
    procedure Set_ProfileAngle(Ang: Double); safecall;
    function Get_ThicknessType: Integer; safecall;
    procedure Set_ThicknessType(Type_: Integer); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Get_ProfileLocation: Integer; safecall;
    procedure Set_ProfileLocation(Type_: Integer); safecall;
    function Get_OffsetUsed: WordBool; safecall;
    procedure Set_OffsetUsed(BUsed: WordBool); safecall;
    function Get_ProfileOffsetDistance: Double; safecall;
    procedure Set_ProfileOffsetDistance(Dist: Double); safecall;
    function Get_FlipOffsetDirection: WordBool; safecall;
    procedure Set_FlipOffsetDirection(BRet: WordBool); safecall;
    function Get_UseAngle: WordBool; safecall;
    procedure Set_UseAngle(BUsed: WordBool); safecall;
    property FlipProfileDistanceParameters: WordBool read Get_FlipProfileDistanceParameters write Set_FlipProfileDistanceParameters;
    property ProfileType: Integer read Get_ProfileType write Set_ProfileType;
    property ProfileDistance1: Double read Get_ProfileDistance1 write Set_ProfileDistance1;
    property ProfileDistance2: Double read Get_ProfileDistance2 write Set_ProfileDistance2;
    property ProfileDistance3: Double read Get_ProfileDistance3 write Set_ProfileDistance3;
    property ProfileDistance4: Double read Get_ProfileDistance4 write Set_ProfileDistance4;
    property ProfileAngle: Double read Get_ProfileAngle write Set_ProfileAngle;
    property ThicknessType: Integer read Get_ThicknessType write Set_ThicknessType;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property ProfileLocation: Integer read Get_ProfileLocation write Set_ProfileLocation;
    property OffsetUsed: WordBool read Get_OffsetUsed write Set_OffsetUsed;
    property ProfileOffsetDistance: Double read Get_ProfileOffsetDistance write Set_ProfileOffsetDistance;
    property FlipOffsetDirection: WordBool read Get_FlipOffsetDirection write Set_FlipOffsetDirection;
    property UseAngle: WordBool read Get_UseAngle write Set_UseAngle;
  end;

// *********************************************************************//
// DispIntf:  IGussetFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AE327CE4-CAEE-42C6-9820-121001113E06}
// *********************************************************************//
  IGussetFeatureDataDisp = dispinterface
    ['{AE327CE4-CAEE-42C6-9820-121001113E06}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    function GetSupportingFaces(out PFace1: IFace2; out PFace2: IFace2): WordBool; dispid 3;
    function SetSupportingFaces(const PFace1: IFace2; const PFace2: IFace2): WordBool; dispid 4;
    property FlipProfileDistanceParameters: WordBool dispid 5;
    property ProfileType: Integer dispid 6;
    property ProfileDistance1: Double dispid 7;
    property ProfileDistance2: Double dispid 8;
    property ProfileDistance3: Double dispid 9;
    property ProfileDistance4: Double dispid 10;
    property ProfileAngle: Double dispid 11;
    property ThicknessType: Integer dispid 12;
    property Thickness: Double dispid 13;
    property ProfileLocation: Integer dispid 14;
    property OffsetUsed: WordBool dispid 15;
    property ProfileOffsetDistance: Double dispid 16;
    property FlipOffsetDirection: WordBool dispid 17;
    property UseAngle: WordBool dispid 18;
  end;

// *********************************************************************//
// Interface: ICombineBodiesFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {526D5A18-6855-411A-9003-7345DD56E5E3}
// *********************************************************************//
  ICombineBodiesFeatureData = interface(IDispatch)
    ['{526D5A18-6855-411A-9003-7345DD56E5E3}']
    function AccessSelections(const PTopDoc: IModelDoc2; const PComponent: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_MainBody: IBody2; safecall;
    procedure Set_MainBody(const MainBody: IBody2); safecall;
    function GetBodiesToCombineCount: Integer; safecall;
    function Get_BodiesToCombine: OleVariant; safecall;
    procedure Set_BodiesToCombine(VBodiesToCombine: OleVariant); safecall;
    function IGetBodiesToCombine(NCount: Integer): IBody2; safecall;
    procedure ISetBodiesToCombine(NCount: Integer; var PBodiesToCombine: IBody2); safecall;
    function Get_OperationType: Integer; safecall;
    procedure Set_OperationType(NOperationType: Integer); safecall;
    property MainBody: IBody2 read Get_MainBody write Set_MainBody;
    property BodiesToCombine: OleVariant read Get_BodiesToCombine write Set_BodiesToCombine;
    property OperationType: Integer read Get_OperationType write Set_OperationType;
  end;

// *********************************************************************//
// DispIntf:  ICombineBodiesFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {526D5A18-6855-411A-9003-7345DD56E5E3}
// *********************************************************************//
  ICombineBodiesFeatureDataDisp = dispinterface
    ['{526D5A18-6855-411A-9003-7345DD56E5E3}']
    function AccessSelections(const PTopDoc: IModelDoc2; const PComponent: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property MainBody: IBody2 dispid 3;
    function GetBodiesToCombineCount: Integer; dispid 4;
    property BodiesToCombine: OleVariant dispid 5;
    function IGetBodiesToCombine(NCount: Integer): IBody2; dispid 6;
    procedure ISetBodiesToCombine(NCount: Integer; var PBodiesToCombine: IBody2); dispid 7;
    property OperationType: Integer dispid 8;
  end;

// *********************************************************************//
// Interface: ILibraryFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AC44BC75-60B1-44B5-BA39-32CC6ED6729E}
// *********************************************************************//
  ILibraryFeatureData = interface(IDispatch)
    ['{AC44BC75-60B1-44B5-BA39-32CC6ED6729E}']
    function AccessSelections(const PTopDoc: IModelDoc2; const PComponent: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetPlacementPlane(out Type_: Integer): IDispatch; safecall;
    procedure SetPlacementPlane(const PDispIn: IDispatch); safecall;
    function Get_ConfigurationName: WideString; safecall;
    procedure Set_ConfigurationName(const NameOut: WideString); safecall;
    function Get_LinkToLibraryPart: WordBool; safecall;
    procedure Set_LinkToLibraryPart(BLink: WordBool); safecall;
    function Get_OverrideDimension: WordBool; safecall;
    procedure Set_OverrideDimension(BOverride: WordBool); safecall;
    function GetReferences(out RefType: OleVariant): OleVariant; safecall;
    procedure SetReferences(RefVar: OleVariant); safecall;
    function GetReferencesCount: Integer; safecall;
    function IGetReferences(Count: Integer; out RefType: Integer): IDispatch; safecall;
    procedure ISetReferences(Count: Integer; var RefVar: IDispatch); safecall;
    function GetDimensions(Type_: Integer; out DimName: OleVariant): OleVariant; safecall;
    function SetDimension(Type_: Integer; const DimName: WideString; DimVal: Double): WordBool; safecall;
    function GetDimensionsCount(Type_: Integer): Integer; safecall;
    function IGetDimensions(Type_: Integer; Count: Integer; out DimName: WideString): Double; safecall;
    function GetConfigurationCount: Integer; safecall;
    function GetAllConfigurationNames: OleVariant; safecall;
    function IGetAllConfigurationNames(Count: Integer): WideString; safecall;
    function Get_LibraryPart: WideString; safecall;
    function Initialize(const FileNameIn: WideString): WordBool; safecall;
    property ConfigurationName: WideString read Get_ConfigurationName write Set_ConfigurationName;
    property LinkToLibraryPart: WordBool read Get_LinkToLibraryPart write Set_LinkToLibraryPart;
    property OverrideDimension: WordBool read Get_OverrideDimension write Set_OverrideDimension;
    property LibraryPart: WideString read Get_LibraryPart;
  end;

// *********************************************************************//
// DispIntf:  ILibraryFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AC44BC75-60B1-44B5-BA39-32CC6ED6729E}
// *********************************************************************//
  ILibraryFeatureDataDisp = dispinterface
    ['{AC44BC75-60B1-44B5-BA39-32CC6ED6729E}']
    function AccessSelections(const PTopDoc: IModelDoc2; const PComponent: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    function GetPlacementPlane(out Type_: Integer): IDispatch; dispid 3;
    procedure SetPlacementPlane(const PDispIn: IDispatch); dispid 4;
    property ConfigurationName: WideString dispid 5;
    property LinkToLibraryPart: WordBool dispid 6;
    property OverrideDimension: WordBool dispid 7;
    function GetReferences(out RefType: OleVariant): OleVariant; dispid 8;
    procedure SetReferences(RefVar: OleVariant); dispid 9;
    function GetReferencesCount: Integer; dispid 10;
    function IGetReferences(Count: Integer; out RefType: Integer): IDispatch; dispid 11;
    procedure ISetReferences(Count: Integer; var RefVar: IDispatch); dispid 12;
    function GetDimensions(Type_: Integer; out DimName: OleVariant): OleVariant; dispid 13;
    function SetDimension(Type_: Integer; const DimName: WideString; DimVal: Double): WordBool; dispid 14;
    function GetDimensionsCount(Type_: Integer): Integer; dispid 15;
    function IGetDimensions(Type_: Integer; Count: Integer; out DimName: WideString): Double; dispid 16;
    function GetConfigurationCount: Integer; dispid 17;
    function GetAllConfigurationNames: OleVariant; dispid 18;
    function IGetAllConfigurationNames(Count: Integer): WideString; dispid 19;
    property LibraryPart: WideString readonly dispid 20;
    function Initialize(const FileNameIn: WideString): WordBool; dispid 21;
  end;

// *********************************************************************//
// Interface: ISimulationGravityFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {51CB1551-09A0-408F-B911-DAFE792DEBFA}
// *********************************************************************//
  ISimulationGravityFeatureData = interface(IDispatch)
    ['{51CB1551-09A0-408F-B911-DAFE792DEBFA}']
    function Get_DirectionReference: IDispatch; safecall;
    procedure Set_DirectionReference(const PDirDisp: IDispatch); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(BRev: WordBool); safecall;
    function Get_Strength: Double; safecall;
    procedure Set_Strength(Strength: Double); safecall;
    property DirectionReference: IDispatch read Get_DirectionReference write Set_DirectionReference;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property Strength: Double read Get_Strength write Set_Strength;
  end;

// *********************************************************************//
// DispIntf:  ISimulationGravityFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {51CB1551-09A0-408F-B911-DAFE792DEBFA}
// *********************************************************************//
  ISimulationGravityFeatureDataDisp = dispinterface
    ['{51CB1551-09A0-408F-B911-DAFE792DEBFA}']
    property DirectionReference: IDispatch dispid 1;
    property ReverseDirection: WordBool dispid 2;
    property Strength: Double dispid 3;
  end;

// *********************************************************************//
// Interface: ISimulationMotorFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D06C413A-FA92-4147-85C5-47FE67C5879D}
// *********************************************************************//
  ISimulationMotorFeatureData = interface(IDispatch)
    ['{D06C413A-FA92-4147-85C5-47FE67C5879D}']
    function Get_DirectionReference: IDispatch; safecall;
    procedure Set_DirectionReference(const PDirDisp: IDispatch); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(BRev: WordBool); safecall;
    function Get_Velocity: Double; safecall;
    procedure Set_Velocity(Strength: Double); safecall;
    function Get_MotorType: Integer; safecall;
    function Get_ExternalState: WordBool; safecall;
    procedure Set_ExternalState(BRev: WordBool); safecall;
    property DirectionReference: IDispatch read Get_DirectionReference write Set_DirectionReference;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property Velocity: Double read Get_Velocity write Set_Velocity;
    property MotorType: Integer read Get_MotorType;
    property ExternalState: WordBool read Get_ExternalState write Set_ExternalState;
  end;

// *********************************************************************//
// DispIntf:  ISimulationMotorFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D06C413A-FA92-4147-85C5-47FE67C5879D}
// *********************************************************************//
  ISimulationMotorFeatureDataDisp = dispinterface
    ['{D06C413A-FA92-4147-85C5-47FE67C5879D}']
    property DirectionReference: IDispatch dispid 1;
    property ReverseDirection: WordBool dispid 2;
    property Velocity: Double dispid 3;
    property MotorType: Integer readonly dispid 4;
    property ExternalState: WordBool dispid 5;
  end;

// *********************************************************************//
// Interface: ISimulationLinearSpringFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3C9C2BA4-B021-4BB8-A992-500575B08E72}
// *********************************************************************//
  ISimulationLinearSpringFeatureData = interface(IDispatch)
    ['{3C9C2BA4-B021-4BB8-A992-500575B08E72}']
    procedure GetEndPoints(out PDirDisp1: IDispatch; out PDirDisp2: IDispatch; out Type1: Integer; 
                           out Type2: Integer); safecall;
    procedure SetEndPoints(const PDirDisp1: IDispatch; const PDirDisp2: IDispatch); safecall;
    function Get_FreeLength: Double; safecall;
    procedure Set_FreeLength(Len: Double); safecall;
    function Get_SpringConstant: Double; safecall;
    procedure Set_SpringConstant(Constant: Double); safecall;
    property FreeLength: Double read Get_FreeLength write Set_FreeLength;
    property SpringConstant: Double read Get_SpringConstant write Set_SpringConstant;
  end;

// *********************************************************************//
// DispIntf:  ISimulationLinearSpringFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {3C9C2BA4-B021-4BB8-A992-500575B08E72}
// *********************************************************************//
  ISimulationLinearSpringFeatureDataDisp = dispinterface
    ['{3C9C2BA4-B021-4BB8-A992-500575B08E72}']
    procedure GetEndPoints(out PDirDisp1: IDispatch; out PDirDisp2: IDispatch; out Type1: Integer; 
                           out Type2: Integer); dispid 1;
    procedure SetEndPoints(const PDirDisp1: IDispatch; const PDirDisp2: IDispatch); dispid 2;
    property FreeLength: Double dispid 3;
    property SpringConstant: Double dispid 4;
  end;

// *********************************************************************//
// Interface: IWeldmentTrimExtendFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D1D31986-C631-4726-9988-A45F592CFAB2}
// *********************************************************************//
  IWeldmentTrimExtendFeatureData = interface(IDispatch)
    ['{D1D31986-C631-4726-9988-A45F592CFAB2}']
    function AccessSelections(const PTopDoc: IModelDoc2; const PComponent: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_CornerType: Integer; safecall;
    procedure Set_CornerType(Type_: Integer); safecall;
    function GetBodiesToBeTrimmedCount: Integer; safecall;
    function Get_BodiesToBeTrimmed: OleVariant; safecall;
    procedure Set_BodiesToBeTrimmed(BodiesOut: OleVariant); safecall;
    function IGetBodiesToBeTrimmed(Count: Integer): IBody2; safecall;
    procedure ISetBodiesToBeTrimmed(Count: Integer; var BodiesIn: IBody2); safecall;
    function GetTrimmingBoundaryCount: Integer; safecall;
    function GetTrimmingBoundary(out Type_: Integer): OleVariant; safecall;
    procedure SetTrimmingBoundary(TrimBoundVar: OleVariant); safecall;
    function IGetTrimmingBoundary(Count: Integer; out Type_: Integer): IDispatch; safecall;
    procedure ISetTrimmingBoundary(Count: Integer; var TrimBoundArr: IDispatch); safecall;
    property CornerType: Integer read Get_CornerType write Set_CornerType;
    property BodiesToBeTrimmed: OleVariant read Get_BodiesToBeTrimmed write Set_BodiesToBeTrimmed;
  end;

// *********************************************************************//
// DispIntf:  IWeldmentTrimExtendFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D1D31986-C631-4726-9988-A45F592CFAB2}
// *********************************************************************//
  IWeldmentTrimExtendFeatureDataDisp = dispinterface
    ['{D1D31986-C631-4726-9988-A45F592CFAB2}']
    function AccessSelections(const PTopDoc: IModelDoc2; const PComponent: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property CornerType: Integer dispid 3;
    function GetBodiesToBeTrimmedCount: Integer; dispid 4;
    property BodiesToBeTrimmed: OleVariant dispid 5;
    function IGetBodiesToBeTrimmed(Count: Integer): IBody2; dispid 6;
    procedure ISetBodiesToBeTrimmed(Count: Integer; var BodiesIn: IBody2); dispid 7;
    function GetTrimmingBoundaryCount: Integer; dispid 8;
    function GetTrimmingBoundary(out Type_: Integer): OleVariant; dispid 9;
    procedure SetTrimmingBoundary(TrimBoundVar: OleVariant); dispid 10;
    function IGetTrimmingBoundary(Count: Integer; out Type_: Integer): IDispatch; dispid 11;
    procedure ISetTrimmingBoundary(Count: Integer; var TrimBoundArr: IDispatch); dispid 12;
  end;

// *********************************************************************//
// Interface: IWeldmentBeadFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {93F2E4D8-AD2D-41B6-A5F7-6E7E628CCFAB}
// *********************************************************************//
  IWeldmentBeadFeatureData = interface(IDispatch)
    ['{93F2E4D8-AD2D-41B6-A5F7-6E7E628CCFAB}']
    function AccessSelections(const PTopDoc: IModelDoc2; const PComponent: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_BeadType(Side: Integer): Integer; safecall;
    procedure Set_BeadType(Side: Integer; Type_: Integer); safecall;
    function Get_BeadSize(Side: Integer): Double; safecall;
    procedure Set_BeadSize(Side: Integer; Size: Double); safecall;
    function Get_BeadLength(Side: Integer): Double; safecall;
    procedure Set_BeadLength(Side: Integer; Len: Double); safecall;
    function Get_BeadPitch(Side: Integer): Double; safecall;
    procedure Set_BeadPitch(Side: Integer; Pitch: Double); safecall;
    function Get_TangentPropagation: WordBool; safecall;
    procedure Set_TangentPropagation(Prop: WordBool); safecall;
    procedure GetFaces(Side: Integer; out FaceSet1: OleVariant; out FaceSet2: OleVariant); safecall;
    function SetFaces(Side: Integer; FaceSet1: OleVariant; FaceSet2: OleVariant): WordBool; safecall;
    procedure GetFacesCount(Side: Integer; out FaceSet1Count: Integer; out FaceSet2Count: Integer); safecall;
    procedure IGetFaces(Side: Integer; Count1: Integer; out FaceSet1: IFace2; Count2: Integer; 
                        out FaceSet2: IFace2); safecall;
    function ISetFaces(Side: Integer; Count1: Integer; var FaceSet1: IFace2; Count2: Integer; 
                       var FaceSet2: IFace2): WordBool; safecall;
    function GetVirtualEdgesCount(FromFeature: WordBool; Side: Integer): Integer; safecall;
    function GetVirtualEdges(FromFeature: WordBool; Side: Integer): OleVariant; safecall;
    procedure SetVirtualEdges(Side: Integer; EdgesIn: OleVariant); safecall;
    function IGetVirtualEdges(FromFeature: WordBool; Side: Integer; Count: Integer): IEdge; safecall;
    procedure ISetVirtualEdges(Side: Integer; Count: Integer; var EdgesIn: IEdge); safecall;
    function Get_UseOtherSide: WordBool; safecall;
    procedure Set_UseOtherSide(BUse: WordBool); safecall;
    property BeadType[Side: Integer]: Integer read Get_BeadType write Set_BeadType;
    property BeadSize[Side: Integer]: Double read Get_BeadSize write Set_BeadSize;
    property BeadLength[Side: Integer]: Double read Get_BeadLength write Set_BeadLength;
    property BeadPitch[Side: Integer]: Double read Get_BeadPitch write Set_BeadPitch;
    property TangentPropagation: WordBool read Get_TangentPropagation write Set_TangentPropagation;
    property UseOtherSide: WordBool read Get_UseOtherSide write Set_UseOtherSide;
  end;

// *********************************************************************//
// DispIntf:  IWeldmentBeadFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {93F2E4D8-AD2D-41B6-A5F7-6E7E628CCFAB}
// *********************************************************************//
  IWeldmentBeadFeatureDataDisp = dispinterface
    ['{93F2E4D8-AD2D-41B6-A5F7-6E7E628CCFAB}']
    function AccessSelections(const PTopDoc: IModelDoc2; const PComponent: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property BeadType[Side: Integer]: Integer dispid 3;
    property BeadSize[Side: Integer]: Double dispid 4;
    property BeadLength[Side: Integer]: Double dispid 5;
    property BeadPitch[Side: Integer]: Double dispid 6;
    property TangentPropagation: WordBool dispid 7;
    procedure GetFaces(Side: Integer; out FaceSet1: OleVariant; out FaceSet2: OleVariant); dispid 8;
    function SetFaces(Side: Integer; FaceSet1: OleVariant; FaceSet2: OleVariant): WordBool; dispid 9;
    procedure GetFacesCount(Side: Integer; out FaceSet1Count: Integer; out FaceSet2Count: Integer); dispid 10;
    procedure IGetFaces(Side: Integer; Count1: Integer; out FaceSet1: IFace2; Count2: Integer; 
                        out FaceSet2: IFace2); dispid 11;
    function ISetFaces(Side: Integer; Count1: Integer; var FaceSet1: IFace2; Count2: Integer; 
                       var FaceSet2: IFace2): WordBool; dispid 12;
    function GetVirtualEdgesCount(FromFeature: WordBool; Side: Integer): Integer; dispid 13;
    function GetVirtualEdges(FromFeature: WordBool; Side: Integer): OleVariant; dispid 14;
    procedure SetVirtualEdges(Side: Integer; EdgesIn: OleVariant); dispid 15;
    function IGetVirtualEdges(FromFeature: WordBool; Side: Integer; Count: Integer): IEdge; dispid 16;
    procedure ISetVirtualEdges(Side: Integer; Count: Integer; var EdgesIn: IEdge); dispid 17;
    property UseOtherSide: WordBool dispid 18;
  end;

// *********************************************************************//
// Interface: IBodyFolder
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BCB39259-F2AA-47FD-8099-065B095095AD}
// *********************************************************************//
  IBodyFolder = interface(IDispatch)
    ['{BCB39259-F2AA-47FD-8099-065B095095AD}']
    function GetFeature: IFeature; safecall;
    function Get_type_: Integer; safecall;
    function GetBodyCount: Integer; safecall;
    function GetBodies: OleVariant; safecall;
    function IGetBodies(Count: Integer): IBody2; safecall;
    function GetAutomaticCutList: WordBool; safecall;
    function SetAutomaticCutList(CutList: WordBool): WordBool; safecall;
    function UpdateCutList: WordBool; safecall;
    property type_: Integer read Get_type_;
  end;

// *********************************************************************//
// DispIntf:  IBodyFolderDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BCB39259-F2AA-47FD-8099-065B095095AD}
// *********************************************************************//
  IBodyFolderDisp = dispinterface
    ['{BCB39259-F2AA-47FD-8099-065B095095AD}']
    function GetFeature: IFeature; dispid 131073;
    property type_: Integer readonly dispid 131074;
    function GetBodyCount: Integer; dispid 131075;
    function GetBodies: OleVariant; dispid 131076;
    function IGetBodies(Count: Integer): IBody2; dispid 131077;
    function GetAutomaticCutList: WordBool; dispid 131078;
    function SetAutomaticCutList(CutList: WordBool): WordBool; dispid 131079;
    function UpdateCutList: WordBool; dispid 131080;
  end;

// *********************************************************************//
// Interface: ICoreFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {900B5953-3BD3-43AB-B190-67EACD25A69A}
// *********************************************************************//
  ICoreFeatureData = interface(IDispatch)
    ['{900B5953-3BD3-43AB-B190-67EACD25A69A}']
    function AccessSelections(const PTopDoc: IModelDoc2; const PComponent: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_BoundingSketch: IFeature; safecall;
    procedure Set_BoundingSketch(const PFeat: IFeature); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(BRev: WordBool); safecall;
    function GetExtractionDirection(out Type1: Integer; out PDir1: IDispatch; out Type2: Integer; 
                                    out PDir2: IDispatch): Integer; safecall;
    function SetExtractionDirection(const PDir1: IDispatch; const PDir2: IDispatch): WordBool; safecall;
    function Get_TargetBody: IBody2; safecall;
    procedure Set_TargetBody(const PBody: IBody2); safecall;
    function Get_UseDraft: WordBool; safecall;
    procedure Set_UseDraft(BUse: WordBool); safecall;
    function Get_DraftAngle: Double; safecall;
    procedure Set_DraftAngle(Ang: Double); safecall;
    function Get_DraftOutward: WordBool; safecall;
    procedure Set_DraftOutward(BOutward: WordBool); safecall;
    function Get_EndCondition(Index: Integer): Integer; safecall;
    procedure Set_EndCondition(Index: Integer; Type_: Integer); safecall;
    function Get_Depth(Index: Integer): Double; safecall;
    procedure Set_Depth(Index: Integer; Value: Double); safecall;
    function Get_CapEnds: WordBool; safecall;
    procedure Set_CapEnds(BCap: WordBool); safecall;
    property BoundingSketch: IFeature read Get_BoundingSketch write Set_BoundingSketch;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property TargetBody: IBody2 read Get_TargetBody write Set_TargetBody;
    property UseDraft: WordBool read Get_UseDraft write Set_UseDraft;
    property DraftAngle: Double read Get_DraftAngle write Set_DraftAngle;
    property DraftOutward: WordBool read Get_DraftOutward write Set_DraftOutward;
    property EndCondition[Index: Integer]: Integer read Get_EndCondition write Set_EndCondition;
    property Depth[Index: Integer]: Double read Get_Depth write Set_Depth;
    property CapEnds: WordBool read Get_CapEnds write Set_CapEnds;
  end;

// *********************************************************************//
// DispIntf:  ICoreFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {900B5953-3BD3-43AB-B190-67EACD25A69A}
// *********************************************************************//
  ICoreFeatureDataDisp = dispinterface
    ['{900B5953-3BD3-43AB-B190-67EACD25A69A}']
    function AccessSelections(const PTopDoc: IModelDoc2; const PComponent: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property BoundingSketch: IFeature dispid 3;
    property ReverseDirection: WordBool dispid 4;
    function GetExtractionDirection(out Type1: Integer; out PDir1: IDispatch; out Type2: Integer; 
                                    out PDir2: IDispatch): Integer; dispid 5;
    function SetExtractionDirection(const PDir1: IDispatch; const PDir2: IDispatch): WordBool; dispid 6;
    property TargetBody: IBody2 dispid 7;
    property UseDraft: WordBool dispid 8;
    property DraftAngle: Double dispid 9;
    property DraftOutward: WordBool dispid 10;
    property EndCondition[Index: Integer]: Integer dispid 11;
    property Depth[Index: Integer]: Double dispid 12;
    property CapEnds: WordBool dispid 13;
  end;

// *********************************************************************//
// Interface: ICommentFolder
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {693E3D8B-3CB9-4D5C-9FCF-E021149BBC38}
// *********************************************************************//
  ICommentFolder = interface(IDispatch)
    ['{693E3D8B-3CB9-4D5C-9FCF-E021149BBC38}']
    function GetFeature: IFeature; safecall;
    function GetCommentCount: Integer; safecall;
    function GetComments: OleVariant; safecall;
    function IGetComments(Count: Integer): IComment; safecall;
    function AddComment(const Text: WideString): IComment; safecall;
  end;

// *********************************************************************//
// DispIntf:  ICommentFolderDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {693E3D8B-3CB9-4D5C-9FCF-E021149BBC38}
// *********************************************************************//
  ICommentFolderDisp = dispinterface
    ['{693E3D8B-3CB9-4D5C-9FCF-E021149BBC38}']
    function GetFeature: IFeature; dispid 1;
    function GetCommentCount: Integer; dispid 2;
    function GetComments: OleVariant; dispid 3;
    function IGetComments(Count: Integer): IComment; dispid 4;
    function AddComment(const Text: WideString): IComment; dispid 5;
  end;

// *********************************************************************//
// Interface: IImportIgesData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {57988505-3843-4124-9CBE-AF121D9E0BE8}
// *********************************************************************//
  IImportIgesData = interface(IDispatch)
    ['{57988505-3843-4124-9CBE-AF121D9E0BE8}']
    function Get_IncludeSurfaces: WordBool; safecall;
    procedure Set_IncludeSurfaces(Surfaces: WordBool); safecall;
    function Get_IncludeCurves: WordBool; safecall;
    procedure Set_IncludeCurves(Curves: WordBool); safecall;
    function Get_CurvesAsSketches: WordBool; safecall;
    procedure Set_CurvesAsSketches(AsSketches: WordBool); safecall;
    function Get_ProcessByLevel: WordBool; safecall;
    procedure Set_ProcessByLevel(ByLevel: WordBool); safecall;
    function Get_IncludeAllLevels: WordBool; safecall;
    function Get_IncludeOnlyLevels: OleVariant; safecall;
    function SetLevels(All: WordBool; Only: OleVariant): WordBool; safecall;
    property IncludeSurfaces: WordBool read Get_IncludeSurfaces write Set_IncludeSurfaces;
    property IncludeCurves: WordBool read Get_IncludeCurves write Set_IncludeCurves;
    property CurvesAsSketches: WordBool read Get_CurvesAsSketches write Set_CurvesAsSketches;
    property ProcessByLevel: WordBool read Get_ProcessByLevel write Set_ProcessByLevel;
    property IncludeAllLevels: WordBool read Get_IncludeAllLevels;
    property IncludeOnlyLevels: OleVariant read Get_IncludeOnlyLevels;
  end;

// *********************************************************************//
// DispIntf:  IImportIgesDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {57988505-3843-4124-9CBE-AF121D9E0BE8}
// *********************************************************************//
  IImportIgesDataDisp = dispinterface
    ['{57988505-3843-4124-9CBE-AF121D9E0BE8}']
    property IncludeSurfaces: WordBool dispid 1;
    property IncludeCurves: WordBool dispid 2;
    property CurvesAsSketches: WordBool dispid 3;
    property ProcessByLevel: WordBool dispid 4;
    property IncludeAllLevels: WordBool readonly dispid 5;
    property IncludeOnlyLevels: OleVariant readonly dispid 6;
    function SetLevels(All: WordBool; Only: OleVariant): WordBool; dispid 7;
  end;

// *********************************************************************//
// Interface: IImportDxfDwgData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {11F1F395-9064-44CB-AE29-E1A3A543AEDC}
// *********************************************************************//
  IImportDxfDwgData = interface(IDispatch)
    ['{11F1F395-9064-44CB-AE29-E1A3A543AEDC}']
    function Get_ImportMethod(const Sheet: WideString): Integer; safecall;
    procedure Set_ImportMethod(const Sheet: WideString; Method: Integer); safecall;
    function Get_LengthUnit(const Sheet: WideString): Integer; safecall;
    procedure Set_LengthUnit(const Sheet: WideString; Unit_: Integer); safecall;
    procedure GetPaperSize(const Sheet: WideString; var Size: Integer; var Height: Double; 
                           var Width: Double); safecall;
    function SetPaperSize(const Sheet: WideString; Size: Integer; Height: Double; Width: Double): WordBool; safecall;
    procedure GetSheetScale(const Sheet: WideString; var Numerator: Double; var Denominator: Double); safecall;
    function SetSheetScale(const Sheet: WideString; Numerator: Double; Denominator: Double): WordBool; safecall;
    function GetImportLayerVisibility(const Layer: WideString): Integer; safecall;
    function SetImportLayerVisibility(Layers: OleVariant; Visibility: Integer): WordBool; safecall;
    function GetImportLayerToSheetFormat(const Layer: WideString): WordBool; safecall;
    function SetImportLayerToSheetFormat(Layers: OleVariant; SheetFormat: WordBool): WordBool; safecall;
    function Get_SheetName(const Sheet: WideString): WideString; safecall;
    procedure Set_SheetName(const Sheet: WideString; const Name: WideString); safecall;
    procedure GetPosition(const Sheet: WideString; var Positioning: Integer; var X: Double; 
                          var Y: Double); safecall;
    function SetPosition(const Sheet: WideString; Positioning: Integer; X: Double; Y: Double): WordBool; safecall;
    function Get_DocumentTemplate: WideString; safecall;
    procedure Set_DocumentTemplate(const Name: WideString); safecall;
    function Get_AddSketchConstraints(const Sheet: WideString): WordBool; safecall;
    procedure Set_AddSketchConstraints(const Sheet: WideString; Constraints: WordBool); safecall;
    function Get_ImportDimensions(const Sheet: WideString): WordBool; safecall;
    procedure Set_ImportDimensions(const Sheet: WideString; Dimensions: WordBool); safecall;
    function GetMergePoints(const Sheet: WideString): WordBool; safecall;
    function GetMergeDistance(const Sheet: WideString): Double; safecall;
    function SetMergePoints(const Sheet: WideString; Merge: WordBool; Distance: Double): WordBool; safecall;
    function Get_ImportHatch(const Sheet: WideString): WordBool; safecall;
    procedure Set_ImportHatch(const Sheet: WideString; Hatch: WordBool); safecall;
    property ImportMethod[const Sheet: WideString]: Integer read Get_ImportMethod write Set_ImportMethod;
    property LengthUnit[const Sheet: WideString]: Integer read Get_LengthUnit write Set_LengthUnit;
    property SheetName[const Sheet: WideString]: WideString read Get_SheetName write Set_SheetName;
    property DocumentTemplate: WideString read Get_DocumentTemplate write Set_DocumentTemplate;
    property AddSketchConstraints[const Sheet: WideString]: WordBool read Get_AddSketchConstraints write Set_AddSketchConstraints;
    property ImportDimensions[const Sheet: WideString]: WordBool read Get_ImportDimensions write Set_ImportDimensions;
    property ImportHatch[const Sheet: WideString]: WordBool read Get_ImportHatch write Set_ImportHatch;
  end;

// *********************************************************************//
// DispIntf:  IImportDxfDwgDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {11F1F395-9064-44CB-AE29-E1A3A543AEDC}
// *********************************************************************//
  IImportDxfDwgDataDisp = dispinterface
    ['{11F1F395-9064-44CB-AE29-E1A3A543AEDC}']
    property ImportMethod[const Sheet: WideString]: Integer dispid 1;
    property LengthUnit[const Sheet: WideString]: Integer dispid 2;
    procedure GetPaperSize(const Sheet: WideString; var Size: Integer; var Height: Double; 
                           var Width: Double); dispid 3;
    function SetPaperSize(const Sheet: WideString; Size: Integer; Height: Double; Width: Double): WordBool; dispid 4;
    procedure GetSheetScale(const Sheet: WideString; var Numerator: Double; var Denominator: Double); dispid 5;
    function SetSheetScale(const Sheet: WideString; Numerator: Double; Denominator: Double): WordBool; dispid 6;
    function GetImportLayerVisibility(const Layer: WideString): Integer; dispid 7;
    function SetImportLayerVisibility(Layers: OleVariant; Visibility: Integer): WordBool; dispid 8;
    function GetImportLayerToSheetFormat(const Layer: WideString): WordBool; dispid 9;
    function SetImportLayerToSheetFormat(Layers: OleVariant; SheetFormat: WordBool): WordBool; dispid 10;
    property SheetName[const Sheet: WideString]: WideString dispid 11;
    procedure GetPosition(const Sheet: WideString; var Positioning: Integer; var X: Double; 
                          var Y: Double); dispid 12;
    function SetPosition(const Sheet: WideString; Positioning: Integer; X: Double; Y: Double): WordBool; dispid 13;
    property DocumentTemplate: WideString dispid 14;
    property AddSketchConstraints[const Sheet: WideString]: WordBool dispid 15;
    property ImportDimensions[const Sheet: WideString]: WordBool dispid 16;
    function GetMergePoints(const Sheet: WideString): WordBool; dispid 17;
    function GetMergeDistance(const Sheet: WideString): Double; dispid 18;
    function SetMergePoints(const Sheet: WideString; Merge: WordBool; Distance: Double): WordBool; dispid 19;
    property ImportHatch[const Sheet: WideString]: WordBool dispid 20;
  end;

// *********************************************************************//
// Interface: IImportStepData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AD749A73-9AA2-4A3E-BCA5-8FC012114BB0}
// *********************************************************************//
  IImportStepData = interface(IDispatch)
    ['{AD749A73-9AA2-4A3E-BCA5-8FC012114BB0}']
    function Get_MapConfigurationData: WordBool; safecall;
    procedure Set_MapConfigurationData(ConfigData: WordBool); safecall;
    property MapConfigurationData: WordBool read Get_MapConfigurationData write Set_MapConfigurationData;
  end;

// *********************************************************************//
// DispIntf:  IImportStepDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {AD749A73-9AA2-4A3E-BCA5-8FC012114BB0}
// *********************************************************************//
  IImportStepDataDisp = dispinterface
    ['{AD749A73-9AA2-4A3E-BCA5-8FC012114BB0}']
    property MapConfigurationData: WordBool dispid 1;
  end;

// *********************************************************************//
// Interface: IExportPdfData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {33D23C34-D27A-4635-91DF-8BEFFE51900A}
// *********************************************************************//
  IExportPdfData = interface(IDispatch)
    ['{33D23C34-D27A-4635-91DF-8BEFFE51900A}']
    function GetWhichSheets: Integer; safecall;
    function GetSheets: OleVariant; safecall;
    function SetSheets(Which: Integer; Sheets: OleVariant): WordBool; safecall;
    function Get_ExportAs3D: WordBool; safecall;
    procedure Set_ExportAs3D(As3D: WordBool); safecall;
    property ExportAs3D: WordBool read Get_ExportAs3D write Set_ExportAs3D;
  end;

// *********************************************************************//
// DispIntf:  IExportPdfDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {33D23C34-D27A-4635-91DF-8BEFFE51900A}
// *********************************************************************//
  IExportPdfDataDisp = dispinterface
    ['{33D23C34-D27A-4635-91DF-8BEFFE51900A}']
    function GetWhichSheets: Integer; dispid 1;
    function GetSheets: OleVariant; dispid 2;
    function SetSheets(Which: Integer; Sheets: OleVariant): WordBool; dispid 3;
    property ExportAs3D: WordBool dispid 4;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageSlider
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CF38209E-52DC-414C-81BD-EBAC6C10692D}
// *********************************************************************//
  IPropertyManagerPageSlider = interface(IDispatch)
    ['{CF38209E-52DC-414C-81BD-EBAC6C10692D}']
    function Get_Style: Integer; safecall;
    procedure Set_Style(Style: Integer); safecall;
    procedure GetRange(var Min: Integer; var Max: Integer); safecall;
    function SetRange(Min: Integer; Max: Integer): WordBool; safecall;
    function Get_Position: Integer; safecall;
    procedure Set_Position(Position: Integer); safecall;
    function Get_TickFrequency: Integer; safecall;
    procedure Set_TickFrequency(Frequency: Integer); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(Height: Smallint); safecall;
    function Get_LineSize: Integer; safecall;
    procedure Set_LineSize(Size: Integer); safecall;
    function Get_PageSize: Integer; safecall;
    procedure Set_PageSize(Size: Integer); safecall;
    property Style: Integer read Get_Style write Set_Style;
    property Position: Integer read Get_Position write Set_Position;
    property TickFrequency: Integer read Get_TickFrequency write Set_TickFrequency;
    property Height: Smallint read Get_Height write Set_Height;
    property LineSize: Integer read Get_LineSize write Set_LineSize;
    property PageSize: Integer read Get_PageSize write Set_PageSize;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageSliderDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CF38209E-52DC-414C-81BD-EBAC6C10692D}
// *********************************************************************//
  IPropertyManagerPageSliderDisp = dispinterface
    ['{CF38209E-52DC-414C-81BD-EBAC6C10692D}']
    property Style: Integer dispid 196609;
    procedure GetRange(var Min: Integer; var Max: Integer); dispid 196610;
    function SetRange(Min: Integer; Max: Integer): WordBool; dispid 196611;
    property Position: Integer dispid 196612;
    property TickFrequency: Integer dispid 196613;
    property Height: Smallint dispid 196614;
    property LineSize: Integer dispid 196615;
    property PageSize: Integer dispid 196616;
  end;

// *********************************************************************//
// Interface: IDragArrowManipulator
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4A9CE84F-42B5-4047-BF37-EC2E101B42A2}
// *********************************************************************//
  IDragArrowManipulator = interface(IDispatch)
    ['{4A9CE84F-42B5-4047-BF37-EC2E101B42A2}']
    function Get_Origin: IMathPoint; safecall;
    procedure Set_Origin(const PPt: IMathPoint); safecall;
    function Get_Direction: IMathVector; safecall;
    procedure Set_Direction(const PVector: IMathVector); safecall;
    function Get_Length: Double; safecall;
    procedure Set_Length(Length: Double); safecall;
    function Get_LengthOppositeDirection: Double; safecall;
    procedure Set_LengthOppositeDirection(Length: Double); safecall;
    function Get_ShowOppositeDirection: WordBool; safecall;
    procedure Set_ShowOppositeDirection(Retval: WordBool); safecall;
    function Update: WordBool; safecall;
    property Origin: IMathPoint read Get_Origin write Set_Origin;
    property Direction: IMathVector read Get_Direction write Set_Direction;
    property Length: Double read Get_Length write Set_Length;
    property LengthOppositeDirection: Double read Get_LengthOppositeDirection write Set_LengthOppositeDirection;
    property ShowOppositeDirection: WordBool read Get_ShowOppositeDirection write Set_ShowOppositeDirection;
  end;

// *********************************************************************//
// DispIntf:  IDragArrowManipulatorDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {4A9CE84F-42B5-4047-BF37-EC2E101B42A2}
// *********************************************************************//
  IDragArrowManipulatorDisp = dispinterface
    ['{4A9CE84F-42B5-4047-BF37-EC2E101B42A2}']
    property Origin: IMathPoint dispid 196609;
    property Direction: IMathVector dispid 196610;
    property Length: Double dispid 196611;
    property LengthOppositeDirection: Double dispid 196612;
    property ShowOppositeDirection: WordBool dispid 196613;
    function Update: WordBool; dispid 196614;
  end;

// *********************************************************************//
// Interface: IMoveFaceFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BC300B17-346F-4511-8D31-969C580BB16B}
// *********************************************************************//
  IMoveFaceFeatureData = interface(IDispatch)
    ['{BC300B17-346F-4511-8D31-969C580BB16B}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_MoveType: Integer; safecall;
    procedure Set_MoveType(LMoveType: Integer); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(VBReverseDirection: WordBool); safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(DAngle: Double); safecall;
    function Get_Distance: Double; safecall;
    procedure Set_Distance(DDistance: Double); safecall;
    function Get_Faces: OleVariant; safecall;
    procedure Set_Faces(PVar: OleVariant); safecall;
    function GetFacesCount: Integer; safecall;
    function IGetFaces(Count: Integer): IFace2; safecall;
    procedure ISetFaces(Count: Integer; var EntIn: IFace2); safecall;
    function GetDirectionReference(out DirRefType: Integer): IDispatch; safecall;
    function SetDirectionReference(const LpDispatch: IDispatch): WordBool; safecall;
    property MoveType: Integer read Get_MoveType write Set_MoveType;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property Angle: Double read Get_Angle write Set_Angle;
    property Distance: Double read Get_Distance write Set_Distance;
    property Faces: OleVariant read Get_Faces write Set_Faces;
  end;

// *********************************************************************//
// DispIntf:  IMoveFaceFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {BC300B17-346F-4511-8D31-969C580BB16B}
// *********************************************************************//
  IMoveFaceFeatureDataDisp = dispinterface
    ['{BC300B17-346F-4511-8D31-969C580BB16B}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property MoveType: Integer dispid 3;
    property ReverseDirection: WordBool dispid 4;
    property Angle: Double dispid 5;
    property Distance: Double dispid 6;
    property Faces: OleVariant dispid 7;
    function GetFacesCount: Integer; dispid 8;
    function IGetFaces(Count: Integer): IFace2; dispid 9;
    procedure ISetFaces(Count: Integer; var EntIn: IFace2); dispid 10;
    function GetDirectionReference(out DirRefType: Integer): IDispatch; dispid 11;
    function SetDirectionReference(const LpDispatch: IDispatch): WordBool; dispid 12;
  end;

// *********************************************************************//
// Interface: IHealEdgesFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CFBD8D35-9C42-44F5-AF20-A27988F95FD9}
// *********************************************************************//
  IHealEdgesFeatureData = interface(IDispatch)
    ['{CFBD8D35-9C42-44F5-AF20-A27988F95FD9}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Faces: OleVariant; safecall;
    procedure Set_Faces(PVar: OleVariant); safecall;
    function GetFacesCount: Integer; safecall;
    function IGetFaces(Count: Integer): IFace2; safecall;
    procedure ISetFaces(Count: Integer; var EntIn: IFace2); safecall;
    function Get_AngularTolerance: Double; safecall;
    procedure Set_AngularTolerance(DAngle: Double); safecall;
    function Get_EdgeLengthTolerance: Double; safecall;
    procedure Set_EdgeLengthTolerance(DDistance: Double); safecall;
    procedure HealEdges; safecall;
    procedure GetEdgeInformation(out EdgeCountBefore: Integer; out EdgeCountAfter: Integer); safecall;
    property Faces: OleVariant read Get_Faces write Set_Faces;
    property AngularTolerance: Double read Get_AngularTolerance write Set_AngularTolerance;
    property EdgeLengthTolerance: Double read Get_EdgeLengthTolerance write Set_EdgeLengthTolerance;
  end;

// *********************************************************************//
// DispIntf:  IHealEdgesFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CFBD8D35-9C42-44F5-AF20-A27988F95FD9}
// *********************************************************************//
  IHealEdgesFeatureDataDisp = dispinterface
    ['{CFBD8D35-9C42-44F5-AF20-A27988F95FD9}']
    function AccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 1;
    procedure ReleaseSelectionAccess; dispid 2;
    property Faces: OleVariant dispid 3;
    function GetFacesCount: Integer; dispid 4;
    function IGetFaces(Count: Integer): IFace2; dispid 5;
    procedure ISetFaces(Count: Integer; var EntIn: IFace2); dispid 6;
    property AngularTolerance: Double dispid 7;
    property EdgeLengthTolerance: Double dispid 8;
    procedure HealEdges; dispid 9;
    procedure GetEdgeInformation(out EdgeCountBefore: Integer; out EdgeCountAfter: Integer); dispid 10;
  end;

// *********************************************************************//
// Interface: ISilhouetteEdge
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B7A5B9B2-CA73-45B8-A41D-38FB6F2D3B6E}
// *********************************************************************//
  ISilhouetteEdge = interface(IDispatch)
    ['{B7A5B9B2-CA73-45B8-A41D-38FB6F2D3B6E}']
    function GetStartPoint: IMathPoint; safecall;
    function GetEndPoint: IMathPoint; safecall;
    function GetFace: IFace2; safecall;
    function Select(Append: WordBool; const Data: ISelectData): WordBool; safecall;
    function GetView: IView; safecall;
    function GetCurve: ICurve; safecall;
  end;

// *********************************************************************//
// DispIntf:  ISilhouetteEdgeDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {B7A5B9B2-CA73-45B8-A41D-38FB6F2D3B6E}
// *********************************************************************//
  ISilhouetteEdgeDisp = dispinterface
    ['{B7A5B9B2-CA73-45B8-A41D-38FB6F2D3B6E}']
    function GetStartPoint: IMathPoint; dispid 1;
    function GetEndPoint: IMathPoint; dispid 2;
    function GetFace: IFace2; dispid 3;
    function Select(Append: WordBool; const Data: ISelectData): WordBool; dispid 4;
    function GetView: IView; dispid 5;
    function GetCurve: ICurve; dispid 6;
  end;

// *********************************************************************//
// Interface: IDerivedPartFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A1672AF7-E65F-46E8-800C-7CBF4DA6E80F}
// *********************************************************************//
  IDerivedPartFeatureData = interface(IDispatch)
    ['{A1672AF7-E65F-46E8-800C-7CBF4DA6E80F}']
    function Get_ImportPlane: WordBool; safecall;
    procedure Set_ImportPlane(ImportPlane: WordBool); safecall;
    function Get_ImportAxis: WordBool; safecall;
    procedure Set_ImportAxis(ImportAxis: WordBool); safecall;
    function Get_ImportCThread: WordBool; safecall;
    procedure Set_ImportCThread(ImportCThread: WordBool); safecall;
    function Get_ImportSurf: WordBool; safecall;
    procedure Set_ImportSurf(ImportSurf: WordBool); safecall;
    function Get_ImportAbsorbedSketches: WordBool; safecall;
    procedure Set_ImportAbsorbedSketches(ImportAbsorbedSketches: WordBool); safecall;
    function Get_ImportUnAbsorbedSketches: WordBool; safecall;
    procedure Set_ImportUnAbsorbedSketches(ImportUnAbsorbedSketches: WordBool); safecall;
    function Get_PathName: WideString; safecall;
    procedure Set_PathName(const PathName: WideString); safecall;
    function GetMoveFeature: IFeature; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetModelDoc: IModelDoc2; safecall;
    property ImportPlane: WordBool read Get_ImportPlane write Set_ImportPlane;
    property ImportAxis: WordBool read Get_ImportAxis write Set_ImportAxis;
    property ImportCThread: WordBool read Get_ImportCThread write Set_ImportCThread;
    property ImportSurf: WordBool read Get_ImportSurf write Set_ImportSurf;
    property ImportAbsorbedSketches: WordBool read Get_ImportAbsorbedSketches write Set_ImportAbsorbedSketches;
    property ImportUnAbsorbedSketches: WordBool read Get_ImportUnAbsorbedSketches write Set_ImportUnAbsorbedSketches;
    property PathName: WideString read Get_PathName write Set_PathName;
  end;

// *********************************************************************//
// DispIntf:  IDerivedPartFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {A1672AF7-E65F-46E8-800C-7CBF4DA6E80F}
// *********************************************************************//
  IDerivedPartFeatureDataDisp = dispinterface
    ['{A1672AF7-E65F-46E8-800C-7CBF4DA6E80F}']
    property ImportPlane: WordBool dispid 1;
    property ImportAxis: WordBool dispid 2;
    property ImportCThread: WordBool dispid 3;
    property ImportSurf: WordBool dispid 4;
    property ImportAbsorbedSketches: WordBool dispid 5;
    property ImportUnAbsorbedSketches: WordBool dispid 6;
    property PathName: WideString dispid 7;
    function GetMoveFeature: IFeature; dispid 8;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 9;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 10;
    procedure ReleaseSelectionAccess; dispid 11;
    function GetModelDoc: IModelDoc2; dispid 12;
  end;

// *********************************************************************//
// Interface: IDocumentSpecification
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2FC5EA82-B937-4719-814F-2103AA157F35}
// *********************************************************************//
  IDocumentSpecification = interface(IDispatch)
    ['{2FC5EA82-B937-4719-814F-2103AA157F35}']
    procedure Set_FileName(const FileName: WideString); safecall;
    function Get_FileName: WideString; safecall;
    procedure Set_DocumentType(DocumentType: Integer); safecall;
    function Get_DocumentType: Integer; safecall;
    procedure Set_ConfigurationName(const ConfigurationName: WideString); safecall;
    function Get_ConfigurationName: WideString; safecall;
    procedure Set_Silent(OpenSilent: WordBool); safecall;
    function Get_Silent: WordBool; safecall;
    procedure Set_ReadOnly(OpenReadOnly: WordBool); safecall;
    function Get_ReadOnly: WordBool; safecall;
    procedure Set_ViewOnly(OpenViewOnly: WordBool); safecall;
    function Get_ViewOnly: WordBool; safecall;
    procedure Set_Selective(OpenSelective: WordBool); safecall;
    function Get_Selective: WordBool; safecall;
    procedure Set_LoadModel(LoadModel: WordBool); safecall;
    function Get_LoadModel: WordBool; safecall;
    procedure Set_AutoMissingConfig(OpenAutoMissingConfig: WordBool); safecall;
    function Get_AutoMissingConfig: WordBool; safecall;
    procedure Set_ComponentList(ComponentList: OleVariant); safecall;
    function Get_ComponentList: OleVariant; safecall;
    procedure Set_DisplayState(const DisplayStateName: WideString); safecall;
    function Get_DisplayState: WideString; safecall;
    procedure Set_LightWeight(LightWeight: WordBool); safecall;
    function Get_LightWeight: WordBool; safecall;
    procedure Set_IgnoreHiddenComponents(IgnoreHiddenComponents: WordBool); safecall;
    function Get_IgnoreHiddenComponents: WordBool; safecall;
    procedure Set_UseLightWeightDefault(UseLightWeightDefault: WordBool); safecall;
    function Get_UseLightWeightDefault: WordBool; safecall;
    procedure Set_Warning(WarningValue: Integer); safecall;
    function Get_Warning: Integer; safecall;
    procedure Set_Error(ErrorValue: Integer); safecall;
    function Get_Error: Integer; safecall;
    procedure Set_InteractiveComponentSelection(InteractiveComponentSelection: WordBool); safecall;
    function Get_InteractiveComponentSelection: WordBool; safecall;
    property FileName: WideString read Get_FileName write Set_FileName;
    property DocumentType: Integer read Get_DocumentType write Set_DocumentType;
    property ConfigurationName: WideString read Get_ConfigurationName write Set_ConfigurationName;
    property Silent: WordBool read Get_Silent write Set_Silent;
    property ReadOnly: WordBool read Get_ReadOnly write Set_ReadOnly;
    property ViewOnly: WordBool read Get_ViewOnly write Set_ViewOnly;
    property Selective: WordBool read Get_Selective write Set_Selective;
    property LoadModel: WordBool read Get_LoadModel write Set_LoadModel;
    property AutoMissingConfig: WordBool read Get_AutoMissingConfig write Set_AutoMissingConfig;
    property ComponentList: OleVariant read Get_ComponentList write Set_ComponentList;
    property DisplayState: WideString read Get_DisplayState write Set_DisplayState;
    property LightWeight: WordBool read Get_LightWeight write Set_LightWeight;
    property IgnoreHiddenComponents: WordBool read Get_IgnoreHiddenComponents write Set_IgnoreHiddenComponents;
    property UseLightWeightDefault: WordBool read Get_UseLightWeightDefault write Set_UseLightWeightDefault;
    property Warning: Integer read Get_Warning write Set_Warning;
    property Error: Integer read Get_Error write Set_Error;
    property InteractiveComponentSelection: WordBool read Get_InteractiveComponentSelection write Set_InteractiveComponentSelection;
  end;

// *********************************************************************//
// DispIntf:  IDocumentSpecificationDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {2FC5EA82-B937-4719-814F-2103AA157F35}
// *********************************************************************//
  IDocumentSpecificationDisp = dispinterface
    ['{2FC5EA82-B937-4719-814F-2103AA157F35}']
    property FileName: WideString dispid 1;
    property DocumentType: Integer dispid 2;
    property ConfigurationName: WideString dispid 3;
    property Silent: WordBool dispid 4;
    property ReadOnly: WordBool dispid 5;
    property ViewOnly: WordBool dispid 6;
    property Selective: WordBool dispid 7;
    property LoadModel: WordBool dispid 8;
    property AutoMissingConfig: WordBool dispid 9;
    property ComponentList: OleVariant dispid 10;
    property DisplayState: WideString dispid 11;
    property LightWeight: WordBool dispid 12;
    property IgnoreHiddenComponents: WordBool dispid 13;
    property UseLightWeightDefault: WordBool dispid 14;
    property Warning: Integer dispid 15;
    property Error: Integer dispid 16;
    property InteractiveComponentSelection: WordBool dispid 17;
  end;

// *********************************************************************//
// Interface: ISimulationForceFeatureData
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {131A6028-590B-4790-A36C-56CC84F5AF26}
// *********************************************************************//
  ISimulationForceFeatureData = interface(IDispatch)
    ['{131A6028-590B-4790-A36C-56CC84F5AF26}']
    function Get_type_: Integer; safecall;
    procedure Set_type_(Type_: Integer); safecall;
    function Get_ActionType: Integer; safecall;
    procedure Set_ActionType(Type_: Integer); safecall;
    function Get_FunctionType: Integer; safecall;
    procedure Set_FunctionType(Type_: Integer); safecall;
    function Get_FunctionConstantValue: Double; safecall;
    procedure Set_FunctionConstantValue(Value: Double); safecall;
    function GetFunctionStepValues(out F1InitialValue: Double; out T1StartStepTime: Double; 
                                   out F2InitialValue: Double; out T2EndStepTime: Double): WordBool; safecall;
    function SetFunctionStepValues(F1InitialValue: Double; T1StartStepTime: Double; 
                                   F2InitialValue: Double; T2EndStepTime: Double): WordBool; safecall;
    function GetFunctionHarmonicValues(out Amplitude: Double; out Frequency: Double; 
                                       out Average: Double; out PhaseShift: Double): WordBool; safecall;
    function SetFunctionHarmonicValues(Amplitude: Double; Frequency: Double; Average: Double; 
                                       PhaseShift: Double): WordBool; safecall;
    function GetFunctionSplineData(out InterpolationType: Integer; out Time: OleVariant; 
                                   out Value: OleVariant): WordBool; safecall;
    function SetFunctionSplineData(InterpolationType: Integer; Time: OleVariant; Value: OleVariant): WordBool; safecall;
    function Get_FunctionExpression: WideString; safecall;
    procedure Set_FunctionExpression(const Value: WideString); safecall;
    function Get_BaseComponent: IComponent2; safecall;
    procedure Set_BaseComponent(const Component: IComponent2); safecall;
    function Get_IsReverseDirection: WordBool; safecall;
    procedure Set_IsReverseDirection(BValue: WordBool); safecall;
    function Get_LoadReferances: OleVariant; safecall;
    procedure Set_LoadReferances(Referances: OleVariant); safecall;
    procedure GetEndPoints(out PDirDisp1: IDispatch; out PDirDisp2: IDispatch; out Type1: Integer; 
                           out Type2: Integer); safecall;
    procedure SetEndPoints(const PDirDisp1: IDispatch; const PDirDisp2: IDispatch); safecall;
    function Get_ExternalState: WordBool; safecall;
    procedure Set_ExternalState(BRev: WordBool); safecall;
    property type_: Integer read Get_type_ write Set_type_;
    property ActionType: Integer read Get_ActionType write Set_ActionType;
    property FunctionType: Integer read Get_FunctionType write Set_FunctionType;
    property FunctionConstantValue: Double read Get_FunctionConstantValue write Set_FunctionConstantValue;
    property FunctionExpression: WideString read Get_FunctionExpression write Set_FunctionExpression;
    property BaseComponent: IComponent2 read Get_BaseComponent write Set_BaseComponent;
    property IsReverseDirection: WordBool read Get_IsReverseDirection write Set_IsReverseDirection;
    property LoadReferances: OleVariant read Get_LoadReferances write Set_LoadReferances;
    property ExternalState: WordBool read Get_ExternalState write Set_ExternalState;
  end;

// *********************************************************************//
// DispIntf:  ISimulationForceFeatureDataDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {131A6028-590B-4790-A36C-56CC84F5AF26}
// *********************************************************************//
  ISimulationForceFeatureDataDisp = dispinterface
    ['{131A6028-590B-4790-A36C-56CC84F5AF26}']
    property type_: Integer dispid 1;
    property ActionType: Integer dispid 2;
    property FunctionType: Integer dispid 3;
    property FunctionConstantValue: Double dispid 4;
    function GetFunctionStepValues(out F1InitialValue: Double; out T1StartStepTime: Double; 
                                   out F2InitialValue: Double; out T2EndStepTime: Double): WordBool; dispid 5;
    function SetFunctionStepValues(F1InitialValue: Double; T1StartStepTime: Double; 
                                   F2InitialValue: Double; T2EndStepTime: Double): WordBool; dispid 6;
    function GetFunctionHarmonicValues(out Amplitude: Double; out Frequency: Double; 
                                       out Average: Double; out PhaseShift: Double): WordBool; dispid 7;
    function SetFunctionHarmonicValues(Amplitude: Double; Frequency: Double; Average: Double; 
                                       PhaseShift: Double): WordBool; dispid 8;
    function GetFunctionSplineData(out InterpolationType: Integer; out Time: OleVariant; 
                                   out Value: OleVariant): WordBool; dispid 9;
    function SetFunctionSplineData(InterpolationType: Integer; Time: OleVariant; Value: OleVariant): WordBool; dispid 10;
    property FunctionExpression: WideString dispid 11;
    property BaseComponent: IComponent2 dispid 12;
    property IsReverseDirection: WordBool dispid 13;
    property LoadReferances: OleVariant dispid 14;
    procedure GetEndPoints(out PDirDisp1: IDispatch; out PDirDisp2: IDispatch; out Type1: Integer; 
                           out Type2: Integer); dispid 15;
    procedure SetEndPoints(const PDirDisp1: IDispatch; const PDirDisp2: IDispatch); dispid 16;
    property ExternalState: WordBool dispid 17;
  end;

// *********************************************************************//
// DispIntf:  DSldWorksEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {83A33D22-37C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  DSldWorksEvents = dispinterface
    ['{83A33D22-37C5-11CE-BFD4-00400513BB57}']
    function FileOpenNotify(const FileName: WideString): Integer; dispid 1;
    function FileNewNotify(const newDoc: IDispatch; DocType: Integer): Integer; dispid 2;
    function DestroyNotify: Integer; dispid 3;
    function ActiveDocChangeNotify: Integer; dispid 4;
    function ActiveModelDocChangeNotify: Integer; dispid 5;
    function PropertySheetCreateNotify(const Sheet: IDispatch; sheetType: Integer): Integer; dispid 6;
    function NonNativeFileOpenNotify(const FileName: WideString): Integer; dispid 7;
    function LightSheetCreateNotify(const NewSheet: IDispatch; sheetType: Integer; LightId: Integer): Integer; dispid 8;
    function DocumentConversionNotify(const FileName: WideString): Integer; dispid 9;
    function DocumentLoadNotify(const docTitle: WideString; const docPath: WideString): Integer; dispid 11;
    function FileNewNotify2(const newDoc: IDispatch; DocType: Integer; 
                            const TemplateName: WideString): Integer; dispid 12;
    function FileOpenNotify2(const FileName: WideString): Integer; dispid 13;
    function ReferenceNotFoundNotify(const FileName: WideString): Integer; dispid 14;
    function PromptForFilenameNotify(openOrSave: Integer; const suggestedFileName: WideString; 
                                     DocType: Integer; cause: Integer): Integer; dispid 15;
    function BeginTranslationNotify(const FileName: WideString; Options: Integer): Integer; dispid 16;
    function EndTranslationNotify(const FileName: WideString; Options: Integer): Integer; dispid 17;
    function OnIdleNotify: Integer; dispid 20;
    function FileOpenPreNotify(const FileName: WideString): Integer; dispid 21;
    function FileOpenPostNotify(const FileName: WideString): Integer; dispid 22;
    function ReferencedFilePreNotify(const FileName: WideString): Integer; dispid 23;
    function BeginRecordNotify: Integer; dispid 24;
    function EndRecordNotify: Integer; dispid 25;
    function FileNewPreNotify(DocType: Integer; const TemplateName: WideString): Integer; dispid 26;
    function JournalWriteNotify(const journalFile: WideString; lineCount: Integer): Integer; dispid 27;
    function DocumentLoadNotify2(const docTitle: WideString; const docPath: WideString): Integer; dispid 28;
    function CommandCloseNotify(Command: Integer; reason: Integer): Integer; dispid 29;
    function PromptForMultipleFileNamesNotify(openOrSave: Integer; 
                                              var suggestedFileNames: OleVariant; 
                                              var DocTypes: OleVariant; cause: Integer): Integer; dispid 30;
  end;

// *********************************************************************//
// DispIntf:  DPartDocEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {83A33D32-37C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  DPartDocEvents = dispinterface
    ['{83A33D32-37C5-11CE-BFD4-00400513BB57}']
    function RegenNotify: Integer; dispid 1;
    function DestroyNotify: Integer; dispid 2;
    function RegenPostNotify: Integer; dispid 3;
    function ViewNewNotify: Integer; dispid 4;
    function NewSelectionNotify: Integer; dispid 5;
    function FileSaveNotify(const FileName: WideString): Integer; dispid 6;
    function FileSaveAsNotify(const FileName: WideString): Integer; dispid 7;
    function LoadFromStorageNotify: Integer; dispid 8;
    function SaveToStorageNotify: Integer; dispid 9;
    function ActiveConfigChangeNotify: Integer; dispid 10;
    function ActiveConfigChangePostNotify: Integer; dispid 11;
    function ViewNewNotify2(const viewBeingAdded: IDispatch): Integer; dispid 14;
    function LightingDialogCreateNotify(const dialog: IDispatch): Integer; dispid 15;
    function AddItemNotify(EntityType: Integer; const itemName: WideString): Integer; dispid 16;
    function RenameItemNotify(EntityType: Integer; const oldName: WideString; 
                              const NewName: WideString): Integer; dispid 17;
    function DeleteItemNotify(EntityType: Integer; const itemName: WideString): Integer; dispid 18;
    function ModifyNotify: Integer; dispid 19;
    function FileReloadNotify: Integer; dispid 20;
    function AddCustomPropertyNotify(const propName: WideString; const Configuration: WideString; 
                                     const Value: WideString; valueType: Integer): Integer; dispid 21;
    function ChangeCustomPropertyNotify(const propName: WideString; 
                                        const Configuration: WideString; 
                                        const oldValue: WideString; const NewValue: WideString; 
                                        valueType: Integer): Integer; dispid 22;
    function DeleteCustomPropertyNotify(const propName: WideString; 
                                        const Configuration: WideString; const Value: WideString; 
                                        valueType: Integer): Integer; dispid 23;
    function FeatureEditPreNotify(const EditFeature: IDispatch): Integer; dispid 24;
    function FeatureSketchEditPreNotify(const EditFeature: IDispatch; const featureSketch: IDispatch): Integer; dispid 25;
    function FileSaveAsNotify2(const FileName: WideString): Integer; dispid 26;
    function DeleteSelectionPreNotify: Integer; dispid 27;
    function FileReloadPreNotify: Integer; dispid 28;
    function BodyVisibleChangeNotify: Integer; dispid 29;
    function RegenPostNotify2(const stopFeature: IDispatch): Integer; dispid 30;
    function FileSavePostNotify(saveType: Integer; const FileName: WideString): Integer; dispid 31;
    function LoadFromStorageStoreNotify: Integer; dispid 32;
    function SaveToStorageStoreNotify: Integer; dispid 33;
    function FeatureManagerTreeRebuildNotify: Integer; dispid 34;
    function FileDropPostNotify(const FileName: WideString): Integer; dispid 35;
    function DynamicHighlightNotify(bHighlightState: WordBool): Integer; dispid 36;
    function DimensionChangeNotify(const displayDim: IDispatch): Integer; dispid 37;
    function FileReloadCancelNotify(ErrorCode: Integer): Integer; dispid 38;
    function FileSavePostCancelNotify: Integer; dispid 39;
    function SketchSolveNotify(const featName: WideString): Integer; dispid 40;
    function DeleteItemPreNotify(EntityType: Integer; const itemName: WideString): Integer; dispid 41;
    function ClearSelectionsNotify: Integer; dispid 42;
    function EquationEditorPreNotify: Integer; dispid 43;
    function EquationEditorPostNotify(Changed: WordBool): Integer; dispid 44;
    function OpenDesignTableNotify(const DesignTable: IDispatch): Integer; dispid 45;
    function CloseDesignTableNotify(const DesignTable: IDispatch): Integer; dispid 46;
    function PromptBodiesToKeepNotify(const Feature: IDispatch; var Bodies: OleVariant): Integer; dispid 47;
    function AddDvePagePreNotify(Command: Integer; var PageToAdd: IDispatch): Integer; dispid 48;
    function UnitsChangeNotify: Integer; dispid 49;
    function DestroyNotify2(DestroyType: Integer): Integer; dispid 50;
  end;

// *********************************************************************//
// DispIntf:  DDrawingDocEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {83A33D34-37C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  DDrawingDocEvents = dispinterface
    ['{83A33D34-37C5-11CE-BFD4-00400513BB57}']
    function RegenNotify: Integer; dispid 1;
    function DestroyNotify: Integer; dispid 2;
    function RegenPostNotify: Integer; dispid 3;
    function ViewNewNotify: Integer; dispid 4;
    function NewSelectionNotify: Integer; dispid 5;
    function FileSaveNotify(const FileName: WideString): Integer; dispid 6;
    function FileSaveAsNotify(const FileName: WideString): Integer; dispid 7;
    function LoadFromStorageNotify: Integer; dispid 8;
    function SaveToStorageNotify: Integer; dispid 9;
    function ActiveConfigChangeNotify: Integer; dispid 12;
    function ActiveConfigChangePostNotify: Integer; dispid 13;
    function ViewNewNotify2(const viewBeingAdded: IDispatch): Integer; dispid 14;
    function AddItemNotify(EntityType: Integer; const itemName: WideString): Integer; dispid 15;
    function RenameItemNotify(EntityType: Integer; const oldName: WideString; 
                              const NewName: WideString): Integer; dispid 16;
    function DeleteItemNotify(EntityType: Integer; const itemName: WideString): Integer; dispid 17;
    function ModifyNotify: Integer; dispid 18;
    function FileReloadNotify: Integer; dispid 19;
    function AddCustomPropertyNotify(const propName: WideString; const Configuration: WideString; 
                                     const Value: WideString; valueType: Integer): Integer; dispid 20;
    function ChangeCustomPropertyNotify(const propName: WideString; 
                                        const Configuration: WideString; 
                                        const oldValue: WideString; const NewValue: WideString; 
                                        valueType: Integer): Integer; dispid 21;
    function DeleteCustomPropertyNotify(const propName: WideString; 
                                        const Configuration: WideString; const Value: WideString; 
                                        valueType: Integer): Integer; dispid 22;
    function FileSaveAsNotify2(const FileName: WideString): Integer; dispid 23;
    function DeleteSelectionPreNotify: Integer; dispid 24;
    function FileReloadPreNotify: Integer; dispid 25;
    function FileSavePostNotify(saveType: Integer; const FileName: WideString): Integer; dispid 26;
    function LoadFromStorageStoreNotify: Integer; dispid 27;
    function SaveToStorageStoreNotify: Integer; dispid 28;
    function FeatureManagerTreeRebuildNotify: Integer; dispid 29;
    function ViewCreatePreNotify(const modelDocBeingAdded: IDispatch): Integer; dispid 30;
    function DynamicHighlightNotify(bHighlightState: WordBool): Integer; dispid 31;
    function DimensionChangeNotify(const displayDim: IDispatch): Integer; dispid 32;
    function FileReloadCancelNotify(ErrorCode: Integer): Integer; dispid 33;
    function FileSavePostCancelNotify: Integer; dispid 34;
    function SketchSolveNotify(const featName: WideString): Integer; dispid 35;
    function DeleteItemPreNotify(EntityType: Integer; const itemName: WideString): Integer; dispid 36;
    function ClearSelectionsNotify: Integer; dispid 37;
    function EquationEditorPreNotify: Integer; dispid 38;
    function EquationEditorPostNotify(Changed: WordBool): Integer; dispid 39;
    function AddDvePagePreNotify(Command: Integer; var PageToAdd: IDispatch): Integer; dispid 40;
    function UnitsChangeNotify: Integer; dispid 41;
    function DestroyNotify2(DestroyType: Integer): Integer; dispid 42;
  end;

// *********************************************************************//
// DispIntf:  DAssemblyDocEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {83A33D35-37C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  DAssemblyDocEvents = dispinterface
    ['{83A33D35-37C5-11CE-BFD4-00400513BB57}']
    function RegenNotify: Integer; dispid 1;
    function DestroyNotify: Integer; dispid 2;
    function RegenPostNotify: Integer; dispid 3;
    function ViewNewNotify: Integer; dispid 4;
    function NewSelectionNotify: Integer; dispid 5;
    function FileSaveNotify(const FileName: WideString): Integer; dispid 6;
    function FileSaveAsNotify(const FileName: WideString): Integer; dispid 7;
    function LoadFromStorageNotify: Integer; dispid 8;
    function SaveToStorageNotify: Integer; dispid 9;
    function ActiveConfigChangeNotify: Integer; dispid 10;
    function ActiveConfigChangePostNotify: Integer; dispid 11;
    function BeginInContextEditNotify(const docBeingEdited: IDispatch; DocType: Integer): Integer; dispid 14;
    function EndInContextEditNotify(const docBeingEdited: IDispatch; DocType: Integer): Integer; dispid 15;
    function ViewNewNotify2(const viewBeingAdded: IDispatch): Integer; dispid 16;
    function LightingDialogCreateNotify(const dialog: IDispatch): Integer; dispid 17;
    function AddItemNotify(EntityType: Integer; const itemName: WideString): Integer; dispid 18;
    function RenameItemNotify(EntityType: Integer; const oldName: WideString; 
                              const NewName: WideString): Integer; dispid 19;
    function DeleteItemNotify(EntityType: Integer; const itemName: WideString): Integer; dispid 20;
    function ModifyNotify: Integer; dispid 21;
    function ComponentStateChangeNotify(const componentModel: IDispatch; oldCompState: Smallint; 
                                        newCompState: Smallint): Integer; dispid 22;
    function FileDropNotify(const FileName: WideString): Integer; dispid 23;
    function FileReloadNotify: Integer; dispid 24;
    function ComponentStateChangeNotify2(const componentModel: IDispatch; 
                                         const CompName: WideString; oldCompState: Smallint; 
                                         newCompState: Smallint): Integer; dispid 25;
    function AddCustomPropertyNotify(const propName: WideString; const Configuration: WideString; 
                                     const Value: WideString; valueType: Integer): Integer; dispid 26;
    function ChangeCustomPropertyNotify(const propName: WideString; 
                                        const Configuration: WideString; 
                                        const oldValue: WideString; const NewValue: WideString; 
                                        valueType: Integer): Integer; dispid 27;
    function DeleteCustomPropertyNotify(const propName: WideString; 
                                        const Configuration: WideString; const Value: WideString; 
                                        valueType: Integer): Integer; dispid 28;
    function FeatureEditPreNotify(const EditFeature: IDispatch): Integer; dispid 29;
    function FeatureSketchEditPreNotify(const EditFeature: IDispatch; const featureSketch: IDispatch): Integer; dispid 30;
    function FileSaveAsNotify2(const FileName: WideString): Integer; dispid 31;
    function InterferenceNotify(var PComp: OleVariant; var PFace: OleVariant): Integer; dispid 32;
    function DeleteSelectionPreNotify: Integer; dispid 33;
    function FileReloadPreNotify: Integer; dispid 34;
    function ComponentMoveNotify: Integer; dispid 35;
    function ComponentVisibleChangeNotify: Integer; dispid 36;
    function BodyVisibleChangeNotify: Integer; dispid 37;
    function FileDropPreNotify(const FileName: WideString): Integer; dispid 38;
    function FileSavePostNotify(saveType: Integer; const FileName: WideString): Integer; dispid 39;
    function LoadFromStorageStoreNotify: Integer; dispid 40;
    function SaveToStorageStoreNotify: Integer; dispid 41;
    function FeatureManagerTreeRebuildNotify: Integer; dispid 42;
    function AssemblyElectricalDataUpdateNotify(saveType: Integer): Integer; dispid 43;
    function ComponentMoveNotify2(var Components: OleVariant): Integer; dispid 44;
    function DynamicHighlightNotify(bHighlightState: WordBool): Integer; dispid 45;
    function ComponentVisualPropertiesChangeNotify(const Component: IDispatch): Integer; dispid 46;
    function ComponentDisplayStateChangeNotify(const Component: IDispatch): Integer; dispid 47;
    function DimensionChangeNotify(const displayDim: IDispatch): Integer; dispid 48;
    function FileReloadCancelNotify(ErrorCode: Integer): Integer; dispid 49;
    function FileSavePostCancelNotify: Integer; dispid 50;
    function SketchSolveNotify(const featName: WideString): Integer; dispid 51;
    function DeleteItemPreNotify(EntityType: Integer; const itemName: WideString): Integer; dispid 52;
    function ClearSelectionsNotify: Integer; dispid 53;
    function FileDropPostNotify: Integer; dispid 54;
    function EquationEditorPreNotify: Integer; dispid 55;
    function EquationEditorPostNotify(Changed: WordBool): Integer; dispid 56;
    function OpenDesignTableNotify(const DesignTable: IDispatch): Integer; dispid 57;
    function CloseDesignTableNotify(const DesignTable: IDispatch): Integer; dispid 58;
    function PromptBodiesToKeepNotify(const Feature: IDispatch; var Bodies: OleVariant): Integer; dispid 59;
    function AddDvePagePreNotify(Command: Integer; var PageToAdd: IDispatch): Integer; dispid 60;
    function UnitsChangeNotify: Integer; dispid 61;
    function DestroyNotify2(DestroyType: Integer): Integer; dispid 62;
  end;

// *********************************************************************//
// DispIntf:  DModelViewEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {83A33D4C-37C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  DModelViewEvents = dispinterface
    ['{83A33D4C-37C5-11CE-BFD4-00400513BB57}']
    function RepaintNotify(paintType: Integer): Integer; dispid 1;
    function ViewChangeNotify(View: OleVariant): Integer; dispid 2;
    function DestroyNotify: Integer; dispid 3;
    function RepaintPostNotify: Integer; dispid 4;
    function BufferSwapNotify: Integer; dispid 5;
    function DestroyNotify2(DestroyType: Integer): Integer; dispid 6;
    function PerspectiveViewNotify(Left: Double; Right: Double; bottom: Double; Top: Double; 
                                   zNear: Double; zFar: Double): Integer; dispid 7;
    function RenderLayer0Notify: Integer; dispid 8;
    function UserClearSelectionsNotify: Integer; dispid 9;
    function PrintNotify(pDC: {??Int64}OleVariant): Integer; dispid 10;
  end;

// *********************************************************************//
// DispIntf:  DFeatMgrViewEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {83A33D76-27C5-11CE-BFD4-00400513BB57}
// *********************************************************************//
  DFeatMgrViewEvents = dispinterface
    ['{83A33D76-27C5-11CE-BFD4-00400513BB57}']
    function ActivateNotify(var View: OleVariant): Integer; dispid 1;
    function DeactivateNotify(var View: OleVariant): Integer; dispid 2;
    function DestroyNotify(var View: OleVariant): Integer; dispid 3;
  end;

// *********************************************************************//
// DispIntf:  DSWPropertySheetEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {E05FF9E0-FC82-11D2-9395-00C04F79BFFE}
// *********************************************************************//
  DSWPropertySheetEvents = dispinterface
    ['{E05FF9E0-FC82-11D2-9395-00C04F79BFFE}']
    function DestroyNotify: Integer; dispid 1;
    function HelpNotify(PageIndex: Integer): Integer; dispid 2;
    function OnOKNotify: Integer; dispid 3;
    function OnCancelNotify: Integer; dispid 4;
    function CreateControlNotify(PageIndex: Integer; const ControlDispatch: IDispatch): Integer; dispid 5;
  end;

// *********************************************************************//
// DispIntf:  ISdmDoc
// Flags:     (4096) Dispatchable
// GUID:      {AC048CEA-AE93-11D3-AEA7-00C04F60F02A}
// *********************************************************************//
  ISdmDoc = dispinterface
    ['{AC048CEA-AE93-11D3-AEA7-00C04F60F02A}']
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageListbox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CDB49982-1A18-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageListbox = interface(IDispatch)
    ['{CDB49982-1A18-11D5-AF24-00C04F603FAF}']
    procedure AddItems(Texts: OleVariant); safecall;
    procedure IAddItems(TextCount: Smallint; var Texts: WideString); safecall;
    procedure Clear; safecall;
    function Get_CurrentSelection: Smallint; safecall;
    procedure Set_CurrentSelection(Item: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(Height: Smallint); safecall;
    function Get_ItemText(Item: Smallint): WideString; safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Style: Integer); safecall;
    function Get_ItemCount: Integer; safecall;
    function InsertItem(Item: Smallint; const Text: WideString): Smallint; safecall;
    function DeleteItem(Item: Smallint): Smallint; safecall;
    function GetSelectedItemsCount: Integer; safecall;
    function GetSelectedItems: OleVariant; safecall;
    function IGetSelectedItems(Count: Integer): Smallint; safecall;
    function SetSelectedItem(Item: Smallint; Selected: WordBool): WordBool; safecall;
    property CurrentSelection: Smallint read Get_CurrentSelection write Set_CurrentSelection;
    property Height: Smallint read Get_Height write Set_Height;
    property ItemText[Item: Smallint]: WideString read Get_ItemText;
    property Style: Integer read Get_Style write Set_Style;
    property ItemCount: Integer read Get_ItemCount;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageListboxDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {CDB49982-1A18-11D5-AF24-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageListboxDisp = dispinterface
    ['{CDB49982-1A18-11D5-AF24-00C04F603FAF}']
    procedure AddItems(Texts: OleVariant); dispid 196609;
    procedure IAddItems(TextCount: Smallint; var Texts: WideString); dispid 196610;
    procedure Clear; dispid 196611;
    property CurrentSelection: Smallint dispid 196612;
    property Height: Smallint dispid 196613;
    property ItemText[Item: Smallint]: WideString readonly dispid 196614;
    property Style: Integer dispid 196615;
    property ItemCount: Integer readonly dispid 196616;
    function InsertItem(Item: Smallint; const Text: WideString): Smallint; dispid 196617;
    function DeleteItem(Item: Smallint): Smallint; dispid 196618;
    function GetSelectedItemsCount: Integer; dispid 196619;
    function GetSelectedItems: OleVariant; dispid 196620;
    function IGetSelectedItems(Count: Integer): Smallint; dispid 196621;
    function SetSelectedItem(Item: Smallint; Selected: WordBool): WordBool; dispid 196622;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageNumberbox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {96567554-1EDA-11D5-AF25-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageNumberbox = interface(IDispatch)
    ['{96567554-1EDA-11D5-AF25-00C04F603FAF}']
    function Get_Value: Double; safecall;
    procedure Set_Value(Value: Double); safecall;
    procedure SetRange(Units: Integer; Minimum: Double; Maximum: Double; Increment: Double; 
                       Inclusive: WordBool); safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Style: Integer); safecall;
    procedure AddItems(Texts: OleVariant); safecall;
    procedure IAddItems(TextCount: Smallint; var Texts: WideString); safecall;
    procedure Clear; safecall;
    function Get_CurrentSelection: Smallint; safecall;
    procedure Set_CurrentSelection(Item: Smallint); safecall;
    function Get_Height: Smallint; safecall;
    procedure Set_Height(Height: Smallint); safecall;
    function Get_ItemText(Item: Smallint): WideString; safecall;
    function InsertItem(Item: Smallint; const Text: WideString): Smallint; safecall;
    function DeleteItem(Item: Smallint): Smallint; safecall;
    function Get_Text: WideString; safecall;
    procedure SetRange2(Units: Integer; Minimum: Double; Maximum: Double; Inclusive: WordBool; 
                        Increment: Double; FastIncr: Double; SlowIncr: Double); safecall;
    procedure SetSliderParameters(PositionCount: Integer; DivisionCount: Integer); safecall;
    property Value: Double read Get_Value write Set_Value;
    property Style: Integer read Get_Style write Set_Style;
    property CurrentSelection: Smallint read Get_CurrentSelection write Set_CurrentSelection;
    property Height: Smallint read Get_Height write Set_Height;
    property ItemText[Item: Smallint]: WideString read Get_ItemText;
    property Text: WideString read Get_Text;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageNumberboxDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {96567554-1EDA-11D5-AF25-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageNumberboxDisp = dispinterface
    ['{96567554-1EDA-11D5-AF25-00C04F603FAF}']
    property Value: Double dispid 196609;
    procedure SetRange(Units: Integer; Minimum: Double; Maximum: Double; Increment: Double; 
                       Inclusive: WordBool); dispid 196610;
    property Style: Integer dispid 196611;
    procedure AddItems(Texts: OleVariant); dispid 196612;
    procedure IAddItems(TextCount: Smallint; var Texts: WideString); dispid 196613;
    procedure Clear; dispid 196614;
    property CurrentSelection: Smallint dispid 196615;
    property Height: Smallint dispid 196616;
    property ItemText[Item: Smallint]: WideString readonly dispid 196617;
    function InsertItem(Item: Smallint; const Text: WideString): Smallint; dispid 196618;
    function DeleteItem(Item: Smallint): Smallint; dispid 196619;
    property Text: WideString readonly dispid 196620;
    procedure SetRange2(Units: Integer; Minimum: Double; Maximum: Double; Inclusive: WordBool; 
                        Increment: Double; FastIncr: Double; SlowIncr: Double); dispid 196621;
    procedure SetSliderParameters(PositionCount: Integer; DivisionCount: Integer); dispid 196622;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageSelectionbox
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {96567556-1EDA-11D5-AF25-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageSelectionbox = interface(IDispatch)
    ['{96567556-1EDA-11D5-AF25-00C04F603FAF}']
    function Get_Height: Smallint; safecall;
    procedure Set_Height(Height: Smallint); safecall;
    function Get_Mark: Integer; safecall;
    procedure Set_Mark(Mark: Integer); safecall;
    function Get_SingleEntityOnly: WordBool; safecall;
    procedure Set_SingleEntityOnly(Single: WordBool); safecall;
    procedure SetSelectionFilters(Filters: OleVariant); safecall;
    procedure ISetSelectionFilters(FilterCount: Smallint; var Filters: Integer); safecall;
    function GetSelectionFocus: WordBool; safecall;
    procedure SetSelectionFocus; safecall;
    function SetSelectionColor(Special: WordBool; Color: Integer): WordBool; safecall;
    function SetCalloutLabel(const Label_: WideString): WordBool; safecall;
    function Get_Callout: ICallout; safecall;
    function Get_Style: Integer; safecall;
    procedure Set_Style(Style: Integer); safecall;
    function Get_ItemCount: Integer; safecall;
    function Get_CurrentSelection: Integer; safecall;
    procedure Set_CurrentSelection(Item: Integer); safecall;
    function Get_SelectionIndex(Item: Integer): Integer; safecall;
    function Get_AllowSelectInMultipleBoxes: WordBool; safecall;
    procedure Set_AllowSelectInMultipleBoxes(Allow: WordBool); safecall;
    function Get_AllowMultipleSelectOfSameEntity: WordBool; safecall;
    procedure Set_AllowMultipleSelectOfSameEntity(Allow: WordBool); safecall;
    function Get_ItemText(Item: Smallint): WideString; safecall;
    procedure Set_Callout(const Retval: ICallout); safecall;
    function AddMenuPopupItem(ID: Integer; const ItemText: WideString; DocumentType: Integer; 
                              const HintText: WideString): WordBool; safecall;
    function GetSelectedItemsCount: Integer; safecall;
    function GetSelectedItems: OleVariant; safecall;
    function IGetSelectedItems(Count: Integer): Smallint; safecall;
    function SetSelectedItem(Item: Smallint; Selected: WordBool): WordBool; safecall;
    property Height: Smallint read Get_Height write Set_Height;
    property Mark: Integer read Get_Mark write Set_Mark;
    property SingleEntityOnly: WordBool read Get_SingleEntityOnly write Set_SingleEntityOnly;
    property Callout: ICallout read Get_Callout write Set_Callout;
    property Style: Integer read Get_Style write Set_Style;
    property ItemCount: Integer read Get_ItemCount;
    property CurrentSelection: Integer read Get_CurrentSelection write Set_CurrentSelection;
    property SelectionIndex[Item: Integer]: Integer read Get_SelectionIndex;
    property AllowSelectInMultipleBoxes: WordBool read Get_AllowSelectInMultipleBoxes write Set_AllowSelectInMultipleBoxes;
    property AllowMultipleSelectOfSameEntity: WordBool read Get_AllowMultipleSelectOfSameEntity write Set_AllowMultipleSelectOfSameEntity;
    property ItemText[Item: Smallint]: WideString read Get_ItemText;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageSelectionboxDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {96567556-1EDA-11D5-AF25-00C04F603FAF}
// *********************************************************************//
  IPropertyManagerPageSelectionboxDisp = dispinterface
    ['{96567556-1EDA-11D5-AF25-00C04F603FAF}']
    property Height: Smallint dispid 196609;
    property Mark: Integer dispid 196610;
    property SingleEntityOnly: WordBool dispid 196611;
    procedure SetSelectionFilters(Filters: OleVariant); dispid 196612;
    procedure ISetSelectionFilters(FilterCount: Smallint; var Filters: Integer); dispid 196613;
    function GetSelectionFocus: WordBool; dispid 196614;
    procedure SetSelectionFocus; dispid 196615;
    function SetSelectionColor(Special: WordBool; Color: Integer): WordBool; dispid 196616;
    function SetCalloutLabel(const Label_: WideString): WordBool; dispid 196617;
    property Callout: ICallout dispid 196618;
    property Style: Integer dispid 196619;
    property ItemCount: Integer readonly dispid 196620;
    property CurrentSelection: Integer dispid 196621;
    property SelectionIndex[Item: Integer]: Integer readonly dispid 196622;
    property AllowSelectInMultipleBoxes: WordBool dispid 196623;
    property AllowMultipleSelectOfSameEntity: WordBool dispid 196624;
    property ItemText[Item: Smallint]: WideString readonly dispid 196625;
    function AddMenuPopupItem(ID: Integer; const ItemText: WideString; DocumentType: Integer; 
                              const HintText: WideString): WordBool; dispid 196626;
    function GetSelectedItemsCount: Integer; dispid 196627;
    function GetSelectedItems: OleVariant; dispid 196628;
    function IGetSelectedItems(Count: Integer): Smallint; dispid 196629;
    function SetSelectedItem(Item: Smallint; Selected: WordBool): WordBool; dispid 196630;
  end;

// *********************************************************************//
// Interface: IRibFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EFE4958E-B373-4849-A93C-01BFDEBC830D}
// *********************************************************************//
  IRibFeatureData2 = interface(IDispatch)
    ['{EFE4958E-B373-4849-A93C-01BFDEBC830D}']
    function Get_IsTwoSided: WordBool; safecall;
    procedure Set_IsTwoSided(TwoSided: WordBool); safecall;
    function Get_ReverseThicknessDir: WordBool; safecall;
    procedure Set_ReverseThicknessDir(Reverse: WordBool); safecall;
    function Get_Thickness: Double; safecall;
    procedure Set_Thickness(Thickness: Double); safecall;
    function Get_RefSketchIndex: SYSINT; safecall;
    procedure Set_RefSketchIndex(Index: SYSINT); safecall;
    function NextReference: SYSINT; safecall;
    function Get_FlipSide: WordBool; safecall;
    procedure Set_FlipSide(FlipSide: WordBool); safecall;
    function Get_EnableDraft: WordBool; safecall;
    procedure Set_EnableDraft(EnableDraft: WordBool); safecall;
    function Get_DraftOutward: WordBool; safecall;
    procedure Set_DraftOutward(DraftOutward: WordBool); safecall;
    function Get_DraftAngle: Double; safecall;
    procedure Set_DraftAngle(Angle: Double); safecall;
    function Get_ExtrusionDirection: Integer; safecall;
    procedure Set_ExtrusionDirection(Dir: Integer); safecall;
    function Get_type_: Integer; safecall;
    procedure Set_type_(Typ: Integer); safecall;
    function Get_Body: IBody2; safecall;
    procedure Set_Body(const PBody: IBody2); safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    property IsTwoSided: WordBool read Get_IsTwoSided write Set_IsTwoSided;
    property ReverseThicknessDir: WordBool read Get_ReverseThicknessDir write Set_ReverseThicknessDir;
    property Thickness: Double read Get_Thickness write Set_Thickness;
    property RefSketchIndex: SYSINT read Get_RefSketchIndex write Set_RefSketchIndex;
    property FlipSide: WordBool read Get_FlipSide write Set_FlipSide;
    property EnableDraft: WordBool read Get_EnableDraft write Set_EnableDraft;
    property DraftOutward: WordBool read Get_DraftOutward write Set_DraftOutward;
    property DraftAngle: Double read Get_DraftAngle write Set_DraftAngle;
    property ExtrusionDirection: Integer read Get_ExtrusionDirection write Set_ExtrusionDirection;
    property type_: Integer read Get_type_ write Set_type_;
    property Body: IBody2 read Get_Body write Set_Body;
  end;

// *********************************************************************//
// DispIntf:  IRibFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {EFE4958E-B373-4849-A93C-01BFDEBC830D}
// *********************************************************************//
  IRibFeatureData2Disp = dispinterface
    ['{EFE4958E-B373-4849-A93C-01BFDEBC830D}']
    property IsTwoSided: WordBool dispid 1;
    property ReverseThicknessDir: WordBool dispid 2;
    property Thickness: Double dispid 3;
    property RefSketchIndex: SYSINT dispid 4;
    function NextReference: SYSINT; dispid 5;
    property FlipSide: WordBool dispid 6;
    property EnableDraft: WordBool dispid 7;
    property DraftOutward: WordBool dispid 8;
    property DraftAngle: Double dispid 9;
    property ExtrusionDirection: Integer dispid 10;
    property type_: Integer dispid 11;
    property Body: IBody2 dispid 12;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 13;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 14;
    procedure ReleaseSelectionAccess; dispid 15;
  end;

// *********************************************************************//
// Interface: IDomeFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6E8FAB36-9E1C-4A84-A160-1E68B703431C}
// *********************************************************************//
  IDomeFeatureData2 = interface(IDispatch)
    ['{6E8FAB36-9E1C-4A84-A160-1E68B703431C}']
    function Get_Height: Double; safecall;
    procedure Set_Height(Height: Double); safecall;
    function Get_ReverseDir: WordBool; safecall;
    procedure Set_ReverseDir(Reverse: WordBool); safecall;
    function Get_Elliptical: WordBool; safecall;
    procedure Set_Elliptical(Elliptical: WordBool); safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Face: IDispatch; safecall;
    procedure Set_Face(const Face: IDispatch); safecall;
    function Get_IFace: IFace2; safecall;
    procedure Set_IFace(const Face: IFace2); safecall;
    function Get_ConstraintPointOrSketch: IDispatch; safecall;
    procedure Set_ConstraintPointOrSketch(const LpConstraintPoint_Or_Sketch: IDispatch); safecall;
    function Get_Direction: IDispatch; safecall;
    procedure Set_Direction(const LpDirection: IDispatch); safecall;
    function GetFaceCount: Integer; safecall;
    function Get_Faces: OleVariant; safecall;
    procedure Set_Faces(FaceList: OleVariant); safecall;
    function IGetFaces(FaceCount: Integer): IFace2; safecall;
    procedure ISetFaces(FaceCount: Integer; var FaceList: IFace2); safecall;
    property Height: Double read Get_Height write Set_Height;
    property ReverseDir: WordBool read Get_ReverseDir write Set_ReverseDir;
    property Elliptical: WordBool read Get_Elliptical write Set_Elliptical;
    property Face: IDispatch read Get_Face write Set_Face;
    property IFace: IFace2 read Get_IFace write Set_IFace;
    property ConstraintPointOrSketch: IDispatch read Get_ConstraintPointOrSketch write Set_ConstraintPointOrSketch;
    property Direction: IDispatch read Get_Direction write Set_Direction;
    property Faces: OleVariant read Get_Faces write Set_Faces;
  end;

// *********************************************************************//
// DispIntf:  IDomeFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {6E8FAB36-9E1C-4A84-A160-1E68B703431C}
// *********************************************************************//
  IDomeFeatureData2Disp = dispinterface
    ['{6E8FAB36-9E1C-4A84-A160-1E68B703431C}']
    property Height: Double dispid 1;
    property ReverseDir: WordBool dispid 2;
    property Elliptical: WordBool dispid 3;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 4;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 5;
    procedure ReleaseSelectionAccess; dispid 6;
    property Face: IDispatch dispid 7;
    property IFace: IFace2 dispid 8;
    property ConstraintPointOrSketch: IDispatch dispid 9;
    property Direction: IDispatch dispid 10;
    function GetFaceCount: Integer; dispid 11;
    property Faces: OleVariant dispid 12;
    function IGetFaces(FaceCount: Integer): IFace2; dispid 13;
    procedure ISetFaces(FaceCount: Integer; var FaceList: IFace2); dispid 14;
  end;

// *********************************************************************//
// Interface: ISimpleHoleFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D98E9F26-73DB-4BD2-A967-31BF7EF35B5B}
// *********************************************************************//
  ISimpleHoleFeatureData2 = interface(IDispatch)
    ['{D98E9F26-73DB-4BD2-A967-31BF7EF35B5B}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_DraftWhileExtruding: WordBool; safecall;
    procedure Set_DraftWhileExtruding(DraftWhileExtrude: WordBool); safecall;
    function Get_DraftOutward: WordBool; safecall;
    procedure Set_DraftOutward(DraftOutward: WordBool); safecall;
    function Get_ReverseOffset: WordBool; safecall;
    procedure Set_ReverseOffset(DraftOutward: WordBool); safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(Type_: SYSINT); safecall;
    function Get_Diameter: Double; safecall;
    procedure Set_Diameter(Diameter: Double); safecall;
    function Get_Depth: Double; safecall;
    procedure Set_Depth(Depth: Double); safecall;
    function Get_DraftAngle: Double; safecall;
    procedure Set_DraftAngle(DraftAngle: Double); safecall;
    function Get_SurfaceOffset: Double; safecall;
    procedure Set_SurfaceOffset(SurfaceOffset: Double); safecall;
    function Get_Face: IDispatch; safecall;
    procedure Set_Face(const Face: IDispatch); safecall;
    function Get_IFace: IFace2; safecall;
    procedure Set_IFace(const Face: IFace2); safecall;
    function Get_Vertex: IDispatch; safecall;
    procedure Set_Vertex(const Vertex: IDispatch); safecall;
    function Get_IVertex: IVertex; safecall;
    procedure Set_IVertex(const Vertex: IVertex); safecall;
    function GetEndConditionReference(out ReferenceType: Integer): IDispatch; safecall;
    procedure SetEndConditionReference(const PDisp: IDispatch); safecall;
    function Get_FeatureScope: WordBool; safecall;
    procedure Set_FeatureScope(FeatScope: WordBool); safecall;
    function Get_AutoSelect: WordBool; safecall;
    procedure Set_AutoSelect(AutoSel: WordBool); safecall;
    function Get_FeatureScopeBodies: OleVariant; safecall;
    procedure Set_FeatureScopeBodies(BodyVar: OleVariant); safecall;
    function GetFeatureScopeBodiesCount: Integer; safecall;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; safecall;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); safecall;
    function GetDirectionReference(out Ref1: IDispatch; out Type1: Integer; out Ref2: IDispatch; 
                                   out Type2: Integer): Integer; safecall;
    function SetDirectionReference(const Ref1: IDispatch; const Ref2: IDispatch): WordBool; safecall;
    function Get_TranslateSurface: WordBool; safecall;
    procedure Set_TranslateSurface(ValOut: WordBool); safecall;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property DraftWhileExtruding: WordBool read Get_DraftWhileExtruding write Set_DraftWhileExtruding;
    property DraftOutward: WordBool read Get_DraftOutward write Set_DraftOutward;
    property ReverseOffset: WordBool read Get_ReverseOffset write Set_ReverseOffset;
    property type_: SYSINT read Get_type_ write Set_type_;
    property Diameter: Double read Get_Diameter write Set_Diameter;
    property Depth: Double read Get_Depth write Set_Depth;
    property DraftAngle: Double read Get_DraftAngle write Set_DraftAngle;
    property SurfaceOffset: Double read Get_SurfaceOffset write Set_SurfaceOffset;
    property Face: IDispatch read Get_Face write Set_Face;
    property IFace: IFace2 read Get_IFace write Set_IFace;
    property Vertex: IDispatch read Get_Vertex write Set_Vertex;
    property IVertex: IVertex read Get_IVertex write Set_IVertex;
    property FeatureScope: WordBool read Get_FeatureScope write Set_FeatureScope;
    property AutoSelect: WordBool read Get_AutoSelect write Set_AutoSelect;
    property FeatureScopeBodies: OleVariant read Get_FeatureScopeBodies write Set_FeatureScopeBodies;
    property TranslateSurface: WordBool read Get_TranslateSurface write Set_TranslateSurface;
  end;

// *********************************************************************//
// DispIntf:  ISimpleHoleFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {D98E9F26-73DB-4BD2-A967-31BF7EF35B5B}
// *********************************************************************//
  ISimpleHoleFeatureData2Disp = dispinterface
    ['{D98E9F26-73DB-4BD2-A967-31BF7EF35B5B}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property ReverseDirection: WordBool dispid 4;
    property DraftWhileExtruding: WordBool dispid 5;
    property DraftOutward: WordBool dispid 6;
    property ReverseOffset: WordBool dispid 7;
    property type_: SYSINT dispid 8;
    property Diameter: Double dispid 9;
    property Depth: Double dispid 10;
    property DraftAngle: Double dispid 11;
    property SurfaceOffset: Double dispid 12;
    property Face: IDispatch dispid 13;
    property IFace: IFace2 dispid 14;
    property Vertex: IDispatch dispid 15;
    property IVertex: IVertex dispid 16;
    function GetEndConditionReference(out ReferenceType: Integer): IDispatch; dispid 17;
    procedure SetEndConditionReference(const PDisp: IDispatch); dispid 18;
    property FeatureScope: WordBool dispid 19;
    property AutoSelect: WordBool dispid 20;
    property FeatureScopeBodies: OleVariant dispid 21;
    function GetFeatureScopeBodiesCount: Integer; dispid 22;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; dispid 23;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); dispid 24;
    function GetDirectionReference(out Ref1: IDispatch; out Type1: Integer; out Ref2: IDispatch; 
                                   out Type2: Integer): Integer; dispid 25;
    function SetDirectionReference(const Ref1: IDispatch; const Ref2: IDispatch): WordBool; dispid 26;
    property TranslateSurface: WordBool dispid 27;
  end;

// *********************************************************************//
// Interface: IWizardHoleFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7A472C09-437C-4C4B-B34C-A144D0E2546C}
// *********************************************************************//
  IWizardHoleFeatureData2 = interface(IDispatch)
    ['{7A472C09-437C-4C4B-B34C-A144D0E2546C}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(Hole_type: SYSINT); safecall;
    function Get_Diameter: Double; safecall;
    procedure Set_Diameter(Diameter: Double); safecall;
    function Get_CounterBoreDiameter: Double; safecall;
    procedure Set_CounterBoreDiameter(Cbore_dia: Double); safecall;
    function Get_CounterDrillDiameter: Double; safecall;
    procedure Set_CounterDrillDiameter(Cdrill_dia: Double); safecall;
    function Get_CounterSinkDiameter: Double; safecall;
    procedure Set_CounterSinkDiameter(Csunk_dia: Double); safecall;
    function Get_MinorDiameter: Double; safecall;
    procedure Set_MinorDiameter(Minor_dia: Double); safecall;
    function Get_MajorDiameter: Double; safecall;
    procedure Set_MajorDiameter(Major_dia: Double); safecall;
    function Get_HoleDiameter: Double; safecall;
    procedure Set_HoleDiameter(Diameter: Double); safecall;
    function Get_ThruHoleDiameter: Double; safecall;
    procedure Set_ThruHoleDiameter(Diameter: Double); safecall;
    function Get_TapDrillDiameter: Double; safecall;
    procedure Set_TapDrillDiameter(Diameter: Double); safecall;
    function Get_ThruTapDrillDiameter: Double; safecall;
    procedure Set_ThruTapDrillDiameter(Diameter: Double); safecall;
    function Get_NearCounterSinkDiameter: Double; safecall;
    procedure Set_NearCounterSinkDiameter(Diameter: Double); safecall;
    function Get_MidCounterSinkDiameter: Double; safecall;
    procedure Set_MidCounterSinkDiameter(Diameter: Double); safecall;
    function Get_FarCounterSinkDiameter: Double; safecall;
    procedure Set_FarCounterSinkDiameter(Diameter: Double); safecall;
    function Get_ThreadDiameter: Double; safecall;
    procedure Set_ThreadDiameter(Diameter: Double); safecall;
    function Get_Depth: Double; safecall;
    procedure Set_Depth(Depth: Double); safecall;
    function Get_CounterBoreDepth: Double; safecall;
    procedure Set_CounterBoreDepth(Cbore_depth: Double); safecall;
    function Get_CounterDrillDepth: Double; safecall;
    procedure Set_CounterDrillDepth(Cdrill_depth: Double); safecall;
    function Get_HoleDepth: Double; safecall;
    procedure Set_HoleDepth(Depth: Double); safecall;
    function Get_ThruHoleDepth: Double; safecall;
    procedure Set_ThruHoleDepth(Depth: Double); safecall;
    function Get_TapDrillDepth: Double; safecall;
    procedure Set_TapDrillDepth(Depth: Double); safecall;
    function Get_ThruTapDrillDepth: Double; safecall;
    procedure Set_ThruTapDrillDepth(Depth: Double); safecall;
    function Get_ThreadDepth: Double; safecall;
    procedure Set_ThreadDepth(Depth: Double); safecall;
    function Get_CounterDrillAngle: Double; safecall;
    procedure Set_CounterDrillAngle(Cdrill_angle: Double); safecall;
    function Get_CounterSinkAngle: Double; safecall;
    procedure Set_CounterSinkAngle(Csunk_angle: Double); safecall;
    function Get_DrillAngle: Double; safecall;
    procedure Set_DrillAngle(Drill_angle: Double); safecall;
    function Get_NearCounterSinkAngle: Double; safecall;
    procedure Set_NearCounterSinkAngle(Angle: Double); safecall;
    function Get_MidCounterSinkAngle: Double; safecall;
    procedure Set_MidCounterSinkAngle(Angle: Double); safecall;
    function Get_FarCounterSinkAngle: Double; safecall;
    procedure Set_FarCounterSinkAngle(Angle: Double); safecall;
    function Get_ThreadAngle: Double; safecall;
    procedure Set_ThreadAngle(Angle: Double); safecall;
    function Get_HeadClearance: Double; safecall;
    procedure Set_HeadClearance(HeadClearance: Double); safecall;
    function Get_Face: IDispatch; safecall;
    procedure Set_Face(const Face: IDispatch); safecall;
    function Get_IFace: IFace2; safecall;
    procedure Set_IFace(const Face: IFace2); safecall;
    function Get_Vertex: IDispatch; safecall;
    procedure Set_Vertex(const Vertex: IDispatch); safecall;
    function Get_IVertex: IVertex; safecall;
    procedure Set_IVertex(const Vertex: IVertex); safecall;
    function Get_EndCondition: SYSINT; safecall;
    procedure Set_EndCondition(EndCondition: SYSINT); safecall;
    function Get_Standard: WideString; safecall;
    procedure Set_Standard(const Standard: WideString); safecall;
    function Get_FastenerType: WideString; safecall;
    procedure Set_FastenerType(const FastenerType: WideString); safecall;
    function Get_FastenerSize: WideString; safecall;
    procedure Set_FastenerSize(const FastenerSize: WideString); safecall;
    function Get_HeadClearanceType: Integer; safecall;
    procedure Set_HeadClearanceType(HcType: Integer); safecall;
    function Get_CosmeticThreadType: Integer; safecall;
    procedure Set_CosmeticThreadType(CtType: Integer); safecall;
    function GetEndConditionReference(out ReferenceType: Integer): IDispatch; safecall;
    procedure SetEndConditionReference(const PDisp: IDispatch); safecall;
    function GetSketchPointCount: Integer; safecall;
    function GetSketchPoints: OleVariant; safecall;
    function IGetSketchPoints(NCount: Integer): ISketchPoint; safecall;
    function Get_HoleFit: Integer; safecall;
    procedure Set_HoleFit(Fit: Integer); safecall;
    function ChangeStandard(Standard: Integer; FastenerType: Integer; const SSize: WideString): WordBool; safecall;
    function Get_OffsetDistance: Double; safecall;
    procedure Set_OffsetDistance(Dist: Double); safecall;
    function Get_ThreadEndCondition: Integer; safecall;
    procedure Set_ThreadEndCondition(EndCond: Integer); safecall;
    function Get_TapType: Integer; safecall;
    procedure Set_TapType(Type_: Integer); safecall;
    procedure InitializeHole(GenericHoleType: Integer; StdIndex: Integer; FastnerType: Integer; 
                             const SSize: WideString; EndType: Integer); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(RevDir: WordBool); safecall;
    function Get_ThreadClass: WideString; safecall;
    procedure Set_ThreadClass(const ThreadCl: WideString); safecall;
    function Get_FeatureScope: WordBool; safecall;
    procedure Set_FeatureScope(FeatScope: WordBool); safecall;
    function Get_AutoSelect: WordBool; safecall;
    procedure Set_AutoSelect(AutoSel: WordBool); safecall;
    function Get_FeatureScopeBodies: OleVariant; safecall;
    procedure Set_FeatureScopeBodies(BodyVar: OleVariant); safecall;
    function GetFeatureScopeBodiesCount: Integer; safecall;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; safecall;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); safecall;
    function Get_Standard2: Integer; safecall;
    procedure Set_Standard2(Standard: Integer); safecall;
    function Get_FastenerType2: Integer; safecall;
    procedure Set_FastenerType2(FastenerType: Integer); safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property Diameter: Double read Get_Diameter write Set_Diameter;
    property CounterBoreDiameter: Double read Get_CounterBoreDiameter write Set_CounterBoreDiameter;
    property CounterDrillDiameter: Double read Get_CounterDrillDiameter write Set_CounterDrillDiameter;
    property CounterSinkDiameter: Double read Get_CounterSinkDiameter write Set_CounterSinkDiameter;
    property MinorDiameter: Double read Get_MinorDiameter write Set_MinorDiameter;
    property MajorDiameter: Double read Get_MajorDiameter write Set_MajorDiameter;
    property HoleDiameter: Double read Get_HoleDiameter write Set_HoleDiameter;
    property ThruHoleDiameter: Double read Get_ThruHoleDiameter write Set_ThruHoleDiameter;
    property TapDrillDiameter: Double read Get_TapDrillDiameter write Set_TapDrillDiameter;
    property ThruTapDrillDiameter: Double read Get_ThruTapDrillDiameter write Set_ThruTapDrillDiameter;
    property NearCounterSinkDiameter: Double read Get_NearCounterSinkDiameter write Set_NearCounterSinkDiameter;
    property MidCounterSinkDiameter: Double read Get_MidCounterSinkDiameter write Set_MidCounterSinkDiameter;
    property FarCounterSinkDiameter: Double read Get_FarCounterSinkDiameter write Set_FarCounterSinkDiameter;
    property ThreadDiameter: Double read Get_ThreadDiameter write Set_ThreadDiameter;
    property Depth: Double read Get_Depth write Set_Depth;
    property CounterBoreDepth: Double read Get_CounterBoreDepth write Set_CounterBoreDepth;
    property CounterDrillDepth: Double read Get_CounterDrillDepth write Set_CounterDrillDepth;
    property HoleDepth: Double read Get_HoleDepth write Set_HoleDepth;
    property ThruHoleDepth: Double read Get_ThruHoleDepth write Set_ThruHoleDepth;
    property TapDrillDepth: Double read Get_TapDrillDepth write Set_TapDrillDepth;
    property ThruTapDrillDepth: Double read Get_ThruTapDrillDepth write Set_ThruTapDrillDepth;
    property ThreadDepth: Double read Get_ThreadDepth write Set_ThreadDepth;
    property CounterDrillAngle: Double read Get_CounterDrillAngle write Set_CounterDrillAngle;
    property CounterSinkAngle: Double read Get_CounterSinkAngle write Set_CounterSinkAngle;
    property DrillAngle: Double read Get_DrillAngle write Set_DrillAngle;
    property NearCounterSinkAngle: Double read Get_NearCounterSinkAngle write Set_NearCounterSinkAngle;
    property MidCounterSinkAngle: Double read Get_MidCounterSinkAngle write Set_MidCounterSinkAngle;
    property FarCounterSinkAngle: Double read Get_FarCounterSinkAngle write Set_FarCounterSinkAngle;
    property ThreadAngle: Double read Get_ThreadAngle write Set_ThreadAngle;
    property HeadClearance: Double read Get_HeadClearance write Set_HeadClearance;
    property Face: IDispatch read Get_Face write Set_Face;
    property IFace: IFace2 read Get_IFace write Set_IFace;
    property Vertex: IDispatch read Get_Vertex write Set_Vertex;
    property IVertex: IVertex read Get_IVertex write Set_IVertex;
    property EndCondition: SYSINT read Get_EndCondition write Set_EndCondition;
    property Standard: WideString read Get_Standard write Set_Standard;
    property FastenerType: WideString read Get_FastenerType write Set_FastenerType;
    property FastenerSize: WideString read Get_FastenerSize write Set_FastenerSize;
    property HeadClearanceType: Integer read Get_HeadClearanceType write Set_HeadClearanceType;
    property CosmeticThreadType: Integer read Get_CosmeticThreadType write Set_CosmeticThreadType;
    property HoleFit: Integer read Get_HoleFit write Set_HoleFit;
    property OffsetDistance: Double read Get_OffsetDistance write Set_OffsetDistance;
    property ThreadEndCondition: Integer read Get_ThreadEndCondition write Set_ThreadEndCondition;
    property TapType: Integer read Get_TapType write Set_TapType;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property ThreadClass: WideString read Get_ThreadClass write Set_ThreadClass;
    property FeatureScope: WordBool read Get_FeatureScope write Set_FeatureScope;
    property AutoSelect: WordBool read Get_AutoSelect write Set_AutoSelect;
    property FeatureScopeBodies: OleVariant read Get_FeatureScopeBodies write Set_FeatureScopeBodies;
    property Standard2: Integer read Get_Standard2 write Set_Standard2;
    property FastenerType2: Integer read Get_FastenerType2 write Set_FastenerType2;
  end;

// *********************************************************************//
// DispIntf:  IWizardHoleFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7A472C09-437C-4C4B-B34C-A144D0E2546C}
// *********************************************************************//
  IWizardHoleFeatureData2Disp = dispinterface
    ['{7A472C09-437C-4C4B-B34C-A144D0E2546C}']
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 1;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 2;
    procedure ReleaseSelectionAccess; dispid 3;
    property type_: SYSINT dispid 4;
    property Diameter: Double dispid 5;
    property CounterBoreDiameter: Double dispid 6;
    property CounterDrillDiameter: Double dispid 7;
    property CounterSinkDiameter: Double dispid 8;
    property MinorDiameter: Double dispid 9;
    property MajorDiameter: Double dispid 10;
    property HoleDiameter: Double dispid 11;
    property ThruHoleDiameter: Double dispid 12;
    property TapDrillDiameter: Double dispid 13;
    property ThruTapDrillDiameter: Double dispid 14;
    property NearCounterSinkDiameter: Double dispid 15;
    property MidCounterSinkDiameter: Double dispid 16;
    property FarCounterSinkDiameter: Double dispid 17;
    property ThreadDiameter: Double dispid 18;
    property Depth: Double dispid 19;
    property CounterBoreDepth: Double dispid 20;
    property CounterDrillDepth: Double dispid 21;
    property HoleDepth: Double dispid 22;
    property ThruHoleDepth: Double dispid 23;
    property TapDrillDepth: Double dispid 24;
    property ThruTapDrillDepth: Double dispid 25;
    property ThreadDepth: Double dispid 26;
    property CounterDrillAngle: Double dispid 27;
    property CounterSinkAngle: Double dispid 28;
    property DrillAngle: Double dispid 29;
    property NearCounterSinkAngle: Double dispid 30;
    property MidCounterSinkAngle: Double dispid 31;
    property FarCounterSinkAngle: Double dispid 32;
    property ThreadAngle: Double dispid 33;
    property HeadClearance: Double dispid 34;
    property Face: IDispatch dispid 35;
    property IFace: IFace2 dispid 36;
    property Vertex: IDispatch dispid 37;
    property IVertex: IVertex dispid 38;
    property EndCondition: SYSINT dispid 39;
    property Standard: WideString dispid 40;
    property FastenerType: WideString dispid 41;
    property FastenerSize: WideString dispid 42;
    property HeadClearanceType: Integer dispid 43;
    property CosmeticThreadType: Integer dispid 44;
    function GetEndConditionReference(out ReferenceType: Integer): IDispatch; dispid 45;
    procedure SetEndConditionReference(const PDisp: IDispatch); dispid 46;
    function GetSketchPointCount: Integer; dispid 47;
    function GetSketchPoints: OleVariant; dispid 48;
    function IGetSketchPoints(NCount: Integer): ISketchPoint; dispid 49;
    property HoleFit: Integer dispid 50;
    function ChangeStandard(Standard: Integer; FastenerType: Integer; const SSize: WideString): WordBool; dispid 51;
    property OffsetDistance: Double dispid 52;
    property ThreadEndCondition: Integer dispid 53;
    property TapType: Integer dispid 54;
    procedure InitializeHole(GenericHoleType: Integer; StdIndex: Integer; FastnerType: Integer; 
                             const SSize: WideString; EndType: Integer); dispid 55;
    property ReverseDirection: WordBool dispid 56;
    property ThreadClass: WideString dispid 57;
    property FeatureScope: WordBool dispid 58;
    property AutoSelect: WordBool dispid 59;
    property FeatureScopeBodies: OleVariant dispid 60;
    function GetFeatureScopeBodiesCount: Integer; dispid 61;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; dispid 62;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); dispid 63;
    property Standard2: Integer dispid 64;
    property FastenerType2: Integer dispid 65;
  end;

// *********************************************************************//
// Interface: IChamferFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8427D092-A1FC-49C9-B1ED-EC52D2389E9A}
// *********************************************************************//
  IChamferFeatureData2 = interface(IDispatch)
    ['{8427D092-A1FC-49C9-B1ED-EC52D2389E9A}']
    function GetEdgeChamferDistance(Side: SYSINT): Double; safecall;
    procedure SetEdgeChamferDistance(Side: SYSINT; Distance: Double); safecall;
    function GetVertexChamferDistance(Side: SYSINT): Double; safecall;
    procedure SetVertexChamferDistance(Side: SYSINT; Distance: Double); safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(Chamfer_type: SYSINT); safecall;
    function Get_EdgeChamferAngle: Double; safecall;
    procedure Set_EdgeChamferAngle(Angle: Double); safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetFaceCount: Integer; safecall;
    function IGetFaces(FaceCount: Integer): IFace2; safecall;
    procedure ISetFaces(Count: Integer; var FaceList: IFace2); safecall;
    function Get_Faces: OleVariant; safecall;
    procedure Set_Faces(FaceList: OleVariant); safecall;
    function GetEdgeCount: Integer; safecall;
    function IGetEdges(Count: Integer): IEdge; safecall;
    procedure ISetEdges(Count: Integer; var EdgeList: IEdge); safecall;
    function Get_Edges: OleVariant; safecall;
    procedure Set_Edges(EdgeList: OleVariant); safecall;
    function Get_Vertex: IDispatch; safecall;
    procedure Set_Vertex(const Vertex: IDispatch); safecall;
    function Get_LoopCount: Integer; safecall;
    function IGetLoops(Count: Integer): ILoop; safecall;
    procedure ISetLoops(Count: Integer; var LoopList: ILoop); safecall;
    function Get_Loops: OleVariant; safecall;
    procedure Set_Loops(LoopList: OleVariant); safecall;
    function Get_EqualDistance: WordBool; safecall;
    procedure Set_EqualDistance(ReverseDirection: WordBool); safecall;
    function Get_IVertex: IVertex; safecall;
    procedure Set_IVertex(const Vertex: IVertex); safecall;
    function Get_KeepFeatures: WordBool; safecall;
    procedure Set_KeepFeatures(Keep: WordBool); safecall;
    function GetIsFlipped(const Entity: IDispatch): WordBool; safecall;
    procedure SetIsFlipped(const Entity: IDispatch; Flip: WordBool); safecall;
    function Get_TangentPropagation: WordBool; safecall;
    procedure Set_TangentPropagation(TangentPropagation: WordBool); safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property EdgeChamferAngle: Double read Get_EdgeChamferAngle write Set_EdgeChamferAngle;
    property Faces: OleVariant read Get_Faces write Set_Faces;
    property Edges: OleVariant read Get_Edges write Set_Edges;
    property Vertex: IDispatch read Get_Vertex write Set_Vertex;
    property LoopCount: Integer read Get_LoopCount;
    property Loops: OleVariant read Get_Loops write Set_Loops;
    property EqualDistance: WordBool read Get_EqualDistance write Set_EqualDistance;
    property IVertex: IVertex read Get_IVertex write Set_IVertex;
    property KeepFeatures: WordBool read Get_KeepFeatures write Set_KeepFeatures;
    property TangentPropagation: WordBool read Get_TangentPropagation write Set_TangentPropagation;
  end;

// *********************************************************************//
// DispIntf:  IChamferFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {8427D092-A1FC-49C9-B1ED-EC52D2389E9A}
// *********************************************************************//
  IChamferFeatureData2Disp = dispinterface
    ['{8427D092-A1FC-49C9-B1ED-EC52D2389E9A}']
    function GetEdgeChamferDistance(Side: SYSINT): Double; dispid 1;
    procedure SetEdgeChamferDistance(Side: SYSINT; Distance: Double); dispid 2;
    function GetVertexChamferDistance(Side: SYSINT): Double; dispid 3;
    procedure SetVertexChamferDistance(Side: SYSINT; Distance: Double); dispid 4;
    property type_: SYSINT dispid 5;
    property EdgeChamferAngle: Double dispid 6;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 7;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 8;
    procedure ReleaseSelectionAccess; dispid 9;
    function GetFaceCount: Integer; dispid 10;
    function IGetFaces(FaceCount: Integer): IFace2; dispid 11;
    procedure ISetFaces(Count: Integer; var FaceList: IFace2); dispid 12;
    property Faces: OleVariant dispid 13;
    function GetEdgeCount: Integer; dispid 14;
    function IGetEdges(Count: Integer): IEdge; dispid 15;
    procedure ISetEdges(Count: Integer; var EdgeList: IEdge); dispid 16;
    property Edges: OleVariant dispid 17;
    property Vertex: IDispatch dispid 18;
    property LoopCount: Integer readonly dispid 19;
    function IGetLoops(Count: Integer): ILoop; dispid 20;
    procedure ISetLoops(Count: Integer; var LoopList: ILoop); dispid 21;
    property Loops: OleVariant dispid 22;
    property EqualDistance: WordBool dispid 23;
    property IVertex: IVertex dispid 24;
    property KeepFeatures: WordBool dispid 25;
    function GetIsFlipped(const Entity: IDispatch): WordBool; dispid 26;
    procedure SetIsFlipped(const Entity: IDispatch; Flip: WordBool); dispid 27;
    property TangentPropagation: WordBool dispid 28;
  end;

// *********************************************************************//
// Interface: IDraftFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FD9B0999-D519-41AB-ACAA-4F2ADEDD7015}
// *********************************************************************//
  IDraftFeatureData2 = interface(IDispatch)
    ['{FD9B0999-D519-41AB-ACAA-4F2ADEDD7015}']
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(Type_: SYSINT); safecall;
    function Get_Angle: Double; safecall;
    procedure Set_Angle(Angle: Double); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetFacesToDraftCount: Smallint; safecall;
    function IGetFacesToDraft(Count: Smallint): IFace2; safecall;
    procedure ISetFacesToDraft(Count: Smallint; var FaceArray: IFace2); safecall;
    function Get_FacesToDraft: OleVariant; safecall;
    procedure Set_FacesToDraft(FaceArray: OleVariant); safecall;
    function GetPartingLinesCount: Smallint; safecall;
    function IGetPartingLines(Count: Smallint): IEdge; safecall;
    procedure ISetPartingLines(Count: Smallint; var LineArray: IEdge); safecall;
    function Get_PartingLines: OleVariant; safecall;
    procedure Set_PartingLines(FaceArray: OleVariant); safecall;
    function Get_NeutralPlane: IDispatch; safecall;
    procedure Set_NeutralPlane(const Face: IDispatch); safecall;
    function Get_DirectionPull: IDispatch; safecall;
    procedure Set_DirectionPull(const Face: IDispatch); safecall;
    function Get_FacePropagation: Smallint; safecall;
    procedure Set_FacePropagation(FaceProp: Smallint); safecall;
    function GetOtherFacesFlagAtIndex(Index: Smallint): WordBool; safecall;
    procedure SetOtherFacesFlagAtIndex(Index: Smallint; Flag: WordBool); safecall;
    function GetDraftedEntityCount: Smallint; safecall;
    function IGetDraftedEntities(Count: Smallint): IEntity; safecall;
    function GetDraftedEntities: OleVariant; safecall;
    function Get_StepType: Smallint; safecall;
    procedure Set_StepType(StepType: Smallint); safecall;
    function Get_AllowReducedAngle: WordBool; safecall;
    procedure Set_AllowReducedAngle(Allow: WordBool); safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property Angle: Double read Get_Angle write Set_Angle;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property FacesToDraft: OleVariant read Get_FacesToDraft write Set_FacesToDraft;
    property PartingLines: OleVariant read Get_PartingLines write Set_PartingLines;
    property NeutralPlane: IDispatch read Get_NeutralPlane write Set_NeutralPlane;
    property DirectionPull: IDispatch read Get_DirectionPull write Set_DirectionPull;
    property FacePropagation: Smallint read Get_FacePropagation write Set_FacePropagation;
    property StepType: Smallint read Get_StepType write Set_StepType;
    property AllowReducedAngle: WordBool read Get_AllowReducedAngle write Set_AllowReducedAngle;
  end;

// *********************************************************************//
// DispIntf:  IDraftFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FD9B0999-D519-41AB-ACAA-4F2ADEDD7015}
// *********************************************************************//
  IDraftFeatureData2Disp = dispinterface
    ['{FD9B0999-D519-41AB-ACAA-4F2ADEDD7015}']
    property type_: SYSINT dispid 1;
    property Angle: Double dispid 2;
    property ReverseDirection: WordBool dispid 3;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 4;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 5;
    procedure ReleaseSelectionAccess; dispid 6;
    function GetFacesToDraftCount: Smallint; dispid 7;
    function IGetFacesToDraft(Count: Smallint): IFace2; dispid 8;
    procedure ISetFacesToDraft(Count: Smallint; var FaceArray: IFace2); dispid 9;
    property FacesToDraft: OleVariant dispid 10;
    function GetPartingLinesCount: Smallint; dispid 11;
    function IGetPartingLines(Count: Smallint): IEdge; dispid 12;
    procedure ISetPartingLines(Count: Smallint; var LineArray: IEdge); dispid 13;
    property PartingLines: OleVariant dispid 14;
    property NeutralPlane: IDispatch dispid 15;
    property DirectionPull: IDispatch dispid 16;
    property FacePropagation: Smallint dispid 17;
    function GetOtherFacesFlagAtIndex(Index: Smallint): WordBool; dispid 18;
    procedure SetOtherFacesFlagAtIndex(Index: Smallint; Flag: WordBool); dispid 19;
    function GetDraftedEntityCount: Smallint; dispid 20;
    function IGetDraftedEntities(Count: Smallint): IEntity; dispid 21;
    function GetDraftedEntities: OleVariant; dispid 22;
    property StepType: Smallint dispid 23;
    property AllowReducedAngle: WordBool dispid 24;
  end;

// *********************************************************************//
// Interface: ISimpleFilletFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9FE7C8DB-8A4C-41BB-8E3B-7600692DBC92}
// *********************************************************************//
  ISimpleFilletFeatureData2 = interface(IDispatch)
    ['{9FE7C8DB-8A4C-41BB-8E3B-7600692DBC92}']
    function Get_type_: SYSINT; safecall;
    function Get_DefaultRadius: Double; safecall;
    procedure Set_DefaultRadius(Radius: Double); safecall;
    function Get_OverflowType: SYSINT; safecall;
    procedure Set_OverflowType(Overflow_type: SYSINT); safecall;
    function Get_IsMultipleRadius: WordBool; safecall;
    procedure Set_IsMultipleRadius(IsMultipleRadius: WordBool); safecall;
    function Get_RoundCorners: WordBool; safecall;
    procedure Set_RoundCorners(RoundCorners: WordBool); safecall;
    function Get_PropagateToTangentFaces: WordBool; safecall;
    procedure Set_PropagateToTangentFaces(PropTgtFaces: WordBool); safecall;
    function Get_FilletItemsCount: SYSINT; safecall;
    function GetFilletItemAtIndex(Index: SYSINT): IDispatch; safecall;
    function IGetFilletItemAtIndex(Index: SYSINT): IUnknown; safecall;
    function GetRadius(const PFilletItem: IDispatch): Double; safecall;
    function IGetRadius(const PFilletItem: IUnknown): Double; safecall;
    procedure SetRadius(const PFilletItem: IDispatch; Radius: Double); safecall;
    procedure ISetRadius(const PFilletItem: IUnknown; Radius: Double); safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_KeepFeatures: WordBool; safecall;
    procedure Set_KeepFeatures(Keep: WordBool); safecall;
    function GetEdgeCount: Integer; safecall;
    function IGetEdges(Count: Integer): IEdge; safecall;
    procedure ISetEdges(Count: Integer; var EdgeList: IEdge); safecall;
    function Get_Edges: OleVariant; safecall;
    procedure Set_Edges(EdgeList: OleVariant); safecall;
    function GetFaceCount(WhichFaceList: Integer): Integer; safecall;
    function IGetFaces(WhichFaceList: Integer; Count: Integer): IFace2; safecall;
    procedure ISetFaces(WhichFaceList: Integer; Count: Integer; var FaceList: IFace2); safecall;
    function GetFaces(WhichFaceList: Integer): OleVariant; safecall;
    procedure SetFaces(WhichFaceList: Integer; FaceList: OleVariant); safecall;
    function GetLoopCount: Integer; safecall;
    function IGetLoops(Count: Integer): ILoop2; safecall;
    procedure ISetLoops(Count: Integer; var LoopList: ILoop2); safecall;
    function Get_Loops: OleVariant; safecall;
    procedure Set_Loops(LoopList: OleVariant); safecall;
    function GetFeatureCount: Integer; safecall;
    function IGetFeatures(Count: Integer): IFeature; safecall;
    procedure ISetFeatures(Count: Integer; var FeatList: IFeature); safecall;
    function Get_Features: OleVariant; safecall;
    procedure Set_Features(FeatList: OleVariant); safecall;
    function GetHoldLineCount: Integer; safecall;
    function IGetHoldLines(Count: Integer): IDispatch; safecall;
    procedure ISetHoldLines(Count: Integer; var PList: IDispatch); safecall;
    function Get_HoldLines: OleVariant; safecall;
    procedure Set_HoldLines(PVar: OleVariant); safecall;
    function Get_CurvatureContinuous: WordBool; safecall;
    procedure Set_CurvatureContinuous(CurveCont: WordBool); safecall;
    function Get_HelpPoint: IDispatch; safecall;
    procedure Set_HelpPoint(const PDisp: IDispatch); safecall;
    function Get_OmitAttachedEdges: WordBool; safecall;
    procedure Set_OmitAttachedEdges(BOmit: WordBool); safecall;
    function GetSetbackVertices: OleVariant; safecall;
    function GetSetbackVertexDistance(const Vtx: IDispatch; out EdgeVar: OleVariant): OleVariant; safecall;
    function SetSetbackVertices(VertVar: OleVariant): WordBool; safecall;
    function SetSetbackVertexDistance(const Vtx: IDispatch; EdgeVar: OleVariant; DistVar: OleVariant): WordBool; safecall;
    function GetSetbackVerticesCount: Integer; safecall;
    function IGetSetbackVertices(Count: Integer): IVertex; safecall;
    function GetSetbackDistanceCount(const Vtx: IVertex): Integer; safecall;
    function IGetSetbackVertexDistance(Count: Integer; const Vtx: IVertex; out EdgeArr: IEdge): Double; safecall;
    function ISetSetbackVertices(Count: Integer; var VertArr: IVertex): WordBool; safecall;
    function ISetSetbackVertexDistance(Count: Integer; const Vtx: IVertex; var EdgeArr: IEdge; 
                                       var DistArr: Double): WordBool; safecall;
    function Get_ConstantWidth: WordBool; safecall;
    procedure Set_ConstantWidth(ConstantWidth: WordBool); safecall;
    function Get_ReverseFaceNormal(WhichFaceList: Integer): WordBool; safecall;
    procedure Set_ReverseFaceNormal(WhichFaceList: Integer; BReverseFaceNormal: WordBool); safecall;
    function Get_TrimAndAttachSurfaces: Integer; safecall;
    procedure Set_TrimAndAttachSurfaces(Retval: Integer); safecall;
    property type_: SYSINT read Get_type_;
    property DefaultRadius: Double read Get_DefaultRadius write Set_DefaultRadius;
    property OverflowType: SYSINT read Get_OverflowType write Set_OverflowType;
    property IsMultipleRadius: WordBool read Get_IsMultipleRadius write Set_IsMultipleRadius;
    property RoundCorners: WordBool read Get_RoundCorners write Set_RoundCorners;
    property PropagateToTangentFaces: WordBool read Get_PropagateToTangentFaces write Set_PropagateToTangentFaces;
    property FilletItemsCount: SYSINT read Get_FilletItemsCount;
    property KeepFeatures: WordBool read Get_KeepFeatures write Set_KeepFeatures;
    property Edges: OleVariant read Get_Edges write Set_Edges;
    property Loops: OleVariant read Get_Loops write Set_Loops;
    property Features: OleVariant read Get_Features write Set_Features;
    property HoldLines: OleVariant read Get_HoldLines write Set_HoldLines;
    property CurvatureContinuous: WordBool read Get_CurvatureContinuous write Set_CurvatureContinuous;
    property HelpPoint: IDispatch read Get_HelpPoint write Set_HelpPoint;
    property OmitAttachedEdges: WordBool read Get_OmitAttachedEdges write Set_OmitAttachedEdges;
    property ConstantWidth: WordBool read Get_ConstantWidth write Set_ConstantWidth;
    property ReverseFaceNormal[WhichFaceList: Integer]: WordBool read Get_ReverseFaceNormal write Set_ReverseFaceNormal;
    property TrimAndAttachSurfaces: Integer read Get_TrimAndAttachSurfaces write Set_TrimAndAttachSurfaces;
  end;

// *********************************************************************//
// DispIntf:  ISimpleFilletFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {9FE7C8DB-8A4C-41BB-8E3B-7600692DBC92}
// *********************************************************************//
  ISimpleFilletFeatureData2Disp = dispinterface
    ['{9FE7C8DB-8A4C-41BB-8E3B-7600692DBC92}']
    property type_: SYSINT readonly dispid 1;
    property DefaultRadius: Double dispid 2;
    property OverflowType: SYSINT dispid 3;
    property IsMultipleRadius: WordBool dispid 4;
    property RoundCorners: WordBool dispid 5;
    property PropagateToTangentFaces: WordBool dispid 6;
    property FilletItemsCount: SYSINT readonly dispid 7;
    function GetFilletItemAtIndex(Index: SYSINT): IDispatch; dispid 8;
    function IGetFilletItemAtIndex(Index: SYSINT): IUnknown; dispid 9;
    function GetRadius(const PFilletItem: IDispatch): Double; dispid 10;
    function IGetRadius(const PFilletItem: IUnknown): Double; dispid 11;
    procedure SetRadius(const PFilletItem: IDispatch; Radius: Double); dispid 12;
    procedure ISetRadius(const PFilletItem: IUnknown; Radius: Double); dispid 13;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 14;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 15;
    procedure ReleaseSelectionAccess; dispid 16;
    property KeepFeatures: WordBool dispid 17;
    function GetEdgeCount: Integer; dispid 18;
    function IGetEdges(Count: Integer): IEdge; dispid 19;
    procedure ISetEdges(Count: Integer; var EdgeList: IEdge); dispid 20;
    property Edges: OleVariant dispid 21;
    function GetFaceCount(WhichFaceList: Integer): Integer; dispid 22;
    function IGetFaces(WhichFaceList: Integer; Count: Integer): IFace2; dispid 23;
    procedure ISetFaces(WhichFaceList: Integer; Count: Integer; var FaceList: IFace2); dispid 24;
    function GetFaces(WhichFaceList: Integer): OleVariant; dispid 25;
    procedure SetFaces(WhichFaceList: Integer; FaceList: OleVariant); dispid 26;
    function GetLoopCount: Integer; dispid 27;
    function IGetLoops(Count: Integer): ILoop2; dispid 28;
    procedure ISetLoops(Count: Integer; var LoopList: ILoop2); dispid 29;
    property Loops: OleVariant dispid 30;
    function GetFeatureCount: Integer; dispid 31;
    function IGetFeatures(Count: Integer): IFeature; dispid 32;
    procedure ISetFeatures(Count: Integer; var FeatList: IFeature); dispid 33;
    property Features: OleVariant dispid 34;
    function GetHoldLineCount: Integer; dispid 35;
    function IGetHoldLines(Count: Integer): IDispatch; dispid 36;
    procedure ISetHoldLines(Count: Integer; var PList: IDispatch); dispid 37;
    property HoldLines: OleVariant dispid 38;
    property CurvatureContinuous: WordBool dispid 39;
    property HelpPoint: IDispatch dispid 40;
    property OmitAttachedEdges: WordBool dispid 41;
    function GetSetbackVertices: OleVariant; dispid 42;
    function GetSetbackVertexDistance(const Vtx: IDispatch; out EdgeVar: OleVariant): OleVariant; dispid 43;
    function SetSetbackVertices(VertVar: OleVariant): WordBool; dispid 44;
    function SetSetbackVertexDistance(const Vtx: IDispatch; EdgeVar: OleVariant; DistVar: OleVariant): WordBool; dispid 45;
    function GetSetbackVerticesCount: Integer; dispid 46;
    function IGetSetbackVertices(Count: Integer): IVertex; dispid 47;
    function GetSetbackDistanceCount(const Vtx: IVertex): Integer; dispid 48;
    function IGetSetbackVertexDistance(Count: Integer; const Vtx: IVertex; out EdgeArr: IEdge): Double; dispid 49;
    function ISetSetbackVertices(Count: Integer; var VertArr: IVertex): WordBool; dispid 50;
    function ISetSetbackVertexDistance(Count: Integer; const Vtx: IVertex; var EdgeArr: IEdge; 
                                       var DistArr: Double): WordBool; dispid 51;
    property ConstantWidth: WordBool dispid 52;
    property ReverseFaceNormal[WhichFaceList: Integer]: WordBool dispid 53;
    property TrimAndAttachSurfaces: Integer dispid 54;
  end;

// *********************************************************************//
// Interface: IVariableFilletFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FFCDC95C-1BA9-423A-877E-CB7AA60DE9B4}
// *********************************************************************//
  IVariableFilletFeatureData2 = interface(IDispatch)
    ['{FFCDC95C-1BA9-423A-877E-CB7AA60DE9B4}']
    function Get_DefaultRadius: Double; safecall;
    procedure Set_DefaultRadius(Radius: Double); safecall;
    function Get_OverflowType: SYSINT; safecall;
    procedure Set_OverflowType(Overflow_type: SYSINT); safecall;
    function Get_TransitionType: SYSINT; safecall;
    procedure Set_TransitionType(Transition_type: SYSINT); safecall;
    function Get_PropagateToTangentFaces: WordBool; safecall;
    procedure Set_PropagateToTangentFaces(PropTgtFaces: WordBool); safecall;
    function Get_FilletEdgeCount: SYSINT; safecall;
    function GetFilletEdgeAtIndex(Index: SYSINT): IDispatch; safecall;
    function IGetFilletEdgeAtIndex(Index: SYSINT): IEdge; safecall;
    function GetRadius(const PFilletItem: IDispatch): Double; safecall;
    function IGetRadius(const PFilletItem: IVertex): Double; safecall;
    procedure SetRadius(const PFilletItem: IDispatch; Radius: Double); safecall;
    procedure ISetRadius(const PFilletItem: IVertex; Radius: Double); safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetRadius2(const PFilletItem: IVertex; out IsAssigned: WordBool): Double; safecall;
    function GetControlPointsCount: Integer; safecall;
    function GetControlPointRadiusAtIndex(Index: Integer; out Location: Double; out PEdge: IEdge): Double; safecall;
    procedure SetControlPointRadiusAtIndex(Index: Integer; Location: Double; Radius: Double); safecall;
    function GetSetbackVertices: OleVariant; safecall;
    function GetSetbackVertexDistance(const Vtx: IDispatch; out EdgeVar: OleVariant): OleVariant; safecall;
    function SetSetbackVertices(VertVar: OleVariant): WordBool; safecall;
    function SetSetbackVertexDistance(const Vtx: IDispatch; EdgeVar: OleVariant; DistVar: OleVariant): WordBool; safecall;
    function GetSetbackVerticesCount: Integer; safecall;
    function IGetSetbackVertices(Count: Integer): IVertex; safecall;
    function GetSetbackDistanceCount(const Vtx: IVertex): Integer; safecall;
    function IGetSetbackVertexDistance(Count: Integer; const Vtx: IVertex; out EdgeArr: IEdge): Double; safecall;
    function ISetSetbackVertices(Count: Integer; var VertArr: IVertex): WordBool; safecall;
    function ISetSetbackVertexDistance(Count: Integer; const Vtx: IVertex; var EdgeArr: IEdge; 
                                       var DistArr: Double): WordBool; safecall;
    property DefaultRadius: Double read Get_DefaultRadius write Set_DefaultRadius;
    property OverflowType: SYSINT read Get_OverflowType write Set_OverflowType;
    property TransitionType: SYSINT read Get_TransitionType write Set_TransitionType;
    property PropagateToTangentFaces: WordBool read Get_PropagateToTangentFaces write Set_PropagateToTangentFaces;
    property FilletEdgeCount: SYSINT read Get_FilletEdgeCount;
  end;

// *********************************************************************//
// DispIntf:  IVariableFilletFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {FFCDC95C-1BA9-423A-877E-CB7AA60DE9B4}
// *********************************************************************//
  IVariableFilletFeatureData2Disp = dispinterface
    ['{FFCDC95C-1BA9-423A-877E-CB7AA60DE9B4}']
    property DefaultRadius: Double dispid 1;
    property OverflowType: SYSINT dispid 2;
    property TransitionType: SYSINT dispid 3;
    property PropagateToTangentFaces: WordBool dispid 4;
    property FilletEdgeCount: SYSINT readonly dispid 5;
    function GetFilletEdgeAtIndex(Index: SYSINT): IDispatch; dispid 6;
    function IGetFilletEdgeAtIndex(Index: SYSINT): IEdge; dispid 7;
    function GetRadius(const PFilletItem: IDispatch): Double; dispid 8;
    function IGetRadius(const PFilletItem: IVertex): Double; dispid 9;
    procedure SetRadius(const PFilletItem: IDispatch; Radius: Double); dispid 10;
    procedure ISetRadius(const PFilletItem: IVertex; Radius: Double); dispid 11;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 12;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 13;
    procedure ReleaseSelectionAccess; dispid 14;
    function GetRadius2(const PFilletItem: IVertex; out IsAssigned: WordBool): Double; dispid 15;
    function GetControlPointsCount: Integer; dispid 16;
    function GetControlPointRadiusAtIndex(Index: Integer; out Location: Double; out PEdge: IEdge): Double; dispid 17;
    procedure SetControlPointRadiusAtIndex(Index: Integer; Location: Double; Radius: Double); dispid 18;
    function GetSetbackVertices: OleVariant; dispid 19;
    function GetSetbackVertexDistance(const Vtx: IDispatch; out EdgeVar: OleVariant): OleVariant; dispid 20;
    function SetSetbackVertices(VertVar: OleVariant): WordBool; dispid 21;
    function SetSetbackVertexDistance(const Vtx: IDispatch; EdgeVar: OleVariant; DistVar: OleVariant): WordBool; dispid 22;
    function GetSetbackVerticesCount: Integer; dispid 23;
    function IGetSetbackVertices(Count: Integer): IVertex; dispid 24;
    function GetSetbackDistanceCount(const Vtx: IVertex): Integer; dispid 25;
    function IGetSetbackVertexDistance(Count: Integer; const Vtx: IVertex; out EdgeArr: IEdge): Double; dispid 26;
    function ISetSetbackVertices(Count: Integer; var VertArr: IVertex): WordBool; dispid 27;
    function ISetSetbackVertexDistance(Count: Integer; const Vtx: IVertex; var EdgeArr: IEdge; 
                                       var DistArr: Double): WordBool; dispid 28;
  end;

// *********************************************************************//
// Interface: IExtrudeFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {931E939E-2FDE-49A8-8472-ABCF79E9F5CC}
// *********************************************************************//
  IExtrudeFeatureData2 = interface(IDispatch)
    ['{931E939E-2FDE-49A8-8472-ABCF79E9F5CC}']
    function GetEndCondition(Forward: WordBool): SYSINT; safecall;
    procedure SetEndCondition(Forward: WordBool; EndCondition: SYSINT); safecall;
    function GetDepth(Forward: WordBool): Double; safecall;
    procedure SetDepth(Forward: WordBool; Depth: Double); safecall;
    function GetWallThickness(Forward: WordBool): Double; safecall;
    procedure SetWallThickness(Forward: WordBool; WallThickness: Double); safecall;
    function GetDraftWhileExtruding(Forward: WordBool): WordBool; safecall;
    procedure SetDraftWhileExtruding(Forward: WordBool; DraftWhileExtrude: WordBool); safecall;
    function GetDraftOutward(Forward: WordBool): WordBool; safecall;
    procedure SetDraftOutward(Forward: WordBool; DraftOutward: WordBool); safecall;
    function GetDraftAngle(Forward: WordBool): Double; safecall;
    procedure SetDraftAngle(Forward: WordBool; DraftAngle: Double); safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function GetFace(Forward: WordBool): IDispatch; safecall;
    procedure SetFace(Forward: WordBool; const Face: IDispatch); safecall;
    function IGetFace(Forward: WordBool): IFace2; safecall;
    procedure ISetFace(Forward: WordBool; const Face: IFace2); safecall;
    function GetVertex(Forward: WordBool): IDispatch; safecall;
    procedure SetVertex(Forward: WordBool; const Face: IDispatch); safecall;
    function IGetVertex(Forward: WordBool): IVertex; safecall;
    procedure ISetVertex(Forward: WordBool; const Face: IVertex); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function Get_BothDirections: WordBool; safecall;
    procedure Set_BothDirections(BothDirections: WordBool); safecall;
    function Get_FlipSideToCut: WordBool; safecall;
    procedure Set_FlipSideToCut(Flip: WordBool); safecall;
    function IsBossFeature: WordBool; safecall;
    function IsThinFeature: WordBool; safecall;
    function IsBaseExtrude: WordBool; safecall;
    function Get_ThinWallType: SYSINT; safecall;
    procedure Set_ThinWallType(ThinWallType: SYSINT); safecall;
    function Get_CapEnds: WordBool; safecall;
    procedure Set_CapEnds(CapEnds: WordBool); safecall;
    function Get_CapThickness: Double; safecall;
    procedure Set_CapThickness(CapThickness: Double); safecall;
    function Get_Merge: WordBool; safecall;
    procedure Set_Merge(Merge: WordBool); safecall;
    function Get_FeatureScope: WordBool; safecall;
    procedure Set_FeatureScope(FeatScope: WordBool); safecall;
    function Get_AutoSelect: WordBool; safecall;
    procedure Set_AutoSelect(AutoSel: WordBool); safecall;
    function Get_FeatureScopeBodies: OleVariant; safecall;
    procedure Set_FeatureScopeBodies(BodyVar: OleVariant); safecall;
    function GetFeatureScopeBodiesCount: Integer; safecall;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; safecall;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); safecall;
    function GetReverseOffset(Fwd: WordBool): WordBool; safecall;
    procedure SetReverseOffset(Fwd: WordBool; ValIn: WordBool); safecall;
    function GetTranslateSurface(Fwd: WordBool): WordBool; safecall;
    procedure SetTranslateSurface(Fwd: WordBool; ValIn: WordBool); safecall;
    function GetEndConditionReference(Forward: WordBool; out ReferenceType: Integer): IDispatch; safecall;
    procedure SetEndConditionReference(Forward: WordBool; const PDisp: IDispatch); safecall;
    function Get_Contours: OleVariant; safecall;
    procedure Set_Contours(Contours: OleVariant); safecall;
    function GetContoursCount: Integer; safecall;
    function IGetContours(Count: Integer): IDispatch; safecall;
    procedure ISetContours(Count: Integer; var Contours: IDispatch); safecall;
    function GetDirectionReference(out Ref1: IDispatch; out Type1: Integer; out Ref2: IDispatch; 
                                   out Type2: Integer): Integer; safecall;
    procedure SetDirectionReference(const Ref1: IDispatch; const Ref2: IDispatch); safecall;
    function GetAutoFilletCorners: WordBool; safecall;
    function GetAutoFilletRadius: Double; safecall;
    function SetAutoFillet(AutoFillet: WordBool; Radius: Double): WordBool; safecall;
    function Get_FromType: Integer; safecall;
    procedure Set_FromType(FromType: Integer); safecall;
    procedure GetFromEntity(out FromEntity: IDispatch; out Type_: Integer); safecall;
    procedure SetFromEntity(const FromEntity: IDispatch); safecall;
    function Get_FromOffsetDistance: Double; safecall;
    procedure Set_FromOffsetDistance(FromOffsetDistance: Double); safecall;
    function Get_FromOffsetReverse: WordBool; safecall;
    procedure Set_FromOffsetReverse(FromOffsetReverse: WordBool); safecall;
    function Get_LinkToThickness: WordBool; safecall;
    procedure Set_LinkToThickness(LinkToThickness: WordBool); safecall;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property BothDirections: WordBool read Get_BothDirections write Set_BothDirections;
    property FlipSideToCut: WordBool read Get_FlipSideToCut write Set_FlipSideToCut;
    property ThinWallType: SYSINT read Get_ThinWallType write Set_ThinWallType;
    property CapEnds: WordBool read Get_CapEnds write Set_CapEnds;
    property CapThickness: Double read Get_CapThickness write Set_CapThickness;
    property Merge: WordBool read Get_Merge write Set_Merge;
    property FeatureScope: WordBool read Get_FeatureScope write Set_FeatureScope;
    property AutoSelect: WordBool read Get_AutoSelect write Set_AutoSelect;
    property FeatureScopeBodies: OleVariant read Get_FeatureScopeBodies write Set_FeatureScopeBodies;
    property Contours: OleVariant read Get_Contours write Set_Contours;
    property FromType: Integer read Get_FromType write Set_FromType;
    property FromOffsetDistance: Double read Get_FromOffsetDistance write Set_FromOffsetDistance;
    property FromOffsetReverse: WordBool read Get_FromOffsetReverse write Set_FromOffsetReverse;
    property LinkToThickness: WordBool read Get_LinkToThickness write Set_LinkToThickness;
  end;

// *********************************************************************//
// DispIntf:  IExtrudeFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {931E939E-2FDE-49A8-8472-ABCF79E9F5CC}
// *********************************************************************//
  IExtrudeFeatureData2Disp = dispinterface
    ['{931E939E-2FDE-49A8-8472-ABCF79E9F5CC}']
    function GetEndCondition(Forward: WordBool): SYSINT; dispid 1;
    procedure SetEndCondition(Forward: WordBool; EndCondition: SYSINT); dispid 2;
    function GetDepth(Forward: WordBool): Double; dispid 3;
    procedure SetDepth(Forward: WordBool; Depth: Double); dispid 4;
    function GetWallThickness(Forward: WordBool): Double; dispid 5;
    procedure SetWallThickness(Forward: WordBool; WallThickness: Double); dispid 6;
    function GetDraftWhileExtruding(Forward: WordBool): WordBool; dispid 7;
    procedure SetDraftWhileExtruding(Forward: WordBool; DraftWhileExtrude: WordBool); dispid 8;
    function GetDraftOutward(Forward: WordBool): WordBool; dispid 9;
    procedure SetDraftOutward(Forward: WordBool; DraftOutward: WordBool); dispid 10;
    function GetDraftAngle(Forward: WordBool): Double; dispid 11;
    procedure SetDraftAngle(Forward: WordBool; DraftAngle: Double); dispid 12;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 13;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 14;
    procedure ReleaseSelectionAccess; dispid 15;
    function GetFace(Forward: WordBool): IDispatch; dispid 16;
    procedure SetFace(Forward: WordBool; const Face: IDispatch); dispid 17;
    function IGetFace(Forward: WordBool): IFace2; dispid 18;
    procedure ISetFace(Forward: WordBool; const Face: IFace2); dispid 19;
    function GetVertex(Forward: WordBool): IDispatch; dispid 20;
    procedure SetVertex(Forward: WordBool; const Face: IDispatch); dispid 21;
    function IGetVertex(Forward: WordBool): IVertex; dispid 22;
    procedure ISetVertex(Forward: WordBool; const Face: IVertex); dispid 23;
    property ReverseDirection: WordBool dispid 24;
    property BothDirections: WordBool dispid 25;
    property FlipSideToCut: WordBool dispid 26;
    function IsBossFeature: WordBool; dispid 27;
    function IsThinFeature: WordBool; dispid 28;
    function IsBaseExtrude: WordBool; dispid 29;
    property ThinWallType: SYSINT dispid 30;
    property CapEnds: WordBool dispid 31;
    property CapThickness: Double dispid 32;
    property Merge: WordBool dispid 33;
    property FeatureScope: WordBool dispid 34;
    property AutoSelect: WordBool dispid 35;
    property FeatureScopeBodies: OleVariant dispid 36;
    function GetFeatureScopeBodiesCount: Integer; dispid 37;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; dispid 38;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); dispid 39;
    function GetReverseOffset(Fwd: WordBool): WordBool; dispid 40;
    procedure SetReverseOffset(Fwd: WordBool; ValIn: WordBool); dispid 41;
    function GetTranslateSurface(Fwd: WordBool): WordBool; dispid 42;
    procedure SetTranslateSurface(Fwd: WordBool; ValIn: WordBool); dispid 43;
    function GetEndConditionReference(Forward: WordBool; out ReferenceType: Integer): IDispatch; dispid 44;
    procedure SetEndConditionReference(Forward: WordBool; const PDisp: IDispatch); dispid 45;
    property Contours: OleVariant dispid 46;
    function GetContoursCount: Integer; dispid 47;
    function IGetContours(Count: Integer): IDispatch; dispid 48;
    procedure ISetContours(Count: Integer; var Contours: IDispatch); dispid 49;
    function GetDirectionReference(out Ref1: IDispatch; out Type1: Integer; out Ref2: IDispatch; 
                                   out Type2: Integer): Integer; dispid 50;
    procedure SetDirectionReference(const Ref1: IDispatch; const Ref2: IDispatch); dispid 51;
    function GetAutoFilletCorners: WordBool; dispid 52;
    function GetAutoFilletRadius: Double; dispid 53;
    function SetAutoFillet(AutoFillet: WordBool; Radius: Double): WordBool; dispid 54;
    property FromType: Integer dispid 55;
    procedure GetFromEntity(out FromEntity: IDispatch; out Type_: Integer); dispid 56;
    procedure SetFromEntity(const FromEntity: IDispatch); dispid 57;
    property FromOffsetDistance: Double dispid 58;
    property FromOffsetReverse: WordBool dispid 59;
    property LinkToThickness: WordBool dispid 60;
  end;

// *********************************************************************//
// Interface: IRevolveFeatureData2
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E055F0ED-DB3E-4528-A982-D66D289190A0}
// *********************************************************************//
  IRevolveFeatureData2 = interface(IDispatch)
    ['{E055F0ED-DB3E-4528-A982-D66D289190A0}']
    function GetRevolutionAngle(Forward: WordBool): Double; safecall;
    procedure SetRevolutionAngle(Forward: WordBool; Angle: Double); safecall;
    function GetWallThickness(Forward: WordBool): Double; safecall;
    procedure SetWallThickness(Forward: WordBool; WallThickness: Double); safecall;
    function Get_type_: SYSINT; safecall;
    procedure Set_type_(RevolveCut_type: SYSINT); safecall;
    function Get_ReverseDirection: WordBool; safecall;
    procedure Set_ReverseDirection(ReverseDirection: WordBool); safecall;
    function IsBossFeature: WordBool; safecall;
    function IsThinFeature: WordBool; safecall;
    function Get_ThinWallType: Integer; safecall;
    procedure Set_ThinWallType(ThinWallType: Integer); safecall;
    function Get_Merge: WordBool; safecall;
    procedure Set_Merge(Merge: WordBool); safecall;
    function Get_FeatureScope: WordBool; safecall;
    procedure Set_FeatureScope(FeatScope: WordBool); safecall;
    function Get_AutoSelect: WordBool; safecall;
    procedure Set_AutoSelect(AutoSel: WordBool); safecall;
    function Get_FeatureScopeBodies: OleVariant; safecall;
    procedure Set_FeatureScopeBodies(BodyVar: OleVariant); safecall;
    function GetFeatureScopeBodiesCount: Integer; safecall;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; safecall;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); safecall;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; safecall;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; safecall;
    procedure ReleaseSelectionAccess; safecall;
    function Get_Contours: OleVariant; safecall;
    procedure Set_Contours(Contours: OleVariant); safecall;
    function GetContoursCount: Integer; safecall;
    function IGetContours(Count: Integer): IDispatch; safecall;
    procedure ISetContours(Count: Integer; var Contours: IDispatch); safecall;
    function Get_Axis: IDispatch; safecall;
    procedure Set_Axis(const Axis: IDispatch); safecall;
    function GetAxisType: Integer; safecall;
    property type_: SYSINT read Get_type_ write Set_type_;
    property ReverseDirection: WordBool read Get_ReverseDirection write Set_ReverseDirection;
    property ThinWallType: Integer read Get_ThinWallType write Set_ThinWallType;
    property Merge: WordBool read Get_Merge write Set_Merge;
    property FeatureScope: WordBool read Get_FeatureScope write Set_FeatureScope;
    property AutoSelect: WordBool read Get_AutoSelect write Set_AutoSelect;
    property FeatureScopeBodies: OleVariant read Get_FeatureScopeBodies write Set_FeatureScopeBodies;
    property Contours: OleVariant read Get_Contours write Set_Contours;
    property Axis: IDispatch read Get_Axis write Set_Axis;
  end;

// *********************************************************************//
// DispIntf:  IRevolveFeatureData2Disp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {E055F0ED-DB3E-4528-A982-D66D289190A0}
// *********************************************************************//
  IRevolveFeatureData2Disp = dispinterface
    ['{E055F0ED-DB3E-4528-A982-D66D289190A0}']
    function GetRevolutionAngle(Forward: WordBool): Double; dispid 1;
    procedure SetRevolutionAngle(Forward: WordBool; Angle: Double); dispid 2;
    function GetWallThickness(Forward: WordBool): Double; dispid 3;
    procedure SetWallThickness(Forward: WordBool; WallThickness: Double); dispid 4;
    property type_: SYSINT dispid 5;
    property ReverseDirection: WordBool dispid 6;
    function IsBossFeature: WordBool; dispid 7;
    function IsThinFeature: WordBool; dispid 8;
    property ThinWallType: Integer dispid 9;
    property Merge: WordBool dispid 10;
    property FeatureScope: WordBool dispid 11;
    property AutoSelect: WordBool dispid 12;
    property FeatureScopeBodies: OleVariant dispid 13;
    function GetFeatureScopeBodiesCount: Integer; dispid 14;
    function IGetFeatureScopeBodies(Count: Integer): IBody2; dispid 15;
    procedure ISetFeatureScopeBodies(Count: Integer; var BodyArr: IBody2); dispid 16;
    function AccessSelections(const TopDoc: IDispatch; const Component: IDispatch): WordBool; dispid 17;
    function IAccessSelections(const TopDoc: IModelDoc2; const Component: IComponent2): WordBool; dispid 18;
    procedure ReleaseSelectionAccess; dispid 19;
    property Contours: OleVariant dispid 20;
    function GetContoursCount: Integer; dispid 21;
    function IGetContours(Count: Integer): IDispatch; dispid 22;
    procedure ISetContours(Count: Integer; var Contours: IDispatch); dispid 23;
    property Axis: IDispatch dispid 24;
    function GetAxisType: Integer; dispid 25;
  end;

// *********************************************************************//
// Interface: ILight
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9EEB4DE9-AC14-4A80-B484-7E41AF41B56C}
// *********************************************************************//
  ILight = interface(IDispatch)
    ['{9EEB4DE9-AC14-4A80-B484-7E41AF41B56C}']
    function GetID: Integer; safecall;
  end;

// *********************************************************************//
// DispIntf:  ILightDisp
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {9EEB4DE9-AC14-4A80-B484-7E41AF41B56C}
// *********************************************************************//
  ILightDisp = dispinterface
    ['{9EEB4DE9-AC14-4A80-B484-7E41AF41B56C}']
    function GetID: Integer; dispid 1;
  end;

// *********************************************************************//
// DispIntf:  DTaskpaneViewEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {D78003D7-378A-46D5-93B3-BCD8ABC9D34B}
// *********************************************************************//
  DTaskpaneViewEvents = dispinterface
    ['{D78003D7-378A-46D5-93B3-BCD8ABC9D34B}']
    function TaskPaneActivateNotify: Integer; dispid 1;
    function TaskPaneDeactivateNotify: Integer; dispid 2;
    function TaskPaneDestroyNotify: Integer; dispid 3;
  end;

// *********************************************************************//
// DispIntf:  DMouseEvents
// Flags:     (4112) Hidden Dispatchable
// GUID:      {5266B813-FB5F-4831-AED1-A60AB431994A}
// *********************************************************************//
  DMouseEvents = dispinterface
    ['{5266B813-FB5F-4831-AED1-A60AB431994A}']
    function MouseNotify(Message: Integer; WParam: Integer; LParam: Integer): Integer; dispid 1;
    function MouseMoveNotify(X: Integer; Y: Integer; WParam: Integer): Integer; dispid 2;
    function MouseLBtnDownNotify(X: Integer; Y: Integer; WParam: Integer): Integer; dispid 3;
    function MouseLBtnUpNotify(X: Integer; Y: Integer; WParam: Integer): Integer; dispid 4;
    function MouseRBtnDownNotify(X: Integer; Y: Integer; WParam: Integer): Integer; dispid 5;
    function MouseRBtnUpNotify(X: Integer; Y: Integer; WParam: Integer): Integer; dispid 6;
    function MouseMBtnDownNotify(X: Integer; Y: Integer; WParam: Integer): Integer; dispid 7;
    function MouseMBtnUpNotify(X: Integer; Y: Integer; WParam: Integer): Integer; dispid 8;
    function MouseLBtnDblClkNotify(X: Integer; Y: Integer; WParam: Integer): Integer; dispid 9;
    function MouseRBtnDblClkNotify(X: Integer; Y: Integer; WParam: Integer): Integer; dispid 10;
    function MouseMBtnDblClkNotify(X: Integer; Y: Integer; WParam: Integer): Integer; dispid 11;
    function MouseSelectNotify(Ix: Integer; Iy: Integer; X: Double; Y: Double; Z: Double): Integer; dispid 12;
  end;

// *********************************************************************//
// Interface: IPropertyManagerPageBitmap
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {363F31C7-54C0-4D22-AFC3-E82FD482CAF6}
// *********************************************************************//
  IPropertyManagerPageBitmap = interface(IDispatch)
    ['{363F31C7-54C0-4D22-AFC3-E82FD482CAF6}']
    function SetStandardBitmap(Bitmap: Integer): WordBool; safecall;
    function SetBitmapByName(const ColorBitmap: WideString; const MaskBitmap: WideString): WordBool; safecall;
  end;

// *********************************************************************//
// DispIntf:  IPropertyManagerPageBitmapDisp
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {363F31C7-54C0-4D22-AFC3-E82FD482CAF6}
// *********************************************************************//
  IPropertyManagerPageBitmapDisp = dispinterface
    ['{363F31C7-54C0-4D22-AFC3-E82FD482CAF6}']
    function SetStandardBitmap(Bitmap: Integer): WordBool; dispid 196609;
    function SetBitmapByName(const ColorBitmap: WideString; const MaskBitmap: WideString): WordBool; dispid 196610;
  end;

// *********************************************************************//
// The Class CoSldWorks_ provides a Create and CreateRemote method to          
// create instances of the default interface ISldWorks exposed by              
// the CoClass SldWorks_. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSldWorks_ = class
    class function Create: ISldWorks;
    class function CreateRemote(const MachineName: string): ISldWorks;
  end;

// *********************************************************************//
// The Class CoPartDoc provides a Create and CreateRemote method to          
// create instances of the default interface IPartDoc exposed by              
// the CoClass PartDoc. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPartDoc = class
    class function Create: IPartDoc;
    class function CreateRemote(const MachineName: string): IPartDoc;
  end;

// *********************************************************************//
// The Class CoDrawingDoc provides a Create and CreateRemote method to          
// create instances of the default interface IDrawingDoc exposed by              
// the CoClass DrawingDoc. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDrawingDoc = class
    class function Create: IDrawingDoc;
    class function CreateRemote(const MachineName: string): IDrawingDoc;
  end;

// *********************************************************************//
// The Class CoAssemblyDoc provides a Create and CreateRemote method to          
// create instances of the default interface IAssemblyDoc exposed by              
// the CoClass AssemblyDoc. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAssemblyDoc = class
    class function Create: IAssemblyDoc;
    class function CreateRemote(const MachineName: string): IAssemblyDoc;
  end;

// *********************************************************************//
// The Class CoFeature provides a Create and CreateRemote method to          
// create instances of the default interface IFeature exposed by              
// the CoClass Feature. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFeature = class
    class function Create: IFeature;
    class function CreateRemote(const MachineName: string): IFeature;
  end;

// *********************************************************************//
// The Class CoDimension provides a Create and CreateRemote method to          
// create instances of the default interface IDimension exposed by              
// the CoClass Dimension. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDimension = class
    class function Create: IDimension;
    class function CreateRemote(const MachineName: string): IDimension;
  end;

// *********************************************************************//
// The Class CoBody provides a Create and CreateRemote method to          
// create instances of the default interface IBody exposed by              
// the CoClass Body. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBody = class
    class function Create: IBody;
    class function CreateRemote(const MachineName: string): IBody;
  end;

// *********************************************************************//
// The Class CoFace provides a Create and CreateRemote method to          
// create instances of the default interface IFace exposed by              
// the CoClass Face. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFace = class
    class function Create: IFace;
    class function CreateRemote(const MachineName: string): IFace;
  end;

// *********************************************************************//
// The Class CoSurface provides a Create and CreateRemote method to          
// create instances of the default interface ISurface exposed by              
// the CoClass Surface. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurface = class
    class function Create: ISurface;
    class function CreateRemote(const MachineName: string): ISurface;
  end;

// *********************************************************************//
// The Class CoEdge provides a Create and CreateRemote method to          
// create instances of the default interface IEdge exposed by              
// the CoClass Edge. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEdge_ = class
    class function Create: IEdge;
    class function CreateRemote(const MachineName: string): IEdge;
  end;

// *********************************************************************//
// The Class CoCurve provides a Create and CreateRemote method to          
// create instances of the default interface ICurve exposed by              
// the CoClass Curve. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCurve = class
    class function Create: ICurve;
    class function CreateRemote(const MachineName: string): ICurve;
  end;

// *********************************************************************//
// The Class CoModelDoc provides a Create and CreateRemote method to          
// create instances of the default interface IModelDoc exposed by              
// the CoClass ModelDoc. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoModelDoc = class
    class function Create: IModelDoc;
    class function CreateRemote(const MachineName: string): IModelDoc;
  end;

// *********************************************************************//
// The Class CoFrame provides a Create and CreateRemote method to          
// create instances of the default interface IFrame exposed by              
// the CoClass Frame. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFrame = class
    class function Create: IFrame;
    class function CreateRemote(const MachineName: string): IFrame;
  end;

// *********************************************************************//
// The Class CoGtol provides a Create and CreateRemote method to          
// create instances of the default interface IGtol exposed by              
// the CoClass Gtol. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGtol = class
    class function Create: IGtol;
    class function CreateRemote(const MachineName: string): IGtol;
  end;

// *********************************************************************//
// The Class CoModelView provides a Create and CreateRemote method to          
// create instances of the default interface IModelView exposed by              
// the CoClass ModelView. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoModelView = class
    class function Create: IModelView;
    class function CreateRemote(const MachineName: string): IModelView;
  end;

// *********************************************************************//
// The Class CoMember provides a Create and CreateRemote method to          
// create instances of the default interface IMember exposed by              
// the CoClass Member. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMember = class
    class function Create: IMember;
    class function CreateRemote(const MachineName: string): IMember;
  end;

// *********************************************************************//
// The Class CoView provides a Create and CreateRemote method to          
// create instances of the default interface IView exposed by              
// the CoClass View. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoView = class
    class function Create: IView;
    class function CreateRemote(const MachineName: string): IView;
  end;

// *********************************************************************//
// The Class CoSketch provides a Create and CreateRemote method to          
// create instances of the default interface ISketch exposed by              
// the CoClass Sketch. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketch = class
    class function Create: ISketch;
    class function CreateRemote(const MachineName: string): ISketch;
  end;

// *********************************************************************//
// The Class CoLoop provides a Create and CreateRemote method to          
// create instances of the default interface ILoop exposed by              
// the CoClass Loop. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLoop = class
    class function Create: ILoop;
    class function CreateRemote(const MachineName: string): ILoop;
  end;

// *********************************************************************//
// The Class CoNote provides a Create and CreateRemote method to          
// create instances of the default interface INote exposed by              
// the CoClass Note. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoNote = class
    class function Create: INote;
    class function CreateRemote(const MachineName: string): INote;
  end;

// *********************************************************************//
// The Class CoCoEdge provides a Create and CreateRemote method to          
// create instances of the default interface ICoEdge exposed by              
// the CoClass CoEdge. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCoEdge = class
    class function Create: ICoEdge;
    class function CreateRemote(const MachineName: string): ICoEdge;
  end;

// *********************************************************************//
// The Class CoVertex provides a Create and CreateRemote method to          
// create instances of the default interface IVertex exposed by              
// the CoClass Vertex. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoVertex = class
    class function Create: IVertex;
    class function CreateRemote(const MachineName: string): IVertex;
  end;

// *********************************************************************//
// The Class CoSelectionMgr provides a Create and CreateRemote method to          
// create instances of the default interface ISelectionMgr exposed by              
// the CoClass SelectionMgr. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSelectionMgr = class
    class function Create: ISelectionMgr;
    class function CreateRemote(const MachineName: string): ISelectionMgr;
  end;

// *********************************************************************//
// The Class CoEnumFaces provides a Create and CreateRemote method to          
// create instances of the default interface IEnumFaces exposed by              
// the CoClass EnumFaces. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumFaces = class
    class function Create: IEnumFaces;
    class function CreateRemote(const MachineName: string): IEnumFaces;
  end;

// *********************************************************************//
// The Class CoEnumFaces2 provides a Create and CreateRemote method to          
// create instances of the default interface IEnumFaces2 exposed by              
// the CoClass EnumFaces2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumFaces2 = class
    class function Create: IEnumFaces2;
    class function CreateRemote(const MachineName: string): IEnumFaces2;
  end;

// *********************************************************************//
// The Class CoEnumLoops provides a Create and CreateRemote method to          
// create instances of the default interface IEnumLoops exposed by              
// the CoClass EnumLoops. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumLoops = class
    class function Create: IEnumLoops;
    class function CreateRemote(const MachineName: string): IEnumLoops;
  end;

// *********************************************************************//
// The Class CoEnumLoops2 provides a Create and CreateRemote method to          
// create instances of the default interface IEnumLoops2 exposed by              
// the CoClass EnumLoops2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumLoops2 = class
    class function Create: IEnumLoops2;
    class function CreateRemote(const MachineName: string): IEnumLoops2;
  end;

// *********************************************************************//
// The Class CoEnumEdges provides a Create and CreateRemote method to          
// create instances of the default interface IEnumEdges exposed by              
// the CoClass EnumEdges. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumEdges = class
    class function Create: IEnumEdges;
    class function CreateRemote(const MachineName: string): IEnumEdges;
  end;

// *********************************************************************//
// The Class CoEnumCoEdges provides a Create and CreateRemote method to          
// create instances of the default interface IEnumCoEdges exposed by              
// the CoClass EnumCoEdges. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumCoEdges = class
    class function Create: IEnumCoEdges;
    class function CreateRemote(const MachineName: string): IEnumCoEdges;
  end;

// *********************************************************************//
// The Class CoEnumBodies provides a Create and CreateRemote method to          
// create instances of the default interface IEnumBodies exposed by              
// the CoClass EnumBodies. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumBodies = class
    class function Create: IEnumBodies;
    class function CreateRemote(const MachineName: string): IEnumBodies;
  end;

// *********************************************************************//
// The Class CoEnumBodies2 provides a Create and CreateRemote method to          
// create instances of the default interface IEnumBodies2 exposed by              
// the CoClass EnumBodies2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumBodies2 = class
    class function Create: IEnumBodies2;
    class function CreateRemote(const MachineName: string): IEnumBodies2;
  end;

// *********************************************************************//
// The Class CoEntity provides a Create and CreateRemote method to          
// create instances of the default interface IEntity exposed by              
// the CoClass Entity. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEntity = class
    class function Create: IEntity;
    class function CreateRemote(const MachineName: string): IEntity;
  end;

// *********************************************************************//
// The Class CoAttributeDef provides a Create and CreateRemote method to          
// create instances of the default interface IAttributeDef exposed by              
// the CoClass AttributeDef. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAttributeDef = class
    class function Create: IAttributeDef;
    class function CreateRemote(const MachineName: string): IAttributeDef;
  end;

// *********************************************************************//
// The Class CoParameter provides a Create and CreateRemote method to          
// create instances of the default interface IParameter exposed by              
// the CoClass Parameter. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoParameter = class
    class function Create: IParameter;
    class function CreateRemote(const MachineName: string): IParameter;
  end;

// *********************************************************************//
// The Class CoAttribute provides a Create and CreateRemote method to          
// create instances of the default interface IAttribute exposed by              
// the CoClass Attribute. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAttribute = class
    class function Create: IAttribute;
    class function CreateRemote(const MachineName: string): IAttribute;
  end;

// *********************************************************************//
// The Class CoModeler provides a Create and CreateRemote method to          
// create instances of the default interface IModeler exposed by              
// the CoClass Modeler. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoModeler = class
    class function Create: IModeler;
    class function CreateRemote(const MachineName: string): IModeler;
  end;

// *********************************************************************//
// The Class CoFeatMgrView provides a Create and CreateRemote method to          
// create instances of the default interface IFeatMgrView exposed by              
// the CoClass FeatMgrView. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFeatMgrView = class
    class function Create: IFeatMgrView;
    class function CreateRemote(const MachineName: string): IFeatMgrView;
  end;

// *********************************************************************//
// The Class CoEnvironment provides a Create and CreateRemote method to          
// create instances of the default interface IEnvironment exposed by              
// the CoClass Environment. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnvironment = class
    class function Create: IEnvironment;
    class function CreateRemote(const MachineName: string): IEnvironment;
  end;

// *********************************************************************//
// The Class CoSheet provides a Create and CreateRemote method to          
// create instances of the default interface ISheet exposed by              
// the CoClass Sheet. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSheet = class
    class function Create: ISheet;
    class function CreateRemote(const MachineName: string): ISheet;
  end;

// *********************************************************************//
// The Class CoBomTable provides a Create and CreateRemote method to          
// create instances of the default interface IBomTable exposed by              
// the CoClass BomTable. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBomTable = class
    class function Create: IBomTable;
    class function CreateRemote(const MachineName: string): IBomTable;
  end;

// *********************************************************************//
// The Class CoRefPlane provides a Create and CreateRemote method to          
// create instances of the default interface IRefPlane exposed by              
// the CoClass RefPlane. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRefPlane = class
    class function Create: IRefPlane;
    class function CreateRemote(const MachineName: string): IRefPlane;
  end;

// *********************************************************************//
// The Class CoRefAxis provides a Create and CreateRemote method to          
// create instances of the default interface IRefAxis exposed by              
// the CoClass RefAxis. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRefAxis = class
    class function Create: IRefAxis;
    class function CreateRemote(const MachineName: string): IRefAxis;
  end;

// *********************************************************************//
// The Class CoMidSurface provides a Create and CreateRemote method to          
// create instances of the default interface IMidSurface exposed by              
// the CoClass MidSurface. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMidSurface = class
    class function Create: IMidSurface;
    class function CreateRemote(const MachineName: string): IMidSurface;
  end;

// *********************************************************************//
// The Class CoMate provides a Create and CreateRemote method to          
// create instances of the default interface IMate exposed by              
// the CoClass Mate. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMate = class
    class function Create: IMate;
    class function CreateRemote(const MachineName: string): IMate;
  end;

// *********************************************************************//
// The Class CoMateEntity provides a Create and CreateRemote method to          
// create instances of the default interface IMateEntity exposed by              
// the CoClass MateEntity. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMateEntity = class
    class function Create: IMateEntity;
    class function CreateRemote(const MachineName: string): IMateEntity;
  end;

// *********************************************************************//
// The Class CoSFSymbol provides a Create and CreateRemote method to          
// create instances of the default interface ISFSymbol exposed by              
// the CoClass SFSymbol. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSFSymbol = class
    class function Create: ISFSymbol;
    class function CreateRemote(const MachineName: string): ISFSymbol;
  end;

// *********************************************************************//
// The Class CoDatumTag provides a Create and CreateRemote method to          
// create instances of the default interface IDatumTag exposed by              
// the CoClass DatumTag. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDatumTag = class
    class function Create: IDatumTag;
    class function CreateRemote(const MachineName: string): IDatumTag;
  end;

// *********************************************************************//
// The Class CoDatumTargetSym provides a Create and CreateRemote method to          
// create instances of the default interface IDatumTargetSym exposed by              
// the CoClass DatumTargetSym. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDatumTargetSym = class
    class function Create: IDatumTargetSym;
    class function CreateRemote(const MachineName: string): IDatumTargetSym;
  end;

// *********************************************************************//
// The Class CoWeldSymbol provides a Create and CreateRemote method to          
// create instances of the default interface IWeldSymbol exposed by              
// the CoClass WeldSymbol. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWeldSymbol = class
    class function Create: IWeldSymbol;
    class function CreateRemote(const MachineName: string): IWeldSymbol;
  end;

// *********************************************************************//
// The Class CoConfiguration provides a Create and CreateRemote method to          
// create instances of the default interface IConfiguration exposed by              
// the CoClass Configuration. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoConfiguration = class
    class function Create: IConfiguration;
    class function CreateRemote(const MachineName: string): IConfiguration;
  end;

// *********************************************************************//
// The Class CoComponent provides a Create and CreateRemote method to          
// create instances of the default interface IComponent exposed by              
// the CoClass Component. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComponent = class
    class function Create: IComponent;
    class function CreateRemote(const MachineName: string): IComponent;
  end;

// *********************************************************************//
// The Class CoDisplayData provides a Create and CreateRemote method to          
// create instances of the default interface IDisplayData exposed by              
// the CoClass DisplayData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDisplayData = class
    class function Create: IDisplayData;
    class function CreateRemote(const MachineName: string): IDisplayData;
  end;

// *********************************************************************//
// The Class CoCThread provides a Create and CreateRemote method to          
// create instances of the default interface ICThread exposed by              
// the CoClass CThread. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCThread = class
    class function Create: ICThread;
    class function CreateRemote(const MachineName: string): ICThread;
  end;

// *********************************************************************//
// The Class CoDisplayDimension provides a Create and CreateRemote method to          
// create instances of the default interface IDisplayDimension exposed by              
// the CoClass DisplayDimension. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDisplayDimension = class
    class function Create: IDisplayDimension;
    class function CreateRemote(const MachineName: string): IDisplayDimension;
  end;

// *********************************************************************//
// The Class CoReferenceCurve provides a Create and CreateRemote method to          
// create instances of the default interface IReferenceCurve exposed by              
// the CoClass ReferenceCurve. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReferenceCurve = class
    class function Create: IReferenceCurve;
    class function CreateRemote(const MachineName: string): IReferenceCurve;
  end;

// *********************************************************************//
// The Class CoColorTable provides a Create and CreateRemote method to          
// create instances of the default interface IColorTable exposed by              
// the CoClass ColorTable. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoColorTable = class
    class function Create: IColorTable;
    class function CreateRemote(const MachineName: string): IColorTable;
  end;

// *********************************************************************//
// The Class CoSWPropertySheet provides a Create and CreateRemote method to          
// create instances of the default interface ISWPropertySheet exposed by              
// the CoClass SWPropertySheet. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSWPropertySheet = class
    class function Create: ISWPropertySheet;
    class function CreateRemote(const MachineName: string): ISWPropertySheet;
  end;

// *********************************************************************//
// The Class CoAnnotation provides a Create and CreateRemote method to          
// create instances of the default interface IAnnotation exposed by              
// the CoClass Annotation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotation = class
    class function Create: IAnnotation;
    class function CreateRemote(const MachineName: string): IAnnotation;
  end;

// *********************************************************************//
// The Class CoEnumDisplayDimensions provides a Create and CreateRemote method to          
// create instances of the default interface IEnumDisplayDimensions exposed by              
// the CoClass EnumDisplayDimensions. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumDisplayDimensions = class
    class function Create: IEnumDisplayDimensions;
    class function CreateRemote(const MachineName: string): IEnumDisplayDimensions;
  end;

// *********************************************************************//
// The Class CoRibFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IRibFeatureData exposed by              
// the CoClass RibFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRibFeatureData = class
    class function Create: IRibFeatureData;
    class function CreateRemote(const MachineName: string): IRibFeatureData;
  end;

// *********************************************************************//
// The Class CoDomeFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IDomeFeatureData exposed by              
// the CoClass DomeFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDomeFeatureData = class
    class function Create: IDomeFeatureData;
    class function CreateRemote(const MachineName: string): IDomeFeatureData;
  end;

// *********************************************************************//
// The Class CoEnumModelViews provides a Create and CreateRemote method to          
// create instances of the default interface IEnumModelViews exposed by              
// the CoClass EnumModelViews. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumModelViews = class
    class function Create: IEnumModelViews;
    class function CreateRemote(const MachineName: string): IEnumModelViews;
  end;

// *********************************************************************//
// The Class CoEnumDocuments provides a Create and CreateRemote method to          
// create instances of the default interface IEnumDocuments exposed by              
// the CoClass EnumDocuments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumDocuments = class
    class function Create: IEnumDocuments;
    class function CreateRemote(const MachineName: string): IEnumDocuments;
  end;

// *********************************************************************//
// The Class CoEnumDocuments2 provides a Create and CreateRemote method to          
// create instances of the default interface IEnumDocuments2 exposed by              
// the CoClass EnumDocuments2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumDocuments2 = class
    class function Create: IEnumDocuments2;
    class function CreateRemote(const MachineName: string): IEnumDocuments2;
  end;

// *********************************************************************//
// The Class CoCustomSymbol provides a Create and CreateRemote method to          
// create instances of the default interface ICustomSymbol exposed by              
// the CoClass CustomSymbol. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomSymbol = class
    class function Create: ICustomSymbol;
    class function CreateRemote(const MachineName: string): ICustomSymbol;
  end;

// *********************************************************************//
// The Class CoDetailingDefaults provides a Create and CreateRemote method to          
// create instances of the default interface IDetailingDefaults exposed by              
// the CoClass DetailingDefaults. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDetailingDefaults = class
    class function Create: IDetailingDefaults;
    class function CreateRemote(const MachineName: string): IDetailingDefaults;
  end;

// *********************************************************************//
// The Class CoTextFormat provides a Create and CreateRemote method to          
// create instances of the default interface ITextFormat exposed by              
// the CoClass TextFormat. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTextFormat = class
    class function Create: ITextFormat;
    class function CreateRemote(const MachineName: string): ITextFormat;
  end;

// *********************************************************************//
// The Class CoSketchPoint provides a Create and CreateRemote method to          
// create instances of the default interface ISketchPoint exposed by              
// the CoClass SketchPoint. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchPoint = class
    class function Create: ISketchPoint;
    class function CreateRemote(const MachineName: string): ISketchPoint;
  end;

// *********************************************************************//
// The Class CoSketchSegment provides a Create and CreateRemote method to          
// create instances of the default interface ISketchSegment exposed by              
// the CoClass SketchSegment. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchSegment = class
    class function Create: ISketchSegment;
    class function CreateRemote(const MachineName: string): ISketchSegment;
  end;

// *********************************************************************//
// The Class CoSketchLine provides a Create and CreateRemote method to          
// create instances of the default interface ISketchLine exposed by              
// the CoClass SketchLine. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchLine = class
    class function Create: ISketchLine;
    class function CreateRemote(const MachineName: string): ISketchLine;
  end;

// *********************************************************************//
// The Class CoSketchArc provides a Create and CreateRemote method to          
// create instances of the default interface ISketchArc exposed by              
// the CoClass SketchArc. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchArc = class
    class function Create: ISketchArc;
    class function CreateRemote(const MachineName: string): ISketchArc;
  end;

// *********************************************************************//
// The Class CoSketchText provides a Create and CreateRemote method to          
// create instances of the default interface ISketchText exposed by              
// the CoClass SketchText. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchText = class
    class function Create: ISketchText;
    class function CreateRemote(const MachineName: string): ISketchText;
  end;

// *********************************************************************//
// The Class CoSketchEllipse provides a Create and CreateRemote method to          
// create instances of the default interface ISketchEllipse exposed by              
// the CoClass SketchEllipse. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchEllipse = class
    class function Create: ISketchEllipse;
    class function CreateRemote(const MachineName: string): ISketchEllipse;
  end;

// *********************************************************************//
// The Class CoSketchParabola provides a Create and CreateRemote method to          
// create instances of the default interface ISketchParabola exposed by              
// the CoClass SketchParabola. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchParabola = class
    class function Create: ISketchParabola;
    class function CreateRemote(const MachineName: string): ISketchParabola;
  end;

// *********************************************************************//
// The Class CoSketchSpline provides a Create and CreateRemote method to          
// create instances of the default interface ISketchSpline exposed by              
// the CoClass SketchSpline. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchSpline = class
    class function Create: ISketchSpline;
    class function CreateRemote(const MachineName: string): ISketchSpline;
  end;

// *********************************************************************//
// The Class CoEnumSketchPoints provides a Create and CreateRemote method to          
// create instances of the default interface IEnumSketchPoints exposed by              
// the CoClass EnumSketchPoints. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumSketchPoints = class
    class function Create: IEnumSketchPoints;
    class function CreateRemote(const MachineName: string): IEnumSketchPoints;
  end;

// *********************************************************************//
// The Class CoEnumSketchSegments provides a Create and CreateRemote method to          
// create instances of the default interface IEnumSketchSegments exposed by              
// the CoClass EnumSketchSegments. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumSketchSegments = class
    class function Create: IEnumSketchSegments;
    class function CreateRemote(const MachineName: string): IEnumSketchSegments;
  end;

// *********************************************************************//
// The Class CoLightDialog provides a Create and CreateRemote method to          
// create instances of the default interface ILightDialog exposed by              
// the CoClass LightDialog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLightDialog = class
    class function Create: ILightDialog;
    class function CreateRemote(const MachineName: string): ILightDialog;
  end;

// *********************************************************************//
// The Class CoLayer provides a Create and CreateRemote method to          
// create instances of the default interface ILayer exposed by              
// the CoClass Layer. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLayer = class
    class function Create: ILayer;
    class function CreateRemote(const MachineName: string): ILayer;
  end;

// *********************************************************************//
// The Class CoLayerMgr provides a Create and CreateRemote method to          
// create instances of the default interface ILayerMgr exposed by              
// the CoClass LayerMgr. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLayerMgr = class
    class function Create: ILayerMgr;
    class function CreateRemote(const MachineName: string): ILayerMgr;
  end;

// *********************************************************************//
// The Class CoDesignTable provides a Create and CreateRemote method to          
// create instances of the default interface IDesignTable exposed by              
// the CoClass DesignTable. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDesignTable = class
    class function Create: IDesignTable;
    class function CreateRemote(const MachineName: string): IDesignTable;
  end;

// *********************************************************************//
// The Class CoSketchHatch provides a Create and CreateRemote method to          
// create instances of the default interface ISketchHatch exposed by              
// the CoClass SketchHatch. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchHatch = class
    class function Create: ISketchHatch;
    class function CreateRemote(const MachineName: string): ISketchHatch;
  end;

// *********************************************************************//
// The Class CoEnumSketchHatches provides a Create and CreateRemote method to          
// create instances of the default interface IEnumSketchHatches exposed by              
// the CoClass EnumSketchHatches. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumSketchHatches = class
    class function Create: IEnumSketchHatches;
    class function CreateRemote(const MachineName: string): IEnumSketchHatches;
  end;

// *********************************************************************//
// The Class CoEnumCurves provides a Create and CreateRemote method to          
// create instances of the default interface IEnumCurves exposed by              
// the CoClass EnumCurves. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumCurves = class
    class function Create: IEnumCurves;
    class function CreateRemote(const MachineName: string): IEnumCurves;
  end;

// *********************************************************************//
// The Class CoSimpleHoleFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISimpleHoleFeatureData exposed by              
// the CoClass SimpleHoleFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSimpleHoleFeatureData = class
    class function Create: ISimpleHoleFeatureData;
    class function CreateRemote(const MachineName: string): ISimpleHoleFeatureData;
  end;

// *********************************************************************//
// The Class CoWizardHoleFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IWizardHoleFeatureData exposed by              
// the CoClass WizardHoleFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWizardHoleFeatureData = class
    class function Create: IWizardHoleFeatureData;
    class function CreateRemote(const MachineName: string): IWizardHoleFeatureData;
  end;

// *********************************************************************//
// The Class CoChamferFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IChamferFeatureData exposed by              
// the CoClass ChamferFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoChamferFeatureData = class
    class function Create: IChamferFeatureData;
    class function CreateRemote(const MachineName: string): IChamferFeatureData;
  end;

// *********************************************************************//
// The Class CoDraftFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IDraftFeatureData exposed by              
// the CoClass DraftFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDraftFeatureData = class
    class function Create: IDraftFeatureData;
    class function CreateRemote(const MachineName: string): IDraftFeatureData;
  end;

// *********************************************************************//
// The Class CoSimpleFilletFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISimpleFilletFeatureData exposed by              
// the CoClass SimpleFilletFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSimpleFilletFeatureData = class
    class function Create: ISimpleFilletFeatureData;
    class function CreateRemote(const MachineName: string): ISimpleFilletFeatureData;
  end;

// *********************************************************************//
// The Class CoVariableFilletFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IVariableFilletFeatureData exposed by              
// the CoClass VariableFilletFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoVariableFilletFeatureData = class
    class function Create: IVariableFilletFeatureData;
    class function CreateRemote(const MachineName: string): IVariableFilletFeatureData;
  end;

// *********************************************************************//
// The Class CoExtrudeFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IExtrudeFeatureData exposed by              
// the CoClass ExtrudeFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExtrudeFeatureData = class
    class function Create: IExtrudeFeatureData;
    class function CreateRemote(const MachineName: string): IExtrudeFeatureData;
  end;

// *********************************************************************//
// The Class CoRevolveFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IRevolveFeatureData exposed by              
// the CoClass RevolveFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRevolveFeatureData = class
    class function Create: IRevolveFeatureData;
    class function CreateRemote(const MachineName: string): IRevolveFeatureData;
  end;

// *********************************************************************//
// The Class CoSdmDoc provides a Create and CreateRemote method to          
// create instances of the default interface ISdmDoc exposed by              
// the CoClass SdmDoc. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSdmDoc = class
    class function Create: ISdmDoc;
    class function CreateRemote(const MachineName: string): ISdmDoc;
  end;

// *********************************************************************//
// The Class CoDrSection provides a Create and CreateRemote method to          
// create instances of the default interface IDrSection exposed by              
// the CoClass DrSection. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDrSection = class
    class function Create: IDrSection;
    class function CreateRemote(const MachineName: string): IDrSection;
  end;

// *********************************************************************//
// The Class CoEnumComponents provides a Create and CreateRemote method to          
// create instances of the default interface IEnumComponents exposed by              
// the CoClass EnumComponents. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumComponents = class
    class function Create: IEnumComponents;
    class function CreateRemote(const MachineName: string): IEnumComponents;
  end;

// *********************************************************************//
// The Class CoEnumComponents2 provides a Create and CreateRemote method to          
// create instances of the default interface IEnumComponents2 exposed by              
// the CoClass EnumComponents2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumComponents2 = class
    class function Create: IEnumComponents2;
    class function CreateRemote(const MachineName: string): IEnumComponents2;
  end;

// *********************************************************************//
// The Class CoEnumDrSections provides a Create and CreateRemote method to          
// create instances of the default interface IEnumDrSections exposed by              
// the CoClass EnumDrSections. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEnumDrSections = class
    class function Create: IEnumDrSections;
    class function CreateRemote(const MachineName: string): IEnumDrSections;
  end;

// *********************************************************************//
// The Class CoExplodeStep provides a Create and CreateRemote method to          
// create instances of the default interface IExplodeStep exposed by              
// the CoClass ExplodeStep. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExplodeStep = class
    class function Create: IExplodeStep;
    class function CreateRemote(const MachineName: string): IExplodeStep;
  end;

// *********************************************************************//
// The Class CoMathUtility provides a Create and CreateRemote method to          
// create instances of the default interface IMathUtility exposed by              
// the CoClass MathUtility. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMathUtility = class
    class function Create: IMathUtility;
    class function CreateRemote(const MachineName: string): IMathUtility;
  end;

// *********************************************************************//
// The Class CoMathTransform provides a Create and CreateRemote method to          
// create instances of the default interface IMathTransform exposed by              
// the CoClass MathTransform. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMathTransform = class
    class function Create: IMathTransform;
    class function CreateRemote(const MachineName: string): IMathTransform;
  end;

// *********************************************************************//
// The Class CoMathPoint provides a Create and CreateRemote method to          
// create instances of the default interface IMathPoint exposed by              
// the CoClass MathPoint. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMathPoint = class
    class function Create: IMathPoint;
    class function CreateRemote(const MachineName: string): IMathPoint;
  end;

// *********************************************************************//
// The Class CoMathVector provides a Create and CreateRemote method to          
// create instances of the default interface IMathVector exposed by              
// the CoClass MathVector. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMathVector = class
    class function Create: IMathVector;
    class function CreateRemote(const MachineName: string): IMathVector;
  end;

// *********************************************************************//
// The Class CoMirrorPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IMirrorPatternFeatureData exposed by              
// the CoClass MirrorPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMirrorPatternFeatureData = class
    class function Create: IMirrorPatternFeatureData;
    class function CreateRemote(const MachineName: string): IMirrorPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoDetailCircle provides a Create and CreateRemote method to          
// create instances of the default interface IDetailCircle exposed by              
// the CoClass DetailCircle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDetailCircle = class
    class function Create: IDetailCircle;
    class function CreateRemote(const MachineName: string): IDetailCircle;
  end;

// *********************************************************************//
// The Class CoCircularPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ICircularPatternFeatureData exposed by              
// the CoClass CircularPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCircularPatternFeatureData = class
    class function Create: ICircularPatternFeatureData;
    class function CreateRemote(const MachineName: string): ICircularPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoLinearPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ILinearPatternFeatureData exposed by              
// the CoClass LinearPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLinearPatternFeatureData = class
    class function Create: ILinearPatternFeatureData;
    class function CreateRemote(const MachineName: string): ILinearPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoTablePatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ITablePatternFeatureData exposed by              
// the CoClass TablePatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTablePatternFeatureData = class
    class function Create: ITablePatternFeatureData;
    class function CreateRemote(const MachineName: string): ITablePatternFeatureData;
  end;

// *********************************************************************//
// The Class CoSketchPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISketchPatternFeatureData exposed by              
// the CoClass SketchPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchPatternFeatureData = class
    class function Create: ISketchPatternFeatureData;
    class function CreateRemote(const MachineName: string): ISketchPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoMirrorSolidFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IMirrorSolidFeatureData exposed by              
// the CoClass MirrorSolidFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMirrorSolidFeatureData = class
    class function Create: IMirrorSolidFeatureData;
    class function CreateRemote(const MachineName: string): IMirrorSolidFeatureData;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPage provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPage exposed by              
// the CoClass PropertyManagerPage. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPage = class
    class function Create: IPropertyManagerPage;
    class function CreateRemote(const MachineName: string): IPropertyManagerPage;
  end;

// *********************************************************************//
// The Class CoProjectionArrow provides a Create and CreateRemote method to          
// create instances of the default interface IProjectionArrow exposed by              
// the CoClass ProjectionArrow. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoProjectionArrow = class
    class function Create: IProjectionArrow;
    class function CreateRemote(const MachineName: string): IProjectionArrow;
  end;

// *********************************************************************//
// The Class CoTessellation provides a Create and CreateRemote method to          
// create instances of the default interface ITessellation exposed by              
// the CoClass Tessellation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTessellation = class
    class function Create: ITessellation;
    class function CreateRemote(const MachineName: string): ITessellation;
  end;

// *********************************************************************//
// The Class CoSheetMetalFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISheetMetalFeatureData exposed by              
// the CoClass SheetMetalFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSheetMetalFeatureData = class
    class function Create: ISheetMetalFeatureData;
    class function CreateRemote(const MachineName: string): ISheetMetalFeatureData;
  end;

// *********************************************************************//
// The Class CoOneBendFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IOneBendFeatureData exposed by              
// the CoClass OneBendFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoOneBendFeatureData = class
    class function Create: IOneBendFeatureData;
    class function CreateRemote(const MachineName: string): IOneBendFeatureData;
  end;

// *********************************************************************//
// The Class CoBendsFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IBendsFeatureData exposed by              
// the CoClass BendsFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBendsFeatureData = class
    class function Create: IBendsFeatureData;
    class function CreateRemote(const MachineName: string): IBendsFeatureData;
  end;

// *********************************************************************//
// The Class CoUserUnit provides a Create and CreateRemote method to          
// create instances of the default interface IUserUnit exposed by              
// the CoClass UserUnit. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUserUnit = class
    class function Create: IUserUnit;
    class function CreateRemote(const MachineName: string): IUserUnit;
  end;

// *********************************************************************//
// The Class CoBaseFlangeFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IBaseFlangeFeatureData exposed by              
// the CoClass BaseFlangeFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBaseFlangeFeatureData = class
    class function Create: IBaseFlangeFeatureData;
    class function CreateRemote(const MachineName: string): IBaseFlangeFeatureData;
  end;

// *********************************************************************//
// The Class CoEdgeFlangeFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IEdgeFlangeFeatureData exposed by              
// the CoClass EdgeFlangeFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEdgeFlangeFeatureData = class
    class function Create: IEdgeFlangeFeatureData;
    class function CreateRemote(const MachineName: string): IEdgeFlangeFeatureData;
  end;

// *********************************************************************//
// The Class CoMiterFlangeFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IMiterFlangeFeatureData exposed by              
// the CoClass MiterFlangeFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMiterFlangeFeatureData = class
    class function Create: IMiterFlangeFeatureData;
    class function CreateRemote(const MachineName: string): IMiterFlangeFeatureData;
  end;

// *********************************************************************//
// The Class CoSketchedBendFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISketchedBendFeatureData exposed by              
// the CoClass SketchedBendFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchedBendFeatureData = class
    class function Create: ISketchedBendFeatureData;
    class function CreateRemote(const MachineName: string): ISketchedBendFeatureData;
  end;

// *********************************************************************//
// The Class CoClosedCornerFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IClosedCornerFeatureData exposed by              
// the CoClass ClosedCornerFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoClosedCornerFeatureData = class
    class function Create: IClosedCornerFeatureData;
    class function CreateRemote(const MachineName: string): IClosedCornerFeatureData;
  end;

// *********************************************************************//
// The Class CoFoldsFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IFoldsFeatureData exposed by              
// the CoClass FoldsFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFoldsFeatureData = class
    class function Create: IFoldsFeatureData;
    class function CreateRemote(const MachineName: string): IFoldsFeatureData;
  end;

// *********************************************************************//
// The Class CoFlatPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IFlatPatternFeatureData exposed by              
// the CoClass FlatPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFlatPatternFeatureData = class
    class function Create: IFlatPatternFeatureData;
    class function CreateRemote(const MachineName: string): IFlatPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoLocalLinearPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ILocalLinearPatternFeatureData exposed by              
// the CoClass LocalLinearPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLocalLinearPatternFeatureData = class
    class function Create: ILocalLinearPatternFeatureData;
    class function CreateRemote(const MachineName: string): ILocalLinearPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoLocalCircularPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ILocalCircularPatternFeatureData exposed by              
// the CoClass LocalCircularPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLocalCircularPatternFeatureData = class
    class function Create: ILocalCircularPatternFeatureData;
    class function CreateRemote(const MachineName: string): ILocalCircularPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoDerivedPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IDerivedPatternFeatureData exposed by              
// the CoClass DerivedPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDerivedPatternFeatureData = class
    class function Create: IDerivedPatternFeatureData;
    class function CreateRemote(const MachineName: string): IDerivedPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoBody2 provides a Create and CreateRemote method to          
// create instances of the default interface IBody2 exposed by              
// the CoClass Body2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBody2 = class
    class function Create: IBody2;
    class function CreateRemote(const MachineName: string): IBody2;
  end;

// *********************************************************************//
// The Class CoFace2 provides a Create and CreateRemote method to          
// create instances of the default interface IFace2 exposed by              
// the CoClass Face2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFace2 = class
    class function Create: IFace2;
    class function CreateRemote(const MachineName: string): IFace2;
  end;

// *********************************************************************//
// The Class CoModelDoc2 provides a Create and CreateRemote method to          
// create instances of the default interface IModelDoc2 exposed by              
// the CoClass ModelDoc2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoModelDoc2 = class
    class function Create: IModelDoc2;
    class function CreateRemote(const MachineName: string): IModelDoc2;
  end;

// *********************************************************************//
// The Class CoLoop2 provides a Create and CreateRemote method to          
// create instances of the default interface ILoop2 exposed by              
// the CoClass Loop2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLoop2 = class
    class function Create: ILoop2;
    class function CreateRemote(const MachineName: string): ILoop2;
  end;

// *********************************************************************//
// The Class CoMidSurface2 provides a Create and CreateRemote method to          
// create instances of the default interface IMidSurface2 exposed by              
// the CoClass MidSurface2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMidSurface2 = class
    class function Create: IMidSurface2;
    class function CreateRemote(const MachineName: string): IMidSurface2;
  end;

// *********************************************************************//
// The Class CoComponent2 provides a Create and CreateRemote method to          
// create instances of the default interface IComponent2 exposed by              
// the CoClass Component2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComponent2 = class
    class function Create: IComponent2;
    class function CreateRemote(const MachineName: string): IComponent2;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPage2 provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPage2 exposed by              
// the CoClass PropertyManagerPage2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPage2 = class
    class function Create: IPropertyManagerPage2;
    class function CreateRemote(const MachineName: string): IPropertyManagerPage2;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageGroup provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageGroup exposed by              
// the CoClass PropertyManagerPageGroup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageGroup = class
    class function Create: IPropertyManagerPageGroup;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageGroup;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageControl provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageControl exposed by              
// the CoClass PropertyManagerPageControl. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageControl = class
    class function Create: IPropertyManagerPageControl;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageControl;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageLabel provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageLabel exposed by              
// the CoClass PropertyManagerPageLabel. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageLabel = class
    class function Create: IPropertyManagerPageLabel;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageLabel;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageCheckbox provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageCheckbox exposed by              
// the CoClass PropertyManagerPageCheckbox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageCheckbox = class
    class function Create: IPropertyManagerPageCheckbox;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageCheckbox;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageButton provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageButton exposed by              
// the CoClass PropertyManagerPageButton. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageButton = class
    class function Create: IPropertyManagerPageButton;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageButton;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageOption provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageOption exposed by              
// the CoClass PropertyManagerPageOption. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageOption = class
    class function Create: IPropertyManagerPageOption;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageOption;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageTextbox provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageTextbox exposed by              
// the CoClass PropertyManagerPageTextbox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageTextbox = class
    class function Create: IPropertyManagerPageTextbox;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageTextbox;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageListbox provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageListbox exposed by              
// the CoClass PropertyManagerPageListbox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageListbox = class
    class function Create: IPropertyManagerPageListbox;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageListbox;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageCombobox provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageCombobox exposed by              
// the CoClass PropertyManagerPageCombobox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageCombobox = class
    class function Create: IPropertyManagerPageCombobox;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageCombobox;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageNumberbox provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageNumberbox exposed by              
// the CoClass PropertyManagerPageNumberbox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageNumberbox = class
    class function Create: IPropertyManagerPageNumberbox;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageNumberbox;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageSelectionbox provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageSelectionbox exposed by              
// the CoClass PropertyManagerPageSelectionbox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageSelectionbox = class
    class function Create: IPropertyManagerPageSelectionbox;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageSelectionbox;
  end;

// *********************************************************************//
// The Class CoMultiJogLeader provides a Create and CreateRemote method to          
// create instances of the default interface IMultiJogLeader exposed by              
// the CoClass MultiJogLeader. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMultiJogLeader = class
    class function Create: IMultiJogLeader;
    class function CreateRemote(const MachineName: string): IMultiJogLeader;
  end;

// *********************************************************************//
// The Class CoProjectionCurveFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IProjectionCurveFeatureData exposed by              
// the CoClass ProjectionCurveFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoProjectionCurveFeatureData = class
    class function Create: IProjectionCurveFeatureData;
    class function CreateRemote(const MachineName: string): IProjectionCurveFeatureData;
  end;

// *********************************************************************//
// The Class CoScaleFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IScaleFeatureData exposed by              
// the CoClass ScaleFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoScaleFeatureData = class
    class function Create: IScaleFeatureData;
    class function CreateRemote(const MachineName: string): IScaleFeatureData;
  end;

// *********************************************************************//
// The Class CoShellFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IShellFeatureData exposed by              
// the CoClass ShellFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoShellFeatureData = class
    class function Create: IShellFeatureData;
    class function CreateRemote(const MachineName: string): IShellFeatureData;
  end;

// *********************************************************************//
// The Class CoSweepFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISweepFeatureData exposed by              
// the CoClass SweepFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSweepFeatureData = class
    class function Create: ISweepFeatureData;
    class function CreateRemote(const MachineName: string): ISweepFeatureData;
  end;

// *********************************************************************//
// The Class CoLoftFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ILoftFeatureData exposed by              
// the CoClass LoftFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLoftFeatureData = class
    class function Create: ILoftFeatureData;
    class function CreateRemote(const MachineName: string): ILoftFeatureData;
  end;

// *********************************************************************//
// The Class CoThickenFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IThickenFeatureData exposed by              
// the CoClass ThickenFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoThickenFeatureData = class
    class function Create: IThickenFeatureData;
    class function CreateRemote(const MachineName: string): IThickenFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfCutFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfaceCutFeatureData exposed by              
// the CoClass SurfCutFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfCutFeatureData = class
    class function Create: ISurfaceCutFeatureData;
    class function CreateRemote(const MachineName: string): ISurfaceCutFeatureData;
  end;

// *********************************************************************//
// The Class CoReplaceFaceFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IReplaceFaceFeatureData exposed by              
// the CoClass ReplaceFaceFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReplaceFaceFeatureData = class
    class function Create: IReplaceFaceFeatureData;
    class function CreateRemote(const MachineName: string): IReplaceFaceFeatureData;
  end;

// *********************************************************************//
// The Class CoRibFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IRibFeatureData2 exposed by              
// the CoClass RibFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRibFeatureData2 = class
    class function Create: IRibFeatureData2;
    class function CreateRemote(const MachineName: string): IRibFeatureData2;
  end;

// *********************************************************************//
// The Class CoDomeFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IDomeFeatureData2 exposed by              
// the CoClass DomeFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDomeFeatureData2 = class
    class function Create: IDomeFeatureData2;
    class function CreateRemote(const MachineName: string): IDomeFeatureData2;
  end;

// *********************************************************************//
// The Class CoSimpleHoleFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface ISimpleHoleFeatureData2 exposed by              
// the CoClass SimpleHoleFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSimpleHoleFeatureData2 = class
    class function Create: ISimpleHoleFeatureData2;
    class function CreateRemote(const MachineName: string): ISimpleHoleFeatureData2;
  end;

// *********************************************************************//
// The Class CoWizardHoleFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IWizardHoleFeatureData2 exposed by              
// the CoClass WizardHoleFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWizardHoleFeatureData2 = class
    class function Create: IWizardHoleFeatureData2;
    class function CreateRemote(const MachineName: string): IWizardHoleFeatureData2;
  end;

// *********************************************************************//
// The Class CoChamferFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IChamferFeatureData2 exposed by              
// the CoClass ChamferFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoChamferFeatureData2 = class
    class function Create: IChamferFeatureData2;
    class function CreateRemote(const MachineName: string): IChamferFeatureData2;
  end;

// *********************************************************************//
// The Class CoDraftFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IDraftFeatureData2 exposed by              
// the CoClass DraftFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDraftFeatureData2 = class
    class function Create: IDraftFeatureData2;
    class function CreateRemote(const MachineName: string): IDraftFeatureData2;
  end;

// *********************************************************************//
// The Class CoSimpleFilletFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface ISimpleFilletFeatureData2 exposed by              
// the CoClass SimpleFilletFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSimpleFilletFeatureData2 = class
    class function Create: ISimpleFilletFeatureData2;
    class function CreateRemote(const MachineName: string): ISimpleFilletFeatureData2;
  end;

// *********************************************************************//
// The Class CoVariableFilletFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IVariableFilletFeatureData2 exposed by              
// the CoClass VariableFilletFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoVariableFilletFeatureData2 = class
    class function Create: IVariableFilletFeatureData2;
    class function CreateRemote(const MachineName: string): IVariableFilletFeatureData2;
  end;

// *********************************************************************//
// The Class CoExtrudeFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IExtrudeFeatureData2 exposed by              
// the CoClass ExtrudeFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExtrudeFeatureData2 = class
    class function Create: IExtrudeFeatureData2;
    class function CreateRemote(const MachineName: string): IExtrudeFeatureData2;
  end;

// *********************************************************************//
// The Class CoRevolveFeatureData2 provides a Create and CreateRemote method to          
// create instances of the default interface IRevolveFeatureData2 exposed by              
// the CoClass RevolveFeatureData2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRevolveFeatureData2 = class
    class function Create: IRevolveFeatureData2;
    class function CreateRemote(const MachineName: string): IRevolveFeatureData2;
  end;

// *********************************************************************//
// The Class CoMacroFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IMacroFeatureData exposed by              
// the CoClass MacroFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMacroFeatureData = class
    class function Create: IMacroFeatureData;
    class function CreateRemote(const MachineName: string): IMacroFeatureData;
  end;

// *********************************************************************//
// The Class CoDowelSymbol provides a Create and CreateRemote method to          
// create instances of the default interface IDowelSymbol exposed by              
// the CoClass DowelSymbol. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDowelSymbol = class
    class function Create: IDowelSymbol;
    class function CreateRemote(const MachineName: string): IDowelSymbol;
  end;

// *********************************************************************//
// The Class CoDragOperator provides a Create and CreateRemote method to          
// create instances of the default interface IDragOperator exposed by              
// the CoClass DragOperator. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDragOperator = class
    class function Create: IDragOperator;
    class function CreateRemote(const MachineName: string): IDragOperator;
  end;

// *********************************************************************//
// The Class CoCurveDrivenPatternFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ICurveDrivenPatternFeatureData exposed by              
// the CoClass CurveDrivenPatternFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCurveDrivenPatternFeatureData = class
    class function Create: ICurveDrivenPatternFeatureData;
    class function CreateRemote(const MachineName: string): ICurveDrivenPatternFeatureData;
  end;

// *********************************************************************//
// The Class CoBalloonStack provides a Create and CreateRemote method to          
// create instances of the default interface IBalloonStack exposed by              
// the CoClass BalloonStack. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBalloonStack = class
    class function Create: IBalloonStack;
    class function CreateRemote(const MachineName: string): IBalloonStack;
  end;

// *********************************************************************//
// The Class CoStatusBarPane provides a Create and CreateRemote method to          
// create instances of the default interface IStatusBarPane exposed by              
// the CoClass StatusBarPane. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStatusBarPane = class
    class function Create: IStatusBarPane;
    class function CreateRemote(const MachineName: string): IStatusBarPane;
  end;

// *********************************************************************//
// The Class CoEquationMgr provides a Create and CreateRemote method to          
// create instances of the default interface IEquationMgr exposed by              
// the CoClass EquationMgr. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEquationMgr = class
    class function Create: IEquationMgr;
    class function CreateRemote(const MachineName: string): IEquationMgr;
  end;

// *********************************************************************//
// The Class CoPageSetup provides a Create and CreateRemote method to          
// create instances of the default interface IPageSetup exposed by              
// the CoClass PageSetup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPageSetup = class
    class function Create: IPageSetup;
    class function CreateRemote(const MachineName: string): IPageSetup;
  end;

// *********************************************************************//
// The Class CoRipFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IRipFeatureData exposed by              
// the CoClass RipFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRipFeatureData = class
    class function Create: IRipFeatureData;
    class function CreateRemote(const MachineName: string): IRipFeatureData;
  end;

// *********************************************************************//
// The Class CoHemFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IHemFeatureData exposed by              
// the CoClass HemFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHemFeatureData = class
    class function Create: IHemFeatureData;
    class function CreateRemote(const MachineName: string): IHemFeatureData;
  end;

// *********************************************************************//
// The Class CoBreakCornerFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IBreakCornerFeatureData exposed by              
// the CoClass BreakCornerFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBreakCornerFeatureData = class
    class function Create: IBreakCornerFeatureData;
    class function CreateRemote(const MachineName: string): IBreakCornerFeatureData;
  end;

// *********************************************************************//
// The Class CoJogFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IJogFeatureData exposed by              
// the CoClass JogFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoJogFeatureData = class
    class function Create: IJogFeatureData;
    class function CreateRemote(const MachineName: string): IJogFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfExtrudeFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfExtrudeFeatureData exposed by              
// the CoClass SurfExtrudeFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfExtrudeFeatureData = class
    class function Create: ISurfExtrudeFeatureData;
    class function CreateRemote(const MachineName: string): ISurfExtrudeFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfRevolveFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfRevolveFeatureData exposed by              
// the CoClass SurfRevolveFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfRevolveFeatureData = class
    class function Create: ISurfRevolveFeatureData;
    class function CreateRemote(const MachineName: string): ISurfRevolveFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfaceOffsetFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfaceOffsetFeatureData exposed by              
// the CoClass SurfaceOffsetFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfaceOffsetFeatureData = class
    class function Create: ISurfaceOffsetFeatureData;
    class function CreateRemote(const MachineName: string): ISurfaceOffsetFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfaceKnitFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfaceKnitFeatureData exposed by              
// the CoClass SurfaceKnitFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfaceKnitFeatureData = class
    class function Create: ISurfaceKnitFeatureData;
    class function CreateRemote(const MachineName: string): ISurfaceKnitFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfaceExtendFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfaceExtendFeatureData exposed by              
// the CoClass SurfaceExtendFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfaceExtendFeatureData = class
    class function Create: ISurfaceExtendFeatureData;
    class function CreateRemote(const MachineName: string): ISurfaceExtendFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfacePlanarFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfacePlanarFeatureData exposed by              
// the CoClass SurfacePlanarFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfacePlanarFeatureData = class
    class function Create: ISurfacePlanarFeatureData;
    class function CreateRemote(const MachineName: string): ISurfacePlanarFeatureData;
  end;

// *********************************************************************//
// The Class CoCenterMark provides a Create and CreateRemote method to          
// create instances of the default interface ICenterMark exposed by              
// the CoClass CenterMark. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCenterMark = class
    class function Create: ICenterMark;
    class function CreateRemote(const MachineName: string): ICenterMark;
  end;

// *********************************************************************//
// The Class CoSurfaceTrimFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfaceTrimFeatureData exposed by              
// the CoClass SurfaceTrimFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfaceTrimFeatureData = class
    class function Create: ISurfaceTrimFeatureData;
    class function CreateRemote(const MachineName: string): ISurfaceTrimFeatureData;
  end;

// *********************************************************************//
// The Class CoSurfaceRadiateFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISurfaceRadiateFeatureData exposed by              
// the CoClass SurfaceRadiateFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSurfaceRadiateFeatureData = class
    class function Create: ISurfaceRadiateFeatureData;
    class function CreateRemote(const MachineName: string): ISurfaceRadiateFeatureData;
  end;

// *********************************************************************//
// The Class CoRefPlaneFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IRefPlaneFeatureData exposed by              
// the CoClass RefPlaneFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRefPlaneFeatureData = class
    class function Create: IRefPlaneFeatureData;
    class function CreateRemote(const MachineName: string): IRefPlaneFeatureData;
  end;

// *********************************************************************//
// The Class CoCallout provides a Create and CreateRemote method to          
// create instances of the default interface ICallout exposed by              
// the CoClass Callout. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCallout = class
    class function Create: ICallout;
    class function CreateRemote(const MachineName: string): ICallout;
  end;

// *********************************************************************//
// The Class CoCustomBendAllowance provides a Create and CreateRemote method to          
// create instances of the default interface ICustomBendAllowance exposed by              
// the CoClass CustomBendAllowance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomBendAllowance = class
    class function Create: ICustomBendAllowance;
    class function CreateRemote(const MachineName: string): ICustomBendAllowance;
  end;

// *********************************************************************//
// The Class CoBlockInstance provides a Create and CreateRemote method to          
// create instances of the default interface IBlockInstance exposed by              
// the CoClass BlockInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBlockInstance = class
    class function Create: IBlockInstance;
    class function CreateRemote(const MachineName: string): IBlockInstance;
  end;

// *********************************************************************//
// The Class CoBlockDefinition provides a Create and CreateRemote method to          
// create instances of the default interface IBlockDefinition exposed by              
// the CoClass BlockDefinition. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBlockDefinition = class
    class function Create: IBlockDefinition;
    class function CreateRemote(const MachineName: string): IBlockDefinition;
  end;

// *********************************************************************//
// The Class CoBreakLine provides a Create and CreateRemote method to          
// create instances of the default interface IBreakLine exposed by              
// the CoClass BreakLine. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBreakLine = class
    class function Create: IBreakLine;
    class function CreateRemote(const MachineName: string): IBreakLine;
  end;

// *********************************************************************//
// The Class CoFaceHatch provides a Create and CreateRemote method to          
// create instances of the default interface IFaceHatch exposed by              
// the CoClass FaceHatch. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFaceHatch = class
    class function Create: IFaceHatch;
    class function CreateRemote(const MachineName: string): IFaceHatch;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageActiveX provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageActiveX exposed by              
// the CoClass PropertyManagerPageActiveX. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageActiveX = class
    class function Create: IPropertyManagerPageActiveX;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageActiveX;
  end;

// *********************************************************************//
// The Class CoLoftedBendsFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ILoftedBendsFeatureData exposed by              
// the CoClass LoftedBendsFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLoftedBendsFeatureData = class
    class function Create: ILoftedBendsFeatureData;
    class function CreateRemote(const MachineName: string): ILoftedBendsFeatureData;
  end;

// *********************************************************************//
// The Class CoFeatureManager provides a Create and CreateRemote method to          
// create instances of the default interface IFeatureManager exposed by              
// the CoClass FeatureManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFeatureManager = class
    class function Create: IFeatureManager;
    class function CreateRemote(const MachineName: string): IFeatureManager;
  end;

// *********************************************************************//
// The Class CoModelViewManager provides a Create and CreateRemote method to          
// create instances of the default interface IModelViewManager exposed by              
// the CoClass ModelViewManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoModelViewManager = class
    class function Create: IModelViewManager;
    class function CreateRemote(const MachineName: string): IModelViewManager;
  end;

// *********************************************************************//
// The Class CoModelDocExtension provides a Create and CreateRemote method to          
// create instances of the default interface IModelDocExtension exposed by              
// the CoClass ModelDocExtension. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoModelDocExtension = class
    class function Create: IModelDocExtension;
    class function CreateRemote(const MachineName: string): IModelDocExtension;
  end;

// *********************************************************************//
// The Class CoConfigurationManager provides a Create and CreateRemote method to          
// create instances of the default interface IConfigurationManager exposed by              
// the CoClass ConfigurationManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoConfigurationManager = class
    class function Create: IConfigurationManager;
    class function CreateRemote(const MachineName: string): IConfigurationManager;
  end;

// *********************************************************************//
// The Class CoCosmeticThreadFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ICosmeticThreadFeatureData exposed by              
// the CoClass CosmeticThreadFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCosmeticThreadFeatureData = class
    class function Create: ICosmeticThreadFeatureData;
    class function CreateRemote(const MachineName: string): ICosmeticThreadFeatureData;
  end;

// *********************************************************************//
// The Class CoCenterLine provides a Create and CreateRemote method to          
// create instances of the default interface ICenterLine exposed by              
// the CoClass CenterLine. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCenterLine = class
    class function Create: ICenterLine;
    class function CreateRemote(const MachineName: string): ICenterLine;
  end;

// *********************************************************************//
// The Class CoReferencePointCurveFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IReferencePointCurveFeatureData exposed by              
// the CoClass ReferencePointCurveFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoReferencePointCurveFeatureData = class
    class function Create: IReferencePointCurveFeatureData;
    class function CreateRemote(const MachineName: string): IReferencePointCurveFeatureData;
  end;

// *********************************************************************//
// The Class CoFreePointCurveFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IFreePointCurveFeatureData exposed by              
// the CoClass FreePointCurveFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFreePointCurveFeatureData = class
    class function Create: IFreePointCurveFeatureData;
    class function CreateRemote(const MachineName: string): IFreePointCurveFeatureData;
  end;

// *********************************************************************//
// The Class CoCompositeCurveFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ICompositeCurveFeatureData exposed by              
// the CoClass CompositeCurveFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCompositeCurveFeatureData = class
    class function Create: ICompositeCurveFeatureData;
    class function CreateRemote(const MachineName: string): ICompositeCurveFeatureData;
  end;

// *********************************************************************//
// The Class CoHelixFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IHelixFeatureData exposed by              
// the CoClass HelixFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHelixFeatureData = class
    class function Create: IHelixFeatureData;
    class function CreateRemote(const MachineName: string): IHelixFeatureData;
  end;

// *********************************************************************//
// The Class CoImportedCurveFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IImportedCurveFeatureData exposed by              
// the CoClass ImportedCurveFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoImportedCurveFeatureData = class
    class function Create: IImportedCurveFeatureData;
    class function CreateRemote(const MachineName: string): IImportedCurveFeatureData;
  end;

// *********************************************************************//
// The Class CoSketchRegion provides a Create and CreateRemote method to          
// create instances of the default interface ISketchRegion exposed by              
// the CoClass SketchRegion. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchRegion = class
    class function Create: ISketchRegion;
    class function CreateRemote(const MachineName: string): ISketchRegion;
  end;

// *********************************************************************//
// The Class CoSketchContour provides a Create and CreateRemote method to          
// create instances of the default interface ISketchContour exposed by              
// the CoClass SketchContour. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchContour = class
    class function Create: ISketchContour;
    class function CreateRemote(const MachineName: string): ISketchContour;
  end;

// *********************************************************************//
// The Class CoMassProperty provides a Create and CreateRemote method to          
// create instances of the default interface IMassProperty exposed by              
// the CoClass MassProperty. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMassProperty = class
    class function Create: IMassProperty;
    class function CreateRemote(const MachineName: string): IMassProperty;
  end;

// *********************************************************************//
// The Class CoDrawingComponent provides a Create and CreateRemote method to          
// create instances of the default interface IDrawingComponent exposed by              
// the CoClass DrawingComponent. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDrawingComponent = class
    class function Create: IDrawingComponent;
    class function CreateRemote(const MachineName: string): IDrawingComponent;
  end;

// *********************************************************************//
// The Class CoSketchRelationManager provides a Create and CreateRemote method to          
// create instances of the default interface ISketchRelationManager exposed by              
// the CoClass SketchRelationManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchRelationManager = class
    class function Create: ISketchRelationManager;
    class function CreateRemote(const MachineName: string): ISketchRelationManager;
  end;

// *********************************************************************//
// The Class CoSketchRelation provides a Create and CreateRemote method to          
// create instances of the default interface ISketchRelation exposed by              
// the CoClass SketchRelation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchRelation = class
    class function Create: ISketchRelation;
    class function CreateRemote(const MachineName: string): ISketchRelation;
  end;

// *********************************************************************//
// The Class CoMate2 provides a Create and CreateRemote method to          
// create instances of the default interface IMate2 exposed by              
// the CoClass Mate2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMate2 = class
    class function Create: IMate2;
    class function CreateRemote(const MachineName: string): IMate2;
  end;

// *********************************************************************//
// The Class CoMateEntity2 provides a Create and CreateRemote method to          
// create instances of the default interface IMateEntity2 exposed by              
// the CoClass MateEntity2. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMateEntity2 = class
    class function Create: IMateEntity2;
    class function CreateRemote(const MachineName: string): IMateEntity2;
  end;

// *********************************************************************//
// The Class CoSelectData provides a Create and CreateRemote method to          
// create instances of the default interface ISelectData exposed by              
// the CoClass SelectData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSelectData = class
    class function Create: ISelectData;
    class function CreateRemote(const MachineName: string): ISelectData;
  end;

// *********************************************************************//
// The Class CoTableAnnotation provides a Create and CreateRemote method to          
// create instances of the default interface ITableAnnotation exposed by              
// the CoClass TableAnnotation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTableAnnotation = class
    class function Create: ITableAnnotation;
    class function CreateRemote(const MachineName: string): ITableAnnotation;
  end;

// *********************************************************************//
// The Class CoHoleTableAnnotation provides a Create and CreateRemote method to          
// create instances of the default interface IHoleTableAnnotation exposed by              
// the CoClass HoleTableAnnotation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHoleTableAnnotation = class
    class function Create: IHoleTableAnnotation;
    class function CreateRemote(const MachineName: string): IHoleTableAnnotation;
  end;

// *********************************************************************//
// The Class CoHoleTable provides a Create and CreateRemote method to          
// create instances of the default interface IHoleTable exposed by              
// the CoClass HoleTable. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHoleTable = class
    class function Create: IHoleTable;
    class function CreateRemote(const MachineName: string): IHoleTable;
  end;

// *********************************************************************//
// The Class CoDatumOrigin provides a Create and CreateRemote method to          
// create instances of the default interface IDatumOrigin exposed by              
// the CoClass DatumOrigin. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDatumOrigin = class
    class function Create: IDatumOrigin;
    class function CreateRemote(const MachineName: string): IDatumOrigin;
  end;

// *********************************************************************//
// The Class CoBomTableAnnotation provides a Create and CreateRemote method to          
// create instances of the default interface IBomTableAnnotation exposed by              
// the CoClass BomTableAnnotation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBomTableAnnotation = class
    class function Create: IBomTableAnnotation;
    class function CreateRemote(const MachineName: string): IBomTableAnnotation;
  end;

// *********************************************************************//
// The Class CoBomFeature provides a Create and CreateRemote method to          
// create instances of the default interface IBomFeature exposed by              
// the CoClass BomFeature. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBomFeature = class
    class function Create: IBomFeature;
    class function CreateRemote(const MachineName: string): IBomFeature;
  end;

// *********************************************************************//
// The Class CoRevisionTableAnnotation provides a Create and CreateRemote method to          
// create instances of the default interface IRevisionTableAnnotation exposed by              
// the CoClass RevisionTableAnnotation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRevisionTableAnnotation = class
    class function Create: IRevisionTableAnnotation;
    class function CreateRemote(const MachineName: string): IRevisionTableAnnotation;
  end;

// *********************************************************************//
// The Class CoRevisionTableFeature provides a Create and CreateRemote method to          
// create instances of the default interface IRevisionTableFeature exposed by              
// the CoClass RevisionTableFeature. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRevisionTableFeature = class
    class function Create: IRevisionTableFeature;
    class function CreateRemote(const MachineName: string): IRevisionTableFeature;
  end;

// *********************************************************************//
// The Class CoMateInPlace provides a Create and CreateRemote method to          
// create instances of the default interface IMateInPlace exposed by              
// the CoClass MateInPlace. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMateInPlace = class
    class function Create: IMateInPlace;
    class function CreateRemote(const MachineName: string): IMateInPlace;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageBitmapButton provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageBitmapButton exposed by              
// the CoClass PropertyManagerPageBitmapButton. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageBitmapButton = class
    class function Create: IPropertyManagerPageBitmapButton;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageBitmapButton;
  end;

// *********************************************************************//
// The Class CoCustomPropertyManager provides a Create and CreateRemote method to          
// create instances of the default interface ICustomPropertyManager exposed by              
// the CoClass CustomPropertyManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCustomPropertyManager = class
    class function Create: ICustomPropertyManager;
    class function CreateRemote(const MachineName: string): ICustomPropertyManager;
  end;

// *********************************************************************//
// The Class CoLight provides a Create and CreateRemote method to          
// create instances of the default interface ILight exposed by              
// the CoClass Light. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLight = class
    class function Create: ILight;
    class function CreateRemote(const MachineName: string): ILight;
  end;

// *********************************************************************//
// The Class CoRefPointFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IRefPointFeatureData exposed by              
// the CoClass RefPointFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRefPointFeatureData = class
    class function Create: IRefPointFeatureData;
    class function CreateRemote(const MachineName: string): IRefPointFeatureData;
  end;

// *********************************************************************//
// The Class CoRefPoint provides a Create and CreateRemote method to          
// create instances of the default interface IRefPoint exposed by              
// the CoClass RefPoint. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRefPoint = class
    class function Create: IRefPoint;
    class function CreateRemote(const MachineName: string): IRefPoint;
  end;

// *********************************************************************//
// The Class CoRefAxisFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IRefAxisFeatureData exposed by              
// the CoClass RefAxisFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRefAxisFeatureData = class
    class function Create: IRefAxisFeatureData;
    class function CreateRemote(const MachineName: string): IRefAxisFeatureData;
  end;

// *********************************************************************//
// The Class CoEdgePoint provides a Create and CreateRemote method to          
// create instances of the default interface IEdgePoint exposed by              
// the CoClass EdgePoint. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEdgePoint = class
    class function Create: IEdgePoint;
    class function CreateRemote(const MachineName: string): IEdgePoint;
  end;

// *********************************************************************//
// The Class CoTaskpaneView provides a Create and CreateRemote method to          
// create instances of the default interface ITaskpaneView exposed by              
// the CoClass TaskpaneView. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTaskpaneView = class
    class function Create: ITaskpaneView;
    class function CreateRemote(const MachineName: string): ITaskpaneView;
  end;

// *********************************************************************//
// The Class CoTexture provides a Create and CreateRemote method to          
// create instances of the default interface ITexture exposed by              
// the CoClass Texture. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTexture = class
    class function Create: ITexture;
    class function CreateRemote(const MachineName: string): ITexture;
  end;

// *********************************************************************//
// The Class CoMateReference provides a Create and CreateRemote method to          
// create instances of the default interface IMateReference exposed by              
// the CoClass MateReference. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMateReference = class
    class function Create: IMateReference;
    class function CreateRemote(const MachineName: string): IMateReference;
  end;

// *********************************************************************//
// The Class CoPartingLineFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IPartingLineFeatureData exposed by              
// the CoClass PartingLineFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPartingLineFeatureData = class
    class function Create: IPartingLineFeatureData;
    class function CreateRemote(const MachineName: string): IPartingLineFeatureData;
  end;

// *********************************************************************//
// The Class CoDeleteBodyFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IDeleteBodyFeatureData exposed by              
// the CoClass DeleteBodyFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDeleteBodyFeatureData = class
    class function Create: IDeleteBodyFeatureData;
    class function CreateRemote(const MachineName: string): IDeleteBodyFeatureData;
  end;

// *********************************************************************//
// The Class CoPartingSurfaceFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IPartingSurfaceFeatureData exposed by              
// the CoClass PartingSurfaceFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPartingSurfaceFeatureData = class
    class function Create: IPartingSurfaceFeatureData;
    class function CreateRemote(const MachineName: string): IPartingSurfaceFeatureData;
  end;

// *********************************************************************//
// The Class CoShutOffSurfaceFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IShutOffSurfaceFeatureData exposed by              
// the CoClass ShutOffSurfaceFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoShutOffSurfaceFeatureData = class
    class function Create: IShutOffSurfaceFeatureData;
    class function CreateRemote(const MachineName: string): IShutOffSurfaceFeatureData;
  end;

// *********************************************************************//
// The Class CoToolingSplitFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IToolingSplitFeatureData exposed by              
// the CoClass ToolingSplitFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoToolingSplitFeatureData = class
    class function Create: IToolingSplitFeatureData;
    class function CreateRemote(const MachineName: string): IToolingSplitFeatureData;
  end;

// *********************************************************************//
// The Class CoPtnrPMPage provides a Create and CreateRemote method to          
// create instances of the default interface IPtnrPMPage exposed by              
// the CoClass PtnrPMPage. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPtnrPMPage = class
    class function Create: IPtnrPMPage;
    class function CreateRemote(const MachineName: string): IPtnrPMPage;
  end;

// *********************************************************************//
// The Class CoJoinFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IJoinFeatureData exposed by              
// the CoClass JoinFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoJoinFeatureData = class
    class function Create: IJoinFeatureData;
    class function CreateRemote(const MachineName: string): IJoinFeatureData;
  end;

// *********************************************************************//
// The Class CoManipulator provides a Create and CreateRemote method to          
// create instances of the default interface IManipulator exposed by              
// the CoClass Manipulator. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoManipulator = class
    class function Create: IManipulator;
    class function CreateRemote(const MachineName: string): IManipulator;
  end;

// *********************************************************************//
// The Class CoTriadManipulator provides a Create and CreateRemote method to          
// create instances of the default interface ITriadManipulator exposed by              
// the CoClass TriadManipulator. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTriadManipulator = class
    class function Create: ITriadManipulator;
    class function CreateRemote(const MachineName: string): ITriadManipulator;
  end;

// *********************************************************************//
// The Class CoFillSurfaceFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IFillSurfaceFeatureData exposed by              
// the CoClass FillSurfaceFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFillSurfaceFeatureData = class
    class function Create: IFillSurfaceFeatureData;
    class function CreateRemote(const MachineName: string): IFillSurfaceFeatureData;
  end;

// *********************************************************************//
// The Class CoMoveCopyBodyFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IMoveCopyBodyFeatureData exposed by              
// the CoClass MoveCopyBodyFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMoveCopyBodyFeatureData = class
    class function Create: IMoveCopyBodyFeatureData;
    class function CreateRemote(const MachineName: string): IMoveCopyBodyFeatureData;
  end;

// *********************************************************************//
// The Class CoRuledSurfaceFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IRuledSurfaceFeatureData exposed by              
// the CoClass RuledSurfaceFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRuledSurfaceFeatureData = class
    class function Create: IRuledSurfaceFeatureData;
    class function CreateRemote(const MachineName: string): IRuledSurfaceFeatureData;
  end;

// *********************************************************************//
// The Class CoCavityFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ICavityFeatureData exposed by              
// the CoClass CavityFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCavityFeatureData = class
    class function Create: ICavityFeatureData;
    class function CreateRemote(const MachineName: string): ICavityFeatureData;
  end;

// *********************************************************************//
// The Class CoWeldBead provides a Create and CreateRemote method to          
// create instances of the default interface IWeldBead exposed by              
// the CoClass WeldBead. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWeldBead = class
    class function Create: IWeldBead;
    class function CreateRemote(const MachineName: string): IWeldBead;
  end;

// *********************************************************************//
// The Class CoSplitLineFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISplitLineFeatureData exposed by              
// the CoClass SplitLineFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSplitLineFeatureData = class
    class function Create: ISplitLineFeatureData;
    class function CreateRemote(const MachineName: string): ISplitLineFeatureData;
  end;

// *********************************************************************//
// The Class CoWrapSketchFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IWrapSketchFeatureData exposed by              
// the CoClass WrapSketchFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWrapSketchFeatureData = class
    class function Create: IWrapSketchFeatureData;
    class function CreateRemote(const MachineName: string): IWrapSketchFeatureData;
  end;

// *********************************************************************//
// The Class CoStructuralMemberFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IStructuralMemberFeatureData exposed by              
// the CoClass StructuralMemberFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoStructuralMemberFeatureData = class
    class function Create: IStructuralMemberFeatureData;
    class function CreateRemote(const MachineName: string): IStructuralMemberFeatureData;
  end;

// *********************************************************************//
// The Class CoEndCapFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IEndCapFeatureData exposed by              
// the CoClass EndCapFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoEndCapFeatureData = class
    class function Create: IEndCapFeatureData;
    class function CreateRemote(const MachineName: string): IEndCapFeatureData;
  end;

// *********************************************************************//
// The Class CoGussetFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IGussetFeatureData exposed by              
// the CoClass GussetFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGussetFeatureData = class
    class function Create: IGussetFeatureData;
    class function CreateRemote(const MachineName: string): IGussetFeatureData;
  end;

// *********************************************************************//
// The Class CoSplitBodyFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISplitBodyFeatureData exposed by              
// the CoClass SplitBodyFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSplitBodyFeatureData = class
    class function Create: ISplitBodyFeatureData;
    class function CreateRemote(const MachineName: string): ISplitBodyFeatureData;
  end;

// *********************************************************************//
// The Class CoCombineBodiesFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ICombineBodiesFeatureData exposed by              
// the CoClass CombineBodiesFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCombineBodiesFeatureData = class
    class function Create: ICombineBodiesFeatureData;
    class function CreateRemote(const MachineName: string): ICombineBodiesFeatureData;
  end;

// *********************************************************************//
// The Class CoSketchManager provides a Create and CreateRemote method to          
// create instances of the default interface ISketchManager exposed by              
// the CoClass SketchManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchManager = class
    class function Create: ISketchManager;
    class function CreateRemote(const MachineName: string): ISketchManager;
  end;

// *********************************************************************//
// The Class CoDiagnoseResult provides a Create and CreateRemote method to          
// create instances of the default interface IDiagnoseResult exposed by              
// the CoClass DiagnoseResult. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDiagnoseResult = class
    class function Create: IDiagnoseResult;
    class function CreateRemote(const MachineName: string): IDiagnoseResult;
  end;

// *********************************************************************//
// The Class CoSpring provides a Create and CreateRemote method to          
// create instances of the default interface ISpring exposed by              
// the CoClass Spring. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSpring = class
    class function Create: ISpring;
    class function CreateRemote(const MachineName: string): ISpring;
  end;

// *********************************************************************//
// The Class CoFaultEntity provides a Create and CreateRemote method to          
// create instances of the default interface IFaultEntity exposed by              
// the CoClass FaultEntity. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFaultEntity = class
    class function Create: IFaultEntity;
    class function CreateRemote(const MachineName: string): IFaultEntity;
  end;

// *********************************************************************//
// The Class CoSwOLEObject provides a Create and CreateRemote method to          
// create instances of the default interface ISwOLEObject exposed by              
// the CoClass SwOLEObject. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSwOLEObject = class
    class function Create: ISwOLEObject;
    class function CreateRemote(const MachineName: string): ISwOLEObject;
  end;

// *********************************************************************//
// The Class CoLibraryFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ILibraryFeatureData exposed by              
// the CoClass LibraryFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoLibraryFeatureData = class
    class function Create: ILibraryFeatureData;
    class function CreateRemote(const MachineName: string): ILibraryFeatureData;
  end;

// *********************************************************************//
// The Class CoSimulation provides a Create and CreateRemote method to          
// create instances of the default interface ISimulation exposed by              
// the CoClass Simulation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSimulation = class
    class function Create: ISimulation;
    class function CreateRemote(const MachineName: string): ISimulation;
  end;

// *********************************************************************//
// The Class CoSimulationGravityFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISimulationGravityFeatureData exposed by              
// the CoClass SimulationGravityFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSimulationGravityFeatureData = class
    class function Create: ISimulationGravityFeatureData;
    class function CreateRemote(const MachineName: string): ISimulationGravityFeatureData;
  end;

// *********************************************************************//
// The Class CoSimulationMotorFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISimulationMotorFeatureData exposed by              
// the CoClass SimulationMotorFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSimulationMotorFeatureData = class
    class function Create: ISimulationMotorFeatureData;
    class function CreateRemote(const MachineName: string): ISimulationMotorFeatureData;
  end;

// *********************************************************************//
// The Class CoSimulationLinearSpringFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISimulationLinearSpringFeatureData exposed by              
// the CoClass SimulationLinearSpringFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSimulationLinearSpringFeatureData = class
    class function Create: ISimulationLinearSpringFeatureData;
    class function CreateRemote(const MachineName: string): ISimulationLinearSpringFeatureData;
  end;

// *********************************************************************//
// The Class CoCamera provides a Create and CreateRemote method to          
// create instances of the default interface ICamera exposed by              
// the CoClass Camera. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCamera = class
    class function Create: ICamera;
    class function CreateRemote(const MachineName: string): ICamera;
  end;

// *********************************************************************//
// The Class CoWeldmentBeadFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IWeldmentBeadFeatureData exposed by              
// the CoClass WeldmentBeadFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWeldmentBeadFeatureData = class
    class function Create: IWeldmentBeadFeatureData;
    class function CreateRemote(const MachineName: string): IWeldmentBeadFeatureData;
  end;

// *********************************************************************//
// The Class CoWeldmentTrimExtendFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IWeldmentTrimExtendFeatureData exposed by              
// the CoClass WeldmentTrimExtendFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWeldmentTrimExtendFeatureData = class
    class function Create: IWeldmentTrimExtendFeatureData;
    class function CreateRemote(const MachineName: string): IWeldmentTrimExtendFeatureData;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageTab provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageTab exposed by              
// the CoClass PropertyManagerPageTab. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageTab = class
    class function Create: IPropertyManagerPageTab;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageTab;
  end;

// *********************************************************************//
// The Class CoBodyFolder provides a Create and CreateRemote method to          
// create instances of the default interface IBodyFolder exposed by              
// the CoClass BodyFolder. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoBodyFolder = class
    class function Create: IBodyFolder;
    class function CreateRemote(const MachineName: string): IBodyFolder;
  end;

// *********************************************************************//
// The Class CoCommandManager provides a Create and CreateRemote method to          
// create instances of the default interface ICommandManager exposed by              
// the CoClass CommandManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCommandManager = class
    class function Create: ICommandManager;
    class function CreateRemote(const MachineName: string): ICommandManager;
  end;

// *********************************************************************//
// The Class CoCommandGroup provides a Create and CreateRemote method to          
// create instances of the default interface ICommandGroup exposed by              
// the CoClass CommandGroup. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCommandGroup = class
    class function Create: ICommandGroup;
    class function CreateRemote(const MachineName: string): ICommandGroup;
  end;

// *********************************************************************//
// The Class CoCoreFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ICoreFeatureData exposed by              
// the CoClass CoreFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCoreFeatureData = class
    class function Create: ICoreFeatureData;
    class function CreateRemote(const MachineName: string): ICoreFeatureData;
  end;

// *********************************************************************//
// The Class CoAdvancedSelectionCriteria provides a Create and CreateRemote method to          
// create instances of the default interface IAdvancedSelectionCriteria exposed by              
// the CoClass AdvancedSelectionCriteria. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAdvancedSelectionCriteria = class
    class function Create: IAdvancedSelectionCriteria;
    class function CreateRemote(const MachineName: string): IAdvancedSelectionCriteria;
  end;

// *********************************************************************//
// The Class CoGeneralTableFeature provides a Create and CreateRemote method to          
// create instances of the default interface IGeneralTableFeature exposed by              
// the CoClass GeneralTableFeature. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoGeneralTableFeature = class
    class function Create: IGeneralTableFeature;
    class function CreateRemote(const MachineName: string): IGeneralTableFeature;
  end;

// *********************************************************************//
// The Class CoDimensionTolerance provides a Create and CreateRemote method to          
// create instances of the default interface IDimensionTolerance exposed by              
// the CoClass DimensionTolerance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDimensionTolerance = class
    class function Create: IDimensionTolerance;
    class function CreateRemote(const MachineName: string): IDimensionTolerance;
  end;

// *********************************************************************//
// The Class CoCommentFolder provides a Create and CreateRemote method to          
// create instances of the default interface ICommentFolder exposed by              
// the CoClass CommentFolder. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCommentFolder = class
    class function Create: ICommentFolder;
    class function CreateRemote(const MachineName: string): ICommentFolder;
  end;

// *********************************************************************//
// The Class CoComment provides a Create and CreateRemote method to          
// create instances of the default interface IComment exposed by              
// the CoClass Comment. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoComment = class
    class function Create: IComment;
    class function CreateRemote(const MachineName: string): IComment;
  end;

// *********************************************************************//
// The Class CoAnimation provides a Create and CreateRemote method to          
// create instances of the default interface IAnimation exposed by              
// the CoClass Animation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnimation = class
    class function Create: IAnimation;
    class function CreateRemote(const MachineName: string): IAnimation;
  end;

// *********************************************************************//
// The Class CoImportIgesData provides a Create and CreateRemote method to          
// create instances of the default interface IImportIgesData exposed by              
// the CoClass ImportIgesData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoImportIgesData = class
    class function Create: IImportIgesData;
    class function CreateRemote(const MachineName: string): IImportIgesData;
  end;

// *********************************************************************//
// The Class CoTableAnchor provides a Create and CreateRemote method to          
// create instances of the default interface ITableAnchor exposed by              
// the CoClass TableAnchor. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTableAnchor = class
    class function Create: ITableAnchor;
    class function CreateRemote(const MachineName: string): ITableAnchor;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageSlider provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageSlider exposed by              
// the CoClass PropertyManagerPageSlider. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageSlider = class
    class function Create: IPropertyManagerPageSlider;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageSlider;
  end;

// *********************************************************************//
// The Class CoMateLoadReference provides a Create and CreateRemote method to          
// create instances of the default interface IMateLoadReference exposed by              
// the CoClass MateLoadReference. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMateLoadReference = class
    class function Create: IMateLoadReference;
    class function CreateRemote(const MachineName: string): IMateLoadReference;
  end;

// *********************************************************************//
// The Class CoSketchBlockDefinition provides a Create and CreateRemote method to          
// create instances of the default interface ISketchBlockDefinition exposed by              
// the CoClass SketchBlockDefinition. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchBlockDefinition = class
    class function Create: ISketchBlockDefinition;
    class function CreateRemote(const MachineName: string): ISketchBlockDefinition;
  end;

// *********************************************************************//
// The Class CoSketchBlockInstance provides a Create and CreateRemote method to          
// create instances of the default interface ISketchBlockInstance exposed by              
// the CoClass SketchBlockInstance. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchBlockInstance = class
    class function Create: ISketchBlockInstance;
    class function CreateRemote(const MachineName: string): ISketchBlockInstance;
  end;

// *********************************************************************//
// The Class CoUserProgressBar provides a Create and CreateRemote method to          
// create instances of the default interface IUserProgressBar exposed by              
// the CoClass UserProgressBar. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoUserProgressBar = class
    class function Create: IUserProgressBar;
    class function CreateRemote(const MachineName: string): IUserProgressBar;
  end;

// *********************************************************************//
// The Class CoDragArrowManipulator provides a Create and CreateRemote method to          
// create instances of the default interface IDragArrowManipulator exposed by              
// the CoClass DragArrowManipulator. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDragArrowManipulator = class
    class function Create: IDragArrowManipulator;
    class function CreateRemote(const MachineName: string): IDragArrowManipulator;
  end;

// *********************************************************************//
// The Class CoMoveFaceFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IMoveFaceFeatureData exposed by              
// the CoClass MoveFaceFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMoveFaceFeatureData = class
    class function Create: IMoveFaceFeatureData;
    class function CreateRemote(const MachineName: string): IMoveFaceFeatureData;
  end;

// *********************************************************************//
// The Class CoHealEdgesFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IHealEdgesFeatureData exposed by              
// the CoClass HealEdgesFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHealEdgesFeatureData = class
    class function Create: IHealEdgesFeatureData;
    class function CreateRemote(const MachineName: string): IHealEdgesFeatureData;
  end;

// *********************************************************************//
// The Class CoWeldmentCutListAnnotation provides a Create and CreateRemote method to          
// create instances of the default interface IWeldmentCutListAnnotation exposed by              
// the CoClass WeldmentCutListAnnotation. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWeldmentCutListAnnotation = class
    class function Create: IWeldmentCutListAnnotation;
    class function CreateRemote(const MachineName: string): IWeldmentCutListAnnotation;
  end;

// *********************************************************************//
// The Class CoWeldmentCutListFeature provides a Create and CreateRemote method to          
// create instances of the default interface IWeldmentCutListFeature exposed by              
// the CoClass WeldmentCutListFeature. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoWeldmentCutListFeature = class
    class function Create: IWeldmentCutListFeature;
    class function CreateRemote(const MachineName: string): IWeldmentCutListFeature;
  end;

// *********************************************************************//
// The Class CoModelWindow provides a Create and CreateRemote method to          
// create instances of the default interface IModelWindow exposed by              
// the CoClass ModelWindow. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoModelWindow = class
    class function Create: IModelWindow;
    class function CreateRemote(const MachineName: string): IModelWindow;
  end;

// *********************************************************************//
// The Class CoMouse provides a Create and CreateRemote method to          
// create instances of the default interface IMouse exposed by              
// the CoClass Mouse. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMouse = class
    class function Create: IMouse;
    class function CreateRemote(const MachineName: string): IMouse;
  end;

// *********************************************************************//
// The Class CoImportDxfDwgData provides a Create and CreateRemote method to          
// create instances of the default interface IImportDxfDwgData exposed by              
// the CoClass ImportDxfDwgData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoImportDxfDwgData = class
    class function Create: IImportDxfDwgData;
    class function CreateRemote(const MachineName: string): IImportDxfDwgData;
  end;

// *********************************************************************//
// The Class CoInterferenceDetectionMgr provides a Create and CreateRemote method to          
// create instances of the default interface IInterferenceDetectionMgr exposed by              
// the CoClass InterferenceDetectionMgr. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoInterferenceDetectionMgr = class
    class function Create: IInterferenceDetectionMgr;
    class function CreateRemote(const MachineName: string): IInterferenceDetectionMgr;
  end;

// *********************************************************************//
// The Class CoInterference provides a Create and CreateRemote method to          
// create instances of the default interface IInterference exposed by              
// the CoClass Interference. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoInterference = class
    class function Create: IInterference;
    class function CreateRemote(const MachineName: string): IInterference;
  end;

// *********************************************************************//
// The Class CoSplineHandle provides a Create and CreateRemote method to          
// create instances of the default interface ISplineHandle exposed by              
// the CoClass SplineHandle. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSplineHandle = class
    class function Create: ISplineHandle;
    class function CreateRemote(const MachineName: string): ISplineHandle;
  end;

// *********************************************************************//
// The Class CoSectionViewData provides a Create and CreateRemote method to          
// create instances of the default interface ISectionViewData exposed by              
// the CoClass SectionViewData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSectionViewData = class
    class function Create: ISectionViewData;
    class function CreateRemote(const MachineName: string): ISectionViewData;
  end;

// *********************************************************************//
// The Class CoMaterialVisualPropertiesData provides a Create and CreateRemote method to          
// create instances of the default interface IMaterialVisualPropertiesData exposed by              
// the CoClass MaterialVisualPropertiesData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMaterialVisualPropertiesData = class
    class function Create: IMaterialVisualPropertiesData;
    class function CreateRemote(const MachineName: string): IMaterialVisualPropertiesData;
  end;

// *********************************************************************//
// The Class CoPropertyManagerPageBitmap provides a Create and CreateRemote method to          
// create instances of the default interface IPropertyManagerPageBitmap exposed by              
// the CoClass PropertyManagerPageBitmap. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPropertyManagerPageBitmap = class
    class function Create: IPropertyManagerPageBitmap;
    class function CreateRemote(const MachineName: string): IPropertyManagerPageBitmap;
  end;

// *********************************************************************//
// The Class CoExportPdfData provides a Create and CreateRemote method to          
// create instances of the default interface IExportPdfData exposed by              
// the CoClass ExportPdfData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoExportPdfData = class
    class function Create: IExportPdfData;
    class function CreateRemote(const MachineName: string): IExportPdfData;
  end;

// *********************************************************************//
// The Class CoPrint3DDialog provides a Create and CreateRemote method to          
// create instances of the default interface IPrint3DDialog exposed by              
// the CoClass Print3DDialog. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoPrint3DDialog = class
    class function Create: IPrint3DDialog;
    class function CreateRemote(const MachineName: string): IPrint3DDialog;
  end;

// *********************************************************************//
// The Class CoSilhouetteEdge provides a Create and CreateRemote method to          
// create instances of the default interface ISilhouetteEdge exposed by              
// the CoClass SilhouetteEdge. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSilhouetteEdge = class
    class function Create: ISilhouetteEdge;
    class function CreateRemote(const MachineName: string): ISilhouetteEdge;
  end;

// *********************************************************************//
// The Class CoAnnotationView provides a Create and CreateRemote method to          
// create instances of the default interface IAnnotationView exposed by              
// the CoClass AnnotationView. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoAnnotationView = class
    class function Create: IAnnotationView;
    class function CreateRemote(const MachineName: string): IAnnotationView;
  end;

// *********************************************************************//
// The Class CoDerivedPartFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IDerivedPartFeatureData exposed by              
// the CoClass DerivedPartFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDerivedPartFeatureData = class
    class function Create: IDerivedPartFeatureData;
    class function CreateRemote(const MachineName: string): IDerivedPartFeatureData;
  end;

// *********************************************************************//
// The Class CoMeasure provides a Create and CreateRemote method to          
// create instances of the default interface IMeasure exposed by              
// the CoClass Measure. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoMeasure = class
    class function Create: IMeasure;
    class function CreateRemote(const MachineName: string): IMeasure;
  end;

// *********************************************************************//
// The Class CoImportStepData provides a Create and CreateRemote method to          
// create instances of the default interface IImportStepData exposed by              
// the CoClass ImportStepData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoImportStepData = class
    class function Create: IImportStepData;
    class function CreateRemote(const MachineName: string): IImportStepData;
  end;

// *********************************************************************//
// The Class CoSketchPicture provides a Create and CreateRemote method to          
// create instances of the default interface ISketchPicture exposed by              
// the CoClass SketchPicture. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchPicture = class
    class function Create: ISketchPicture;
    class function CreateRemote(const MachineName: string): ISketchPicture;
  end;

// *********************************************************************//
// The Class CoSketchPath provides a Create and CreateRemote method to          
// create instances of the default interface ISketchPath exposed by              
// the CoClass SketchPath. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSketchPath = class
    class function Create: ISketchPath;
    class function CreateRemote(const MachineName: string): ISketchPath;
  end;

// *********************************************************************//
// The Class CoDecal provides a Create and CreateRemote method to          
// create instances of the default interface IDecal exposed by              
// the CoClass Decal. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDecal = class
    class function Create: IDecal;
    class function CreateRemote(const MachineName: string): IDecal;
  end;

// *********************************************************************//
// The Class CoFaceDecalProperties provides a Create and CreateRemote method to          
// create instances of the default interface IFaceDecalProperties exposed by              
// the CoClass FaceDecalProperties. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoFaceDecalProperties = class
    class function Create: IFaceDecalProperties;
    class function CreateRemote(const MachineName: string): IFaceDecalProperties;
  end;

// *********************************************************************//
// The Class CoRenderMaterial provides a Create and CreateRemote method to          
// create instances of the default interface IRenderMaterial exposed by              
// the CoClass RenderMaterial. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoRenderMaterial = class
    class function Create: IRenderMaterial;
    class function CreateRemote(const MachineName: string): IRenderMaterial;
  end;

// *********************************************************************//
// The Class CoCommandTab provides a Create and CreateRemote method to          
// create instances of the default interface ICommandTab exposed by              
// the CoClass CommandTab. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCommandTab = class
    class function Create: ICommandTab;
    class function CreateRemote(const MachineName: string): ICommandTab;
  end;

// *********************************************************************//
// The Class CoCommandTabBox provides a Create and CreateRemote method to          
// create instances of the default interface ICommandTabBox exposed by              
// the CoClass CommandTabBox. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoCommandTabBox = class
    class function Create: ICommandTabBox;
    class function CreateRemote(const MachineName: string): ICommandTabBox;
  end;

// *********************************************************************//
// The Class CoHoleSeriesFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface IHoleSeriesFeatureData exposed by              
// the CoClass HoleSeriesFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoHoleSeriesFeatureData = class
    class function Create: IHoleSeriesFeatureData;
    class function CreateRemote(const MachineName: string): IHoleSeriesFeatureData;
  end;

// *********************************************************************//
// The Class CoJournalManager provides a Create and CreateRemote method to          
// create instances of the default interface IJournalManager exposed by              
// the CoClass JournalManager. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoJournalManager = class
    class function Create: IJournalManager;
    class function CreateRemote(const MachineName: string): IJournalManager;
  end;

// *********************************************************************//
// The Class CoDocumentSpecification provides a Create and CreateRemote method to          
// create instances of the default interface IDocumentSpecification exposed by              
// the CoClass DocumentSpecification. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoDocumentSpecification = class
    class function Create: IDocumentSpecification;
    class function CreateRemote(const MachineName: string): IDocumentSpecification;
  end;

// *********************************************************************//
// The Class CoSimulationForceFeatureData provides a Create and CreateRemote method to          
// create instances of the default interface ISimulationForceFeatureData exposed by              
// the CoClass SimulationForceFeatureData. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoSimulationForceFeatureData = class
    class function Create: ISimulationForceFeatureData;
    class function CreateRemote(const MachineName: string): ISimulationForceFeatureData;
  end;

// *********************************************************************//
// The Class CoTreeControlItem provides a Create and CreateRemote method to          
// create instances of the default interface ITreeControlItem exposed by              
// the CoClass TreeControlItem. The functions are intended to be used by             
// clients wishing to automate the CoClass objects exposed by the         
// server of this typelibrary.                                            
// *********************************************************************//
  CoTreeControlItem = class
    class function Create: ITreeControlItem;
    class function CreateRemote(const MachineName: string): ITreeControlItem;
  end;

implementation

uses ComObj;

class function CoSldWorks_.Create: ISldWorks;
begin
  Result := CreateComObject(CLASS_SldWorks_) as ISldWorks;
end;

class function CoSldWorks_.CreateRemote(const MachineName: string): ISldWorks;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SldWorks_) as ISldWorks;
end;

class function CoPartDoc.Create: IPartDoc;
begin
  Result := CreateComObject(CLASS_PartDoc) as IPartDoc;
end;

class function CoPartDoc.CreateRemote(const MachineName: string): IPartDoc;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PartDoc) as IPartDoc;
end;

class function CoDrawingDoc.Create: IDrawingDoc;
begin
  Result := CreateComObject(CLASS_DrawingDoc) as IDrawingDoc;
end;

class function CoDrawingDoc.CreateRemote(const MachineName: string): IDrawingDoc;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DrawingDoc) as IDrawingDoc;
end;

class function CoAssemblyDoc.Create: IAssemblyDoc;
begin
  Result := CreateComObject(CLASS_AssemblyDoc) as IAssemblyDoc;
end;

class function CoAssemblyDoc.CreateRemote(const MachineName: string): IAssemblyDoc;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AssemblyDoc) as IAssemblyDoc;
end;

class function CoFeature.Create: IFeature;
begin
  Result := CreateComObject(CLASS_Feature) as IFeature;
end;

class function CoFeature.CreateRemote(const MachineName: string): IFeature;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Feature) as IFeature;
end;

class function CoDimension.Create: IDimension;
begin
  Result := CreateComObject(CLASS_Dimension) as IDimension;
end;

class function CoDimension.CreateRemote(const MachineName: string): IDimension;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Dimension) as IDimension;
end;

class function CoBody.Create: IBody;
begin
  Result := CreateComObject(CLASS_Body) as IBody;
end;

class function CoBody.CreateRemote(const MachineName: string): IBody;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Body) as IBody;
end;

class function CoFace.Create: IFace;
begin
  Result := CreateComObject(CLASS_Face) as IFace;
end;

class function CoFace.CreateRemote(const MachineName: string): IFace;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Face) as IFace;
end;

class function CoSurface.Create: ISurface;
begin
  Result := CreateComObject(CLASS_Surface) as ISurface;
end;

class function CoSurface.CreateRemote(const MachineName: string): ISurface;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Surface) as ISurface;
end;

class function CoEdge_.Create: IEdge;
begin
  Result := CreateComObject(CLASS_Edge) as IEdge;
end;

class function CoEdge_.CreateRemote(const MachineName: string): IEdge;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Edge) as IEdge;
end;

class function CoCurve.Create: ICurve;
begin
  Result := CreateComObject(CLASS_Curve) as ICurve;
end;

class function CoCurve.CreateRemote(const MachineName: string): ICurve;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Curve) as ICurve;
end;

class function CoModelDoc.Create: IModelDoc;
begin
  Result := CreateComObject(CLASS_ModelDoc) as IModelDoc;
end;

class function CoModelDoc.CreateRemote(const MachineName: string): IModelDoc;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ModelDoc) as IModelDoc;
end;

class function CoFrame.Create: IFrame;
begin
  Result := CreateComObject(CLASS_Frame) as IFrame;
end;

class function CoFrame.CreateRemote(const MachineName: string): IFrame;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Frame) as IFrame;
end;

class function CoGtol.Create: IGtol;
begin
  Result := CreateComObject(CLASS_Gtol) as IGtol;
end;

class function CoGtol.CreateRemote(const MachineName: string): IGtol;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Gtol) as IGtol;
end;

class function CoModelView.Create: IModelView;
begin
  Result := CreateComObject(CLASS_ModelView) as IModelView;
end;

class function CoModelView.CreateRemote(const MachineName: string): IModelView;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ModelView) as IModelView;
end;

class function CoMember.Create: IMember;
begin
  Result := CreateComObject(CLASS_Member) as IMember;
end;

class function CoMember.CreateRemote(const MachineName: string): IMember;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Member) as IMember;
end;

class function CoView.Create: IView;
begin
  Result := CreateComObject(CLASS_View) as IView;
end;

class function CoView.CreateRemote(const MachineName: string): IView;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_View) as IView;
end;

class function CoSketch.Create: ISketch;
begin
  Result := CreateComObject(CLASS_Sketch) as ISketch;
end;

class function CoSketch.CreateRemote(const MachineName: string): ISketch;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Sketch) as ISketch;
end;

class function CoLoop.Create: ILoop;
begin
  Result := CreateComObject(CLASS_Loop) as ILoop;
end;

class function CoLoop.CreateRemote(const MachineName: string): ILoop;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Loop) as ILoop;
end;

class function CoNote.Create: INote;
begin
  Result := CreateComObject(CLASS_Note) as INote;
end;

class function CoNote.CreateRemote(const MachineName: string): INote;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Note) as INote;
end;

class function CoCoEdge.Create: ICoEdge;
begin
  Result := CreateComObject(CLASS_CoEdge) as ICoEdge;
end;

class function CoCoEdge.CreateRemote(const MachineName: string): ICoEdge;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CoEdge) as ICoEdge;
end;

class function CoVertex.Create: IVertex;
begin
  Result := CreateComObject(CLASS_Vertex) as IVertex;
end;

class function CoVertex.CreateRemote(const MachineName: string): IVertex;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Vertex) as IVertex;
end;

class function CoSelectionMgr.Create: ISelectionMgr;
begin
  Result := CreateComObject(CLASS_SelectionMgr) as ISelectionMgr;
end;

class function CoSelectionMgr.CreateRemote(const MachineName: string): ISelectionMgr;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SelectionMgr) as ISelectionMgr;
end;

class function CoEnumFaces.Create: IEnumFaces;
begin
  Result := CreateComObject(CLASS_EnumFaces) as IEnumFaces;
end;

class function CoEnumFaces.CreateRemote(const MachineName: string): IEnumFaces;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumFaces) as IEnumFaces;
end;

class function CoEnumFaces2.Create: IEnumFaces2;
begin
  Result := CreateComObject(CLASS_EnumFaces2) as IEnumFaces2;
end;

class function CoEnumFaces2.CreateRemote(const MachineName: string): IEnumFaces2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumFaces2) as IEnumFaces2;
end;

class function CoEnumLoops.Create: IEnumLoops;
begin
  Result := CreateComObject(CLASS_EnumLoops) as IEnumLoops;
end;

class function CoEnumLoops.CreateRemote(const MachineName: string): IEnumLoops;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumLoops) as IEnumLoops;
end;

class function CoEnumLoops2.Create: IEnumLoops2;
begin
  Result := CreateComObject(CLASS_EnumLoops2) as IEnumLoops2;
end;

class function CoEnumLoops2.CreateRemote(const MachineName: string): IEnumLoops2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumLoops2) as IEnumLoops2;
end;

class function CoEnumEdges.Create: IEnumEdges;
begin
  Result := CreateComObject(CLASS_EnumEdges) as IEnumEdges;
end;

class function CoEnumEdges.CreateRemote(const MachineName: string): IEnumEdges;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumEdges) as IEnumEdges;
end;

class function CoEnumCoEdges.Create: IEnumCoEdges;
begin
  Result := CreateComObject(CLASS_EnumCoEdges) as IEnumCoEdges;
end;

class function CoEnumCoEdges.CreateRemote(const MachineName: string): IEnumCoEdges;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumCoEdges) as IEnumCoEdges;
end;

class function CoEnumBodies.Create: IEnumBodies;
begin
  Result := CreateComObject(CLASS_EnumBodies) as IEnumBodies;
end;

class function CoEnumBodies.CreateRemote(const MachineName: string): IEnumBodies;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumBodies) as IEnumBodies;
end;

class function CoEnumBodies2.Create: IEnumBodies2;
begin
  Result := CreateComObject(CLASS_EnumBodies2) as IEnumBodies2;
end;

class function CoEnumBodies2.CreateRemote(const MachineName: string): IEnumBodies2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumBodies2) as IEnumBodies2;
end;

class function CoEntity.Create: IEntity;
begin
  Result := CreateComObject(CLASS_Entity) as IEntity;
end;

class function CoEntity.CreateRemote(const MachineName: string): IEntity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Entity) as IEntity;
end;

class function CoAttributeDef.Create: IAttributeDef;
begin
  Result := CreateComObject(CLASS_AttributeDef) as IAttributeDef;
end;

class function CoAttributeDef.CreateRemote(const MachineName: string): IAttributeDef;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AttributeDef) as IAttributeDef;
end;

class function CoParameter.Create: IParameter;
begin
  Result := CreateComObject(CLASS_Parameter) as IParameter;
end;

class function CoParameter.CreateRemote(const MachineName: string): IParameter;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Parameter) as IParameter;
end;

class function CoAttribute.Create: IAttribute;
begin
  Result := CreateComObject(CLASS_Attribute) as IAttribute;
end;

class function CoAttribute.CreateRemote(const MachineName: string): IAttribute;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Attribute) as IAttribute;
end;

class function CoModeler.Create: IModeler;
begin
  Result := CreateComObject(CLASS_Modeler) as IModeler;
end;

class function CoModeler.CreateRemote(const MachineName: string): IModeler;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Modeler) as IModeler;
end;

class function CoFeatMgrView.Create: IFeatMgrView;
begin
  Result := CreateComObject(CLASS_FeatMgrView) as IFeatMgrView;
end;

class function CoFeatMgrView.CreateRemote(const MachineName: string): IFeatMgrView;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FeatMgrView) as IFeatMgrView;
end;

class function CoEnvironment.Create: IEnvironment;
begin
  Result := CreateComObject(CLASS_Environment) as IEnvironment;
end;

class function CoEnvironment.CreateRemote(const MachineName: string): IEnvironment;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Environment) as IEnvironment;
end;

class function CoSheet.Create: ISheet;
begin
  Result := CreateComObject(CLASS_Sheet) as ISheet;
end;

class function CoSheet.CreateRemote(const MachineName: string): ISheet;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Sheet) as ISheet;
end;

class function CoBomTable.Create: IBomTable;
begin
  Result := CreateComObject(CLASS_BomTable) as IBomTable;
end;

class function CoBomTable.CreateRemote(const MachineName: string): IBomTable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BomTable) as IBomTable;
end;

class function CoRefPlane.Create: IRefPlane;
begin
  Result := CreateComObject(CLASS_RefPlane) as IRefPlane;
end;

class function CoRefPlane.CreateRemote(const MachineName: string): IRefPlane;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RefPlane) as IRefPlane;
end;

class function CoRefAxis.Create: IRefAxis;
begin
  Result := CreateComObject(CLASS_RefAxis) as IRefAxis;
end;

class function CoRefAxis.CreateRemote(const MachineName: string): IRefAxis;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RefAxis) as IRefAxis;
end;

class function CoMidSurface.Create: IMidSurface;
begin
  Result := CreateComObject(CLASS_MidSurface) as IMidSurface;
end;

class function CoMidSurface.CreateRemote(const MachineName: string): IMidSurface;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MidSurface) as IMidSurface;
end;

class function CoMate.Create: IMate;
begin
  Result := CreateComObject(CLASS_Mate) as IMate;
end;

class function CoMate.CreateRemote(const MachineName: string): IMate;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Mate) as IMate;
end;

class function CoMateEntity.Create: IMateEntity;
begin
  Result := CreateComObject(CLASS_MateEntity) as IMateEntity;
end;

class function CoMateEntity.CreateRemote(const MachineName: string): IMateEntity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MateEntity) as IMateEntity;
end;

class function CoSFSymbol.Create: ISFSymbol;
begin
  Result := CreateComObject(CLASS_SFSymbol) as ISFSymbol;
end;

class function CoSFSymbol.CreateRemote(const MachineName: string): ISFSymbol;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SFSymbol) as ISFSymbol;
end;

class function CoDatumTag.Create: IDatumTag;
begin
  Result := CreateComObject(CLASS_DatumTag) as IDatumTag;
end;

class function CoDatumTag.CreateRemote(const MachineName: string): IDatumTag;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DatumTag) as IDatumTag;
end;

class function CoDatumTargetSym.Create: IDatumTargetSym;
begin
  Result := CreateComObject(CLASS_DatumTargetSym) as IDatumTargetSym;
end;

class function CoDatumTargetSym.CreateRemote(const MachineName: string): IDatumTargetSym;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DatumTargetSym) as IDatumTargetSym;
end;

class function CoWeldSymbol.Create: IWeldSymbol;
begin
  Result := CreateComObject(CLASS_WeldSymbol) as IWeldSymbol;
end;

class function CoWeldSymbol.CreateRemote(const MachineName: string): IWeldSymbol;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WeldSymbol) as IWeldSymbol;
end;

class function CoConfiguration.Create: IConfiguration;
begin
  Result := CreateComObject(CLASS_Configuration) as IConfiguration;
end;

class function CoConfiguration.CreateRemote(const MachineName: string): IConfiguration;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Configuration) as IConfiguration;
end;

class function CoComponent.Create: IComponent;
begin
  Result := CreateComObject(CLASS_Component) as IComponent;
end;

class function CoComponent.CreateRemote(const MachineName: string): IComponent;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Component) as IComponent;
end;

class function CoDisplayData.Create: IDisplayData;
begin
  Result := CreateComObject(CLASS_DisplayData) as IDisplayData;
end;

class function CoDisplayData.CreateRemote(const MachineName: string): IDisplayData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DisplayData) as IDisplayData;
end;

class function CoCThread.Create: ICThread;
begin
  Result := CreateComObject(CLASS_CThread) as ICThread;
end;

class function CoCThread.CreateRemote(const MachineName: string): ICThread;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CThread) as ICThread;
end;

class function CoDisplayDimension.Create: IDisplayDimension;
begin
  Result := CreateComObject(CLASS_DisplayDimension) as IDisplayDimension;
end;

class function CoDisplayDimension.CreateRemote(const MachineName: string): IDisplayDimension;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DisplayDimension) as IDisplayDimension;
end;

class function CoReferenceCurve.Create: IReferenceCurve;
begin
  Result := CreateComObject(CLASS_ReferenceCurve) as IReferenceCurve;
end;

class function CoReferenceCurve.CreateRemote(const MachineName: string): IReferenceCurve;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReferenceCurve) as IReferenceCurve;
end;

class function CoColorTable.Create: IColorTable;
begin
  Result := CreateComObject(CLASS_ColorTable) as IColorTable;
end;

class function CoColorTable.CreateRemote(const MachineName: string): IColorTable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ColorTable) as IColorTable;
end;

class function CoSWPropertySheet.Create: ISWPropertySheet;
begin
  Result := CreateComObject(CLASS_SWPropertySheet) as ISWPropertySheet;
end;

class function CoSWPropertySheet.CreateRemote(const MachineName: string): ISWPropertySheet;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SWPropertySheet) as ISWPropertySheet;
end;

class function CoAnnotation.Create: IAnnotation;
begin
  Result := CreateComObject(CLASS_Annotation) as IAnnotation;
end;

class function CoAnnotation.CreateRemote(const MachineName: string): IAnnotation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Annotation) as IAnnotation;
end;

class function CoEnumDisplayDimensions.Create: IEnumDisplayDimensions;
begin
  Result := CreateComObject(CLASS_EnumDisplayDimensions) as IEnumDisplayDimensions;
end;

class function CoEnumDisplayDimensions.CreateRemote(const MachineName: string): IEnumDisplayDimensions;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumDisplayDimensions) as IEnumDisplayDimensions;
end;

class function CoRibFeatureData.Create: IRibFeatureData;
begin
  Result := CreateComObject(CLASS_RibFeatureData) as IRibFeatureData;
end;

class function CoRibFeatureData.CreateRemote(const MachineName: string): IRibFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RibFeatureData) as IRibFeatureData;
end;

class function CoDomeFeatureData.Create: IDomeFeatureData;
begin
  Result := CreateComObject(CLASS_DomeFeatureData) as IDomeFeatureData;
end;

class function CoDomeFeatureData.CreateRemote(const MachineName: string): IDomeFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DomeFeatureData) as IDomeFeatureData;
end;

class function CoEnumModelViews.Create: IEnumModelViews;
begin
  Result := CreateComObject(CLASS_EnumModelViews) as IEnumModelViews;
end;

class function CoEnumModelViews.CreateRemote(const MachineName: string): IEnumModelViews;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumModelViews) as IEnumModelViews;
end;

class function CoEnumDocuments.Create: IEnumDocuments;
begin
  Result := CreateComObject(CLASS_EnumDocuments) as IEnumDocuments;
end;

class function CoEnumDocuments.CreateRemote(const MachineName: string): IEnumDocuments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumDocuments) as IEnumDocuments;
end;

class function CoEnumDocuments2.Create: IEnumDocuments2;
begin
  Result := CreateComObject(CLASS_EnumDocuments2) as IEnumDocuments2;
end;

class function CoEnumDocuments2.CreateRemote(const MachineName: string): IEnumDocuments2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumDocuments2) as IEnumDocuments2;
end;

class function CoCustomSymbol.Create: ICustomSymbol;
begin
  Result := CreateComObject(CLASS_CustomSymbol) as ICustomSymbol;
end;

class function CoCustomSymbol.CreateRemote(const MachineName: string): ICustomSymbol;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomSymbol) as ICustomSymbol;
end;

class function CoDetailingDefaults.Create: IDetailingDefaults;
begin
  Result := CreateComObject(CLASS_DetailingDefaults) as IDetailingDefaults;
end;

class function CoDetailingDefaults.CreateRemote(const MachineName: string): IDetailingDefaults;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DetailingDefaults) as IDetailingDefaults;
end;

class function CoTextFormat.Create: ITextFormat;
begin
  Result := CreateComObject(CLASS_TextFormat) as ITextFormat;
end;

class function CoTextFormat.CreateRemote(const MachineName: string): ITextFormat;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TextFormat) as ITextFormat;
end;

class function CoSketchPoint.Create: ISketchPoint;
begin
  Result := CreateComObject(CLASS_SketchPoint) as ISketchPoint;
end;

class function CoSketchPoint.CreateRemote(const MachineName: string): ISketchPoint;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchPoint) as ISketchPoint;
end;

class function CoSketchSegment.Create: ISketchSegment;
begin
  Result := CreateComObject(CLASS_SketchSegment) as ISketchSegment;
end;

class function CoSketchSegment.CreateRemote(const MachineName: string): ISketchSegment;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchSegment) as ISketchSegment;
end;

class function CoSketchLine.Create: ISketchLine;
begin
  Result := CreateComObject(CLASS_SketchLine) as ISketchLine;
end;

class function CoSketchLine.CreateRemote(const MachineName: string): ISketchLine;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchLine) as ISketchLine;
end;

class function CoSketchArc.Create: ISketchArc;
begin
  Result := CreateComObject(CLASS_SketchArc) as ISketchArc;
end;

class function CoSketchArc.CreateRemote(const MachineName: string): ISketchArc;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchArc) as ISketchArc;
end;

class function CoSketchText.Create: ISketchText;
begin
  Result := CreateComObject(CLASS_SketchText) as ISketchText;
end;

class function CoSketchText.CreateRemote(const MachineName: string): ISketchText;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchText) as ISketchText;
end;

class function CoSketchEllipse.Create: ISketchEllipse;
begin
  Result := CreateComObject(CLASS_SketchEllipse) as ISketchEllipse;
end;

class function CoSketchEllipse.CreateRemote(const MachineName: string): ISketchEllipse;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchEllipse) as ISketchEllipse;
end;

class function CoSketchParabola.Create: ISketchParabola;
begin
  Result := CreateComObject(CLASS_SketchParabola) as ISketchParabola;
end;

class function CoSketchParabola.CreateRemote(const MachineName: string): ISketchParabola;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchParabola) as ISketchParabola;
end;

class function CoSketchSpline.Create: ISketchSpline;
begin
  Result := CreateComObject(CLASS_SketchSpline) as ISketchSpline;
end;

class function CoSketchSpline.CreateRemote(const MachineName: string): ISketchSpline;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchSpline) as ISketchSpline;
end;

class function CoEnumSketchPoints.Create: IEnumSketchPoints;
begin
  Result := CreateComObject(CLASS_EnumSketchPoints) as IEnumSketchPoints;
end;

class function CoEnumSketchPoints.CreateRemote(const MachineName: string): IEnumSketchPoints;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumSketchPoints) as IEnumSketchPoints;
end;

class function CoEnumSketchSegments.Create: IEnumSketchSegments;
begin
  Result := CreateComObject(CLASS_EnumSketchSegments) as IEnumSketchSegments;
end;

class function CoEnumSketchSegments.CreateRemote(const MachineName: string): IEnumSketchSegments;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumSketchSegments) as IEnumSketchSegments;
end;

class function CoLightDialog.Create: ILightDialog;
begin
  Result := CreateComObject(CLASS_LightDialog) as ILightDialog;
end;

class function CoLightDialog.CreateRemote(const MachineName: string): ILightDialog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LightDialog) as ILightDialog;
end;

class function CoLayer.Create: ILayer;
begin
  Result := CreateComObject(CLASS_Layer) as ILayer;
end;

class function CoLayer.CreateRemote(const MachineName: string): ILayer;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Layer) as ILayer;
end;

class function CoLayerMgr.Create: ILayerMgr;
begin
  Result := CreateComObject(CLASS_LayerMgr) as ILayerMgr;
end;

class function CoLayerMgr.CreateRemote(const MachineName: string): ILayerMgr;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LayerMgr) as ILayerMgr;
end;

class function CoDesignTable.Create: IDesignTable;
begin
  Result := CreateComObject(CLASS_DesignTable) as IDesignTable;
end;

class function CoDesignTable.CreateRemote(const MachineName: string): IDesignTable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DesignTable) as IDesignTable;
end;

class function CoSketchHatch.Create: ISketchHatch;
begin
  Result := CreateComObject(CLASS_SketchHatch) as ISketchHatch;
end;

class function CoSketchHatch.CreateRemote(const MachineName: string): ISketchHatch;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchHatch) as ISketchHatch;
end;

class function CoEnumSketchHatches.Create: IEnumSketchHatches;
begin
  Result := CreateComObject(CLASS_EnumSketchHatches) as IEnumSketchHatches;
end;

class function CoEnumSketchHatches.CreateRemote(const MachineName: string): IEnumSketchHatches;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumSketchHatches) as IEnumSketchHatches;
end;

class function CoEnumCurves.Create: IEnumCurves;
begin
  Result := CreateComObject(CLASS_EnumCurves) as IEnumCurves;
end;

class function CoEnumCurves.CreateRemote(const MachineName: string): IEnumCurves;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumCurves) as IEnumCurves;
end;

class function CoSimpleHoleFeatureData.Create: ISimpleHoleFeatureData;
begin
  Result := CreateComObject(CLASS_SimpleHoleFeatureData) as ISimpleHoleFeatureData;
end;

class function CoSimpleHoleFeatureData.CreateRemote(const MachineName: string): ISimpleHoleFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SimpleHoleFeatureData) as ISimpleHoleFeatureData;
end;

class function CoWizardHoleFeatureData.Create: IWizardHoleFeatureData;
begin
  Result := CreateComObject(CLASS_WizardHoleFeatureData) as IWizardHoleFeatureData;
end;

class function CoWizardHoleFeatureData.CreateRemote(const MachineName: string): IWizardHoleFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WizardHoleFeatureData) as IWizardHoleFeatureData;
end;

class function CoChamferFeatureData.Create: IChamferFeatureData;
begin
  Result := CreateComObject(CLASS_ChamferFeatureData) as IChamferFeatureData;
end;

class function CoChamferFeatureData.CreateRemote(const MachineName: string): IChamferFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ChamferFeatureData) as IChamferFeatureData;
end;

class function CoDraftFeatureData.Create: IDraftFeatureData;
begin
  Result := CreateComObject(CLASS_DraftFeatureData) as IDraftFeatureData;
end;

class function CoDraftFeatureData.CreateRemote(const MachineName: string): IDraftFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DraftFeatureData) as IDraftFeatureData;
end;

class function CoSimpleFilletFeatureData.Create: ISimpleFilletFeatureData;
begin
  Result := CreateComObject(CLASS_SimpleFilletFeatureData) as ISimpleFilletFeatureData;
end;

class function CoSimpleFilletFeatureData.CreateRemote(const MachineName: string): ISimpleFilletFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SimpleFilletFeatureData) as ISimpleFilletFeatureData;
end;

class function CoVariableFilletFeatureData.Create: IVariableFilletFeatureData;
begin
  Result := CreateComObject(CLASS_VariableFilletFeatureData) as IVariableFilletFeatureData;
end;

class function CoVariableFilletFeatureData.CreateRemote(const MachineName: string): IVariableFilletFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_VariableFilletFeatureData) as IVariableFilletFeatureData;
end;

class function CoExtrudeFeatureData.Create: IExtrudeFeatureData;
begin
  Result := CreateComObject(CLASS_ExtrudeFeatureData) as IExtrudeFeatureData;
end;

class function CoExtrudeFeatureData.CreateRemote(const MachineName: string): IExtrudeFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExtrudeFeatureData) as IExtrudeFeatureData;
end;

class function CoRevolveFeatureData.Create: IRevolveFeatureData;
begin
  Result := CreateComObject(CLASS_RevolveFeatureData) as IRevolveFeatureData;
end;

class function CoRevolveFeatureData.CreateRemote(const MachineName: string): IRevolveFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RevolveFeatureData) as IRevolveFeatureData;
end;

class function CoSdmDoc.Create: ISdmDoc;
begin
  Result := CreateComObject(CLASS_SdmDoc) as ISdmDoc;
end;

class function CoSdmDoc.CreateRemote(const MachineName: string): ISdmDoc;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SdmDoc) as ISdmDoc;
end;

class function CoDrSection.Create: IDrSection;
begin
  Result := CreateComObject(CLASS_DrSection) as IDrSection;
end;

class function CoDrSection.CreateRemote(const MachineName: string): IDrSection;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DrSection) as IDrSection;
end;

class function CoEnumComponents.Create: IEnumComponents;
begin
  Result := CreateComObject(CLASS_EnumComponents) as IEnumComponents;
end;

class function CoEnumComponents.CreateRemote(const MachineName: string): IEnumComponents;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumComponents) as IEnumComponents;
end;

class function CoEnumComponents2.Create: IEnumComponents2;
begin
  Result := CreateComObject(CLASS_EnumComponents2) as IEnumComponents2;
end;

class function CoEnumComponents2.CreateRemote(const MachineName: string): IEnumComponents2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumComponents2) as IEnumComponents2;
end;

class function CoEnumDrSections.Create: IEnumDrSections;
begin
  Result := CreateComObject(CLASS_EnumDrSections) as IEnumDrSections;
end;

class function CoEnumDrSections.CreateRemote(const MachineName: string): IEnumDrSections;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EnumDrSections) as IEnumDrSections;
end;

class function CoExplodeStep.Create: IExplodeStep;
begin
  Result := CreateComObject(CLASS_ExplodeStep) as IExplodeStep;
end;

class function CoExplodeStep.CreateRemote(const MachineName: string): IExplodeStep;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExplodeStep) as IExplodeStep;
end;

class function CoMathUtility.Create: IMathUtility;
begin
  Result := CreateComObject(CLASS_MathUtility) as IMathUtility;
end;

class function CoMathUtility.CreateRemote(const MachineName: string): IMathUtility;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MathUtility) as IMathUtility;
end;

class function CoMathTransform.Create: IMathTransform;
begin
  Result := CreateComObject(CLASS_MathTransform) as IMathTransform;
end;

class function CoMathTransform.CreateRemote(const MachineName: string): IMathTransform;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MathTransform) as IMathTransform;
end;

class function CoMathPoint.Create: IMathPoint;
begin
  Result := CreateComObject(CLASS_MathPoint) as IMathPoint;
end;

class function CoMathPoint.CreateRemote(const MachineName: string): IMathPoint;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MathPoint) as IMathPoint;
end;

class function CoMathVector.Create: IMathVector;
begin
  Result := CreateComObject(CLASS_MathVector) as IMathVector;
end;

class function CoMathVector.CreateRemote(const MachineName: string): IMathVector;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MathVector) as IMathVector;
end;

class function CoMirrorPatternFeatureData.Create: IMirrorPatternFeatureData;
begin
  Result := CreateComObject(CLASS_MirrorPatternFeatureData) as IMirrorPatternFeatureData;
end;

class function CoMirrorPatternFeatureData.CreateRemote(const MachineName: string): IMirrorPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MirrorPatternFeatureData) as IMirrorPatternFeatureData;
end;

class function CoDetailCircle.Create: IDetailCircle;
begin
  Result := CreateComObject(CLASS_DetailCircle) as IDetailCircle;
end;

class function CoDetailCircle.CreateRemote(const MachineName: string): IDetailCircle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DetailCircle) as IDetailCircle;
end;

class function CoCircularPatternFeatureData.Create: ICircularPatternFeatureData;
begin
  Result := CreateComObject(CLASS_CircularPatternFeatureData) as ICircularPatternFeatureData;
end;

class function CoCircularPatternFeatureData.CreateRemote(const MachineName: string): ICircularPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CircularPatternFeatureData) as ICircularPatternFeatureData;
end;

class function CoLinearPatternFeatureData.Create: ILinearPatternFeatureData;
begin
  Result := CreateComObject(CLASS_LinearPatternFeatureData) as ILinearPatternFeatureData;
end;

class function CoLinearPatternFeatureData.CreateRemote(const MachineName: string): ILinearPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LinearPatternFeatureData) as ILinearPatternFeatureData;
end;

class function CoTablePatternFeatureData.Create: ITablePatternFeatureData;
begin
  Result := CreateComObject(CLASS_TablePatternFeatureData) as ITablePatternFeatureData;
end;

class function CoTablePatternFeatureData.CreateRemote(const MachineName: string): ITablePatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TablePatternFeatureData) as ITablePatternFeatureData;
end;

class function CoSketchPatternFeatureData.Create: ISketchPatternFeatureData;
begin
  Result := CreateComObject(CLASS_SketchPatternFeatureData) as ISketchPatternFeatureData;
end;

class function CoSketchPatternFeatureData.CreateRemote(const MachineName: string): ISketchPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchPatternFeatureData) as ISketchPatternFeatureData;
end;

class function CoMirrorSolidFeatureData.Create: IMirrorSolidFeatureData;
begin
  Result := CreateComObject(CLASS_MirrorSolidFeatureData) as IMirrorSolidFeatureData;
end;

class function CoMirrorSolidFeatureData.CreateRemote(const MachineName: string): IMirrorSolidFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MirrorSolidFeatureData) as IMirrorSolidFeatureData;
end;

class function CoPropertyManagerPage.Create: IPropertyManagerPage;
begin
  Result := CreateComObject(CLASS_PropertyManagerPage) as IPropertyManagerPage;
end;

class function CoPropertyManagerPage.CreateRemote(const MachineName: string): IPropertyManagerPage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPage) as IPropertyManagerPage;
end;

class function CoProjectionArrow.Create: IProjectionArrow;
begin
  Result := CreateComObject(CLASS_ProjectionArrow) as IProjectionArrow;
end;

class function CoProjectionArrow.CreateRemote(const MachineName: string): IProjectionArrow;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ProjectionArrow) as IProjectionArrow;
end;

class function CoTessellation.Create: ITessellation;
begin
  Result := CreateComObject(CLASS_Tessellation) as ITessellation;
end;

class function CoTessellation.CreateRemote(const MachineName: string): ITessellation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Tessellation) as ITessellation;
end;

class function CoSheetMetalFeatureData.Create: ISheetMetalFeatureData;
begin
  Result := CreateComObject(CLASS_SheetMetalFeatureData) as ISheetMetalFeatureData;
end;

class function CoSheetMetalFeatureData.CreateRemote(const MachineName: string): ISheetMetalFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SheetMetalFeatureData) as ISheetMetalFeatureData;
end;

class function CoOneBendFeatureData.Create: IOneBendFeatureData;
begin
  Result := CreateComObject(CLASS_OneBendFeatureData) as IOneBendFeatureData;
end;

class function CoOneBendFeatureData.CreateRemote(const MachineName: string): IOneBendFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_OneBendFeatureData) as IOneBendFeatureData;
end;

class function CoBendsFeatureData.Create: IBendsFeatureData;
begin
  Result := CreateComObject(CLASS_BendsFeatureData) as IBendsFeatureData;
end;

class function CoBendsFeatureData.CreateRemote(const MachineName: string): IBendsFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BendsFeatureData) as IBendsFeatureData;
end;

class function CoUserUnit.Create: IUserUnit;
begin
  Result := CreateComObject(CLASS_UserUnit) as IUserUnit;
end;

class function CoUserUnit.CreateRemote(const MachineName: string): IUserUnit;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UserUnit) as IUserUnit;
end;

class function CoBaseFlangeFeatureData.Create: IBaseFlangeFeatureData;
begin
  Result := CreateComObject(CLASS_BaseFlangeFeatureData) as IBaseFlangeFeatureData;
end;

class function CoBaseFlangeFeatureData.CreateRemote(const MachineName: string): IBaseFlangeFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BaseFlangeFeatureData) as IBaseFlangeFeatureData;
end;

class function CoEdgeFlangeFeatureData.Create: IEdgeFlangeFeatureData;
begin
  Result := CreateComObject(CLASS_EdgeFlangeFeatureData) as IEdgeFlangeFeatureData;
end;

class function CoEdgeFlangeFeatureData.CreateRemote(const MachineName: string): IEdgeFlangeFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EdgeFlangeFeatureData) as IEdgeFlangeFeatureData;
end;

class function CoMiterFlangeFeatureData.Create: IMiterFlangeFeatureData;
begin
  Result := CreateComObject(CLASS_MiterFlangeFeatureData) as IMiterFlangeFeatureData;
end;

class function CoMiterFlangeFeatureData.CreateRemote(const MachineName: string): IMiterFlangeFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MiterFlangeFeatureData) as IMiterFlangeFeatureData;
end;

class function CoSketchedBendFeatureData.Create: ISketchedBendFeatureData;
begin
  Result := CreateComObject(CLASS_SketchedBendFeatureData) as ISketchedBendFeatureData;
end;

class function CoSketchedBendFeatureData.CreateRemote(const MachineName: string): ISketchedBendFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchedBendFeatureData) as ISketchedBendFeatureData;
end;

class function CoClosedCornerFeatureData.Create: IClosedCornerFeatureData;
begin
  Result := CreateComObject(CLASS_ClosedCornerFeatureData) as IClosedCornerFeatureData;
end;

class function CoClosedCornerFeatureData.CreateRemote(const MachineName: string): IClosedCornerFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ClosedCornerFeatureData) as IClosedCornerFeatureData;
end;

class function CoFoldsFeatureData.Create: IFoldsFeatureData;
begin
  Result := CreateComObject(CLASS_FoldsFeatureData) as IFoldsFeatureData;
end;

class function CoFoldsFeatureData.CreateRemote(const MachineName: string): IFoldsFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FoldsFeatureData) as IFoldsFeatureData;
end;

class function CoFlatPatternFeatureData.Create: IFlatPatternFeatureData;
begin
  Result := CreateComObject(CLASS_FlatPatternFeatureData) as IFlatPatternFeatureData;
end;

class function CoFlatPatternFeatureData.CreateRemote(const MachineName: string): IFlatPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FlatPatternFeatureData) as IFlatPatternFeatureData;
end;

class function CoLocalLinearPatternFeatureData.Create: ILocalLinearPatternFeatureData;
begin
  Result := CreateComObject(CLASS_LocalLinearPatternFeatureData) as ILocalLinearPatternFeatureData;
end;

class function CoLocalLinearPatternFeatureData.CreateRemote(const MachineName: string): ILocalLinearPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LocalLinearPatternFeatureData) as ILocalLinearPatternFeatureData;
end;

class function CoLocalCircularPatternFeatureData.Create: ILocalCircularPatternFeatureData;
begin
  Result := CreateComObject(CLASS_LocalCircularPatternFeatureData) as ILocalCircularPatternFeatureData;
end;

class function CoLocalCircularPatternFeatureData.CreateRemote(const MachineName: string): ILocalCircularPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LocalCircularPatternFeatureData) as ILocalCircularPatternFeatureData;
end;

class function CoDerivedPatternFeatureData.Create: IDerivedPatternFeatureData;
begin
  Result := CreateComObject(CLASS_DerivedPatternFeatureData) as IDerivedPatternFeatureData;
end;

class function CoDerivedPatternFeatureData.CreateRemote(const MachineName: string): IDerivedPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DerivedPatternFeatureData) as IDerivedPatternFeatureData;
end;

class function CoBody2.Create: IBody2;
begin
  Result := CreateComObject(CLASS_Body2) as IBody2;
end;

class function CoBody2.CreateRemote(const MachineName: string): IBody2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Body2) as IBody2;
end;

class function CoFace2.Create: IFace2;
begin
  Result := CreateComObject(CLASS_Face2) as IFace2;
end;

class function CoFace2.CreateRemote(const MachineName: string): IFace2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Face2) as IFace2;
end;

class function CoModelDoc2.Create: IModelDoc2;
begin
  Result := CreateComObject(CLASS_ModelDoc2) as IModelDoc2;
end;

class function CoModelDoc2.CreateRemote(const MachineName: string): IModelDoc2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ModelDoc2) as IModelDoc2;
end;

class function CoLoop2.Create: ILoop2;
begin
  Result := CreateComObject(CLASS_Loop2) as ILoop2;
end;

class function CoLoop2.CreateRemote(const MachineName: string): ILoop2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Loop2) as ILoop2;
end;

class function CoMidSurface2.Create: IMidSurface2;
begin
  Result := CreateComObject(CLASS_MidSurface2) as IMidSurface2;
end;

class function CoMidSurface2.CreateRemote(const MachineName: string): IMidSurface2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MidSurface2) as IMidSurface2;
end;

class function CoComponent2.Create: IComponent2;
begin
  Result := CreateComObject(CLASS_Component2) as IComponent2;
end;

class function CoComponent2.CreateRemote(const MachineName: string): IComponent2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Component2) as IComponent2;
end;

class function CoPropertyManagerPage2.Create: IPropertyManagerPage2;
begin
  Result := CreateComObject(CLASS_PropertyManagerPage2) as IPropertyManagerPage2;
end;

class function CoPropertyManagerPage2.CreateRemote(const MachineName: string): IPropertyManagerPage2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPage2) as IPropertyManagerPage2;
end;

class function CoPropertyManagerPageGroup.Create: IPropertyManagerPageGroup;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageGroup) as IPropertyManagerPageGroup;
end;

class function CoPropertyManagerPageGroup.CreateRemote(const MachineName: string): IPropertyManagerPageGroup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageGroup) as IPropertyManagerPageGroup;
end;

class function CoPropertyManagerPageControl.Create: IPropertyManagerPageControl;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageControl) as IPropertyManagerPageControl;
end;

class function CoPropertyManagerPageControl.CreateRemote(const MachineName: string): IPropertyManagerPageControl;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageControl) as IPropertyManagerPageControl;
end;

class function CoPropertyManagerPageLabel.Create: IPropertyManagerPageLabel;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageLabel) as IPropertyManagerPageLabel;
end;

class function CoPropertyManagerPageLabel.CreateRemote(const MachineName: string): IPropertyManagerPageLabel;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageLabel) as IPropertyManagerPageLabel;
end;

class function CoPropertyManagerPageCheckbox.Create: IPropertyManagerPageCheckbox;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageCheckbox) as IPropertyManagerPageCheckbox;
end;

class function CoPropertyManagerPageCheckbox.CreateRemote(const MachineName: string): IPropertyManagerPageCheckbox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageCheckbox) as IPropertyManagerPageCheckbox;
end;

class function CoPropertyManagerPageButton.Create: IPropertyManagerPageButton;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageButton) as IPropertyManagerPageButton;
end;

class function CoPropertyManagerPageButton.CreateRemote(const MachineName: string): IPropertyManagerPageButton;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageButton) as IPropertyManagerPageButton;
end;

class function CoPropertyManagerPageOption.Create: IPropertyManagerPageOption;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageOption) as IPropertyManagerPageOption;
end;

class function CoPropertyManagerPageOption.CreateRemote(const MachineName: string): IPropertyManagerPageOption;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageOption) as IPropertyManagerPageOption;
end;

class function CoPropertyManagerPageTextbox.Create: IPropertyManagerPageTextbox;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageTextbox) as IPropertyManagerPageTextbox;
end;

class function CoPropertyManagerPageTextbox.CreateRemote(const MachineName: string): IPropertyManagerPageTextbox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageTextbox) as IPropertyManagerPageTextbox;
end;

class function CoPropertyManagerPageListbox.Create: IPropertyManagerPageListbox;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageListbox) as IPropertyManagerPageListbox;
end;

class function CoPropertyManagerPageListbox.CreateRemote(const MachineName: string): IPropertyManagerPageListbox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageListbox) as IPropertyManagerPageListbox;
end;

class function CoPropertyManagerPageCombobox.Create: IPropertyManagerPageCombobox;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageCombobox) as IPropertyManagerPageCombobox;
end;

class function CoPropertyManagerPageCombobox.CreateRemote(const MachineName: string): IPropertyManagerPageCombobox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageCombobox) as IPropertyManagerPageCombobox;
end;

class function CoPropertyManagerPageNumberbox.Create: IPropertyManagerPageNumberbox;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageNumberbox) as IPropertyManagerPageNumberbox;
end;

class function CoPropertyManagerPageNumberbox.CreateRemote(const MachineName: string): IPropertyManagerPageNumberbox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageNumberbox) as IPropertyManagerPageNumberbox;
end;

class function CoPropertyManagerPageSelectionbox.Create: IPropertyManagerPageSelectionbox;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageSelectionbox) as IPropertyManagerPageSelectionbox;
end;

class function CoPropertyManagerPageSelectionbox.CreateRemote(const MachineName: string): IPropertyManagerPageSelectionbox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageSelectionbox) as IPropertyManagerPageSelectionbox;
end;

class function CoMultiJogLeader.Create: IMultiJogLeader;
begin
  Result := CreateComObject(CLASS_MultiJogLeader) as IMultiJogLeader;
end;

class function CoMultiJogLeader.CreateRemote(const MachineName: string): IMultiJogLeader;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MultiJogLeader) as IMultiJogLeader;
end;

class function CoProjectionCurveFeatureData.Create: IProjectionCurveFeatureData;
begin
  Result := CreateComObject(CLASS_ProjectionCurveFeatureData) as IProjectionCurveFeatureData;
end;

class function CoProjectionCurveFeatureData.CreateRemote(const MachineName: string): IProjectionCurveFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ProjectionCurveFeatureData) as IProjectionCurveFeatureData;
end;

class function CoScaleFeatureData.Create: IScaleFeatureData;
begin
  Result := CreateComObject(CLASS_ScaleFeatureData) as IScaleFeatureData;
end;

class function CoScaleFeatureData.CreateRemote(const MachineName: string): IScaleFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ScaleFeatureData) as IScaleFeatureData;
end;

class function CoShellFeatureData.Create: IShellFeatureData;
begin
  Result := CreateComObject(CLASS_ShellFeatureData) as IShellFeatureData;
end;

class function CoShellFeatureData.CreateRemote(const MachineName: string): IShellFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ShellFeatureData) as IShellFeatureData;
end;

class function CoSweepFeatureData.Create: ISweepFeatureData;
begin
  Result := CreateComObject(CLASS_SweepFeatureData) as ISweepFeatureData;
end;

class function CoSweepFeatureData.CreateRemote(const MachineName: string): ISweepFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SweepFeatureData) as ISweepFeatureData;
end;

class function CoLoftFeatureData.Create: ILoftFeatureData;
begin
  Result := CreateComObject(CLASS_LoftFeatureData) as ILoftFeatureData;
end;

class function CoLoftFeatureData.CreateRemote(const MachineName: string): ILoftFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoftFeatureData) as ILoftFeatureData;
end;

class function CoThickenFeatureData.Create: IThickenFeatureData;
begin
  Result := CreateComObject(CLASS_ThickenFeatureData) as IThickenFeatureData;
end;

class function CoThickenFeatureData.CreateRemote(const MachineName: string): IThickenFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ThickenFeatureData) as IThickenFeatureData;
end;

class function CoSurfCutFeatureData.Create: ISurfaceCutFeatureData;
begin
  Result := CreateComObject(CLASS_SurfCutFeatureData) as ISurfaceCutFeatureData;
end;

class function CoSurfCutFeatureData.CreateRemote(const MachineName: string): ISurfaceCutFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfCutFeatureData) as ISurfaceCutFeatureData;
end;

class function CoReplaceFaceFeatureData.Create: IReplaceFaceFeatureData;
begin
  Result := CreateComObject(CLASS_ReplaceFaceFeatureData) as IReplaceFaceFeatureData;
end;

class function CoReplaceFaceFeatureData.CreateRemote(const MachineName: string): IReplaceFaceFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReplaceFaceFeatureData) as IReplaceFaceFeatureData;
end;

class function CoRibFeatureData2.Create: IRibFeatureData2;
begin
  Result := CreateComObject(CLASS_RibFeatureData2) as IRibFeatureData2;
end;

class function CoRibFeatureData2.CreateRemote(const MachineName: string): IRibFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RibFeatureData2) as IRibFeatureData2;
end;

class function CoDomeFeatureData2.Create: IDomeFeatureData2;
begin
  Result := CreateComObject(CLASS_DomeFeatureData2) as IDomeFeatureData2;
end;

class function CoDomeFeatureData2.CreateRemote(const MachineName: string): IDomeFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DomeFeatureData2) as IDomeFeatureData2;
end;

class function CoSimpleHoleFeatureData2.Create: ISimpleHoleFeatureData2;
begin
  Result := CreateComObject(CLASS_SimpleHoleFeatureData2) as ISimpleHoleFeatureData2;
end;

class function CoSimpleHoleFeatureData2.CreateRemote(const MachineName: string): ISimpleHoleFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SimpleHoleFeatureData2) as ISimpleHoleFeatureData2;
end;

class function CoWizardHoleFeatureData2.Create: IWizardHoleFeatureData2;
begin
  Result := CreateComObject(CLASS_WizardHoleFeatureData2) as IWizardHoleFeatureData2;
end;

class function CoWizardHoleFeatureData2.CreateRemote(const MachineName: string): IWizardHoleFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WizardHoleFeatureData2) as IWizardHoleFeatureData2;
end;

class function CoChamferFeatureData2.Create: IChamferFeatureData2;
begin
  Result := CreateComObject(CLASS_ChamferFeatureData2) as IChamferFeatureData2;
end;

class function CoChamferFeatureData2.CreateRemote(const MachineName: string): IChamferFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ChamferFeatureData2) as IChamferFeatureData2;
end;

class function CoDraftFeatureData2.Create: IDraftFeatureData2;
begin
  Result := CreateComObject(CLASS_DraftFeatureData2) as IDraftFeatureData2;
end;

class function CoDraftFeatureData2.CreateRemote(const MachineName: string): IDraftFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DraftFeatureData2) as IDraftFeatureData2;
end;

class function CoSimpleFilletFeatureData2.Create: ISimpleFilletFeatureData2;
begin
  Result := CreateComObject(CLASS_SimpleFilletFeatureData2) as ISimpleFilletFeatureData2;
end;

class function CoSimpleFilletFeatureData2.CreateRemote(const MachineName: string): ISimpleFilletFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SimpleFilletFeatureData2) as ISimpleFilletFeatureData2;
end;

class function CoVariableFilletFeatureData2.Create: IVariableFilletFeatureData2;
begin
  Result := CreateComObject(CLASS_VariableFilletFeatureData2) as IVariableFilletFeatureData2;
end;

class function CoVariableFilletFeatureData2.CreateRemote(const MachineName: string): IVariableFilletFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_VariableFilletFeatureData2) as IVariableFilletFeatureData2;
end;

class function CoExtrudeFeatureData2.Create: IExtrudeFeatureData2;
begin
  Result := CreateComObject(CLASS_ExtrudeFeatureData2) as IExtrudeFeatureData2;
end;

class function CoExtrudeFeatureData2.CreateRemote(const MachineName: string): IExtrudeFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExtrudeFeatureData2) as IExtrudeFeatureData2;
end;

class function CoRevolveFeatureData2.Create: IRevolveFeatureData2;
begin
  Result := CreateComObject(CLASS_RevolveFeatureData2) as IRevolveFeatureData2;
end;

class function CoRevolveFeatureData2.CreateRemote(const MachineName: string): IRevolveFeatureData2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RevolveFeatureData2) as IRevolveFeatureData2;
end;

class function CoMacroFeatureData.Create: IMacroFeatureData;
begin
  Result := CreateComObject(CLASS_MacroFeatureData) as IMacroFeatureData;
end;

class function CoMacroFeatureData.CreateRemote(const MachineName: string): IMacroFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MacroFeatureData) as IMacroFeatureData;
end;

class function CoDowelSymbol.Create: IDowelSymbol;
begin
  Result := CreateComObject(CLASS_DowelSymbol) as IDowelSymbol;
end;

class function CoDowelSymbol.CreateRemote(const MachineName: string): IDowelSymbol;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DowelSymbol) as IDowelSymbol;
end;

class function CoDragOperator.Create: IDragOperator;
begin
  Result := CreateComObject(CLASS_DragOperator) as IDragOperator;
end;

class function CoDragOperator.CreateRemote(const MachineName: string): IDragOperator;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DragOperator) as IDragOperator;
end;

class function CoCurveDrivenPatternFeatureData.Create: ICurveDrivenPatternFeatureData;
begin
  Result := CreateComObject(CLASS_CurveDrivenPatternFeatureData) as ICurveDrivenPatternFeatureData;
end;

class function CoCurveDrivenPatternFeatureData.CreateRemote(const MachineName: string): ICurveDrivenPatternFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CurveDrivenPatternFeatureData) as ICurveDrivenPatternFeatureData;
end;

class function CoBalloonStack.Create: IBalloonStack;
begin
  Result := CreateComObject(CLASS_BalloonStack) as IBalloonStack;
end;

class function CoBalloonStack.CreateRemote(const MachineName: string): IBalloonStack;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BalloonStack) as IBalloonStack;
end;

class function CoStatusBarPane.Create: IStatusBarPane;
begin
  Result := CreateComObject(CLASS_StatusBarPane) as IStatusBarPane;
end;

class function CoStatusBarPane.CreateRemote(const MachineName: string): IStatusBarPane;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StatusBarPane) as IStatusBarPane;
end;

class function CoEquationMgr.Create: IEquationMgr;
begin
  Result := CreateComObject(CLASS_EquationMgr) as IEquationMgr;
end;

class function CoEquationMgr.CreateRemote(const MachineName: string): IEquationMgr;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EquationMgr) as IEquationMgr;
end;

class function CoPageSetup.Create: IPageSetup;
begin
  Result := CreateComObject(CLASS_PageSetup) as IPageSetup;
end;

class function CoPageSetup.CreateRemote(const MachineName: string): IPageSetup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PageSetup) as IPageSetup;
end;

class function CoRipFeatureData.Create: IRipFeatureData;
begin
  Result := CreateComObject(CLASS_RipFeatureData) as IRipFeatureData;
end;

class function CoRipFeatureData.CreateRemote(const MachineName: string): IRipFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RipFeatureData) as IRipFeatureData;
end;

class function CoHemFeatureData.Create: IHemFeatureData;
begin
  Result := CreateComObject(CLASS_HemFeatureData) as IHemFeatureData;
end;

class function CoHemFeatureData.CreateRemote(const MachineName: string): IHemFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HemFeatureData) as IHemFeatureData;
end;

class function CoBreakCornerFeatureData.Create: IBreakCornerFeatureData;
begin
  Result := CreateComObject(CLASS_BreakCornerFeatureData) as IBreakCornerFeatureData;
end;

class function CoBreakCornerFeatureData.CreateRemote(const MachineName: string): IBreakCornerFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BreakCornerFeatureData) as IBreakCornerFeatureData;
end;

class function CoJogFeatureData.Create: IJogFeatureData;
begin
  Result := CreateComObject(CLASS_JogFeatureData) as IJogFeatureData;
end;

class function CoJogFeatureData.CreateRemote(const MachineName: string): IJogFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_JogFeatureData) as IJogFeatureData;
end;

class function CoSurfExtrudeFeatureData.Create: ISurfExtrudeFeatureData;
begin
  Result := CreateComObject(CLASS_SurfExtrudeFeatureData) as ISurfExtrudeFeatureData;
end;

class function CoSurfExtrudeFeatureData.CreateRemote(const MachineName: string): ISurfExtrudeFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfExtrudeFeatureData) as ISurfExtrudeFeatureData;
end;

class function CoSurfRevolveFeatureData.Create: ISurfRevolveFeatureData;
begin
  Result := CreateComObject(CLASS_SurfRevolveFeatureData) as ISurfRevolveFeatureData;
end;

class function CoSurfRevolveFeatureData.CreateRemote(const MachineName: string): ISurfRevolveFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfRevolveFeatureData) as ISurfRevolveFeatureData;
end;

class function CoSurfaceOffsetFeatureData.Create: ISurfaceOffsetFeatureData;
begin
  Result := CreateComObject(CLASS_SurfaceOffsetFeatureData) as ISurfaceOffsetFeatureData;
end;

class function CoSurfaceOffsetFeatureData.CreateRemote(const MachineName: string): ISurfaceOffsetFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfaceOffsetFeatureData) as ISurfaceOffsetFeatureData;
end;

class function CoSurfaceKnitFeatureData.Create: ISurfaceKnitFeatureData;
begin
  Result := CreateComObject(CLASS_SurfaceKnitFeatureData) as ISurfaceKnitFeatureData;
end;

class function CoSurfaceKnitFeatureData.CreateRemote(const MachineName: string): ISurfaceKnitFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfaceKnitFeatureData) as ISurfaceKnitFeatureData;
end;

class function CoSurfaceExtendFeatureData.Create: ISurfaceExtendFeatureData;
begin
  Result := CreateComObject(CLASS_SurfaceExtendFeatureData) as ISurfaceExtendFeatureData;
end;

class function CoSurfaceExtendFeatureData.CreateRemote(const MachineName: string): ISurfaceExtendFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfaceExtendFeatureData) as ISurfaceExtendFeatureData;
end;

class function CoSurfacePlanarFeatureData.Create: ISurfacePlanarFeatureData;
begin
  Result := CreateComObject(CLASS_SurfacePlanarFeatureData) as ISurfacePlanarFeatureData;
end;

class function CoSurfacePlanarFeatureData.CreateRemote(const MachineName: string): ISurfacePlanarFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfacePlanarFeatureData) as ISurfacePlanarFeatureData;
end;

class function CoCenterMark.Create: ICenterMark;
begin
  Result := CreateComObject(CLASS_CenterMark) as ICenterMark;
end;

class function CoCenterMark.CreateRemote(const MachineName: string): ICenterMark;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CenterMark) as ICenterMark;
end;

class function CoSurfaceTrimFeatureData.Create: ISurfaceTrimFeatureData;
begin
  Result := CreateComObject(CLASS_SurfaceTrimFeatureData) as ISurfaceTrimFeatureData;
end;

class function CoSurfaceTrimFeatureData.CreateRemote(const MachineName: string): ISurfaceTrimFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfaceTrimFeatureData) as ISurfaceTrimFeatureData;
end;

class function CoSurfaceRadiateFeatureData.Create: ISurfaceRadiateFeatureData;
begin
  Result := CreateComObject(CLASS_SurfaceRadiateFeatureData) as ISurfaceRadiateFeatureData;
end;

class function CoSurfaceRadiateFeatureData.CreateRemote(const MachineName: string): ISurfaceRadiateFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SurfaceRadiateFeatureData) as ISurfaceRadiateFeatureData;
end;

class function CoRefPlaneFeatureData.Create: IRefPlaneFeatureData;
begin
  Result := CreateComObject(CLASS_RefPlaneFeatureData) as IRefPlaneFeatureData;
end;

class function CoRefPlaneFeatureData.CreateRemote(const MachineName: string): IRefPlaneFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RefPlaneFeatureData) as IRefPlaneFeatureData;
end;

class function CoCallout.Create: ICallout;
begin
  Result := CreateComObject(CLASS_Callout) as ICallout;
end;

class function CoCallout.CreateRemote(const MachineName: string): ICallout;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Callout) as ICallout;
end;

class function CoCustomBendAllowance.Create: ICustomBendAllowance;
begin
  Result := CreateComObject(CLASS_CustomBendAllowance) as ICustomBendAllowance;
end;

class function CoCustomBendAllowance.CreateRemote(const MachineName: string): ICustomBendAllowance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomBendAllowance) as ICustomBendAllowance;
end;

class function CoBlockInstance.Create: IBlockInstance;
begin
  Result := CreateComObject(CLASS_BlockInstance) as IBlockInstance;
end;

class function CoBlockInstance.CreateRemote(const MachineName: string): IBlockInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BlockInstance) as IBlockInstance;
end;

class function CoBlockDefinition.Create: IBlockDefinition;
begin
  Result := CreateComObject(CLASS_BlockDefinition) as IBlockDefinition;
end;

class function CoBlockDefinition.CreateRemote(const MachineName: string): IBlockDefinition;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BlockDefinition) as IBlockDefinition;
end;

class function CoBreakLine.Create: IBreakLine;
begin
  Result := CreateComObject(CLASS_BreakLine) as IBreakLine;
end;

class function CoBreakLine.CreateRemote(const MachineName: string): IBreakLine;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BreakLine) as IBreakLine;
end;

class function CoFaceHatch.Create: IFaceHatch;
begin
  Result := CreateComObject(CLASS_FaceHatch) as IFaceHatch;
end;

class function CoFaceHatch.CreateRemote(const MachineName: string): IFaceHatch;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FaceHatch) as IFaceHatch;
end;

class function CoPropertyManagerPageActiveX.Create: IPropertyManagerPageActiveX;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageActiveX) as IPropertyManagerPageActiveX;
end;

class function CoPropertyManagerPageActiveX.CreateRemote(const MachineName: string): IPropertyManagerPageActiveX;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageActiveX) as IPropertyManagerPageActiveX;
end;

class function CoLoftedBendsFeatureData.Create: ILoftedBendsFeatureData;
begin
  Result := CreateComObject(CLASS_LoftedBendsFeatureData) as ILoftedBendsFeatureData;
end;

class function CoLoftedBendsFeatureData.CreateRemote(const MachineName: string): ILoftedBendsFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LoftedBendsFeatureData) as ILoftedBendsFeatureData;
end;

class function CoFeatureManager.Create: IFeatureManager;
begin
  Result := CreateComObject(CLASS_FeatureManager) as IFeatureManager;
end;

class function CoFeatureManager.CreateRemote(const MachineName: string): IFeatureManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FeatureManager) as IFeatureManager;
end;

class function CoModelViewManager.Create: IModelViewManager;
begin
  Result := CreateComObject(CLASS_ModelViewManager) as IModelViewManager;
end;

class function CoModelViewManager.CreateRemote(const MachineName: string): IModelViewManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ModelViewManager) as IModelViewManager;
end;

class function CoModelDocExtension.Create: IModelDocExtension;
begin
  Result := CreateComObject(CLASS_ModelDocExtension) as IModelDocExtension;
end;

class function CoModelDocExtension.CreateRemote(const MachineName: string): IModelDocExtension;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ModelDocExtension) as IModelDocExtension;
end;

class function CoConfigurationManager.Create: IConfigurationManager;
begin
  Result := CreateComObject(CLASS_ConfigurationManager) as IConfigurationManager;
end;

class function CoConfigurationManager.CreateRemote(const MachineName: string): IConfigurationManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ConfigurationManager) as IConfigurationManager;
end;

class function CoCosmeticThreadFeatureData.Create: ICosmeticThreadFeatureData;
begin
  Result := CreateComObject(CLASS_CosmeticThreadFeatureData) as ICosmeticThreadFeatureData;
end;

class function CoCosmeticThreadFeatureData.CreateRemote(const MachineName: string): ICosmeticThreadFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CosmeticThreadFeatureData) as ICosmeticThreadFeatureData;
end;

class function CoCenterLine.Create: ICenterLine;
begin
  Result := CreateComObject(CLASS_CenterLine) as ICenterLine;
end;

class function CoCenterLine.CreateRemote(const MachineName: string): ICenterLine;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CenterLine) as ICenterLine;
end;

class function CoReferencePointCurveFeatureData.Create: IReferencePointCurveFeatureData;
begin
  Result := CreateComObject(CLASS_ReferencePointCurveFeatureData) as IReferencePointCurveFeatureData;
end;

class function CoReferencePointCurveFeatureData.CreateRemote(const MachineName: string): IReferencePointCurveFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ReferencePointCurveFeatureData) as IReferencePointCurveFeatureData;
end;

class function CoFreePointCurveFeatureData.Create: IFreePointCurveFeatureData;
begin
  Result := CreateComObject(CLASS_FreePointCurveFeatureData) as IFreePointCurveFeatureData;
end;

class function CoFreePointCurveFeatureData.CreateRemote(const MachineName: string): IFreePointCurveFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FreePointCurveFeatureData) as IFreePointCurveFeatureData;
end;

class function CoCompositeCurveFeatureData.Create: ICompositeCurveFeatureData;
begin
  Result := CreateComObject(CLASS_CompositeCurveFeatureData) as ICompositeCurveFeatureData;
end;

class function CoCompositeCurveFeatureData.CreateRemote(const MachineName: string): ICompositeCurveFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CompositeCurveFeatureData) as ICompositeCurveFeatureData;
end;

class function CoHelixFeatureData.Create: IHelixFeatureData;
begin
  Result := CreateComObject(CLASS_HelixFeatureData) as IHelixFeatureData;
end;

class function CoHelixFeatureData.CreateRemote(const MachineName: string): IHelixFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HelixFeatureData) as IHelixFeatureData;
end;

class function CoImportedCurveFeatureData.Create: IImportedCurveFeatureData;
begin
  Result := CreateComObject(CLASS_ImportedCurveFeatureData) as IImportedCurveFeatureData;
end;

class function CoImportedCurveFeatureData.CreateRemote(const MachineName: string): IImportedCurveFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ImportedCurveFeatureData) as IImportedCurveFeatureData;
end;

class function CoSketchRegion.Create: ISketchRegion;
begin
  Result := CreateComObject(CLASS_SketchRegion) as ISketchRegion;
end;

class function CoSketchRegion.CreateRemote(const MachineName: string): ISketchRegion;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchRegion) as ISketchRegion;
end;

class function CoSketchContour.Create: ISketchContour;
begin
  Result := CreateComObject(CLASS_SketchContour) as ISketchContour;
end;

class function CoSketchContour.CreateRemote(const MachineName: string): ISketchContour;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchContour) as ISketchContour;
end;

class function CoMassProperty.Create: IMassProperty;
begin
  Result := CreateComObject(CLASS_MassProperty) as IMassProperty;
end;

class function CoMassProperty.CreateRemote(const MachineName: string): IMassProperty;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MassProperty) as IMassProperty;
end;

class function CoDrawingComponent.Create: IDrawingComponent;
begin
  Result := CreateComObject(CLASS_DrawingComponent) as IDrawingComponent;
end;

class function CoDrawingComponent.CreateRemote(const MachineName: string): IDrawingComponent;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DrawingComponent) as IDrawingComponent;
end;

class function CoSketchRelationManager.Create: ISketchRelationManager;
begin
  Result := CreateComObject(CLASS_SketchRelationManager) as ISketchRelationManager;
end;

class function CoSketchRelationManager.CreateRemote(const MachineName: string): ISketchRelationManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchRelationManager) as ISketchRelationManager;
end;

class function CoSketchRelation.Create: ISketchRelation;
begin
  Result := CreateComObject(CLASS_SketchRelation) as ISketchRelation;
end;

class function CoSketchRelation.CreateRemote(const MachineName: string): ISketchRelation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchRelation) as ISketchRelation;
end;

class function CoMate2.Create: IMate2;
begin
  Result := CreateComObject(CLASS_Mate2) as IMate2;
end;

class function CoMate2.CreateRemote(const MachineName: string): IMate2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Mate2) as IMate2;
end;

class function CoMateEntity2.Create: IMateEntity2;
begin
  Result := CreateComObject(CLASS_MateEntity2) as IMateEntity2;
end;

class function CoMateEntity2.CreateRemote(const MachineName: string): IMateEntity2;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MateEntity2) as IMateEntity2;
end;

class function CoSelectData.Create: ISelectData;
begin
  Result := CreateComObject(CLASS_SelectData) as ISelectData;
end;

class function CoSelectData.CreateRemote(const MachineName: string): ISelectData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SelectData) as ISelectData;
end;

class function CoTableAnnotation.Create: ITableAnnotation;
begin
  Result := CreateComObject(CLASS_TableAnnotation) as ITableAnnotation;
end;

class function CoTableAnnotation.CreateRemote(const MachineName: string): ITableAnnotation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TableAnnotation) as ITableAnnotation;
end;

class function CoHoleTableAnnotation.Create: IHoleTableAnnotation;
begin
  Result := CreateComObject(CLASS_HoleTableAnnotation) as IHoleTableAnnotation;
end;

class function CoHoleTableAnnotation.CreateRemote(const MachineName: string): IHoleTableAnnotation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HoleTableAnnotation) as IHoleTableAnnotation;
end;

class function CoHoleTable.Create: IHoleTable;
begin
  Result := CreateComObject(CLASS_HoleTable) as IHoleTable;
end;

class function CoHoleTable.CreateRemote(const MachineName: string): IHoleTable;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HoleTable) as IHoleTable;
end;

class function CoDatumOrigin.Create: IDatumOrigin;
begin
  Result := CreateComObject(CLASS_DatumOrigin) as IDatumOrigin;
end;

class function CoDatumOrigin.CreateRemote(const MachineName: string): IDatumOrigin;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DatumOrigin) as IDatumOrigin;
end;

class function CoBomTableAnnotation.Create: IBomTableAnnotation;
begin
  Result := CreateComObject(CLASS_BomTableAnnotation) as IBomTableAnnotation;
end;

class function CoBomTableAnnotation.CreateRemote(const MachineName: string): IBomTableAnnotation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BomTableAnnotation) as IBomTableAnnotation;
end;

class function CoBomFeature.Create: IBomFeature;
begin
  Result := CreateComObject(CLASS_BomFeature) as IBomFeature;
end;

class function CoBomFeature.CreateRemote(const MachineName: string): IBomFeature;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BomFeature) as IBomFeature;
end;

class function CoRevisionTableAnnotation.Create: IRevisionTableAnnotation;
begin
  Result := CreateComObject(CLASS_RevisionTableAnnotation) as IRevisionTableAnnotation;
end;

class function CoRevisionTableAnnotation.CreateRemote(const MachineName: string): IRevisionTableAnnotation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RevisionTableAnnotation) as IRevisionTableAnnotation;
end;

class function CoRevisionTableFeature.Create: IRevisionTableFeature;
begin
  Result := CreateComObject(CLASS_RevisionTableFeature) as IRevisionTableFeature;
end;

class function CoRevisionTableFeature.CreateRemote(const MachineName: string): IRevisionTableFeature;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RevisionTableFeature) as IRevisionTableFeature;
end;

class function CoMateInPlace.Create: IMateInPlace;
begin
  Result := CreateComObject(CLASS_MateInPlace) as IMateInPlace;
end;

class function CoMateInPlace.CreateRemote(const MachineName: string): IMateInPlace;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MateInPlace) as IMateInPlace;
end;

class function CoPropertyManagerPageBitmapButton.Create: IPropertyManagerPageBitmapButton;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageBitmapButton) as IPropertyManagerPageBitmapButton;
end;

class function CoPropertyManagerPageBitmapButton.CreateRemote(const MachineName: string): IPropertyManagerPageBitmapButton;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageBitmapButton) as IPropertyManagerPageBitmapButton;
end;

class function CoCustomPropertyManager.Create: ICustomPropertyManager;
begin
  Result := CreateComObject(CLASS_CustomPropertyManager) as ICustomPropertyManager;
end;

class function CoCustomPropertyManager.CreateRemote(const MachineName: string): ICustomPropertyManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CustomPropertyManager) as ICustomPropertyManager;
end;

class function CoLight.Create: ILight;
begin
  Result := CreateComObject(CLASS_Light) as ILight;
end;

class function CoLight.CreateRemote(const MachineName: string): ILight;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Light) as ILight;
end;

class function CoRefPointFeatureData.Create: IRefPointFeatureData;
begin
  Result := CreateComObject(CLASS_RefPointFeatureData) as IRefPointFeatureData;
end;

class function CoRefPointFeatureData.CreateRemote(const MachineName: string): IRefPointFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RefPointFeatureData) as IRefPointFeatureData;
end;

class function CoRefPoint.Create: IRefPoint;
begin
  Result := CreateComObject(CLASS_RefPoint) as IRefPoint;
end;

class function CoRefPoint.CreateRemote(const MachineName: string): IRefPoint;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RefPoint) as IRefPoint;
end;

class function CoRefAxisFeatureData.Create: IRefAxisFeatureData;
begin
  Result := CreateComObject(CLASS_RefAxisFeatureData) as IRefAxisFeatureData;
end;

class function CoRefAxisFeatureData.CreateRemote(const MachineName: string): IRefAxisFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RefAxisFeatureData) as IRefAxisFeatureData;
end;

class function CoEdgePoint.Create: IEdgePoint;
begin
  Result := CreateComObject(CLASS_EdgePoint) as IEdgePoint;
end;

class function CoEdgePoint.CreateRemote(const MachineName: string): IEdgePoint;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EdgePoint) as IEdgePoint;
end;

class function CoTaskpaneView.Create: ITaskpaneView;
begin
  Result := CreateComObject(CLASS_TaskpaneView) as ITaskpaneView;
end;

class function CoTaskpaneView.CreateRemote(const MachineName: string): ITaskpaneView;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TaskpaneView) as ITaskpaneView;
end;

class function CoTexture.Create: ITexture;
begin
  Result := CreateComObject(CLASS_Texture) as ITexture;
end;

class function CoTexture.CreateRemote(const MachineName: string): ITexture;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Texture) as ITexture;
end;

class function CoMateReference.Create: IMateReference;
begin
  Result := CreateComObject(CLASS_MateReference) as IMateReference;
end;

class function CoMateReference.CreateRemote(const MachineName: string): IMateReference;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MateReference) as IMateReference;
end;

class function CoPartingLineFeatureData.Create: IPartingLineFeatureData;
begin
  Result := CreateComObject(CLASS_PartingLineFeatureData) as IPartingLineFeatureData;
end;

class function CoPartingLineFeatureData.CreateRemote(const MachineName: string): IPartingLineFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PartingLineFeatureData) as IPartingLineFeatureData;
end;

class function CoDeleteBodyFeatureData.Create: IDeleteBodyFeatureData;
begin
  Result := CreateComObject(CLASS_DeleteBodyFeatureData) as IDeleteBodyFeatureData;
end;

class function CoDeleteBodyFeatureData.CreateRemote(const MachineName: string): IDeleteBodyFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DeleteBodyFeatureData) as IDeleteBodyFeatureData;
end;

class function CoPartingSurfaceFeatureData.Create: IPartingSurfaceFeatureData;
begin
  Result := CreateComObject(CLASS_PartingSurfaceFeatureData) as IPartingSurfaceFeatureData;
end;

class function CoPartingSurfaceFeatureData.CreateRemote(const MachineName: string): IPartingSurfaceFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PartingSurfaceFeatureData) as IPartingSurfaceFeatureData;
end;

class function CoShutOffSurfaceFeatureData.Create: IShutOffSurfaceFeatureData;
begin
  Result := CreateComObject(CLASS_ShutOffSurfaceFeatureData) as IShutOffSurfaceFeatureData;
end;

class function CoShutOffSurfaceFeatureData.CreateRemote(const MachineName: string): IShutOffSurfaceFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ShutOffSurfaceFeatureData) as IShutOffSurfaceFeatureData;
end;

class function CoToolingSplitFeatureData.Create: IToolingSplitFeatureData;
begin
  Result := CreateComObject(CLASS_ToolingSplitFeatureData) as IToolingSplitFeatureData;
end;

class function CoToolingSplitFeatureData.CreateRemote(const MachineName: string): IToolingSplitFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ToolingSplitFeatureData) as IToolingSplitFeatureData;
end;

class function CoPtnrPMPage.Create: IPtnrPMPage;
begin
  Result := CreateComObject(CLASS_PtnrPMPage) as IPtnrPMPage;
end;

class function CoPtnrPMPage.CreateRemote(const MachineName: string): IPtnrPMPage;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PtnrPMPage) as IPtnrPMPage;
end;

class function CoJoinFeatureData.Create: IJoinFeatureData;
begin
  Result := CreateComObject(CLASS_JoinFeatureData) as IJoinFeatureData;
end;

class function CoJoinFeatureData.CreateRemote(const MachineName: string): IJoinFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_JoinFeatureData) as IJoinFeatureData;
end;

class function CoManipulator.Create: IManipulator;
begin
  Result := CreateComObject(CLASS_Manipulator) as IManipulator;
end;

class function CoManipulator.CreateRemote(const MachineName: string): IManipulator;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Manipulator) as IManipulator;
end;

class function CoTriadManipulator.Create: ITriadManipulator;
begin
  Result := CreateComObject(CLASS_TriadManipulator) as ITriadManipulator;
end;

class function CoTriadManipulator.CreateRemote(const MachineName: string): ITriadManipulator;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TriadManipulator) as ITriadManipulator;
end;

class function CoFillSurfaceFeatureData.Create: IFillSurfaceFeatureData;
begin
  Result := CreateComObject(CLASS_FillSurfaceFeatureData) as IFillSurfaceFeatureData;
end;

class function CoFillSurfaceFeatureData.CreateRemote(const MachineName: string): IFillSurfaceFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FillSurfaceFeatureData) as IFillSurfaceFeatureData;
end;

class function CoMoveCopyBodyFeatureData.Create: IMoveCopyBodyFeatureData;
begin
  Result := CreateComObject(CLASS_MoveCopyBodyFeatureData) as IMoveCopyBodyFeatureData;
end;

class function CoMoveCopyBodyFeatureData.CreateRemote(const MachineName: string): IMoveCopyBodyFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MoveCopyBodyFeatureData) as IMoveCopyBodyFeatureData;
end;

class function CoRuledSurfaceFeatureData.Create: IRuledSurfaceFeatureData;
begin
  Result := CreateComObject(CLASS_RuledSurfaceFeatureData) as IRuledSurfaceFeatureData;
end;

class function CoRuledSurfaceFeatureData.CreateRemote(const MachineName: string): IRuledSurfaceFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RuledSurfaceFeatureData) as IRuledSurfaceFeatureData;
end;

class function CoCavityFeatureData.Create: ICavityFeatureData;
begin
  Result := CreateComObject(CLASS_CavityFeatureData) as ICavityFeatureData;
end;

class function CoCavityFeatureData.CreateRemote(const MachineName: string): ICavityFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CavityFeatureData) as ICavityFeatureData;
end;

class function CoWeldBead.Create: IWeldBead;
begin
  Result := CreateComObject(CLASS_WeldBead) as IWeldBead;
end;

class function CoWeldBead.CreateRemote(const MachineName: string): IWeldBead;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WeldBead) as IWeldBead;
end;

class function CoSplitLineFeatureData.Create: ISplitLineFeatureData;
begin
  Result := CreateComObject(CLASS_SplitLineFeatureData) as ISplitLineFeatureData;
end;

class function CoSplitLineFeatureData.CreateRemote(const MachineName: string): ISplitLineFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SplitLineFeatureData) as ISplitLineFeatureData;
end;

class function CoWrapSketchFeatureData.Create: IWrapSketchFeatureData;
begin
  Result := CreateComObject(CLASS_WrapSketchFeatureData) as IWrapSketchFeatureData;
end;

class function CoWrapSketchFeatureData.CreateRemote(const MachineName: string): IWrapSketchFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WrapSketchFeatureData) as IWrapSketchFeatureData;
end;

class function CoStructuralMemberFeatureData.Create: IStructuralMemberFeatureData;
begin
  Result := CreateComObject(CLASS_StructuralMemberFeatureData) as IStructuralMemberFeatureData;
end;

class function CoStructuralMemberFeatureData.CreateRemote(const MachineName: string): IStructuralMemberFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_StructuralMemberFeatureData) as IStructuralMemberFeatureData;
end;

class function CoEndCapFeatureData.Create: IEndCapFeatureData;
begin
  Result := CreateComObject(CLASS_EndCapFeatureData) as IEndCapFeatureData;
end;

class function CoEndCapFeatureData.CreateRemote(const MachineName: string): IEndCapFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_EndCapFeatureData) as IEndCapFeatureData;
end;

class function CoGussetFeatureData.Create: IGussetFeatureData;
begin
  Result := CreateComObject(CLASS_GussetFeatureData) as IGussetFeatureData;
end;

class function CoGussetFeatureData.CreateRemote(const MachineName: string): IGussetFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GussetFeatureData) as IGussetFeatureData;
end;

class function CoSplitBodyFeatureData.Create: ISplitBodyFeatureData;
begin
  Result := CreateComObject(CLASS_SplitBodyFeatureData) as ISplitBodyFeatureData;
end;

class function CoSplitBodyFeatureData.CreateRemote(const MachineName: string): ISplitBodyFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SplitBodyFeatureData) as ISplitBodyFeatureData;
end;

class function CoCombineBodiesFeatureData.Create: ICombineBodiesFeatureData;
begin
  Result := CreateComObject(CLASS_CombineBodiesFeatureData) as ICombineBodiesFeatureData;
end;

class function CoCombineBodiesFeatureData.CreateRemote(const MachineName: string): ICombineBodiesFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CombineBodiesFeatureData) as ICombineBodiesFeatureData;
end;

class function CoSketchManager.Create: ISketchManager;
begin
  Result := CreateComObject(CLASS_SketchManager) as ISketchManager;
end;

class function CoSketchManager.CreateRemote(const MachineName: string): ISketchManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchManager) as ISketchManager;
end;

class function CoDiagnoseResult.Create: IDiagnoseResult;
begin
  Result := CreateComObject(CLASS_DiagnoseResult) as IDiagnoseResult;
end;

class function CoDiagnoseResult.CreateRemote(const MachineName: string): IDiagnoseResult;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DiagnoseResult) as IDiagnoseResult;
end;

class function CoSpring.Create: ISpring;
begin
  Result := CreateComObject(CLASS_Spring) as ISpring;
end;

class function CoSpring.CreateRemote(const MachineName: string): ISpring;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Spring) as ISpring;
end;

class function CoFaultEntity.Create: IFaultEntity;
begin
  Result := CreateComObject(CLASS_FaultEntity) as IFaultEntity;
end;

class function CoFaultEntity.CreateRemote(const MachineName: string): IFaultEntity;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FaultEntity) as IFaultEntity;
end;

class function CoSwOLEObject.Create: ISwOLEObject;
begin
  Result := CreateComObject(CLASS_SwOLEObject) as ISwOLEObject;
end;

class function CoSwOLEObject.CreateRemote(const MachineName: string): ISwOLEObject;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SwOLEObject) as ISwOLEObject;
end;

class function CoLibraryFeatureData.Create: ILibraryFeatureData;
begin
  Result := CreateComObject(CLASS_LibraryFeatureData) as ILibraryFeatureData;
end;

class function CoLibraryFeatureData.CreateRemote(const MachineName: string): ILibraryFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_LibraryFeatureData) as ILibraryFeatureData;
end;

class function CoSimulation.Create: ISimulation;
begin
  Result := CreateComObject(CLASS_Simulation) as ISimulation;
end;

class function CoSimulation.CreateRemote(const MachineName: string): ISimulation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Simulation) as ISimulation;
end;

class function CoSimulationGravityFeatureData.Create: ISimulationGravityFeatureData;
begin
  Result := CreateComObject(CLASS_SimulationGravityFeatureData) as ISimulationGravityFeatureData;
end;

class function CoSimulationGravityFeatureData.CreateRemote(const MachineName: string): ISimulationGravityFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SimulationGravityFeatureData) as ISimulationGravityFeatureData;
end;

class function CoSimulationMotorFeatureData.Create: ISimulationMotorFeatureData;
begin
  Result := CreateComObject(CLASS_SimulationMotorFeatureData) as ISimulationMotorFeatureData;
end;

class function CoSimulationMotorFeatureData.CreateRemote(const MachineName: string): ISimulationMotorFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SimulationMotorFeatureData) as ISimulationMotorFeatureData;
end;

class function CoSimulationLinearSpringFeatureData.Create: ISimulationLinearSpringFeatureData;
begin
  Result := CreateComObject(CLASS_SimulationLinearSpringFeatureData) as ISimulationLinearSpringFeatureData;
end;

class function CoSimulationLinearSpringFeatureData.CreateRemote(const MachineName: string): ISimulationLinearSpringFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SimulationLinearSpringFeatureData) as ISimulationLinearSpringFeatureData;
end;

class function CoCamera.Create: ICamera;
begin
  Result := CreateComObject(CLASS_Camera) as ICamera;
end;

class function CoCamera.CreateRemote(const MachineName: string): ICamera;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Camera) as ICamera;
end;

class function CoWeldmentBeadFeatureData.Create: IWeldmentBeadFeatureData;
begin
  Result := CreateComObject(CLASS_WeldmentBeadFeatureData) as IWeldmentBeadFeatureData;
end;

class function CoWeldmentBeadFeatureData.CreateRemote(const MachineName: string): IWeldmentBeadFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WeldmentBeadFeatureData) as IWeldmentBeadFeatureData;
end;

class function CoWeldmentTrimExtendFeatureData.Create: IWeldmentTrimExtendFeatureData;
begin
  Result := CreateComObject(CLASS_WeldmentTrimExtendFeatureData) as IWeldmentTrimExtendFeatureData;
end;

class function CoWeldmentTrimExtendFeatureData.CreateRemote(const MachineName: string): IWeldmentTrimExtendFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WeldmentTrimExtendFeatureData) as IWeldmentTrimExtendFeatureData;
end;

class function CoPropertyManagerPageTab.Create: IPropertyManagerPageTab;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageTab) as IPropertyManagerPageTab;
end;

class function CoPropertyManagerPageTab.CreateRemote(const MachineName: string): IPropertyManagerPageTab;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageTab) as IPropertyManagerPageTab;
end;

class function CoBodyFolder.Create: IBodyFolder;
begin
  Result := CreateComObject(CLASS_BodyFolder) as IBodyFolder;
end;

class function CoBodyFolder.CreateRemote(const MachineName: string): IBodyFolder;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_BodyFolder) as IBodyFolder;
end;

class function CoCommandManager.Create: ICommandManager;
begin
  Result := CreateComObject(CLASS_CommandManager) as ICommandManager;
end;

class function CoCommandManager.CreateRemote(const MachineName: string): ICommandManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CommandManager) as ICommandManager;
end;

class function CoCommandGroup.Create: ICommandGroup;
begin
  Result := CreateComObject(CLASS_CommandGroup) as ICommandGroup;
end;

class function CoCommandGroup.CreateRemote(const MachineName: string): ICommandGroup;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CommandGroup) as ICommandGroup;
end;

class function CoCoreFeatureData.Create: ICoreFeatureData;
begin
  Result := CreateComObject(CLASS_CoreFeatureData) as ICoreFeatureData;
end;

class function CoCoreFeatureData.CreateRemote(const MachineName: string): ICoreFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CoreFeatureData) as ICoreFeatureData;
end;

class function CoAdvancedSelectionCriteria.Create: IAdvancedSelectionCriteria;
begin
  Result := CreateComObject(CLASS_AdvancedSelectionCriteria) as IAdvancedSelectionCriteria;
end;

class function CoAdvancedSelectionCriteria.CreateRemote(const MachineName: string): IAdvancedSelectionCriteria;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AdvancedSelectionCriteria) as IAdvancedSelectionCriteria;
end;

class function CoGeneralTableFeature.Create: IGeneralTableFeature;
begin
  Result := CreateComObject(CLASS_GeneralTableFeature) as IGeneralTableFeature;
end;

class function CoGeneralTableFeature.CreateRemote(const MachineName: string): IGeneralTableFeature;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_GeneralTableFeature) as IGeneralTableFeature;
end;

class function CoDimensionTolerance.Create: IDimensionTolerance;
begin
  Result := CreateComObject(CLASS_DimensionTolerance) as IDimensionTolerance;
end;

class function CoDimensionTolerance.CreateRemote(const MachineName: string): IDimensionTolerance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DimensionTolerance) as IDimensionTolerance;
end;

class function CoCommentFolder.Create: ICommentFolder;
begin
  Result := CreateComObject(CLASS_CommentFolder) as ICommentFolder;
end;

class function CoCommentFolder.CreateRemote(const MachineName: string): ICommentFolder;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CommentFolder) as ICommentFolder;
end;

class function CoComment.Create: IComment;
begin
  Result := CreateComObject(CLASS_Comment) as IComment;
end;

class function CoComment.CreateRemote(const MachineName: string): IComment;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Comment) as IComment;
end;

class function CoAnimation.Create: IAnimation;
begin
  Result := CreateComObject(CLASS_Animation) as IAnimation;
end;

class function CoAnimation.CreateRemote(const MachineName: string): IAnimation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Animation) as IAnimation;
end;

class function CoImportIgesData.Create: IImportIgesData;
begin
  Result := CreateComObject(CLASS_ImportIgesData) as IImportIgesData;
end;

class function CoImportIgesData.CreateRemote(const MachineName: string): IImportIgesData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ImportIgesData) as IImportIgesData;
end;

class function CoTableAnchor.Create: ITableAnchor;
begin
  Result := CreateComObject(CLASS_TableAnchor) as ITableAnchor;
end;

class function CoTableAnchor.CreateRemote(const MachineName: string): ITableAnchor;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TableAnchor) as ITableAnchor;
end;

class function CoPropertyManagerPageSlider.Create: IPropertyManagerPageSlider;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageSlider) as IPropertyManagerPageSlider;
end;

class function CoPropertyManagerPageSlider.CreateRemote(const MachineName: string): IPropertyManagerPageSlider;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageSlider) as IPropertyManagerPageSlider;
end;

class function CoMateLoadReference.Create: IMateLoadReference;
begin
  Result := CreateComObject(CLASS_MateLoadReference) as IMateLoadReference;
end;

class function CoMateLoadReference.CreateRemote(const MachineName: string): IMateLoadReference;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MateLoadReference) as IMateLoadReference;
end;

class function CoSketchBlockDefinition.Create: ISketchBlockDefinition;
begin
  Result := CreateComObject(CLASS_SketchBlockDefinition) as ISketchBlockDefinition;
end;

class function CoSketchBlockDefinition.CreateRemote(const MachineName: string): ISketchBlockDefinition;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchBlockDefinition) as ISketchBlockDefinition;
end;

class function CoSketchBlockInstance.Create: ISketchBlockInstance;
begin
  Result := CreateComObject(CLASS_SketchBlockInstance) as ISketchBlockInstance;
end;

class function CoSketchBlockInstance.CreateRemote(const MachineName: string): ISketchBlockInstance;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchBlockInstance) as ISketchBlockInstance;
end;

class function CoUserProgressBar.Create: IUserProgressBar;
begin
  Result := CreateComObject(CLASS_UserProgressBar) as IUserProgressBar;
end;

class function CoUserProgressBar.CreateRemote(const MachineName: string): IUserProgressBar;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_UserProgressBar) as IUserProgressBar;
end;

class function CoDragArrowManipulator.Create: IDragArrowManipulator;
begin
  Result := CreateComObject(CLASS_DragArrowManipulator) as IDragArrowManipulator;
end;

class function CoDragArrowManipulator.CreateRemote(const MachineName: string): IDragArrowManipulator;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DragArrowManipulator) as IDragArrowManipulator;
end;

class function CoMoveFaceFeatureData.Create: IMoveFaceFeatureData;
begin
  Result := CreateComObject(CLASS_MoveFaceFeatureData) as IMoveFaceFeatureData;
end;

class function CoMoveFaceFeatureData.CreateRemote(const MachineName: string): IMoveFaceFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MoveFaceFeatureData) as IMoveFaceFeatureData;
end;

class function CoHealEdgesFeatureData.Create: IHealEdgesFeatureData;
begin
  Result := CreateComObject(CLASS_HealEdgesFeatureData) as IHealEdgesFeatureData;
end;

class function CoHealEdgesFeatureData.CreateRemote(const MachineName: string): IHealEdgesFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HealEdgesFeatureData) as IHealEdgesFeatureData;
end;

class function CoWeldmentCutListAnnotation.Create: IWeldmentCutListAnnotation;
begin
  Result := CreateComObject(CLASS_WeldmentCutListAnnotation) as IWeldmentCutListAnnotation;
end;

class function CoWeldmentCutListAnnotation.CreateRemote(const MachineName: string): IWeldmentCutListAnnotation;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WeldmentCutListAnnotation) as IWeldmentCutListAnnotation;
end;

class function CoWeldmentCutListFeature.Create: IWeldmentCutListFeature;
begin
  Result := CreateComObject(CLASS_WeldmentCutListFeature) as IWeldmentCutListFeature;
end;

class function CoWeldmentCutListFeature.CreateRemote(const MachineName: string): IWeldmentCutListFeature;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_WeldmentCutListFeature) as IWeldmentCutListFeature;
end;

class function CoModelWindow.Create: IModelWindow;
begin
  Result := CreateComObject(CLASS_ModelWindow) as IModelWindow;
end;

class function CoModelWindow.CreateRemote(const MachineName: string): IModelWindow;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ModelWindow) as IModelWindow;
end;

class function CoMouse.Create: IMouse;
begin
  Result := CreateComObject(CLASS_Mouse) as IMouse;
end;

class function CoMouse.CreateRemote(const MachineName: string): IMouse;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Mouse) as IMouse;
end;

class function CoImportDxfDwgData.Create: IImportDxfDwgData;
begin
  Result := CreateComObject(CLASS_ImportDxfDwgData) as IImportDxfDwgData;
end;

class function CoImportDxfDwgData.CreateRemote(const MachineName: string): IImportDxfDwgData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ImportDxfDwgData) as IImportDxfDwgData;
end;

class function CoInterferenceDetectionMgr.Create: IInterferenceDetectionMgr;
begin
  Result := CreateComObject(CLASS_InterferenceDetectionMgr) as IInterferenceDetectionMgr;
end;

class function CoInterferenceDetectionMgr.CreateRemote(const MachineName: string): IInterferenceDetectionMgr;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_InterferenceDetectionMgr) as IInterferenceDetectionMgr;
end;

class function CoInterference.Create: IInterference;
begin
  Result := CreateComObject(CLASS_Interference) as IInterference;
end;

class function CoInterference.CreateRemote(const MachineName: string): IInterference;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Interference) as IInterference;
end;

class function CoSplineHandle.Create: ISplineHandle;
begin
  Result := CreateComObject(CLASS_SplineHandle) as ISplineHandle;
end;

class function CoSplineHandle.CreateRemote(const MachineName: string): ISplineHandle;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SplineHandle) as ISplineHandle;
end;

class function CoSectionViewData.Create: ISectionViewData;
begin
  Result := CreateComObject(CLASS_SectionViewData) as ISectionViewData;
end;

class function CoSectionViewData.CreateRemote(const MachineName: string): ISectionViewData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SectionViewData) as ISectionViewData;
end;

class function CoMaterialVisualPropertiesData.Create: IMaterialVisualPropertiesData;
begin
  Result := CreateComObject(CLASS_MaterialVisualPropertiesData) as IMaterialVisualPropertiesData;
end;

class function CoMaterialVisualPropertiesData.CreateRemote(const MachineName: string): IMaterialVisualPropertiesData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_MaterialVisualPropertiesData) as IMaterialVisualPropertiesData;
end;

class function CoPropertyManagerPageBitmap.Create: IPropertyManagerPageBitmap;
begin
  Result := CreateComObject(CLASS_PropertyManagerPageBitmap) as IPropertyManagerPageBitmap;
end;

class function CoPropertyManagerPageBitmap.CreateRemote(const MachineName: string): IPropertyManagerPageBitmap;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_PropertyManagerPageBitmap) as IPropertyManagerPageBitmap;
end;

class function CoExportPdfData.Create: IExportPdfData;
begin
  Result := CreateComObject(CLASS_ExportPdfData) as IExportPdfData;
end;

class function CoExportPdfData.CreateRemote(const MachineName: string): IExportPdfData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ExportPdfData) as IExportPdfData;
end;

class function CoPrint3DDialog.Create: IPrint3DDialog;
begin
  Result := CreateComObject(CLASS_Print3DDialog) as IPrint3DDialog;
end;

class function CoPrint3DDialog.CreateRemote(const MachineName: string): IPrint3DDialog;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Print3DDialog) as IPrint3DDialog;
end;

class function CoSilhouetteEdge.Create: ISilhouetteEdge;
begin
  Result := CreateComObject(CLASS_SilhouetteEdge) as ISilhouetteEdge;
end;

class function CoSilhouetteEdge.CreateRemote(const MachineName: string): ISilhouetteEdge;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SilhouetteEdge) as ISilhouetteEdge;
end;

class function CoAnnotationView.Create: IAnnotationView;
begin
  Result := CreateComObject(CLASS_AnnotationView) as IAnnotationView;
end;

class function CoAnnotationView.CreateRemote(const MachineName: string): IAnnotationView;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_AnnotationView) as IAnnotationView;
end;

class function CoDerivedPartFeatureData.Create: IDerivedPartFeatureData;
begin
  Result := CreateComObject(CLASS_DerivedPartFeatureData) as IDerivedPartFeatureData;
end;

class function CoDerivedPartFeatureData.CreateRemote(const MachineName: string): IDerivedPartFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DerivedPartFeatureData) as IDerivedPartFeatureData;
end;

class function CoMeasure.Create: IMeasure;
begin
  Result := CreateComObject(CLASS_Measure) as IMeasure;
end;

class function CoMeasure.CreateRemote(const MachineName: string): IMeasure;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Measure) as IMeasure;
end;

class function CoImportStepData.Create: IImportStepData;
begin
  Result := CreateComObject(CLASS_ImportStepData) as IImportStepData;
end;

class function CoImportStepData.CreateRemote(const MachineName: string): IImportStepData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_ImportStepData) as IImportStepData;
end;

class function CoSketchPicture.Create: ISketchPicture;
begin
  Result := CreateComObject(CLASS_SketchPicture) as ISketchPicture;
end;

class function CoSketchPicture.CreateRemote(const MachineName: string): ISketchPicture;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchPicture) as ISketchPicture;
end;

class function CoSketchPath.Create: ISketchPath;
begin
  Result := CreateComObject(CLASS_SketchPath) as ISketchPath;
end;

class function CoSketchPath.CreateRemote(const MachineName: string): ISketchPath;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SketchPath) as ISketchPath;
end;

class function CoDecal.Create: IDecal;
begin
  Result := CreateComObject(CLASS_Decal) as IDecal;
end;

class function CoDecal.CreateRemote(const MachineName: string): IDecal;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_Decal) as IDecal;
end;

class function CoFaceDecalProperties.Create: IFaceDecalProperties;
begin
  Result := CreateComObject(CLASS_FaceDecalProperties) as IFaceDecalProperties;
end;

class function CoFaceDecalProperties.CreateRemote(const MachineName: string): IFaceDecalProperties;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_FaceDecalProperties) as IFaceDecalProperties;
end;

class function CoRenderMaterial.Create: IRenderMaterial;
begin
  Result := CreateComObject(CLASS_RenderMaterial) as IRenderMaterial;
end;

class function CoRenderMaterial.CreateRemote(const MachineName: string): IRenderMaterial;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_RenderMaterial) as IRenderMaterial;
end;

class function CoCommandTab.Create: ICommandTab;
begin
  Result := CreateComObject(CLASS_CommandTab) as ICommandTab;
end;

class function CoCommandTab.CreateRemote(const MachineName: string): ICommandTab;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CommandTab) as ICommandTab;
end;

class function CoCommandTabBox.Create: ICommandTabBox;
begin
  Result := CreateComObject(CLASS_CommandTabBox) as ICommandTabBox;
end;

class function CoCommandTabBox.CreateRemote(const MachineName: string): ICommandTabBox;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_CommandTabBox) as ICommandTabBox;
end;

class function CoHoleSeriesFeatureData.Create: IHoleSeriesFeatureData;
begin
  Result := CreateComObject(CLASS_HoleSeriesFeatureData) as IHoleSeriesFeatureData;
end;

class function CoHoleSeriesFeatureData.CreateRemote(const MachineName: string): IHoleSeriesFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_HoleSeriesFeatureData) as IHoleSeriesFeatureData;
end;

class function CoJournalManager.Create: IJournalManager;
begin
  Result := CreateComObject(CLASS_JournalManager) as IJournalManager;
end;

class function CoJournalManager.CreateRemote(const MachineName: string): IJournalManager;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_JournalManager) as IJournalManager;
end;

class function CoDocumentSpecification.Create: IDocumentSpecification;
begin
  Result := CreateComObject(CLASS_DocumentSpecification) as IDocumentSpecification;
end;

class function CoDocumentSpecification.CreateRemote(const MachineName: string): IDocumentSpecification;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_DocumentSpecification) as IDocumentSpecification;
end;

class function CoSimulationForceFeatureData.Create: ISimulationForceFeatureData;
begin
  Result := CreateComObject(CLASS_SimulationForceFeatureData) as ISimulationForceFeatureData;
end;

class function CoSimulationForceFeatureData.CreateRemote(const MachineName: string): ISimulationForceFeatureData;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_SimulationForceFeatureData) as ISimulationForceFeatureData;
end;

class function CoTreeControlItem.Create: ITreeControlItem;
begin
  Result := CreateComObject(CLASS_TreeControlItem) as ITreeControlItem;
end;

class function CoTreeControlItem.CreateRemote(const MachineName: string): ITreeControlItem;
begin
  Result := CreateRemoteComObject(MachineName, CLASS_TreeControlItem) as ITreeControlItem;
end;

end.
